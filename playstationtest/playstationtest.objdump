
playstationtest.elf:     file format elf32-littlenios2
playstationtest.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000d600 memsz 0x0000d600 flags r-x
    LOAD off    0x0000e620 vaddr 0x0000d620 paddr 0x0000f094 align 2**12
         filesz 0x00001a74 memsz 0x00001a74 flags rw-
    LOAD off    0x00010b08 vaddr 0x00010b08 paddr 0x00010b08 align 2**12
         filesz 0x00000000 memsz 0x000073a8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000d0e0  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002fc  0000d324  0000d324  0000e324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a74  0000d620  0000f094  0000e620  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000073a8  00010b08  00010b08  00010b08  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  00017eb0  00017eb0  00010094  2**0
                  CONTENTS
  7 .Flash_flash_data 00000000  0c000000  0c000000  00010094  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00010094  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000838  00000000  00000000  000100b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00014016  00000000  00000000  000108f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004e75  00000000  00000000  00024906  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006278  00000000  00000000  0002977b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002510  00000000  00000000  0002f9f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000037f1  00000000  00000000  00031f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000009c4  00000000  00000000  000356f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  000360bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000148  00000000  00000000  000360e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  0003a4bc  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0003a4c2  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0003a4c7  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0003a4c8  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0003a4c9  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0003a4cd  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0003a4d1  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0003a4d5  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0003a4de  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0003a4e7  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0003a4f0  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000068  00000000  00000000  0003a4fb  2**0
                  CONTENTS, READONLY
 30 .jdi          0000abc5  00000000  00000000  0003a563  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00195378  00000000  00000000  00045128  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
0000d324 l    d  .rodata	00000000 .rodata
0000d620 l    d  .rwdata	00000000 .rwdata
00010b08 l    d  .bss	00000000 .bss
00017eb0 l    d  .SDRAM	00000000 .SDRAM
0c000000 l    d  .Flash_flash_data	00000000 .Flash_flash_data
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /home/codedwrench/Dropbox/school/nios/kbs_periode_4_fpga_game/playstationtest_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 graphicslib.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 alt_load.c
00000fac l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_env_lock.c
0000efec l     O .rwdata	00000004 lockid
00010b14 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0000eff0 l     O .rwdata	00000004 lockid
00010b1c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00002a50 l     F .text	00000044 OS_InitMisc
00002a94 l     F .text	00000068 OS_InitRdyList
00002bf4 l     F .text	000000e0 OS_InitTCBList
00002974 l     F .text	000000dc OS_InitEventList
00002afc l     F .text	0000007c OS_InitTaskIdle
00002b78 l     F .text	0000007c OS_InitTaskStat
00002e54 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00004c58 l     F .text	00000110 OS_FlagTaskRdy
000049b0 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00009100 l     F .text	00000038 alt_dev_reg
0000d620 l     O .rwdata	0000106c JTAG_UART
0000e68c l     O .rwdata	00000030 AV_Config
0000e6bc l     O .rwdata	00000030 Audio_Subsystem_Audio
0000e6ec l     O .rwdata	0000002c Char_LCD_16x2
0000e718 l     O .rwdata	0000002c IrDA
0000e744 l     O .rwdata	0000002c Expansion_JP5
0000e770 l     O .rwdata	0000002c Green_LEDs
0000e79c l     O .rwdata	0000002c HEX3_HEX0
0000e7c8 l     O .rwdata	0000002c HEX7_HEX4
0000e7f4 l     O .rwdata	0000002c Pushbuttons
0000e820 l     O .rwdata	0000002c Red_LEDs
0000e84c l     O .rwdata	0000002c Slider_Switches
0000e878 l     O .rwdata	00000038 PS2_Port
0000e8b0 l     O .rwdata	00000038 PS2_Port_Dual
0000e8e8 l     O .rwdata	0000002c Serial_Port
0000e914 l     O .rwdata	00000034 USB
0000e948 l     O .rwdata	00000048 VGA_Subsystem_VGA_Char_Buffer
0000e990 l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
0000e9e4 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000097e8 l     F .text	000002a8 altera_avalon_jtag_uart_irq
00009a90 l     F .text	00000110 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000a268 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0000ba28 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000bb64 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000bb90 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000bdfc l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000c0e4 l     F .text	00000050 alt_get_errno
0000c134 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0000ebb8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00010b84 g     O .bss	00000004 alt_instruction_exception_handler
0000f03e g     O .rwdata	00000002 OSTaskNameSize
00001090 g     F .text	000000d4 alt_main
00017db0 g     O .bss	00000100 alt_irq
0000ae04 g     F .text	0000005c alt_up_ps2_disable_read_interrupt
000054bc g     F .text	000000d0 OS_MemInit
00000400 g     F .text	00000144 drawrectangle
0000f094 g       *ABS*	00000000 __flash_rwdata_start
0000909c g     F .text	00000064 OSTimeSet
0000a3d4 g     F .text	0000003c alt_up_character_lcd_send_cmd
000016cc g     F .text	00000610 OSEventPendMulti
0000c7a0 g     F .text	00000020 OSTaskCreateHook
00010b8c g     O .bss	00002000 task1_stk
0000f016 g     O .rwdata	00000002 OSMboxEn
00001d30 g     F .text	0000007c OSIntEnter
0000b78c g     F .text	00000100 alt_up_char_buffer_string
0000ac24 g     F .text	00000034 read_CE_bit
0000f026 g     O .rwdata	00000002 OSQEn
000013a0 g     F .text	000000d0 __malloc_unlock
0000c7fc g     F .text	0000001c OSTaskStatHook
0000afa8 g     F .text	000000a4 alt_up_ps2_read_data_byte_timeout
0000b49c g     F .text	00000090 alt_up_rs232_read_fd
00010b24 g     O .bss	00000001 OSLockNesting
00000544 g     F .text	00000218 drawline
0000f064 g     O .rwdata	00000002 OSDataSize
00010b25 g     O .bss	00000001 OSRunning
0000b6c0 g     F .text	000000cc alt_up_char_buffer_draw
0000c834 g     F .text	0000001c OSInitHookBegin
0000f05c g     O .rwdata	00000002 OSTmrSize
0000efdc g     O .rwdata	00000004 pixel_buffer_start
00010b28 g     O .bss	00000004 OSIdleCtr
0000c554 g     F .text	00000020 altera_nios2_gen2_irq_init
0000c620 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
0000a360 g     F .text	00000074 get_DDRAM_addr
0000318c g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000001c __reset
0000f062 g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000f002 g     O .rwdata	00000002 OSEventSize
0000075c g     F .text	00000298 drawcircle
00010b2c g     O .bss	00000001 OSPrioHighRdy
0000c7c0 g     F .text	00000020 OSTaskDelHook
00010b88 g     O .bss	00000004 errno
0000c600 g       .text	00000000 OSStartHighRdy
000079a0 g     F .text	000001ec OSTaskCreateExt
000044fc g     F .text	00000068 OSFlagPendGetFlagsRdy
0000f042 g     O .rwdata	00000002 OSTaskStatStkSize
000035ec g     F .text	00000308 OSFlagAccept
00005b90 g     F .text	000000b8 OSQFlush
0000558c g     F .text	00000140 OSQAccept
00010b0c g     O .bss	00000004 alt_argv
00016fdc g       *ABS*	00000000 _gp
000077e4 g     F .text	000001bc OSTaskCreate
000072a4 g     F .text	00000540 OSTaskChangePrio
00010b20 g     O .bss	00000004 alt_heapsem
00003460 g     F .text	0000018c OSDebugInit
00007b8c g     F .text	000003e0 OSTaskDel
0000ea38 g     O .rwdata	00000180 alt_fd_list
00014b8c g     O .bss	00000370 OSFlagTbl
00002760 g     F .text	000000b4 OS_EventTaskRemove
0000bd3c g     F .text	00000090 alt_find_dev
0000cca8 g     F .text	00000138 memcpy
0000f02c g     O .rwdata	00000002 OSRdyTblSize
0000a570 g     F .text	00000050 alt_up_character_lcd_write_fd
0000b88c g     F .text	0000005c alt_up_char_buffer_clear
0000bebc g     F .text	00000078 alt_io_redirect
0000d324 g       *ABS*	00000000 __DTOR_END__
0000aaf0 g     F .text	00000090 alt_up_irda_write_fd
0000b428 g     F .text	00000074 alt_up_rs232_read_data
0000cb44 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00001470 g     F .text	00000120 OSEventNameGet
0000f010 g     O .rwdata	00000002 OSFlagMax
00001dac g     F .text	000000f4 OSIntExit
0000f04a g     O .rwdata	00000002 OSTCBSize
00010b2d g     O .bss	00000001 OSPrioCur
0000a8ec g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
00009cf4 g     F .text	000002b4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0000f030 g     O .rwdata	00000002 OSStkWidth
0000f024 g     O .rwdata	00000002 OSPtrSize
0000f004 g     O .rwdata	00000002 OSEventTblSize
0000a890 g     F .text	0000005c alt_up_irda_disable_read_interrupt
0000c574 g       .text	00000000 OSCtxSw
0000cab8 g     F .text	0000008c alt_icache_flush
00010b30 g     O .bss	00000004 OSTCBList
00010b74 g     O .bss	00000004 alt_fd_list_lock
00014efc g     O .bss	00000c30 OSMemTbl
00010b34 g     O .bss	00000001 OSTickStepState
0000f028 g     O .rwdata	00000002 OSQMax
00015b2c g     O .bss	00000800 OSTaskStatStk
000050ec g     F .text	000000f8 OSMemNameGet
0000f008 g     O .rwdata	00000002 OSFlagEn
0000f04e g     O .rwdata	00000002 OSTimeTickHookEn
000060b0 g     F .text	00000168 OSQPost
00004d68 g     F .text	000000a0 OS_FlagUnlink
0000f078 g     O .rwdata	00000004 alt_max_fd
0000b3a4 g     F .text	00000044 alt_up_rs232_check_parity
00002d24 g     F .text	00000064 OS_MemCopy
00002d88 g     F .text	000000cc OS_Sched
00004ffc g     F .text	000000f0 OSMemGet
0000826c g     F .text	000001c0 OSTaskNameSet
0000ac58 g     F .text	00000030 read_num_bytes_available
00010b38 g     O .bss	00000004 OSCtxSwCtr
0000c818 g     F .text	0000001c OSTimeTickHook
0000bf34 g     F .text	000001b0 alt_irq_register
0000f012 g     O .rwdata	00000002 OSFlagNameSize
0000abc0 g     F .text	00000034 read_RI_bit
00002814 g     F .text	000000fc OS_EventTaskRemoveMulti
00002614 g     F .text	0000014c OS_EventTaskWaitMulti
0000f02a g     O .rwdata	00000002 OSQSize
00006bb4 g     F .text	00000268 OSSemPend
0000f08c g     O .rwdata	00000004 _global_impure_ptr
0000f014 g     O .rwdata	00000002 OSLowestPrio
00017eb0 g       *ABS*	00000000 __bss_end
0000c888 g     F .text	00000020 OSTCBInitHook
0000f05a g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0000c450 g     F .text	00000104 alt_tick
0000effc g     O .rwdata	00000002 OSEventEn
0000f056 g     O .rwdata	00000002 OSTmrCfgNameSize
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
0000acbc g     F .text	0000002c read_data_byte
00004b74 g     F .text	000000e4 OS_FlagInit
0000c3b8 g     F .text	00000098 alt_alarm_stop
0000abf4 g     F .text	00000030 read_RE_bit
0000f038 g     O .rwdata	00000002 OSTaskIdleStkSize
00010b78 g     O .bss	00000004 alt_irq_active
0000679c g     F .text	000000b0 OSSemAccept
000052fc g     F .text	000000d8 OSMemPut
00004e08 g     F .text	000001f4 OSMemCreate
00010b3c g     O .bss	00000004 OSIdleCtrMax
0000a92c g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d4 alt_irq_handler
0000ea10 g     O .rwdata	00000028 alt_dev_null
0000f04c g     O .rwdata	00000002 OSTicksPerSec
0000efe8 g     O .rwdata	00000004 character_buffer
0000a804 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0000c574 g       .text	00000000 OSIntCtxSw
0000ae60 g     F .text	00000074 alt_up_ps2_write_data_byte
0000bb48 g     F .text	0000001c alt_dcache_flush_all
00010b40 g     O .bss	00000004 OSTCBFreeList
0000f094 g       *ABS*	00000000 __ram_rwdata_end
00006e1c g     F .text	0000016c OSSemPendAbort
0000f070 g     O .rwdata	00000008 alt_dev_list
0000f050 g     O .rwdata	00000002 OSVersionNbr
0000d620 g       *ABS*	00000000 __ram_rodata_end
0000b52c g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000eff8 g     O .rwdata	00000004 OSEndiannessTest
0000f00a g     O .rwdata	00000002 OSFlagGrpSize
00017eb0 g       *ABS*	00000000 end
0000b19c g     F .text	00000098 alt_up_ps2_write_fd
0000a968 g     F .text	00000044 alt_up_irda_check_parity
0000b600 g     F .text	00000080 alt_up_char_buffer_init
000096a8 g     F .text	00000140 altera_avalon_jtag_uart_init
00002fe8 g     F .text	000000dc OS_TaskStat
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0000d324 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0000a2e0 g     F .text	00000080 alt_avalon_timer_sc_init
00009fa8 g     F .text	000002c0 altera_avalon_jtag_uart_write
00002cd4 g     F .text	00000050 OS_MemClr
0000a484 g     F .text	00000078 alt_up_character_lcd_write
0000c644 g     F .text	0000015c OSTaskStkInit
00000ad0 g     F .text	00000380 task1
00002370 g     F .text	00000198 OS_EventTaskRdy
0000d154 g     F .text	00000194 __call_exitprocs
00010b44 g     O .bss	00000001 OSCPUUsage
00000244 g     F .text	0000003c _start
00000e50 g     F .text	00000048 task2
00010b7c g     O .bss	00000004 _alt_tick_rate
00005c48 g     F .text	000002fc OSQPend
00008b98 g     F .text	00000148 OSTimeDly
00010b80 g     O .bss	00000004 _alt_nticks
0000916c g     F .text	000003d8 alt_sys_init
0000a6bc g     F .text	00000088 alt_up_character_lcd_shift_display
0000d040 g     F .text	00000114 __register_exitproc
00010b45 g     O .bss	00000001 OSTaskCtr
0000b0bc g     F .text	00000054 alt_up_ps2_clear_fifo
0000b368 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00008ce0 g     F .text	00000168 OSTimeDlyHMSM
0000a744 g     F .text	0000008c alt_up_character_lcd_erase_pos
00009ba0 g     F .text	00000068 altera_avalon_jtag_uart_close
0000d620 g       *ABS*	00000000 __ram_rwdata_start
0000d324 g       *ABS*	00000000 __ram_rodata_start
0000effe g     O .rwdata	00000002 OSEventMax
00006f88 g     F .text	00000110 OSSemPost
00001f28 g     F .text	000000d8 OSSchedUnlock
00009544 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000c9bc g     F .text	000000fc alt_get_fd
0000efe0 g     O .rwdata	00000004 buffer_register
00010b48 g     O .bss	00000004 OSMemFreeList
0000206c g     F .text	000000ac OSStatInit
000048ec g     F .text	000000c4 OSFlagQuery
0000f034 g     O .rwdata	00000002 OSTaskCreateExtEn
0000cc2c g     F .text	0000007c memcmp
00002354 g     F .text	0000001c OS_Dummy
00009604 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00017eb0 g       *ABS*	00000000 __alt_stack_base
00009654 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000a838 g     F .text	00000058 alt_up_irda_enable_read_interrupt
0001632c g     O .bss	000001e0 OSQTbl
00010b4c g     O .bss	00000004 OSTCBHighRdy
00010b50 g     O .bss	00000004 OSQFreeList
0000b2cc g     F .text	0000005c alt_up_rs232_disable_read_interrupt
0000c8a8 g     F .text	00000114 alt_find_file
00000280 g     F .text	000000b4 clearscreen
0000bbe0 g     F .text	000000a4 alt_dev_llist_insert
00001280 g     F .text	00000120 __malloc_lock
00001590 g     F .text	0000013c OSEventNameSet
00010b54 g     O .bss	00000001 OSRdyGrp
00010b08 g       *ABS*	00000000 __bss_start
0000cde0 g     F .text	00000124 memset
00000e98 g     F .text	00000114 main
00010b10 g     O .bss	00000004 alt_envp
0000b680 g     F .text	00000040 alt_up_char_buffer_open_dev
000095a4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000d340 g     O .rodata	00000100 OSUnMapTbl
0000f02e g     O .rwdata	00000002 OSSemEn
0000a634 g     F .text	00000088 alt_up_character_lcd_shift_cursor
00004564 g     F .text	00000388 OSFlagPost
00000334 g     F .text	000000cc drawbox
00002508 g     F .text	0000010c OS_EventTaskWait
00012b8c g     O .bss	00002000 task2_stk
0000b04c g     F .text	00000070 alt_up_ps2_read_data_byte
000030c4 g     F .text	000000c8 OS_TaskStatStkChk
00007f6c g     F .text	00000158 OSTaskDelReq
0000f07c g     O .rwdata	00000004 alt_errno
00002000 g     F .text	0000006c OSStart
00001224 g     F .text	0000005c __env_unlock
0000842c g     F .text	000001f8 OSTaskResume
000053d4 g     F .text	000000e8 OSMemQuery
0000f040 g     O .rwdata	00000002 OSTaskStatEn
0000a9ac g     F .text	00000040 alt_up_irda_write_data
0000f01a g     O .rwdata	00000002 OSMemMax
00006218 g     F .text	00000170 OSQPostFront
0000b234 g     F .text	00000040 alt_up_ps2_open_dev
00010b55 g     O .bss	00000003 OSRdyTbl
0000eff4 g     O .rwdata	00000002 OSDebugEn
0000a444 g     F .text	00000040 alt_up_character_lcd_open_dev
0000adac g     F .text	00000058 alt_up_ps2_enable_read_interrupt
0000d324 g       *ABS*	00000000 __CTOR_END__
00000a3c g     F .text	00000094 drawtext
0000f00c g     O .rwdata	00000002 OSFlagNodeSize
0000f054 g     O .rwdata	00000002 OSTmrCfgMax
0000a410 g     F .text	00000034 alt_up_character_lcd_init
0000cf04 g     F .text	000000a4 strcmp
000056cc g     F .text	000001fc OSQCreate
000080c4 g     F .text	000001a8 OSTaskNameGet
0000d324 g       *ABS*	00000000 __flash_rodata_start
00006388 g     F .text	0000020c OSQPostOpt
00002118 g     F .text	0000021c OSTimeTick
0000f03c g     O .rwdata	00000002 OSTaskMax
0000d324 g       *ABS*	00000000 __DTOR_LIST__
0000684c g     F .text	00000100 OSSemCreate
0000f060 g     O .rwdata	00000002 OSTmrWheelSize
0000b5c0 g     F .text	00000040 alt_up_rs232_open_dev
0000f036 g     O .rwdata	00000002 OSTaskDelEn
00007098 g     F .text	00000110 OSSemQuery
000058c8 g     F .text	000002c8 OSQDel
00005f44 g     F .text	0000016c OSQPendAbort
00009138 g     F .text	00000034 alt_irq_init
0000c358 g     F .text	00000060 alt_release_fd
0000ac88 g     F .text	00000034 read_data_valid
0000a7d0 g     F .text	00000034 alt_up_character_lcd_cursor_off
0000af44 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
0000cbe0 g     F .text	00000014 atexit
00001ea0 g     F .text	00000088 OSSchedLock
000038f4 g     F .text	00000128 OSFlagCreate
0000f090 g     O .rwdata	00000004 _impure_ptr
00010b08 g     O .bss	00000004 alt_argc
0000bce0 g     F .text	0000005c _do_dtors
0000f006 g     O .rwdata	00000002 OSEventMultiEn
00003a1c g     F .text	00000270 OSFlagDel
00010b58 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
00003f0c g     F .text	000005f0 OSFlagPend
0000f052 g     O .rwdata	00000002 OSTmrEn
0000f068 g     O .rwdata	00000008 alt_fs_list
00002ec4 g     F .text	00000074 OS_StrCopy
0000b274 g     F .text	00000058 alt_up_rs232_enable_read_interrupt
0000b3e8 g     F .text	00000040 alt_up_rs232_write_data
0000f01c g     O .rwdata	00000002 OSMemNameSize
0000c850 g     F .text	0000001c OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000f048 g     O .rwdata	00000002 OSTCBPrioTblMax
0000f044 g     O .rwdata	00000002 OSTaskStatStkChkEn
0000f018 g     O .rwdata	00000002 OSMemEn
0000f022 g     O .rwdata	00000002 OSMutexEn
0000f094 g       *ABS*	00000000 _edata
00017eb0 g       *ABS*	00000000 _end
00010b5c g     O .bss	00000001 OSIntNesting
00000244 g       *ABS*	00000000 __ram_exceptions_end
00009c08 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00008e48 g     F .text	000001f0 OSTimeDlyResume
00003dbc g     F .text	00000150 OSFlagNameSet
000009f4 g     F .text	00000048 wait_for_vsync
00008624 g     F .text	000001c8 OSTaskStkChk
0000f01e g     O .rwdata	00000002 OSMemSize
00010b60 g     O .bss	00000004 OSTCBCur
0000cbf4 g     F .text	00000038 exit
0000a9ec g     F .text	00000074 alt_up_irda_read_data
0000f020 g     O .rwdata	00000002 OSMemTblSize
0000ace8 g     F .text	000000c4 alt_up_ps2_init
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00001cdc g     F .text	00000054 OSInit
00008a00 g     F .text	0000012c OSTaskQuery
0000a4fc g     F .text	00000074 alt_up_character_lcd_string
000066f0 g     F .text	000000ac OS_QInit
00002f38 g     F .text	00000054 OS_StrLen
0000ab80 g     F .text	00000040 alt_up_irda_open_dev
000051e4 g     F .text	00000118 OSMemNameSet
0000f03a g     O .rwdata	00000002 OSTaskProfileEn
00010b64 g     O .bss	00000004 OSTime
0001650c g     O .bss	00000800 OSTaskIdleStk
0000d2e8 g     F .text	0000003c _exit
0000b8e8 g     F .text	00000140 alt_alarm_start
00003c8c g     F .text	00000130 OSFlagNameGet
00009038 g     F .text	00000064 OSTimeGet
0000aed4 g     F .text	00000070 alt_up_ps2_wait_for_ack
0000cfa8 g     F .text	00000098 strlen
0000c7e0 g     F .text	0000001c OSTaskSwHook
0000c200 g     F .text	00000158 open
00016d0c g     O .bss	00000b40 OSEventTbl
0001784c g     O .bss	00000510 OSTCBTbl
000071a8 g     F .text	000000fc OSSemSet
0000bdcc g     F .text	00000030 alt_icache_flush_all
0000a5c0 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
0000f080 g     O .rwdata	00000004 alt_priority_mask
0000694c g     F .text	00000268 OSSemDel
00010b68 g     O .bss	00000004 OSFlagFreeList
0000f000 g     O .rwdata	00000002 OSEventNameSize
00010b6c g     O .bss	00000001 OSStatRdy
00017d5c g     O .bss	00000054 OSTCBPrioTbl
00001164 g     F .text	000000c0 __env_lock
0000b110 g     F .text	0000008c alt_up_ps2_read_fd
0000f046 g     O .rwdata	00000002 OSTaskSwHookEn
0000aa60 g     F .text	00000090 alt_up_irda_read_fd
0000f084 g     O .rwdata	00000008 alt_alarm_list
0000f00e g     O .rwdata	00000002 OSFlagWidth
0000bc84 g     F .text	0000005c _do_ctors
0000b328 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0000ba78 g     F .text	000000d0 close
0000efe4 g     O .rwdata	00000004 dma_control
00010b18 g     O .bss	00000004 alt_envsem
00010b70 g     O .bss	00000004 OSIdleCtrRun
00002334 g     F .text	00000020 OSVersion
0000f058 g     O .rwdata	00000002 OSTmrCfgWheelSize
00001010 g     F .text	00000080 alt_load
00008b2c g     F .text	0000006c OS_TaskStkClr
0000f032 g     O .rwdata	00000002 OSTaskCreateEn
00002910 g     F .text	00000064 OS_EventWaitListInit
0000c86c g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
000087ec g     F .text	00000214 OSTaskSuspend
00002f8c g     F .text	0000005c OS_TaskIdle
0000f05e g     O .rwdata	00000002 OSTmrTblSize
00006594 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001d300 	call	1d30 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	00800074 	movhi	r2,1
 140:	109f6c04 	addi	r2,r2,32176
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	109f6c04 	addi	r2,r2,32176
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	21000104 	addi	r4,r4,4
 168:	1105883a 	add	r2,r2,r4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	e17ffd17 	ldw	r5,-12(fp)
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	0001dac0 	call	1dac <OSIntExit>
}
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a6ea17 	ldw	r2,-25688(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a6ea17 	ldw	r2,-25688(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	1809883a 	mov	r4,r3
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	e1bffe17 	ldw	r6,-8(fp)
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     250:	d69bf714 	ori	gp,gp,28636
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     258:	1082c214 	ori	r2,r2,2824

    movhi r3, %hi(__bss_end)
     25c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     260:	18dfac14 	ori	r3,r3,32432

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	00010100 	call	1010 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	00010900 	call	1090 <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <alt_after_alt_main>

00000280 <clearscreen>:
#include "graphicslib.h"

void clearscreen(volatile short * pixel_ctrl_ptr)
{
     280:	defffd04 	addi	sp,sp,-12
     284:	df000215 	stw	fp,8(sp)
     288:	df000204 	addi	fp,sp,8
     28c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 row,col;
	for(row = 0;row<=240;row++){
     290:	e03ffe05 	stb	zero,-8(fp)
     294:	00002006 	br	318 <clearscreen+0x98>
		for(col=0;col <= 160;col++)
     298:	e03ffe45 	stb	zero,-7(fp)
     29c:	00001806 	br	300 <clearscreen+0x80>
		{
			*(pixel_ctrl_ptr + (row << 9) + col) = 0;
     2a0:	e0bffe03 	ldbu	r2,-8(fp)
     2a4:	1004927a 	slli	r2,r2,9
     2a8:	1007883a 	mov	r3,r2
     2ac:	e0bffe43 	ldbu	r2,-7(fp)
     2b0:	1885883a 	add	r2,r3,r2
     2b4:	1085883a 	add	r2,r2,r2
     2b8:	1007883a 	mov	r3,r2
     2bc:	e0bfff17 	ldw	r2,-4(fp)
     2c0:	10c5883a 	add	r2,r2,r3
     2c4:	1000000d 	sth	zero,0(r2)
			*(pixel_ctrl_ptr + (row << 9) + col+160) = 0;
     2c8:	e0bffe03 	ldbu	r2,-8(fp)
     2cc:	1004927a 	slli	r2,r2,9
     2d0:	1007883a 	mov	r3,r2
     2d4:	e0bffe43 	ldbu	r2,-7(fp)
     2d8:	1885883a 	add	r2,r3,r2
     2dc:	10802804 	addi	r2,r2,160
     2e0:	1085883a 	add	r2,r2,r2
     2e4:	1007883a 	mov	r3,r2
     2e8:	e0bfff17 	ldw	r2,-4(fp)
     2ec:	10c5883a 	add	r2,r2,r3
     2f0:	1000000d 	sth	zero,0(r2)

void clearscreen(volatile short * pixel_ctrl_ptr)
{
	alt_u8 row,col;
	for(row = 0;row<=240;row++){
		for(col=0;col <= 160;col++)
     2f4:	e0bffe43 	ldbu	r2,-7(fp)
     2f8:	10800044 	addi	r2,r2,1
     2fc:	e0bffe45 	stb	r2,-7(fp)
     300:	e0bffe43 	ldbu	r2,-7(fp)
     304:	10802870 	cmpltui	r2,r2,161
     308:	103fe51e 	bne	r2,zero,2a0 <clearscreen+0x20>
#include "graphicslib.h"

void clearscreen(volatile short * pixel_ctrl_ptr)
{
	alt_u8 row,col;
	for(row = 0;row<=240;row++){
     30c:	e0bffe03 	ldbu	r2,-8(fp)
     310:	10800044 	addi	r2,r2,1
     314:	e0bffe05 	stb	r2,-8(fp)
     318:	e0bffe03 	ldbu	r2,-8(fp)
     31c:	10803c70 	cmpltui	r2,r2,241
     320:	103fdd1e 	bne	r2,zero,298 <clearscreen+0x18>
		{
			*(pixel_ctrl_ptr + (row << 9) + col) = 0;
			*(pixel_ctrl_ptr + (row << 9) + col+160) = 0;
		}
	}
}
     324:	e037883a 	mov	sp,fp
     328:	df000017 	ldw	fp,0(sp)
     32c:	dec00104 	addi	sp,sp,4
     330:	f800283a 	ret

00000334 <drawbox>:
void drawbox(volatile short * pixel_ctrl_ptr, alt_u16 x0,alt_u16 y0,alt_u8 sizex,alt_u8 sizey,alt_u16 color)
{
     334:	defff804 	addi	sp,sp,-32
     338:	df000715 	stw	fp,28(sp)
     33c:	df000704 	addi	fp,sp,28
     340:	e13ffa15 	stw	r4,-24(fp)
     344:	2811883a 	mov	r8,r5
     348:	300b883a 	mov	r5,r6
     34c:	3809883a 	mov	r4,r7
     350:	e0c00117 	ldw	r3,4(fp)
     354:	e0800217 	ldw	r2,8(fp)
     358:	e23ffb0d 	sth	r8,-20(fp)
     35c:	e17ffc0d 	sth	r5,-16(fp)
     360:	e13ffd05 	stb	r4,-12(fp)
     364:	e0fffe05 	stb	r3,-8(fp)
     368:	e0bfff0d 	sth	r2,-4(fp)
	alt_u8 row;
	alt_u16 col;
	for(row = y0;row<=y0+sizey;row++){
     36c:	e0bffc0b 	ldhu	r2,-16(fp)
     370:	e0bff905 	stb	r2,-28(fp)
     374:	00001906 	br	3dc <drawbox+0xa8>
		for(col=x0;col <= x0+sizex;col++)
     378:	e0bffb0b 	ldhu	r2,-20(fp)
     37c:	e0bff98d 	sth	r2,-26(fp)
     380:	00000e06 	br	3bc <drawbox+0x88>
		{
			*(pixel_ctrl_ptr + (row << 9) + col) = color;
     384:	e0bff903 	ldbu	r2,-28(fp)
     388:	1004927a 	slli	r2,r2,9
     38c:	1007883a 	mov	r3,r2
     390:	e0bff98b 	ldhu	r2,-26(fp)
     394:	1885883a 	add	r2,r3,r2
     398:	1085883a 	add	r2,r2,r2
     39c:	1007883a 	mov	r3,r2
     3a0:	e0bffa17 	ldw	r2,-24(fp)
     3a4:	10c5883a 	add	r2,r2,r3
     3a8:	e0ffff0b 	ldhu	r3,-4(fp)
     3ac:	10c0000d 	sth	r3,0(r2)
void drawbox(volatile short * pixel_ctrl_ptr, alt_u16 x0,alt_u16 y0,alt_u8 sizex,alt_u8 sizey,alt_u16 color)
{
	alt_u8 row;
	alt_u16 col;
	for(row = y0;row<=y0+sizey;row++){
		for(col=x0;col <= x0+sizex;col++)
     3b0:	e0bff98b 	ldhu	r2,-26(fp)
     3b4:	10800044 	addi	r2,r2,1
     3b8:	e0bff98d 	sth	r2,-26(fp)
     3bc:	e0bff98b 	ldhu	r2,-26(fp)
     3c0:	e13ffb0b 	ldhu	r4,-20(fp)
     3c4:	e0fffd03 	ldbu	r3,-12(fp)
     3c8:	20c7883a 	add	r3,r4,r3
     3cc:	18bfed0e 	bge	r3,r2,384 <drawbox+0x50>
}
void drawbox(volatile short * pixel_ctrl_ptr, alt_u16 x0,alt_u16 y0,alt_u8 sizex,alt_u8 sizey,alt_u16 color)
{
	alt_u8 row;
	alt_u16 col;
	for(row = y0;row<=y0+sizey;row++){
     3d0:	e0bff903 	ldbu	r2,-28(fp)
     3d4:	10800044 	addi	r2,r2,1
     3d8:	e0bff905 	stb	r2,-28(fp)
     3dc:	e0bff903 	ldbu	r2,-28(fp)
     3e0:	e13ffc0b 	ldhu	r4,-16(fp)
     3e4:	e0fffe03 	ldbu	r3,-8(fp)
     3e8:	20c7883a 	add	r3,r4,r3
     3ec:	18bfe20e 	bge	r3,r2,378 <drawbox+0x44>
		for(col=x0;col <= x0+sizex;col++)
		{
			*(pixel_ctrl_ptr + (row << 9) + col) = color;
		}
	}
}
     3f0:	e037883a 	mov	sp,fp
     3f4:	df000017 	ldw	fp,0(sp)
     3f8:	dec00104 	addi	sp,sp,4
     3fc:	f800283a 	ret

00000400 <drawrectangle>:
void drawrectangle(volatile short * pixel_ctrl_ptr, alt_u16 x0,alt_u16 y0,alt_u8 sizex,alt_u8 sizey,alt_u16 color)
{
     400:	defff604 	addi	sp,sp,-40
     404:	dfc00915 	stw	ra,36(sp)
     408:	df000815 	stw	fp,32(sp)
     40c:	df000804 	addi	fp,sp,32
     410:	e13ffa15 	stw	r4,-24(fp)
     414:	2811883a 	mov	r8,r5
     418:	300b883a 	mov	r5,r6
     41c:	3809883a 	mov	r4,r7
     420:	e0c00217 	ldw	r3,8(fp)
     424:	e0800317 	ldw	r2,12(fp)
     428:	e23ffb0d 	sth	r8,-20(fp)
     42c:	e17ffc0d 	sth	r5,-16(fp)
     430:	e13ffd05 	stb	r4,-12(fp)
     434:	e0fffe05 	stb	r3,-8(fp)
     438:	e0bfff0d 	sth	r2,-4(fp)
	drawline(pixel_ctrl_ptr,x0,y0,x0+sizex,y0,color);
     43c:	e17ffb0b 	ldhu	r5,-20(fp)
     440:	e1bffc0b 	ldhu	r6,-16(fp)
     444:	e0fffd03 	ldbu	r3,-12(fp)
     448:	e0bffb0b 	ldhu	r2,-20(fp)
     44c:	1885883a 	add	r2,r3,r2
     450:	11ffffcc 	andi	r7,r2,65535
     454:	e0fffc0b 	ldhu	r3,-16(fp)
     458:	e0bfff0b 	ldhu	r2,-4(fp)
     45c:	d8c00015 	stw	r3,0(sp)
     460:	d8800115 	stw	r2,4(sp)
     464:	e13ffa17 	ldw	r4,-24(fp)
     468:	00005440 	call	544 <drawline>
	drawline(pixel_ctrl_ptr,x0,y0,x0,y0+sizey,color);
     46c:	e17ffb0b 	ldhu	r5,-20(fp)
     470:	e1bffc0b 	ldhu	r6,-16(fp)
     474:	e1fffb0b 	ldhu	r7,-20(fp)
     478:	e0fffe03 	ldbu	r3,-8(fp)
     47c:	e0bffc0b 	ldhu	r2,-16(fp)
     480:	1885883a 	add	r2,r3,r2
     484:	10ffffcc 	andi	r3,r2,65535
     488:	e0bfff0b 	ldhu	r2,-4(fp)
     48c:	d8c00015 	stw	r3,0(sp)
     490:	d8800115 	stw	r2,4(sp)
     494:	e13ffa17 	ldw	r4,-24(fp)
     498:	00005440 	call	544 <drawline>
	drawline(pixel_ctrl_ptr,x0,y0+sizey,x0+sizex+1,y0+sizey,color);
     49c:	e17ffb0b 	ldhu	r5,-20(fp)
     4a0:	e0fffe03 	ldbu	r3,-8(fp)
     4a4:	e0bffc0b 	ldhu	r2,-16(fp)
     4a8:	1885883a 	add	r2,r3,r2
     4ac:	11bfffcc 	andi	r6,r2,65535
     4b0:	e0fffd03 	ldbu	r3,-12(fp)
     4b4:	e0bffb0b 	ldhu	r2,-20(fp)
     4b8:	1885883a 	add	r2,r3,r2
     4bc:	10800044 	addi	r2,r2,1
     4c0:	11ffffcc 	andi	r7,r2,65535
     4c4:	e0fffe03 	ldbu	r3,-8(fp)
     4c8:	e0bffc0b 	ldhu	r2,-16(fp)
     4cc:	1885883a 	add	r2,r3,r2
     4d0:	10ffffcc 	andi	r3,r2,65535
     4d4:	e0bfff0b 	ldhu	r2,-4(fp)
     4d8:	d8c00015 	stw	r3,0(sp)
     4dc:	d8800115 	stw	r2,4(sp)
     4e0:	e13ffa17 	ldw	r4,-24(fp)
     4e4:	00005440 	call	544 <drawline>
	drawline(pixel_ctrl_ptr,x0+sizex,y0,x0+sizex,y0+sizey,color);
     4e8:	e0fffd03 	ldbu	r3,-12(fp)
     4ec:	e0bffb0b 	ldhu	r2,-20(fp)
     4f0:	1885883a 	add	r2,r3,r2
     4f4:	117fffcc 	andi	r5,r2,65535
     4f8:	e1bffc0b 	ldhu	r6,-16(fp)
     4fc:	e0fffd03 	ldbu	r3,-12(fp)
     500:	e0bffb0b 	ldhu	r2,-20(fp)
     504:	1885883a 	add	r2,r3,r2
     508:	11ffffcc 	andi	r7,r2,65535
     50c:	e0fffe03 	ldbu	r3,-8(fp)
     510:	e0bffc0b 	ldhu	r2,-16(fp)
     514:	1885883a 	add	r2,r3,r2
     518:	10ffffcc 	andi	r3,r2,65535
     51c:	e0bfff0b 	ldhu	r2,-4(fp)
     520:	d8c00015 	stw	r3,0(sp)
     524:	d8800115 	stw	r2,4(sp)
     528:	e13ffa17 	ldw	r4,-24(fp)
     52c:	00005440 	call	544 <drawline>
}
     530:	e037883a 	mov	sp,fp
     534:	dfc00117 	ldw	ra,4(sp)
     538:	df000017 	ldw	fp,0(sp)
     53c:	dec00204 	addi	sp,sp,8
     540:	f800283a 	ret

00000544 <drawline>:
void drawline(volatile short * pixel_ctrl_ptr, alt_u16 x0, alt_u16 y0,alt_u16 x1,alt_u16 y1,alt_u16 color)
{
     544:	defff504 	addi	sp,sp,-44
     548:	df000a15 	stw	fp,40(sp)
     54c:	df000a04 	addi	fp,sp,40
     550:	e13ffa15 	stw	r4,-24(fp)
     554:	2811883a 	mov	r8,r5
     558:	300b883a 	mov	r5,r6
     55c:	3809883a 	mov	r4,r7
     560:	e0c00117 	ldw	r3,4(fp)
     564:	e0800217 	ldw	r2,8(fp)
     568:	e23ffb0d 	sth	r8,-20(fp)
     56c:	e17ffc0d 	sth	r5,-16(fp)
     570:	e13ffd0d 	sth	r4,-12(fp)
     574:	e0fffe0d 	sth	r3,-8(fp)
     578:	e0bfff0d 	sth	r2,-4(fp)
	alt_u8 is_steep = abs(y1-y0) > abs(x1 -x0);
     57c:	e0fffe0b 	ldhu	r3,-8(fp)
     580:	e0bffc0b 	ldhu	r2,-16(fp)
     584:	1885c83a 	sub	r2,r3,r2
     588:	1000010e 	bge	r2,zero,590 <drawline+0x4c>
     58c:	0085c83a 	sub	r2,zero,r2
     590:	1009883a 	mov	r4,r2
     594:	e0fffd0b 	ldhu	r3,-12(fp)
     598:	e0bffb0b 	ldhu	r2,-20(fp)
     59c:	1885c83a 	sub	r2,r3,r2
     5a0:	1000010e 	bge	r2,zero,5a8 <drawline+0x64>
     5a4:	0085c83a 	sub	r2,zero,r2
     5a8:	1104803a 	cmplt	r2,r2,r4
     5ac:	e0bff7c5 	stb	r2,-33(fp)
	alt_u16 temp;
	if (is_steep)
     5b0:	e0bff7c3 	ldbu	r2,-33(fp)
     5b4:	10000c26 	beq	r2,zero,5e8 <drawline+0xa4>
	{
		temp = x0;
     5b8:	e0bffb0b 	ldhu	r2,-20(fp)
     5bc:	e0bff80d 	sth	r2,-32(fp)
		x0 = y0;
     5c0:	e0bffc0b 	ldhu	r2,-16(fp)
     5c4:	e0bffb0d 	sth	r2,-20(fp)
		y0 = temp;
     5c8:	e0bff80b 	ldhu	r2,-32(fp)
     5cc:	e0bffc0d 	sth	r2,-16(fp)

		temp = x1;
     5d0:	e0bffd0b 	ldhu	r2,-12(fp)
     5d4:	e0bff80d 	sth	r2,-32(fp)
		x1 = y1;
     5d8:	e0bffe0b 	ldhu	r2,-8(fp)
     5dc:	e0bffd0d 	sth	r2,-12(fp)
		y1 = temp;
     5e0:	e0bff80b 	ldhu	r2,-32(fp)
     5e4:	e0bffe0d 	sth	r2,-8(fp)
	}
	if(x0 > x1)
     5e8:	e0bffb0b 	ldhu	r2,-20(fp)
     5ec:	e0fffd0b 	ldhu	r3,-12(fp)
     5f0:	18800c2e 	bgeu	r3,r2,624 <drawline+0xe0>
	{
		temp = x0;
     5f4:	e0bffb0b 	ldhu	r2,-20(fp)
     5f8:	e0bff80d 	sth	r2,-32(fp)
		x0 = x1;
     5fc:	e0bffd0b 	ldhu	r2,-12(fp)
     600:	e0bffb0d 	sth	r2,-20(fp)
		x1 = temp;
     604:	e0bff80b 	ldhu	r2,-32(fp)
     608:	e0bffd0d 	sth	r2,-12(fp)

		temp = y0;
     60c:	e0bffc0b 	ldhu	r2,-16(fp)
     610:	e0bff80d 	sth	r2,-32(fp)
		y0 = y1;
     614:	e0bffe0b 	ldhu	r2,-8(fp)
     618:	e0bffc0d 	sth	r2,-16(fp)
		y1 = temp;
     61c:	e0bff80b 	ldhu	r2,-32(fp)
     620:	e0bffe0d 	sth	r2,-8(fp)
	}
	alt_u16 deltax = x1 - x0;
     624:	e0fffd0b 	ldhu	r3,-12(fp)
     628:	e0bffb0b 	ldhu	r2,-20(fp)
     62c:	1885c83a 	sub	r2,r3,r2
     630:	e0bff88d 	sth	r2,-30(fp)
	alt_u16 deltay = abs(y1-y0);
     634:	e0fffe0b 	ldhu	r3,-8(fp)
     638:	e0bffc0b 	ldhu	r2,-16(fp)
     63c:	1885c83a 	sub	r2,r3,r2
     640:	1000010e 	bge	r2,zero,648 <drawline+0x104>
     644:	0085c83a 	sub	r2,zero,r2
     648:	e0bff90d 	sth	r2,-28(fp)
	alt_16 error = -(deltax /2);
     64c:	e0bff88b 	ldhu	r2,-30(fp)
     650:	1004d07a 	srli	r2,r2,1
     654:	0085c83a 	sub	r2,zero,r2
     658:	e0bff60d 	sth	r2,-40(fp)
	alt_u16 y = y0;
     65c:	e0bffc0b 	ldhu	r2,-16(fp)
     660:	e0bff68d 	sth	r2,-38(fp)
	alt_u16 x = x0;
     664:	e0bffb0b 	ldhu	r2,-20(fp)
     668:	e0bff70d 	sth	r2,-36(fp)
	alt_8 y_step;
	if(y0 < y1)
     66c:	e0fffc0b 	ldhu	r3,-16(fp)
     670:	e0bffe0b 	ldhu	r2,-8(fp)
     674:	1880032e 	bgeu	r3,r2,684 <drawline+0x140>
	{
		y_step =1;
     678:	00800044 	movi	r2,1
     67c:	e0bff785 	stb	r2,-34(fp)
     680:	00000206 	br	68c <drawline+0x148>
	}
	else
	{
		y_step =-1;
     684:	00bfffc4 	movi	r2,-1
     688:	e0bff785 	stb	r2,-34(fp)
	}
	for(x=x0;x<x1;x++)
     68c:	e0bffb0b 	ldhu	r2,-20(fp)
     690:	e0bff70d 	sth	r2,-36(fp)
     694:	00002a06 	br	740 <drawline+0x1fc>
	{
		if(is_steep)
     698:	e0bff7c3 	ldbu	r2,-33(fp)
     69c:	10000c26 	beq	r2,zero,6d0 <drawline+0x18c>
		{
			*(pixel_ctrl_ptr + (x << 9) + y) = color;
     6a0:	e0bff70b 	ldhu	r2,-36(fp)
     6a4:	1004927a 	slli	r2,r2,9
     6a8:	1007883a 	mov	r3,r2
     6ac:	e0bff68b 	ldhu	r2,-38(fp)
     6b0:	1885883a 	add	r2,r3,r2
     6b4:	1085883a 	add	r2,r2,r2
     6b8:	1007883a 	mov	r3,r2
     6bc:	e0bffa17 	ldw	r2,-24(fp)
     6c0:	10c5883a 	add	r2,r2,r3
     6c4:	e0ffff0b 	ldhu	r3,-4(fp)
     6c8:	10c0000d 	sth	r3,0(r2)
     6cc:	00000b06 	br	6fc <drawline+0x1b8>
		}
		else
		{
			*(pixel_ctrl_ptr + (y << 9) + x) = color;
     6d0:	e0bff68b 	ldhu	r2,-38(fp)
     6d4:	1004927a 	slli	r2,r2,9
     6d8:	1007883a 	mov	r3,r2
     6dc:	e0bff70b 	ldhu	r2,-36(fp)
     6e0:	1885883a 	add	r2,r3,r2
     6e4:	1085883a 	add	r2,r2,r2
     6e8:	1007883a 	mov	r3,r2
     6ec:	e0bffa17 	ldw	r2,-24(fp)
     6f0:	10c5883a 	add	r2,r2,r3
     6f4:	e0ffff0b 	ldhu	r3,-4(fp)
     6f8:	10c0000d 	sth	r3,0(r2)
		}
		error = error + deltay;
     6fc:	e0fff60b 	ldhu	r3,-40(fp)
     700:	e0bff90b 	ldhu	r2,-28(fp)
     704:	1885883a 	add	r2,r3,r2
     708:	e0bff60d 	sth	r2,-40(fp)
		if(error >= 0)
     70c:	e0bff60f 	ldh	r2,-40(fp)
     710:	10000816 	blt	r2,zero,734 <drawline+0x1f0>
		{
			y = y + y_step;
     714:	e0fff787 	ldb	r3,-34(fp)
     718:	e0bff68b 	ldhu	r2,-38(fp)
     71c:	1885883a 	add	r2,r3,r2
     720:	e0bff68d 	sth	r2,-38(fp)
			error = error - deltax;
     724:	e0fff60b 	ldhu	r3,-40(fp)
     728:	e0bff88b 	ldhu	r2,-30(fp)
     72c:	1885c83a 	sub	r2,r3,r2
     730:	e0bff60d 	sth	r2,-40(fp)
	}
	else
	{
		y_step =-1;
	}
	for(x=x0;x<x1;x++)
     734:	e0bff70b 	ldhu	r2,-36(fp)
     738:	10800044 	addi	r2,r2,1
     73c:	e0bff70d 	sth	r2,-36(fp)
     740:	e0fff70b 	ldhu	r3,-36(fp)
     744:	e0bffd0b 	ldhu	r2,-12(fp)
     748:	18bfd336 	bltu	r3,r2,698 <drawline+0x154>
		{
			y = y + y_step;
			error = error - deltax;
		}
	}
}
     74c:	e037883a 	mov	sp,fp
     750:	df000017 	ldw	fp,0(sp)
     754:	dec00104 	addi	sp,sp,4
     758:	f800283a 	ret

0000075c <drawcircle>:
void drawcircle(volatile short * pixel_ctrl_ptr, alt_u16 xs, alt_u8 ys, alt_u8 circle_radius, alt_u16 color)
{
     75c:	defff704 	addi	sp,sp,-36
     760:	df000815 	stw	fp,32(sp)
     764:	df000804 	addi	fp,sp,32
     768:	e13ffb15 	stw	r4,-20(fp)
     76c:	3009883a 	mov	r4,r6
     770:	3807883a 	mov	r3,r7
     774:	e0800117 	ldw	r2,4(fp)
     778:	e17ffc0d 	sth	r5,-16(fp)
     77c:	e13ffd05 	stb	r4,-12(fp)
     780:	e0fffe05 	stb	r3,-8(fp)
     784:	e0bfff0d 	sth	r2,-4(fp)
	int x = circle_radius;
     788:	e0bffe03 	ldbu	r2,-8(fp)
     78c:	e0bff815 	stw	r2,-32(fp)
	int y = 0;
     790:	e03ff915 	stw	zero,-28(fp)
	int err = -circle_radius;
     794:	e0bffe03 	ldbu	r2,-8(fp)
     798:	0085c83a 	sub	r2,zero,r2
     79c:	e0bffa15 	stw	r2,-24(fp)
	while(x >= y)
     7a0:	00008d06 	br	9d8 <drawcircle+0x27c>
	{
		*(pixel_ctrl_ptr + ((y+ys) << 9) + (xs+x)) = color;
     7a4:	e0fffd03 	ldbu	r3,-12(fp)
     7a8:	e0bff917 	ldw	r2,-28(fp)
     7ac:	1885883a 	add	r2,r3,r2
     7b0:	1004927a 	slli	r2,r2,9
     7b4:	1009883a 	mov	r4,r2
     7b8:	e0fffc0b 	ldhu	r3,-16(fp)
     7bc:	e0bff817 	ldw	r2,-32(fp)
     7c0:	1885883a 	add	r2,r3,r2
     7c4:	2085883a 	add	r2,r4,r2
     7c8:	1085883a 	add	r2,r2,r2
     7cc:	1007883a 	mov	r3,r2
     7d0:	e0bffb17 	ldw	r2,-20(fp)
     7d4:	10c5883a 	add	r2,r2,r3
     7d8:	e0ffff0b 	ldhu	r3,-4(fp)
     7dc:	10c0000d 	sth	r3,0(r2)
		*(pixel_ctrl_ptr + ((ys+y) << 9) + (xs-x)) = color;
     7e0:	e0fffd03 	ldbu	r3,-12(fp)
     7e4:	e0bff917 	ldw	r2,-28(fp)
     7e8:	1885883a 	add	r2,r3,r2
     7ec:	1004927a 	slli	r2,r2,9
     7f0:	1009883a 	mov	r4,r2
     7f4:	e0fffc0b 	ldhu	r3,-16(fp)
     7f8:	e0bff817 	ldw	r2,-32(fp)
     7fc:	1885c83a 	sub	r2,r3,r2
     800:	2085883a 	add	r2,r4,r2
     804:	1085883a 	add	r2,r2,r2
     808:	1007883a 	mov	r3,r2
     80c:	e0bffb17 	ldw	r2,-20(fp)
     810:	10c5883a 	add	r2,r2,r3
     814:	e0ffff0b 	ldhu	r3,-4(fp)
     818:	10c0000d 	sth	r3,0(r2)
		*(pixel_ctrl_ptr + ((ys-y) << 9) + (xs+x)) = color;
     81c:	e0fffd03 	ldbu	r3,-12(fp)
     820:	e0bff917 	ldw	r2,-28(fp)
     824:	1885c83a 	sub	r2,r3,r2
     828:	1004927a 	slli	r2,r2,9
     82c:	1009883a 	mov	r4,r2
     830:	e0fffc0b 	ldhu	r3,-16(fp)
     834:	e0bff817 	ldw	r2,-32(fp)
     838:	1885883a 	add	r2,r3,r2
     83c:	2085883a 	add	r2,r4,r2
     840:	1085883a 	add	r2,r2,r2
     844:	1007883a 	mov	r3,r2
     848:	e0bffb17 	ldw	r2,-20(fp)
     84c:	10c5883a 	add	r2,r2,r3
     850:	e0ffff0b 	ldhu	r3,-4(fp)
     854:	10c0000d 	sth	r3,0(r2)
		*(pixel_ctrl_ptr + ((ys-y) << 9) + (xs-x)) = color;
     858:	e0fffd03 	ldbu	r3,-12(fp)
     85c:	e0bff917 	ldw	r2,-28(fp)
     860:	1885c83a 	sub	r2,r3,r2
     864:	1004927a 	slli	r2,r2,9
     868:	1009883a 	mov	r4,r2
     86c:	e0fffc0b 	ldhu	r3,-16(fp)
     870:	e0bff817 	ldw	r2,-32(fp)
     874:	1885c83a 	sub	r2,r3,r2
     878:	2085883a 	add	r2,r4,r2
     87c:	1085883a 	add	r2,r2,r2
     880:	1007883a 	mov	r3,r2
     884:	e0bffb17 	ldw	r2,-20(fp)
     888:	10c5883a 	add	r2,r2,r3
     88c:	e0ffff0b 	ldhu	r3,-4(fp)
     890:	10c0000d 	sth	r3,0(r2)
		*(pixel_ctrl_ptr + ((ys+x) << 9) + (xs+y)) = color;
     894:	e0fffd03 	ldbu	r3,-12(fp)
     898:	e0bff817 	ldw	r2,-32(fp)
     89c:	1885883a 	add	r2,r3,r2
     8a0:	1004927a 	slli	r2,r2,9
     8a4:	1009883a 	mov	r4,r2
     8a8:	e0fffc0b 	ldhu	r3,-16(fp)
     8ac:	e0bff917 	ldw	r2,-28(fp)
     8b0:	1885883a 	add	r2,r3,r2
     8b4:	2085883a 	add	r2,r4,r2
     8b8:	1085883a 	add	r2,r2,r2
     8bc:	1007883a 	mov	r3,r2
     8c0:	e0bffb17 	ldw	r2,-20(fp)
     8c4:	10c5883a 	add	r2,r2,r3
     8c8:	e0ffff0b 	ldhu	r3,-4(fp)
     8cc:	10c0000d 	sth	r3,0(r2)
		*(pixel_ctrl_ptr + ((x+ys) << 9) + (xs-y)) = color;
     8d0:	e0fffd03 	ldbu	r3,-12(fp)
     8d4:	e0bff817 	ldw	r2,-32(fp)
     8d8:	1885883a 	add	r2,r3,r2
     8dc:	1004927a 	slli	r2,r2,9
     8e0:	1009883a 	mov	r4,r2
     8e4:	e0fffc0b 	ldhu	r3,-16(fp)
     8e8:	e0bff917 	ldw	r2,-28(fp)
     8ec:	1885c83a 	sub	r2,r3,r2
     8f0:	2085883a 	add	r2,r4,r2
     8f4:	1085883a 	add	r2,r2,r2
     8f8:	1007883a 	mov	r3,r2
     8fc:	e0bffb17 	ldw	r2,-20(fp)
     900:	10c5883a 	add	r2,r2,r3
     904:	e0ffff0b 	ldhu	r3,-4(fp)
     908:	10c0000d 	sth	r3,0(r2)
		*(pixel_ctrl_ptr + ((ys-x) << 9) + (xs+y)) = color;
     90c:	e0fffd03 	ldbu	r3,-12(fp)
     910:	e0bff817 	ldw	r2,-32(fp)
     914:	1885c83a 	sub	r2,r3,r2
     918:	1004927a 	slli	r2,r2,9
     91c:	1009883a 	mov	r4,r2
     920:	e0fffc0b 	ldhu	r3,-16(fp)
     924:	e0bff917 	ldw	r2,-28(fp)
     928:	1885883a 	add	r2,r3,r2
     92c:	2085883a 	add	r2,r4,r2
     930:	1085883a 	add	r2,r2,r2
     934:	1007883a 	mov	r3,r2
     938:	e0bffb17 	ldw	r2,-20(fp)
     93c:	10c5883a 	add	r2,r2,r3
     940:	e0ffff0b 	ldhu	r3,-4(fp)
     944:	10c0000d 	sth	r3,0(r2)
		*(pixel_ctrl_ptr + ((ys-x) << 9) + (xs-y)) = color;
     948:	e0fffd03 	ldbu	r3,-12(fp)
     94c:	e0bff817 	ldw	r2,-32(fp)
     950:	1885c83a 	sub	r2,r3,r2
     954:	1004927a 	slli	r2,r2,9
     958:	1009883a 	mov	r4,r2
     95c:	e0fffc0b 	ldhu	r3,-16(fp)
     960:	e0bff917 	ldw	r2,-28(fp)
     964:	1885c83a 	sub	r2,r3,r2
     968:	2085883a 	add	r2,r4,r2
     96c:	1085883a 	add	r2,r2,r2
     970:	1007883a 	mov	r3,r2
     974:	e0bffb17 	ldw	r2,-20(fp)
     978:	10c5883a 	add	r2,r2,r3
     97c:	e0ffff0b 	ldhu	r3,-4(fp)
     980:	10c0000d 	sth	r3,0(r2)

		err += y++;
     984:	e0bff917 	ldw	r2,-28(fp)
     988:	10c00044 	addi	r3,r2,1
     98c:	e0fff915 	stw	r3,-28(fp)
     990:	e0fffa17 	ldw	r3,-24(fp)
     994:	1885883a 	add	r2,r3,r2
     998:	e0bffa15 	stw	r2,-24(fp)
		err += y;
     99c:	e0fffa17 	ldw	r3,-24(fp)
     9a0:	e0bff917 	ldw	r2,-28(fp)
     9a4:	1885883a 	add	r2,r3,r2
     9a8:	e0bffa15 	stw	r2,-24(fp)
		if(err >= 0)
     9ac:	e0bffa17 	ldw	r2,-24(fp)
     9b0:	10000916 	blt	r2,zero,9d8 <drawcircle+0x27c>
		{
			x--;
     9b4:	e0bff817 	ldw	r2,-32(fp)
     9b8:	10bfffc4 	addi	r2,r2,-1
     9bc:	e0bff815 	stw	r2,-32(fp)
			err = err -x -x;
     9c0:	e0fffa17 	ldw	r3,-24(fp)
     9c4:	e0bff817 	ldw	r2,-32(fp)
     9c8:	1887c83a 	sub	r3,r3,r2
     9cc:	e0bff817 	ldw	r2,-32(fp)
     9d0:	1885c83a 	sub	r2,r3,r2
     9d4:	e0bffa15 	stw	r2,-24(fp)
void drawcircle(volatile short * pixel_ctrl_ptr, alt_u16 xs, alt_u8 ys, alt_u8 circle_radius, alt_u16 color)
{
	int x = circle_radius;
	int y = 0;
	int err = -circle_radius;
	while(x >= y)
     9d8:	e0fff817 	ldw	r3,-32(fp)
     9dc:	e0bff917 	ldw	r2,-28(fp)
     9e0:	18bf700e 	bge	r3,r2,7a4 <drawcircle+0x48>
			err = err -x -x;
		}


	}
}
     9e4:	e037883a 	mov	sp,fp
     9e8:	df000017 	ldw	fp,0(sp)
     9ec:	dec00104 	addi	sp,sp,4
     9f0:	f800283a 	ret

000009f4 <wait_for_vsync>:
void wait_for_vsync(volatile short * buffer_register,volatile short *  dma_control)
{
     9f4:	defffd04 	addi	sp,sp,-12
     9f8:	df000215 	stw	fp,8(sp)
     9fc:	df000204 	addi	fp,sp,8
     a00:	e13ffe15 	stw	r4,-8(fp)
     a04:	e17fff15 	stw	r5,-4(fp)
	*(buffer_register) = 1; //swap backbuffer and front buffer (which are the same at the moment)
     a08:	e0bffe17 	ldw	r2,-8(fp)
     a0c:	00c00044 	movi	r3,1
     a10:	10c0000d 	sth	r3,0(r2)

	while(*(dma_control) & 1) //if this bit becomes 0, the screen has updated
     a14:	0001883a 	nop
     a18:	e0bfff17 	ldw	r2,-4(fp)
     a1c:	1080000b 	ldhu	r2,0(r2)
     a20:	10bfffcc 	andi	r2,r2,65535
     a24:	1080004c 	andi	r2,r2,1
     a28:	103ffb1e 	bne	r2,zero,a18 <wait_for_vsync+0x24>
	{
	}
}
     a2c:	e037883a 	mov	sp,fp
     a30:	df000017 	ldw	fp,0(sp)
     a34:	dec00104 	addi	sp,sp,4
     a38:	f800283a 	ret

00000a3c <drawtext>:
void drawtext(volatile char * char_ctrl_ptr, char * text_ptr,alt_u16 x, alt_u8 y)
{
     a3c:	defffa04 	addi	sp,sp,-24
     a40:	df000515 	stw	fp,20(sp)
     a44:	df000504 	addi	fp,sp,20
     a48:	e13ffc15 	stw	r4,-16(fp)
     a4c:	e17ffd15 	stw	r5,-12(fp)
     a50:	3007883a 	mov	r3,r6
     a54:	3805883a 	mov	r2,r7
     a58:	e0fffe0d 	sth	r3,-8(fp)
     a5c:	e0bfff05 	stb	r2,-4(fp)
	int offset = (y<<7)+x;
     a60:	e0bfff03 	ldbu	r2,-4(fp)
     a64:	100691fa 	slli	r3,r2,7
     a68:	e0bffe0b 	ldhu	r2,-8(fp)
     a6c:	1885883a 	add	r2,r3,r2
     a70:	e0bffb15 	stw	r2,-20(fp)
	while(*(text_ptr))
     a74:	00000c06 	br	aa8 <drawtext+0x6c>
	{
		*(char_ctrl_ptr + offset) = *(text_ptr); //write to character buffer
     a78:	e0bffb17 	ldw	r2,-20(fp)
     a7c:	e0fffc17 	ldw	r3,-16(fp)
     a80:	1885883a 	add	r2,r3,r2
     a84:	e0fffd17 	ldw	r3,-12(fp)
     a88:	18c00003 	ldbu	r3,0(r3)
     a8c:	10c00005 	stb	r3,0(r2)
		++text_ptr;
     a90:	e0bffd17 	ldw	r2,-12(fp)
     a94:	10800044 	addi	r2,r2,1
     a98:	e0bffd15 	stw	r2,-12(fp)
		++offset;
     a9c:	e0bffb17 	ldw	r2,-20(fp)
     aa0:	10800044 	addi	r2,r2,1
     aa4:	e0bffb15 	stw	r2,-20(fp)
	}
}
void drawtext(volatile char * char_ctrl_ptr, char * text_ptr,alt_u16 x, alt_u8 y)
{
	int offset = (y<<7)+x;
	while(*(text_ptr))
     aa8:	e0bffd17 	ldw	r2,-12(fp)
     aac:	10800003 	ldbu	r2,0(r2)
     ab0:	10803fcc 	andi	r2,r2,255
     ab4:	1080201c 	xori	r2,r2,128
     ab8:	10bfe004 	addi	r2,r2,-128
     abc:	103fee1e 	bne	r2,zero,a78 <drawtext+0x3c>
	{
		*(char_ctrl_ptr + offset) = *(text_ptr); //write to character buffer
		++text_ptr;
		++offset;
	}
}
     ac0:	e037883a 	mov	sp,fp
     ac4:	df000017 	ldw	fp,0(sp)
     ac8:	dec00104 	addi	sp,sp,4
     acc:	f800283a 	ret

00000ad0 <task1>:
/* Definition of Task Priorities */
#define TASK1_PRIORITY      2
#define TASK2_PRIORITY      1

void task1(void* pdata)
{
     ad0:	defff904 	addi	sp,sp,-28
     ad4:	dfc00615 	stw	ra,24(sp)
     ad8:	df000515 	stw	fp,20(sp)
     adc:	df000504 	addi	fp,sp,20
     ae0:	e13fff15 	stw	r4,-4(fp)

	OSTimeDly(1);
     ae4:	01000044 	movi	r4,1
     ae8:	0008b980 	call	8b98 <OSTimeDly>
	volatile short * pixel_ctrl_ptr = (volatile short *) pdata;
     aec:	e0bfff17 	ldw	r2,-4(fp)
     af0:	e0bffe15 	stw	r2,-8(fp)

	int i=0;
     af4:	e03ffd15 	stw	zero,-12(fp)
	//d-pad
	drawrectangle( pixel_ctrl_ptr , 80, 100, 10, 15, 0xFFFF);
     af8:	008003c4 	movi	r2,15
     afc:	d8800015 	stw	r2,0(sp)
     b00:	00bfffd4 	movui	r2,65535
     b04:	d8800115 	stw	r2,4(sp)
     b08:	e13ffe17 	ldw	r4,-8(fp)
     b0c:	01401404 	movi	r5,80
     b10:	01801904 	movi	r6,100
     b14:	01c00284 	movi	r7,10
     b18:	00004000 	call	400 <drawrectangle>
	drawrectangle( pixel_ctrl_ptr , 80, 130, 10, 15, 0xFFFF);
     b1c:	008003c4 	movi	r2,15
     b20:	d8800015 	stw	r2,0(sp)
     b24:	00bfffd4 	movui	r2,65535
     b28:	d8800115 	stw	r2,4(sp)
     b2c:	e13ffe17 	ldw	r4,-8(fp)
     b30:	01401404 	movi	r5,80
     b34:	01802084 	movi	r6,130
     b38:	01c00284 	movi	r7,10
     b3c:	00004000 	call	400 <drawrectangle>
	drawrectangle( pixel_ctrl_ptr , 62, 117, 15, 10, 0xFFFF);
     b40:	00800284 	movi	r2,10
     b44:	d8800015 	stw	r2,0(sp)
     b48:	00bfffd4 	movui	r2,65535
     b4c:	d8800115 	stw	r2,4(sp)
     b50:	e13ffe17 	ldw	r4,-8(fp)
     b54:	01400f84 	movi	r5,62
     b58:	01801d44 	movi	r6,117
     b5c:	01c003c4 	movi	r7,15
     b60:	00004000 	call	400 <drawrectangle>
	drawrectangle( pixel_ctrl_ptr , 93, 117, 15, 10, 0xFFFF);
     b64:	00800284 	movi	r2,10
     b68:	d8800015 	stw	r2,0(sp)
     b6c:	00bfffd4 	movui	r2,65535
     b70:	d8800115 	stw	r2,4(sp)
     b74:	e13ffe17 	ldw	r4,-8(fp)
     b78:	01401744 	movi	r5,93
     b7c:	01801d44 	movi	r6,117
     b80:	01c003c4 	movi	r7,15
     b84:	00004000 	call	400 <drawrectangle>

	//select start
	drawrectangle( pixel_ctrl_ptr , 130, 117,15, 10, 0xFFFF);
     b88:	00800284 	movi	r2,10
     b8c:	d8800015 	stw	r2,0(sp)
     b90:	00bfffd4 	movui	r2,65535
     b94:	d8800115 	stw	r2,4(sp)
     b98:	e13ffe17 	ldw	r4,-8(fp)
     b9c:	01402084 	movi	r5,130
     ba0:	01801d44 	movi	r6,117
     ba4:	01c003c4 	movi	r7,15
     ba8:	00004000 	call	400 <drawrectangle>
	drawrectangle( pixel_ctrl_ptr , 160, 117, 15, 10, 0xFFFF);
     bac:	00800284 	movi	r2,10
     bb0:	d8800015 	stw	r2,0(sp)
     bb4:	00bfffd4 	movui	r2,65535
     bb8:	d8800115 	stw	r2,4(sp)
     bbc:	e13ffe17 	ldw	r4,-8(fp)
     bc0:	01402804 	movi	r5,160
     bc4:	01801d44 	movi	r6,117
     bc8:	01c003c4 	movi	r7,15
     bcc:	00004000 	call	400 <drawrectangle>

	//buttons
	drawcircle( pixel_ctrl_ptr ,205,121,7,0xFFFF);
     bd0:	00bfffd4 	movui	r2,65535
     bd4:	d8800015 	stw	r2,0(sp)
     bd8:	e13ffe17 	ldw	r4,-8(fp)
     bdc:	01403344 	movi	r5,205
     be0:	01801e44 	movi	r6,121
     be4:	01c001c4 	movi	r7,7
     be8:	000075c0 	call	75c <drawcircle>
	drawcircle( pixel_ctrl_ptr ,235,121,7,0xFFFF);
     bec:	00bfffd4 	movui	r2,65535
     bf0:	d8800015 	stw	r2,0(sp)
     bf4:	e13ffe17 	ldw	r4,-8(fp)
     bf8:	01403ac4 	movi	r5,235
     bfc:	01801e44 	movi	r6,121
     c00:	01c001c4 	movi	r7,7
     c04:	000075c0 	call	75c <drawcircle>
	drawcircle( pixel_ctrl_ptr ,220,106,7,0xFFFF);
     c08:	00bfffd4 	movui	r2,65535
     c0c:	d8800015 	stw	r2,0(sp)
     c10:	e13ffe17 	ldw	r4,-8(fp)
     c14:	01403704 	movi	r5,220
     c18:	01801a84 	movi	r6,106
     c1c:	01c001c4 	movi	r7,7
     c20:	000075c0 	call	75c <drawcircle>
	drawcircle( pixel_ctrl_ptr ,220,136,7,0xFFFF);
     c24:	00bfffd4 	movui	r2,65535
     c28:	d8800015 	stw	r2,0(sp)
     c2c:	e13ffe17 	ldw	r4,-8(fp)
     c30:	01403704 	movi	r5,220
     c34:	01802204 	movi	r6,136
     c38:	01c001c4 	movi	r7,7
     c3c:	000075c0 	call	75c <drawcircle>

	//upper keys
	drawrectangle( pixel_ctrl_ptr , 75, 80, 20, 10, 0xFFFF);
     c40:	00800284 	movi	r2,10
     c44:	d8800015 	stw	r2,0(sp)
     c48:	00bfffd4 	movui	r2,65535
     c4c:	d8800115 	stw	r2,4(sp)
     c50:	e13ffe17 	ldw	r4,-8(fp)
     c54:	014012c4 	movi	r5,75
     c58:	01801404 	movi	r6,80
     c5c:	01c00504 	movi	r7,20
     c60:	00004000 	call	400 <drawrectangle>
	drawrectangle( pixel_ctrl_ptr , 75, 65, 20, 10, 0xFFFF);
     c64:	00800284 	movi	r2,10
     c68:	d8800015 	stw	r2,0(sp)
     c6c:	00bfffd4 	movui	r2,65535
     c70:	d8800115 	stw	r2,4(sp)
     c74:	e13ffe17 	ldw	r4,-8(fp)
     c78:	014012c4 	movi	r5,75
     c7c:	01801044 	movi	r6,65
     c80:	01c00504 	movi	r7,20
     c84:	00004000 	call	400 <drawrectangle>
	drawrectangle( pixel_ctrl_ptr , 210, 80, 20,10, 0xFFFF);
     c88:	00800284 	movi	r2,10
     c8c:	d8800015 	stw	r2,0(sp)
     c90:	00bfffd4 	movui	r2,65535
     c94:	d8800115 	stw	r2,4(sp)
     c98:	e13ffe17 	ldw	r4,-8(fp)
     c9c:	01403484 	movi	r5,210
     ca0:	01801404 	movi	r6,80
     ca4:	01c00504 	movi	r7,20
     ca8:	00004000 	call	400 <drawrectangle>
	drawrectangle( pixel_ctrl_ptr , 210, 65, 20, 10, 0xFFFF);
     cac:	00800284 	movi	r2,10
     cb0:	d8800015 	stw	r2,0(sp)
     cb4:	00bfffd4 	movui	r2,65535
     cb8:	d8800115 	stw	r2,4(sp)
     cbc:	e13ffe17 	ldw	r4,-8(fp)
     cc0:	01403484 	movi	r5,210
     cc4:	01801044 	movi	r6,65
     cc8:	01c00504 	movi	r7,20
     ccc:	00004000 	call	400 <drawrectangle>

	//analog sticks
	drawcircle( pixel_ctrl_ptr ,110,155,15,0xFFFF);
     cd0:	00bfffd4 	movui	r2,65535
     cd4:	d8800015 	stw	r2,0(sp)
     cd8:	e13ffe17 	ldw	r4,-8(fp)
     cdc:	01401b84 	movi	r5,110
     ce0:	018026c4 	movi	r6,155
     ce4:	01c003c4 	movi	r7,15
     ce8:	000075c0 	call	75c <drawcircle>
	drawcircle( pixel_ctrl_ptr ,195,155,15,0xFFFF);
     cec:	00bfffd4 	movui	r2,65535
     cf0:	d8800015 	stw	r2,0(sp)
     cf4:	e13ffe17 	ldw	r4,-8(fp)
     cf8:	014030c4 	movi	r5,195
     cfc:	018026c4 	movi	r6,155
     d00:	01c003c4 	movi	r7,15
     d04:	000075c0 	call	75c <drawcircle>
	drawcircle( pixel_ctrl_ptr ,110,155,9,0xFFFF);
     d08:	00bfffd4 	movui	r2,65535
     d0c:	d8800015 	stw	r2,0(sp)
     d10:	e13ffe17 	ldw	r4,-8(fp)
     d14:	01401b84 	movi	r5,110
     d18:	018026c4 	movi	r6,155
     d1c:	01c00244 	movi	r7,9
     d20:	000075c0 	call	75c <drawcircle>
	drawcircle( pixel_ctrl_ptr ,195,155,9,0xFFFF);
     d24:	00bfffd4 	movui	r2,65535
     d28:	d8800015 	stw	r2,0(sp)
     d2c:	e13ffe17 	ldw	r4,-8(fp)
     d30:	014030c4 	movi	r5,195
     d34:	018026c4 	movi	r6,155
     d38:	01c00244 	movi	r7,9
     d3c:	000075c0 	call	75c <drawcircle>
	while(1)
	{
		if(i>=10)
     d40:	e0bffd17 	ldw	r2,-12(fp)
     d44:	10800290 	cmplti	r2,r2,10
     d48:	10001a1e 	bne	r2,zero,db4 <task1+0x2e4>
		{
			drawline(pixel_ctrl_ptr,0+i-10,50,0+i-10,60,0x0000);
     d4c:	e0bffd17 	ldw	r2,-12(fp)
     d50:	10bffd84 	addi	r2,r2,-10
     d54:	117fffcc 	andi	r5,r2,65535
     d58:	e0bffd17 	ldw	r2,-12(fp)
     d5c:	10bffd84 	addi	r2,r2,-10
     d60:	10ffffcc 	andi	r3,r2,65535
     d64:	00800f04 	movi	r2,60
     d68:	d8800015 	stw	r2,0(sp)
     d6c:	d8000115 	stw	zero,4(sp)
     d70:	e13ffe17 	ldw	r4,-8(fp)
     d74:	01800c84 	movi	r6,50
     d78:	180f883a 	mov	r7,r3
     d7c:	00005440 	call	544 <drawline>
			drawline(pixel_ctrl_ptr,0+i-11,50,0+i-11,60,0x0000);
     d80:	e0bffd17 	ldw	r2,-12(fp)
     d84:	10bffd44 	addi	r2,r2,-11
     d88:	117fffcc 	andi	r5,r2,65535
     d8c:	e0bffd17 	ldw	r2,-12(fp)
     d90:	10bffd44 	addi	r2,r2,-11
     d94:	10ffffcc 	andi	r3,r2,65535
     d98:	00800f04 	movi	r2,60
     d9c:	d8800015 	stw	r2,0(sp)
     da0:	d8000115 	stw	zero,4(sp)
     da4:	e13ffe17 	ldw	r4,-8(fp)
     da8:	01800c84 	movi	r6,50
     dac:	180f883a 	mov	r7,r3
     db0:	00005440 	call	544 <drawline>
		}
		if(i<=320)
     db4:	e0bffd17 	ldw	r2,-12(fp)
     db8:	10805048 	cmpgei	r2,r2,321
     dbc:	10001a1e 	bne	r2,zero,e28 <task1+0x358>
		{
			drawline(pixel_ctrl_ptr,0+i,50,0+i,60,0x0FFF);
     dc0:	e0bffd17 	ldw	r2,-12(fp)
     dc4:	117fffcc 	andi	r5,r2,65535
     dc8:	e0bffd17 	ldw	r2,-12(fp)
     dcc:	10ffffcc 	andi	r3,r2,65535
     dd0:	00800f04 	movi	r2,60
     dd4:	d8800015 	stw	r2,0(sp)
     dd8:	0083ffc4 	movi	r2,4095
     ddc:	d8800115 	stw	r2,4(sp)
     de0:	e13ffe17 	ldw	r4,-8(fp)
     de4:	01800c84 	movi	r6,50
     de8:	180f883a 	mov	r7,r3
     dec:	00005440 	call	544 <drawline>
			drawline(pixel_ctrl_ptr,0+i+1,50,0+i+1,60,0x0FFF);
     df0:	e0bffd17 	ldw	r2,-12(fp)
     df4:	10800044 	addi	r2,r2,1
     df8:	117fffcc 	andi	r5,r2,65535
     dfc:	e0bffd17 	ldw	r2,-12(fp)
     e00:	10800044 	addi	r2,r2,1
     e04:	10ffffcc 	andi	r3,r2,65535
     e08:	00800f04 	movi	r2,60
     e0c:	d8800015 	stw	r2,0(sp)
     e10:	0083ffc4 	movi	r2,4095
     e14:	d8800115 	stw	r2,4(sp)
     e18:	e13ffe17 	ldw	r4,-8(fp)
     e1c:	01800c84 	movi	r6,50
     e20:	180f883a 	mov	r7,r3
     e24:	00005440 	call	544 <drawline>
		}
		if(i==330)
     e28:	e0bffd17 	ldw	r2,-12(fp)
     e2c:	10805298 	cmpnei	r2,r2,330
     e30:	1000011e 	bne	r2,zero,e38 <task1+0x368>
		{
			i = 0;
     e34:	e03ffd15 	stw	zero,-12(fp)
		}
		i++;
     e38:	e0bffd17 	ldw	r2,-12(fp)
     e3c:	10800044 	addi	r2,r2,1
     e40:	e0bffd15 	stw	r2,-12(fp)
		OSTimeDly(1);
     e44:	01000044 	movi	r4,1
     e48:	0008b980 	call	8b98 <OSTimeDly>
		//wait_for_vsync(buffer_register,dma_control);
	}
     e4c:	003fbc06 	br	d40 <task1+0x270>

00000e50 <task2>:
}
void task2(void* pdata)
{
     e50:	defffd04 	addi	sp,sp,-12
     e54:	dfc00215 	stw	ra,8(sp)
     e58:	df000115 	stw	fp,4(sp)
     e5c:	df000104 	addi	fp,sp,4
     e60:	e13fff15 	stw	r4,-4(fp)

		drawtext((volatile char* )pdata, "FPGA_GAME\0" ,36, 10);
     e64:	e13fff17 	ldw	r4,-4(fp)
     e68:	01400074 	movhi	r5,1
     e6c:	2974c904 	addi	r5,r5,-11484
     e70:	01800904 	movi	r6,36
     e74:	01c00284 	movi	r7,10
     e78:	0000a3c0 	call	a3c <drawtext>
		OSTaskDel(OS_PRIO_SELF);
     e7c:	01003fc4 	movi	r4,255
     e80:	0007b8c0 	call	7b8c <OSTaskDel>

}
     e84:	e037883a 	mov	sp,fp
     e88:	dfc00117 	ldw	ra,4(sp)
     e8c:	df000017 	ldw	fp,0(sp)
     e90:	dec00204 	addi	sp,sp,8
     e94:	f800283a 	ret

00000e98 <main>:
int main(void)
{
     e98:	defff704 	addi	sp,sp,-36
     e9c:	dfc00815 	stw	ra,32(sp)
     ea0:	df000715 	stw	fp,28(sp)
     ea4:	df000704 	addi	fp,sp,28
	OSInit();
     ea8:	0001cdc0 	call	1cdc <OSInit>
	volatile short * pixel_ctrl_ptr = pixel_buffer_start;
     eac:	d0a00017 	ldw	r2,-32768(gp)
     eb0:	e0bffe15 	stw	r2,-8(fp)
	volatile char * char_ctrl_ptr = character_buffer;
     eb4:	d0a00317 	ldw	r2,-32756(gp)
     eb8:	e0bfff15 	stw	r2,-4(fp)

	*(dma_control) &= (1<<2); //Enable DMA controller
     ebc:	d0a00217 	ldw	r2,-32760(gp)
     ec0:	d0e00217 	ldw	r3,-32760(gp)
     ec4:	18c0000b 	ldhu	r3,0(r3)
     ec8:	18c0010c 	andi	r3,r3,4
     ecc:	10c0000d 	sth	r3,0(r2)

	clearscreen(pixel_ctrl_ptr);
     ed0:	e13ffe17 	ldw	r4,-8(fp)
     ed4:	00002800 	call	280 <clearscreen>
	drawbox(pixel_ctrl_ptr, 34*4, 9*4, 48, 10,0xFA01);
     ed8:	00800284 	movi	r2,10
     edc:	d8800015 	stw	r2,0(sp)
     ee0:	00be8054 	movui	r2,64001
     ee4:	d8800115 	stw	r2,4(sp)
     ee8:	e13ffe17 	ldw	r4,-8(fp)
     eec:	01402204 	movi	r5,136
     ef0:	01800904 	movi	r6,36
     ef4:	01c00c04 	movi	r7,48
     ef8:	00003340 	call	334 <drawbox>

	wait_for_vsync(buffer_register,dma_control);
     efc:	d0e00117 	ldw	r3,-32764(gp)
     f00:	d0a00217 	ldw	r2,-32760(gp)
     f04:	1809883a 	mov	r4,r3
     f08:	100b883a 	mov	r5,r2
     f0c:	00009f40 	call	9f4 <wait_for_vsync>




	OSTaskCreateExt(task1,
     f10:	00800084 	movi	r2,2
     f14:	d8800015 	stw	r2,0(sp)
     f18:	00800074 	movhi	r2,1
     f1c:	1082e304 	addi	r2,r2,2956
     f20:	d8800115 	stw	r2,4(sp)
     f24:	00820004 	movi	r2,2048
     f28:	d8800215 	stw	r2,8(sp)
     f2c:	d8000315 	stw	zero,12(sp)
     f30:	d8000415 	stw	zero,16(sp)
     f34:	01000034 	movhi	r4,0
     f38:	2102b404 	addi	r4,r4,2768
     f3c:	e17ffe17 	ldw	r5,-8(fp)
     f40:	01800074 	movhi	r6,1
     f44:	318ae204 	addi	r6,r6,11144
     f48:	01c00084 	movi	r7,2
     f4c:	00079a00 	call	79a0 <OSTaskCreateExt>
			TASK_STACKSIZE,
			NULL,
			0);


	OSTaskCreateExt(task2,
     f50:	00800044 	movi	r2,1
     f54:	d8800015 	stw	r2,0(sp)
     f58:	00800074 	movhi	r2,1
     f5c:	108ae304 	addi	r2,r2,11148
     f60:	d8800115 	stw	r2,4(sp)
     f64:	00820004 	movi	r2,2048
     f68:	d8800215 	stw	r2,8(sp)
     f6c:	d8000315 	stw	zero,12(sp)
     f70:	d8000415 	stw	zero,16(sp)
     f74:	01000034 	movhi	r4,0
     f78:	21039404 	addi	r4,r4,3664
     f7c:	e17fff17 	ldw	r5,-4(fp)
     f80:	01800074 	movhi	r6,1
     f84:	3192e204 	addi	r6,r6,19336
     f88:	01c00044 	movi	r7,1
     f8c:	00079a00 	call	79a0 <OSTaskCreateExt>
			TASK2_PRIORITY,
			task2_stk,
			TASK_STACKSIZE,
			NULL,
			0);
	OSStart();
     f90:	00020000 	call	2000 <OSStart>
	return 0;
     f94:	0005883a 	mov	r2,zero
}
     f98:	e037883a 	mov	sp,fp
     f9c:	dfc00117 	ldw	ra,4(sp)
     fa0:	df000017 	ldw	fp,0(sp)
     fa4:	dec00204 	addi	sp,sp,8
     fa8:	f800283a 	ret

00000fac <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
     fac:	defffc04 	addi	sp,sp,-16
     fb0:	df000315 	stw	fp,12(sp)
     fb4:	df000304 	addi	fp,sp,12
     fb8:	e13ffd15 	stw	r4,-12(fp)
     fbc:	e17ffe15 	stw	r5,-8(fp)
     fc0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
     fc4:	e0fffe17 	ldw	r3,-8(fp)
     fc8:	e0bffd17 	ldw	r2,-12(fp)
     fcc:	18800c26 	beq	r3,r2,1000 <alt_load_section+0x54>
  {
    while( to != end )
     fd0:	00000806 	br	ff4 <alt_load_section+0x48>
    {
      *to++ = *from++;
     fd4:	e0bffe17 	ldw	r2,-8(fp)
     fd8:	10c00104 	addi	r3,r2,4
     fdc:	e0fffe15 	stw	r3,-8(fp)
     fe0:	e0fffd17 	ldw	r3,-12(fp)
     fe4:	19000104 	addi	r4,r3,4
     fe8:	e13ffd15 	stw	r4,-12(fp)
     fec:	18c00017 	ldw	r3,0(r3)
     ff0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     ff4:	e0fffe17 	ldw	r3,-8(fp)
     ff8:	e0bfff17 	ldw	r2,-4(fp)
     ffc:	18bff51e 	bne	r3,r2,fd4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    1000:	e037883a 	mov	sp,fp
    1004:	df000017 	ldw	fp,0(sp)
    1008:	dec00104 	addi	sp,sp,4
    100c:	f800283a 	ret

00001010 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    1010:	defffe04 	addi	sp,sp,-8
    1014:	dfc00115 	stw	ra,4(sp)
    1018:	df000015 	stw	fp,0(sp)
    101c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    1020:	01000074 	movhi	r4,1
    1024:	213c2504 	addi	r4,r4,-3948
    1028:	01400074 	movhi	r5,1
    102c:	29758804 	addi	r5,r5,-10720
    1030:	01800074 	movhi	r6,1
    1034:	31bc2504 	addi	r6,r6,-3948
    1038:	0000fac0 	call	fac <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    103c:	01000034 	movhi	r4,0
    1040:	21000804 	addi	r4,r4,32
    1044:	01400034 	movhi	r5,0
    1048:	29400804 	addi	r5,r5,32
    104c:	01800034 	movhi	r6,0
    1050:	31809104 	addi	r6,r6,580
    1054:	0000fac0 	call	fac <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    1058:	01000074 	movhi	r4,1
    105c:	2134c904 	addi	r4,r4,-11484
    1060:	01400074 	movhi	r5,1
    1064:	2974c904 	addi	r5,r5,-11484
    1068:	01800074 	movhi	r6,1
    106c:	31b58804 	addi	r6,r6,-10720
    1070:	0000fac0 	call	fac <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1074:	000bb480 	call	bb48 <alt_dcache_flush_all>
  alt_icache_flush_all();
    1078:	000bdcc0 	call	bdcc <alt_icache_flush_all>
}
    107c:	e037883a 	mov	sp,fp
    1080:	dfc00117 	ldw	ra,4(sp)
    1084:	df000017 	ldw	fp,0(sp)
    1088:	dec00204 	addi	sp,sp,8
    108c:	f800283a 	ret

00001090 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1090:	defff904 	addi	sp,sp,-28
    1094:	dfc00615 	stw	ra,24(sp)
    1098:	df000515 	stw	fp,20(sp)
    109c:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    10a0:	0009883a 	mov	r4,zero
    10a4:	00091380 	call	9138 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    10a8:	0001cdc0 	call	1cdc <OSInit>
    10ac:	01000044 	movi	r4,1
    10b0:	000684c0 	call	684c <OSSemCreate>
    10b4:	1007883a 	mov	r3,r2
    10b8:	00800074 	movhi	r2,1
    10bc:	1082c604 	addi	r2,r2,2840
    10c0:	10c00015 	stw	r3,0(r2)
    10c4:	01000044 	movi	r4,1
    10c8:	000684c0 	call	684c <OSSemCreate>
    10cc:	1007883a 	mov	r3,r2
    10d0:	00800074 	movhi	r2,1
    10d4:	1082c804 	addi	r2,r2,2848
    10d8:	10c00015 	stw	r3,0(r2)
    10dc:	00800074 	movhi	r2,1
    10e0:	1082dd04 	addi	r2,r2,2932
    10e4:	e0bffc15 	stw	r2,-16(fp)
    10e8:	00800044 	movi	r2,1
    10ec:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    10f0:	e0bffd0b 	ldhu	r2,-12(fp)
    10f4:	1009883a 	mov	r4,r2
    10f8:	000684c0 	call	684c <OSSemCreate>
    10fc:	1007883a 	mov	r3,r2
    1100:	e0bffc17 	ldw	r2,-16(fp)
    1104:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    1108:	000916c0 	call	916c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    110c:	01000074 	movhi	r4,1
    1110:	2134cc04 	addi	r4,r4,-11472
    1114:	01400074 	movhi	r5,1
    1118:	2974cc04 	addi	r5,r5,-11472
    111c:	01800074 	movhi	r6,1
    1120:	31b4cc04 	addi	r6,r6,-11472
    1124:	000bebc0 	call	bebc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    1128:	000bc840 	call	bc84 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    112c:	01000074 	movhi	r4,1
    1130:	212f3804 	addi	r4,r4,-17184
    1134:	000cbe00 	call	cbe0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    1138:	d126cb17 	ldw	r4,-25812(gp)
    113c:	d0e6cc17 	ldw	r3,-25808(gp)
    1140:	d0a6cd17 	ldw	r2,-25804(gp)
    1144:	180b883a 	mov	r5,r3
    1148:	100d883a 	mov	r6,r2
    114c:	0000e980 	call	e98 <main>
    1150:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
    1154:	01000044 	movi	r4,1
    1158:	000ba780 	call	ba78 <close>
  exit (result);
    115c:	e13ffb17 	ldw	r4,-20(fp)
    1160:	000cbf40 	call	cbf4 <exit>

00001164 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    1164:	deffdf04 	addi	sp,sp,-132
    1168:	dfc02015 	stw	ra,128(sp)
    116c:	df001f15 	stw	fp,124(sp)
    1170:	df001f04 	addi	fp,sp,124
    1174:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    1178:	e0bfe204 	addi	r2,fp,-120
    117c:	01003fc4 	movi	r4,255
    1180:	100b883a 	mov	r5,r2
    1184:	0008a000 	call	8a00 <OSTaskQuery>
    1188:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    118c:	e0bffe83 	ldbu	r2,-6(fp)
    1190:	10803fcc 	andi	r2,r2,255
    1194:	10000126 	beq	r2,zero,119c <__env_lock+0x38>
    return;
    1198:	00001d06 	br	1210 <__env_lock+0xac>

  id = tcb.OSTCBPrio;
    119c:	e0bfee83 	ldbu	r2,-70(fp)
    11a0:	10803fcc 	andi	r2,r2,255
    11a4:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    11a8:	d0e6cf17 	ldw	r3,-25796(gp)
    11ac:	e0bffd04 	addi	r2,fp,-12
    11b0:	1809883a 	mov	r4,r3
    11b4:	100b883a 	mov	r5,r2
    11b8:	00070980 	call	7098 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    11bc:	e0bffe43 	ldbu	r2,-7(fp)
    11c0:	10803fcc 	andi	r2,r2,255
    11c4:	10000726 	beq	r2,zero,11e4 <__env_lock+0x80>
    11c8:	d0a00417 	ldw	r2,-32752(gp)
    11cc:	e0ffe117 	ldw	r3,-124(fp)
    11d0:	1880041e 	bne	r3,r2,11e4 <__env_lock+0x80>
  {
    /* we do; just count the recursion */

    locks++;
    11d4:	d0a6ce17 	ldw	r2,-25800(gp)
    11d8:	10800044 	addi	r2,r2,1
    11dc:	d0a6ce15 	stw	r2,-25800(gp)
    11e0:	00000a06 	br	120c <__env_lock+0xa8>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    11e4:	d0e6cf17 	ldw	r3,-25796(gp)
    11e8:	e0bffe84 	addi	r2,fp,-6
    11ec:	1809883a 	mov	r4,r3
    11f0:	000b883a 	mov	r5,zero
    11f4:	100d883a 	mov	r6,r2
    11f8:	0006bb40 	call	6bb4 <OSSemPend>
    locks  = 1;
    11fc:	00800044 	movi	r2,1
    1200:	d0a6ce15 	stw	r2,-25800(gp)
    lockid = id;
    1204:	e0bfe117 	ldw	r2,-124(fp)
    1208:	d0a00415 	stw	r2,-32752(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    120c:	0001883a 	nop
}
    1210:	e037883a 	mov	sp,fp
    1214:	dfc00117 	ldw	ra,4(sp)
    1218:	df000017 	ldw	fp,0(sp)
    121c:	dec00204 	addi	sp,sp,8
    1220:	f800283a 	ret

00001224 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    1224:	defffd04 	addi	sp,sp,-12
    1228:	dfc00215 	stw	ra,8(sp)
    122c:	df000115 	stw	fp,4(sp)
    1230:	df000104 	addi	fp,sp,4
    1234:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    1238:	d0a6ce17 	ldw	r2,-25800(gp)
    123c:	1000011e 	bne	r2,zero,1244 <__env_unlock+0x20>
    return;
    1240:	00000a06 	br	126c <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    1244:	d0a6ce17 	ldw	r2,-25800(gp)
    1248:	10bfffc4 	addi	r2,r2,-1
    124c:	d0a6ce15 	stw	r2,-25800(gp)
    1250:	d0a6ce17 	ldw	r2,-25800(gp)
    1254:	1000051e 	bne	r2,zero,126c <__env_unlock+0x48>
  {
    lockid = -1;
    1258:	00bfffc4 	movi	r2,-1
    125c:	d0a00415 	stw	r2,-32752(gp)
    OSSemPost( alt_envsem );
    1260:	d0a6cf17 	ldw	r2,-25796(gp)
    1264:	1009883a 	mov	r4,r2
    1268:	0006f880 	call	6f88 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    126c:	e037883a 	mov	sp,fp
    1270:	dfc00117 	ldw	ra,4(sp)
    1274:	df000017 	ldw	fp,0(sp)
    1278:	dec00204 	addi	sp,sp,8
    127c:	f800283a 	ret

00001280 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    1280:	deffdb04 	addi	sp,sp,-148
    1284:	dfc02415 	stw	ra,144(sp)
    1288:	df002315 	stw	fp,140(sp)
    128c:	df002304 	addi	fp,sp,140
    1290:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    1294:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    1298:	00800074 	movhi	r2,1
    129c:	1082c944 	addi	r2,r2,2853
    12a0:	10800003 	ldbu	r2,0(r2)
    12a4:	10803fcc 	andi	r2,r2,255
    12a8:	10800060 	cmpeqi	r2,r2,1
    12ac:	1000011e 	bne	r2,zero,12b4 <__malloc_lock+0x34>
      return;
    12b0:	00003606 	br	138c <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    12b4:	e0bfe204 	addi	r2,fp,-120
    12b8:	01003fc4 	movi	r4,255
    12bc:	100b883a 	mov	r5,r2
    12c0:	0008a000 	call	8a00 <OSTaskQuery>
    12c4:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    12c8:	e0bffe83 	ldbu	r2,-6(fp)
    12cc:	10803fcc 	andi	r2,r2,255
    12d0:	10000126 	beq	r2,zero,12d8 <__malloc_lock+0x58>
    return;
    12d4:	00002d06 	br	138c <__malloc_lock+0x10c>

  id = tcb.OSTCBPrio;
    12d8:	e0bfee83 	ldbu	r2,-70(fp)
    12dc:	10803fcc 	andi	r2,r2,255
    12e0:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    12e4:	d0e6d117 	ldw	r3,-25788(gp)
    12e8:	e0bffd04 	addi	r2,fp,-12
    12ec:	1809883a 	mov	r4,r3
    12f0:	100b883a 	mov	r5,r2
    12f4:	00070980 	call	7098 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    12f8:	0005303a 	rdctl	r2,status
    12fc:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1300:	e0ffdf17 	ldw	r3,-132(fp)
    1304:	00bfff84 	movi	r2,-2
    1308:	1884703a 	and	r2,r3,r2
    130c:	1001703a 	wrctl	status,r2
  
  return context;
    1310:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
    1314:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
    1318:	e0bffd0b 	ldhu	r2,-12(fp)
    131c:	10bfffcc 	andi	r2,r2,65535
    1320:	10000b1e 	bne	r2,zero,1350 <__malloc_lock+0xd0>
    1324:	d0a00517 	ldw	r2,-32748(gp)
    1328:	e0ffde17 	ldw	r3,-136(fp)
    132c:	1880081e 	bne	r3,r2,1350 <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
    1330:	d0a6d017 	ldw	r2,-25792(gp)
    1334:	10800044 	addi	r2,r2,1
    1338:	d0a6d015 	stw	r2,-25792(gp)
    133c:	e0bfdd17 	ldw	r2,-140(fp)
    1340:	e0bfe015 	stw	r2,-128(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1344:	e0bfe017 	ldw	r2,-128(fp)
    1348:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    134c:	00000e06 	br	1388 <__malloc_lock+0x108>
    1350:	e0bfdd17 	ldw	r2,-140(fp)
    1354:	e0bfe115 	stw	r2,-124(fp)
    1358:	e0bfe117 	ldw	r2,-124(fp)
    135c:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    1360:	d0e6d117 	ldw	r3,-25788(gp)
    1364:	e0bffe84 	addi	r2,fp,-6
    1368:	1809883a 	mov	r4,r3
    136c:	000b883a 	mov	r5,zero
    1370:	100d883a 	mov	r6,r2
    1374:	0006bb40 	call	6bb4 <OSSemPend>
    locks  = 1;
    1378:	00800044 	movi	r2,1
    137c:	d0a6d015 	stw	r2,-25792(gp)
    lockid = id;
    1380:	e0bfde17 	ldw	r2,-136(fp)
    1384:	d0a00515 	stw	r2,-32748(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    1388:	0001883a 	nop
}
    138c:	e037883a 	mov	sp,fp
    1390:	dfc00117 	ldw	ra,4(sp)
    1394:	df000017 	ldw	fp,0(sp)
    1398:	dec00204 	addi	sp,sp,8
    139c:	f800283a 	ret

000013a0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    13a0:	defff804 	addi	sp,sp,-32
    13a4:	dfc00715 	stw	ra,28(sp)
    13a8:	df000615 	stw	fp,24(sp)
    13ac:	df000604 	addi	fp,sp,24
    13b0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    13b4:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
    13b8:	00800074 	movhi	r2,1
    13bc:	1082c944 	addi	r2,r2,2853
    13c0:	10800003 	ldbu	r2,0(r2)
    13c4:	10803fcc 	andi	r2,r2,255
    13c8:	10800060 	cmpeqi	r2,r2,1
    13cc:	1000011e 	bne	r2,zero,13d4 <__malloc_unlock+0x34>
      return;
    13d0:	00002206 	br	145c <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    13d4:	0005303a 	rdctl	r2,status
    13d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    13dc:	e0fffb17 	ldw	r3,-20(fp)
    13e0:	00bfff84 	movi	r2,-2
    13e4:	1884703a 	and	r2,r3,r2
    13e8:	1001703a 	wrctl	status,r2
  
  return context;
    13ec:	e0bffb17 	ldw	r2,-20(fp)

  OS_ENTER_CRITICAL();
    13f0:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
    13f4:	d0a6d017 	ldw	r2,-25792(gp)
    13f8:	1000051e 	bne	r2,zero,1410 <__malloc_unlock+0x70>
    13fc:	e0bffa17 	ldw	r2,-24(fp)
    1400:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1404:	e0bffc17 	ldw	r2,-16(fp)
    1408:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
    140c:	00001306 	br	145c <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    1410:	d0a6d017 	ldw	r2,-25792(gp)
    1414:	10bfffc4 	addi	r2,r2,-1
    1418:	d0a6d015 	stw	r2,-25792(gp)
    141c:	d0a6d017 	ldw	r2,-25792(gp)
    1420:	10000a1e 	bne	r2,zero,144c <__malloc_unlock+0xac>
  {
    lockid = -1;
    1424:	00bfffc4 	movi	r2,-1
    1428:	d0a00515 	stw	r2,-32748(gp)
    142c:	e0bffa17 	ldw	r2,-24(fp)
    1430:	e0bffd15 	stw	r2,-12(fp)
    1434:	e0bffd17 	ldw	r2,-12(fp)
    1438:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    143c:	d0a6d117 	ldw	r2,-25788(gp)
    1440:	1009883a 	mov	r4,r2
    1444:	0006f880 	call	6f88 <OSSemPost>
    1448:	00000406 	br	145c <__malloc_unlock+0xbc>
    144c:	e0bffa17 	ldw	r2,-24(fp)
    1450:	e0bffe15 	stw	r2,-8(fp)
    1454:	e0bffe17 	ldw	r2,-8(fp)
    1458:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    145c:	e037883a 	mov	sp,fp
    1460:	dfc00117 	ldw	ra,4(sp)
    1464:	df000017 	ldw	fp,0(sp)
    1468:	dec00204 	addi	sp,sp,8
    146c:	f800283a 	ret

00001470 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    1470:	defff704 	addi	sp,sp,-36
    1474:	dfc00815 	stw	ra,32(sp)
    1478:	df000715 	stw	fp,28(sp)
    147c:	df000704 	addi	fp,sp,28
    1480:	e13ffd15 	stw	r4,-12(fp)
    1484:	e17ffe15 	stw	r5,-8(fp)
    1488:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    148c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    1490:	e0bfff17 	ldw	r2,-4(fp)
    1494:	1000021e 	bne	r2,zero,14a0 <OSEventNameGet+0x30>
        return (0);
    1498:	0005883a 	mov	r2,zero
    149c:	00003706 	br	157c <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    14a0:	e0bffd17 	ldw	r2,-12(fp)
    14a4:	1000051e 	bne	r2,zero,14bc <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    14a8:	e0bfff17 	ldw	r2,-4(fp)
    14ac:	00c00104 	movi	r3,4
    14b0:	10c00005 	stb	r3,0(r2)
        return (0);
    14b4:	0005883a 	mov	r2,zero
    14b8:	00003006 	br	157c <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    14bc:	e0bffe17 	ldw	r2,-8(fp)
    14c0:	1000051e 	bne	r2,zero,14d8 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    14c4:	e0bfff17 	ldw	r2,-4(fp)
    14c8:	00c00304 	movi	r3,12
    14cc:	10c00005 	stb	r3,0(r2)
        return (0);
    14d0:	0005883a 	mov	r2,zero
    14d4:	00002906 	br	157c <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    14d8:	d0a6e003 	ldbu	r2,-25728(gp)
    14dc:	10803fcc 	andi	r2,r2,255
    14e0:	10000526 	beq	r2,zero,14f8 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
    14e4:	e0bfff17 	ldw	r2,-4(fp)
    14e8:	00c00444 	movi	r3,17
    14ec:	10c00005 	stb	r3,0(r2)
        return (0);
    14f0:	0005883a 	mov	r2,zero
    14f4:	00002106 	br	157c <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
    14f8:	e0bffd17 	ldw	r2,-12(fp)
    14fc:	10800003 	ldbu	r2,0(r2)
    1500:	10803fcc 	andi	r2,r2,255
    1504:	10bfffc4 	addi	r2,r2,-1
    1508:	10800128 	cmpgeui	r2,r2,4
    150c:	10000526 	beq	r2,zero,1524 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    1510:	e0bfff17 	ldw	r2,-4(fp)
    1514:	00c00044 	movi	r3,1
    1518:	10c00005 	stb	r3,0(r2)
             return (0);
    151c:	0005883a 	mov	r2,zero
    1520:	00001606 	br	157c <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    1524:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1528:	0005303a 	rdctl	r2,status
    152c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1530:	e0fffb17 	ldw	r3,-20(fp)
    1534:	00bfff84 	movi	r2,-2
    1538:	1884703a 	and	r2,r3,r2
    153c:	1001703a 	wrctl	status,r2
  
  return context;
    1540:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    1544:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    1548:	e0bffd17 	ldw	r2,-12(fp)
    154c:	10800384 	addi	r2,r2,14
    1550:	e13ffe17 	ldw	r4,-8(fp)
    1554:	100b883a 	mov	r5,r2
    1558:	0002ec40 	call	2ec4 <OS_StrCopy>
    155c:	e0bffa05 	stb	r2,-24(fp)
    1560:	e0bff917 	ldw	r2,-28(fp)
    1564:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1568:	e0bffc17 	ldw	r2,-16(fp)
    156c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    1570:	e0bfff17 	ldw	r2,-4(fp)
    1574:	10000005 	stb	zero,0(r2)
    return (len);
    1578:	e0bffa03 	ldbu	r2,-24(fp)
}
    157c:	e037883a 	mov	sp,fp
    1580:	dfc00117 	ldw	ra,4(sp)
    1584:	df000017 	ldw	fp,0(sp)
    1588:	dec00204 	addi	sp,sp,8
    158c:	f800283a 	ret

00001590 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    1590:	defff604 	addi	sp,sp,-40
    1594:	dfc00915 	stw	ra,36(sp)
    1598:	df000815 	stw	fp,32(sp)
    159c:	df000804 	addi	fp,sp,32
    15a0:	e13ffd15 	stw	r4,-12(fp)
    15a4:	e17ffe15 	stw	r5,-8(fp)
    15a8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    15ac:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    15b0:	e0bfff17 	ldw	r2,-4(fp)
    15b4:	1000011e 	bne	r2,zero,15bc <OSEventNameSet+0x2c>
        return;
    15b8:	00003f06 	br	16b8 <OSEventNameSet+0x128>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    15bc:	e0bffd17 	ldw	r2,-12(fp)
    15c0:	1000041e 	bne	r2,zero,15d4 <OSEventNameSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    15c4:	e0bfff17 	ldw	r2,-4(fp)
    15c8:	00c00104 	movi	r3,4
    15cc:	10c00005 	stb	r3,0(r2)
        return;
    15d0:	00003906 	br	16b8 <OSEventNameSet+0x128>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    15d4:	e0bffe17 	ldw	r2,-8(fp)
    15d8:	1000041e 	bne	r2,zero,15ec <OSEventNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
    15dc:	e0bfff17 	ldw	r2,-4(fp)
    15e0:	00c00304 	movi	r3,12
    15e4:	10c00005 	stb	r3,0(r2)
        return;
    15e8:	00003306 	br	16b8 <OSEventNameSet+0x128>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    15ec:	d0a6e003 	ldbu	r2,-25728(gp)
    15f0:	10803fcc 	andi	r2,r2,255
    15f4:	10000426 	beq	r2,zero,1608 <OSEventNameSet+0x78>
        *perr = OS_ERR_NAME_SET_ISR;
    15f8:	e0bfff17 	ldw	r2,-4(fp)
    15fc:	00c00484 	movi	r3,18
    1600:	10c00005 	stb	r3,0(r2)
        return;
    1604:	00002c06 	br	16b8 <OSEventNameSet+0x128>
    }
    switch (pevent->OSEventType) {
    1608:	e0bffd17 	ldw	r2,-12(fp)
    160c:	10800003 	ldbu	r2,0(r2)
    1610:	10803fcc 	andi	r2,r2,255
    1614:	10bfffc4 	addi	r2,r2,-1
    1618:	10800128 	cmpgeui	r2,r2,4
    161c:	10000426 	beq	r2,zero,1630 <OSEventNameSet+0xa0>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    1620:	e0bfff17 	ldw	r2,-4(fp)
    1624:	00c00044 	movi	r3,1
    1628:	10c00005 	stb	r3,0(r2)
             return;
    162c:	00002206 	br	16b8 <OSEventNameSet+0x128>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    1630:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1634:	0005303a 	rdctl	r2,status
    1638:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    163c:	e0fffa17 	ldw	r3,-24(fp)
    1640:	00bfff84 	movi	r2,-2
    1644:	1884703a 	and	r2,r3,r2
    1648:	1001703a 	wrctl	status,r2
  
  return context;
    164c:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    1650:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    1654:	e13ffe17 	ldw	r4,-8(fp)
    1658:	0002f380 	call	2f38 <OS_StrLen>
    165c:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    1660:	e0bff903 	ldbu	r2,-28(fp)
    1664:	10800830 	cmpltui	r2,r2,32
    1668:	1000081e 	bne	r2,zero,168c <OSEventNameSet+0xfc>
    166c:	e0bff817 	ldw	r2,-32(fp)
    1670:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1674:	e0bffb17 	ldw	r2,-20(fp)
    1678:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    167c:	e0bfff17 	ldw	r2,-4(fp)
    1680:	00c002c4 	movi	r3,11
    1684:	10c00005 	stb	r3,0(r2)
        return;
    1688:	00000b06 	br	16b8 <OSEventNameSet+0x128>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    168c:	e0bffd17 	ldw	r2,-12(fp)
    1690:	10800384 	addi	r2,r2,14
    1694:	1009883a 	mov	r4,r2
    1698:	e17ffe17 	ldw	r5,-8(fp)
    169c:	0002ec40 	call	2ec4 <OS_StrCopy>
    16a0:	e0bff817 	ldw	r2,-32(fp)
    16a4:	e0bffc15 	stw	r2,-16(fp)
    16a8:	e0bffc17 	ldw	r2,-16(fp)
    16ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    16b0:	e0bfff17 	ldw	r2,-4(fp)
    16b4:	10000005 	stb	zero,0(r2)
}
    16b8:	e037883a 	mov	sp,fp
    16bc:	dfc00117 	ldw	ra,4(sp)
    16c0:	df000017 	ldw	fp,0(sp)
    16c4:	dec00204 	addi	sp,sp,8
    16c8:	f800283a 	ret

000016cc <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    16cc:	deffed04 	addi	sp,sp,-76
    16d0:	dfc01215 	stw	ra,72(sp)
    16d4:	df001115 	stw	fp,68(sp)
    16d8:	df001104 	addi	fp,sp,68
    16dc:	e13ffc15 	stw	r4,-16(fp)
    16e0:	e17ffd15 	stw	r5,-12(fp)
    16e4:	e1bffe15 	stw	r6,-8(fp)
    16e8:	3805883a 	mov	r2,r7
    16ec:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    16f0:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    16f4:	e0800217 	ldw	r2,8(fp)
    16f8:	1000021e 	bne	r2,zero,1704 <OSEventPendMulti+0x38>
        return (0);
    16fc:	0005883a 	mov	r2,zero
    1700:	00017106 	br	1cc8 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    1704:	e0bffc17 	ldw	r2,-16(fp)
    1708:	1000051e 	bne	r2,zero,1720 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    170c:	e0800217 	ldw	r2,8(fp)
    1710:	00c00104 	movi	r3,4
    1714:	10c00005 	stb	r3,0(r2)
        return (0);
    1718:	0005883a 	mov	r2,zero
    171c:	00016a06 	br	1cc8 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    1720:	e0bffd17 	ldw	r2,-12(fp)
    1724:	1000051e 	bne	r2,zero,173c <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    1728:	e0800217 	ldw	r2,8(fp)
    172c:	00c00104 	movi	r3,4
    1730:	10c00005 	stb	r3,0(r2)
        return (0);
    1734:	0005883a 	mov	r2,zero
    1738:	00016306 	br	1cc8 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    173c:	e0bffe17 	ldw	r2,-8(fp)
    1740:	1000051e 	bne	r2,zero,1758 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    1744:	e0800217 	ldw	r2,8(fp)
    1748:	00c00104 	movi	r3,4
    174c:	10c00005 	stb	r3,0(r2)
        return (0);
    1750:	0005883a 	mov	r2,zero
    1754:	00015c06 	br	1cc8 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    1758:	e0bffd17 	ldw	r2,-12(fp)
    175c:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    1760:	e0bffc17 	ldw	r2,-16(fp)
    1764:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
    1768:	e0bfef17 	ldw	r2,-68(fp)
    176c:	10800017 	ldw	r2,0(r2)
    1770:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
    1774:	00001906 	br	17dc <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    1778:	e0bff017 	ldw	r2,-64(fp)
    177c:	10800003 	ldbu	r2,0(r2)
    1780:	10803fcc 	andi	r2,r2,255
    1784:	10c000a0 	cmpeqi	r3,r2,2
    1788:	1800091e 	bne	r3,zero,17b0 <OSEventPendMulti+0xe4>
    178c:	10c000e0 	cmpeqi	r3,r2,3
    1790:	1800091e 	bne	r3,zero,17b8 <OSEventPendMulti+0xec>
    1794:	10800060 	cmpeqi	r2,r2,1
    1798:	1000091e 	bne	r2,zero,17c0 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    179c:	e0800217 	ldw	r2,8(fp)
    17a0:	00c00044 	movi	r3,1
    17a4:	10c00005 	stb	r3,0(r2)
                 return (0);
    17a8:	0005883a 	mov	r2,zero
    17ac:	00014606 	br	1cc8 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
    17b0:	0001883a 	nop
    17b4:	00000306 	br	17c4 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
    17b8:	0001883a 	nop
    17bc:	00000106 	br	17c4 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
    17c0:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
    17c4:	e0bfef17 	ldw	r2,-68(fp)
    17c8:	10800104 	addi	r2,r2,4
    17cc:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    17d0:	e0bfef17 	ldw	r2,-68(fp)
    17d4:	10800017 	ldw	r2,0(r2)
    17d8:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
    17dc:	e0bff017 	ldw	r2,-64(fp)
    17e0:	103fe51e 	bne	r2,zero,1778 <OSEventPendMulti+0xac>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    17e4:	d0a6e003 	ldbu	r2,-25728(gp)
    17e8:	10803fcc 	andi	r2,r2,255
    17ec:	10000526 	beq	r2,zero,1804 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    17f0:	e0800217 	ldw	r2,8(fp)
    17f4:	00c00084 	movi	r3,2
    17f8:	10c00005 	stb	r3,0(r2)
        return (0);
    17fc:	0005883a 	mov	r2,zero
    1800:	00013106 	br	1cc8 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    1804:	d0a6d203 	ldbu	r2,-25784(gp)
    1808:	10803fcc 	andi	r2,r2,255
    180c:	10000526 	beq	r2,zero,1824 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    1810:	e0800217 	ldw	r2,8(fp)
    1814:	00c00344 	movi	r3,13
    1818:	10c00005 	stb	r3,0(r2)
        return (0);
    181c:	0005883a 	mov	r2,zero
    1820:	00012906 	br	1cc8 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1824:	0005303a 	rdctl	r2,status
    1828:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    182c:	e0fff517 	ldw	r3,-44(fp)
    1830:	00bfff84 	movi	r2,-2
    1834:	1884703a 	and	r2,r3,r2
    1838:	1001703a 	wrctl	status,r2
  
  return context;
    183c:	e0bff517 	ldw	r2,-44(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    1840:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
    1844:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
    1848:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
    184c:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
    1850:	e0bffc17 	ldw	r2,-16(fp)
    1854:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
    1858:	e0bfef17 	ldw	r2,-68(fp)
    185c:	10800017 	ldw	r2,0(r2)
    1860:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    1864:	00008106 	br	1a6c <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
    1868:	e0bff017 	ldw	r2,-64(fp)
    186c:	10800003 	ldbu	r2,0(r2)
    1870:	10803fcc 	andi	r2,r2,255
    1874:	10c000a0 	cmpeqi	r3,r2,2
    1878:	18003c1e 	bne	r3,zero,196c <OSEventPendMulti+0x2a0>
    187c:	10c000e0 	cmpeqi	r3,r2,3
    1880:	1800031e 	bne	r3,zero,1890 <OSEventPendMulti+0x1c4>
    1884:	10800060 	cmpeqi	r2,r2,1
    1888:	10001e1e 	bne	r2,zero,1904 <OSEventPendMulti+0x238>
    188c:	00006606 	br	1a28 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    1890:	e0bff017 	ldw	r2,-64(fp)
    1894:	1080020b 	ldhu	r2,8(r2)
    1898:	10bfffcc 	andi	r2,r2,65535
    189c:	10001526 	beq	r2,zero,18f4 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    18a0:	e0bff017 	ldw	r2,-64(fp)
    18a4:	1080020b 	ldhu	r2,8(r2)
    18a8:	10bfffc4 	addi	r2,r2,-1
    18ac:	1007883a 	mov	r3,r2
    18b0:	e0bff017 	ldw	r2,-64(fp)
    18b4:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    18b8:	e0bffd17 	ldw	r2,-12(fp)
    18bc:	10c00104 	addi	r3,r2,4
    18c0:	e0fffd15 	stw	r3,-12(fp)
    18c4:	e0fff017 	ldw	r3,-64(fp)
    18c8:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
    18cc:	00800044 	movi	r2,1
    18d0:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    18d4:	e0bffe17 	ldw	r2,-8(fp)
    18d8:	10c00104 	addi	r3,r2,4
    18dc:	e0fffe15 	stw	r3,-8(fp)
    18e0:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
    18e4:	e0bff18b 	ldhu	r2,-58(fp)
    18e8:	10800044 	addi	r2,r2,1
    18ec:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    18f0:	00005806 	br	1a54 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    18f4:	e0bff203 	ldbu	r2,-56(fp)
    18f8:	10800054 	ori	r2,r2,1
    18fc:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    1900:	00005406 	br	1a54 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    1904:	e0bff017 	ldw	r2,-64(fp)
    1908:	10800117 	ldw	r2,4(r2)
    190c:	10001326 	beq	r2,zero,195c <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    1910:	e0bffe17 	ldw	r2,-8(fp)
    1914:	10c00104 	addi	r3,r2,4
    1918:	e0fffe15 	stw	r3,-8(fp)
    191c:	e0fff017 	ldw	r3,-64(fp)
    1920:	18c00117 	ldw	r3,4(r3)
    1924:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
    1928:	e0bff017 	ldw	r2,-64(fp)
    192c:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    1930:	e0bffd17 	ldw	r2,-12(fp)
    1934:	10c00104 	addi	r3,r2,4
    1938:	e0fffd15 	stw	r3,-12(fp)
    193c:	e0fff017 	ldw	r3,-64(fp)
    1940:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
    1944:	00800044 	movi	r2,1
    1948:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    194c:	e0bff18b 	ldhu	r2,-58(fp)
    1950:	10800044 	addi	r2,r2,1
    1954:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    1958:	00003e06 	br	1a54 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    195c:	e0bff203 	ldbu	r2,-56(fp)
    1960:	10800094 	ori	r2,r2,2
    1964:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    1968:	00003a06 	br	1a54 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    196c:	e0bff017 	ldw	r2,-64(fp)
    1970:	10800117 	ldw	r2,4(r2)
    1974:	e0bff415 	stw	r2,-48(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    1978:	e0bff417 	ldw	r2,-48(fp)
    197c:	1080058b 	ldhu	r2,22(r2)
    1980:	10bfffcc 	andi	r2,r2,65535
    1984:	10002426 	beq	r2,zero,1a18 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    1988:	e0bffe17 	ldw	r2,-8(fp)
    198c:	10c00104 	addi	r3,r2,4
    1990:	e0fffe15 	stw	r3,-8(fp)
    1994:	e0fff417 	ldw	r3,-48(fp)
    1998:	18c00417 	ldw	r3,16(r3)
    199c:	19400104 	addi	r5,r3,4
    19a0:	e13ff417 	ldw	r4,-48(fp)
    19a4:	21400415 	stw	r5,16(r4)
    19a8:	18c00017 	ldw	r3,0(r3)
    19ac:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    19b0:	e0bff417 	ldw	r2,-48(fp)
    19b4:	10c00417 	ldw	r3,16(r2)
    19b8:	e0bff417 	ldw	r2,-48(fp)
    19bc:	10800217 	ldw	r2,8(r2)
    19c0:	1880041e 	bne	r3,r2,19d4 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    19c4:	e0bff417 	ldw	r2,-48(fp)
    19c8:	10c00117 	ldw	r3,4(r2)
    19cc:	e0bff417 	ldw	r2,-48(fp)
    19d0:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    19d4:	e0bff417 	ldw	r2,-48(fp)
    19d8:	1080058b 	ldhu	r2,22(r2)
    19dc:	10bfffc4 	addi	r2,r2,-1
    19e0:	1007883a 	mov	r3,r2
    19e4:	e0bff417 	ldw	r2,-48(fp)
    19e8:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    19ec:	e0bffd17 	ldw	r2,-12(fp)
    19f0:	10c00104 	addi	r3,r2,4
    19f4:	e0fffd15 	stw	r3,-12(fp)
    19f8:	e0fff017 	ldw	r3,-64(fp)
    19fc:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
    1a00:	00800044 	movi	r2,1
    1a04:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    1a08:	e0bff18b 	ldhu	r2,-58(fp)
    1a0c:	10800044 	addi	r2,r2,1
    1a10:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    1a14:	00000f06 	br	1a54 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    1a18:	e0bff203 	ldbu	r2,-56(fp)
    1a1c:	10800114 	ori	r2,r2,4
    1a20:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    1a24:	00000b06 	br	1a54 <OSEventPendMulti+0x388>
    1a28:	e0bff317 	ldw	r2,-52(fp)
    1a2c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1a30:	e0bff617 	ldw	r2,-40(fp)
    1a34:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    1a38:	e0bffd17 	ldw	r2,-12(fp)
    1a3c:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    1a40:	e0800217 	ldw	r2,8(fp)
    1a44:	00c00044 	movi	r3,1
    1a48:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
    1a4c:	e0bff18b 	ldhu	r2,-58(fp)
    1a50:	00009d06 	br	1cc8 <OSEventPendMulti+0x5fc>
        }
        pevents++;
    1a54:	e0bfef17 	ldw	r2,-68(fp)
    1a58:	10800104 	addi	r2,r2,4
    1a5c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    1a60:	e0bfef17 	ldw	r2,-68(fp)
    1a64:	10800017 	ldw	r2,0(r2)
    1a68:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    1a6c:	e0bff017 	ldw	r2,-64(fp)
    1a70:	103f7d1e 	bne	r2,zero,1868 <OSEventPendMulti+0x19c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    1a74:	e0bff103 	ldbu	r2,-60(fp)
    1a78:	10800058 	cmpnei	r2,r2,1
    1a7c:	10000a1e 	bne	r2,zero,1aa8 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    1a80:	e0bffd17 	ldw	r2,-12(fp)
    1a84:	10000015 	stw	zero,0(r2)
    1a88:	e0bff317 	ldw	r2,-52(fp)
    1a8c:	e0bff715 	stw	r2,-36(fp)
    1a90:	e0bff717 	ldw	r2,-36(fp)
    1a94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    1a98:	e0800217 	ldw	r2,8(fp)
    1a9c:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    1aa0:	e0bff18b 	ldhu	r2,-58(fp)
    1aa4:	00008806 	br	1cc8 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    1aa8:	d0a6e117 	ldw	r2,-25724(gp)
    1aac:	d0e6e117 	ldw	r3,-25724(gp)
    1ab0:	19000c03 	ldbu	r4,48(r3)
    1ab4:	e0fff203 	ldbu	r3,-56(fp)
    1ab8:	20c6b03a 	or	r3,r4,r3
    1abc:	1809883a 	mov	r4,r3
    1ac0:	00ffe004 	movi	r3,-128
    1ac4:	20c6b03a 	or	r3,r4,r3
    1ac8:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    1acc:	d0a6e117 	ldw	r2,-25724(gp)
    1ad0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    1ad4:	d0a6e117 	ldw	r2,-25724(gp)
    1ad8:	e0ffff0b 	ldhu	r3,-4(fp)
    1adc:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    1ae0:	e13ffc17 	ldw	r4,-16(fp)
    1ae4:	00026140 	call	2614 <OS_EventTaskWaitMulti>
    1ae8:	e0bff317 	ldw	r2,-52(fp)
    1aec:	e0bff815 	stw	r2,-32(fp)
    1af0:	e0bff817 	ldw	r2,-32(fp)
    1af4:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    1af8:	0002d880 	call	2d88 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1afc:	0005303a 	rdctl	r2,status
    1b00:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1b04:	e0fff917 	ldw	r3,-28(fp)
    1b08:	00bfff84 	movi	r2,-2
    1b0c:	1884703a 	and	r2,r3,r2
    1b10:	1001703a 	wrctl	status,r2
  
  return context;
    1b14:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    1b18:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    1b1c:	d0a6e117 	ldw	r2,-25724(gp)
    1b20:	10800c43 	ldbu	r2,49(r2)
    1b24:	10803fcc 	andi	r2,r2,255
    1b28:	10000226 	beq	r2,zero,1b34 <OSEventPendMulti+0x468>
    1b2c:	108000a0 	cmpeqi	r2,r2,2
    1b30:	10001826 	beq	r2,zero,1b94 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    1b34:	d0a6e117 	ldw	r2,-25724(gp)
    1b38:	10800717 	ldw	r2,28(r2)
    1b3c:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    1b40:	e0bff017 	ldw	r2,-64(fp)
    1b44:	10000b26 	beq	r2,zero,1b74 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    1b48:	e0bffd17 	ldw	r2,-12(fp)
    1b4c:	10c00104 	addi	r3,r2,4
    1b50:	e0fffd15 	stw	r3,-12(fp)
    1b54:	e0fff017 	ldw	r3,-64(fp)
    1b58:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    1b5c:	e0bffd17 	ldw	r2,-12(fp)
    1b60:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    1b64:	e0bff18b 	ldhu	r2,-58(fp)
    1b68:	10800044 	addi	r2,r2,1
    1b6c:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    1b70:	00000d06 	br	1ba8 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    1b74:	d0a6e117 	ldw	r2,-25724(gp)
    1b78:	00c00044 	movi	r3,1
    1b7c:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    1b80:	d0a6e117 	ldw	r2,-25724(gp)
    1b84:	1009883a 	mov	r4,r2
    1b88:	e17ffc17 	ldw	r5,-16(fp)
    1b8c:	00028140 	call	2814 <OS_EventTaskRemoveMulti>
             }
			 break;
    1b90:	00000506 	br	1ba8 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    1b94:	d0a6e117 	ldw	r2,-25724(gp)
    1b98:	1009883a 	mov	r4,r2
    1b9c:	e17ffc17 	ldw	r5,-16(fp)
    1ba0:	00028140 	call	2814 <OS_EventTaskRemoveMulti>
             break;
    1ba4:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    1ba8:	d0a6e117 	ldw	r2,-25724(gp)
    1bac:	10800c43 	ldbu	r2,49(r2)
    1bb0:	10803fcc 	andi	r2,r2,255
    1bb4:	10000326 	beq	r2,zero,1bc4 <OSEventPendMulti+0x4f8>
    1bb8:	108000a0 	cmpeqi	r2,r2,2
    1bbc:	1000231e 	bne	r2,zero,1c4c <OSEventPendMulti+0x580>
    1bc0:	00002a06 	br	1c6c <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    1bc4:	e0bff017 	ldw	r2,-64(fp)
    1bc8:	10800003 	ldbu	r2,0(r2)
    1bcc:	10803fcc 	andi	r2,r2,255
    1bd0:	0080100e 	bge	zero,r2,1c14 <OSEventPendMulti+0x548>
    1bd4:	10c000d0 	cmplti	r3,r2,3
    1bd8:	1800071e 	bne	r3,zero,1bf8 <OSEventPendMulti+0x52c>
    1bdc:	108000e0 	cmpeqi	r2,r2,3
    1be0:	10000c26 	beq	r2,zero,1c14 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    1be4:	e0bffe17 	ldw	r2,-8(fp)
    1be8:	10c00104 	addi	r3,r2,4
    1bec:	e0fffe15 	stw	r3,-8(fp)
    1bf0:	10000015 	stw	zero,0(r2)
                      break;
    1bf4:	00001206 	br	1c40 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    1bf8:	e0bffe17 	ldw	r2,-8(fp)
    1bfc:	10c00104 	addi	r3,r2,4
    1c00:	e0fffe15 	stw	r3,-8(fp)
    1c04:	d0e6e117 	ldw	r3,-25724(gp)
    1c08:	18c00917 	ldw	r3,36(r3)
    1c0c:	10c00015 	stw	r3,0(r2)
                      break;
    1c10:	00000b06 	br	1c40 <OSEventPendMulti+0x574>
    1c14:	e0bff317 	ldw	r2,-52(fp)
    1c18:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1c1c:	e0bffa17 	ldw	r2,-24(fp)
    1c20:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    1c24:	e0bffd17 	ldw	r2,-12(fp)
    1c28:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    1c2c:	e0800217 	ldw	r2,8(fp)
    1c30:	00c00044 	movi	r3,1
    1c34:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
    1c38:	e0bff18b 	ldhu	r2,-58(fp)
    1c3c:	00002206 	br	1cc8 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
    1c40:	e0800217 	ldw	r2,8(fp)
    1c44:	10000005 	stb	zero,0(r2)
             break;
    1c48:	00001006 	br	1c8c <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    1c4c:	e0bffe17 	ldw	r2,-8(fp)
    1c50:	10c00104 	addi	r3,r2,4
    1c54:	e0fffe15 	stw	r3,-8(fp)
    1c58:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    1c5c:	e0800217 	ldw	r2,8(fp)
    1c60:	00c00384 	movi	r3,14
    1c64:	10c00005 	stb	r3,0(r2)
             break;
    1c68:	00000806 	br	1c8c <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    1c6c:	e0bffe17 	ldw	r2,-8(fp)
    1c70:	10c00104 	addi	r3,r2,4
    1c74:	e0fffe15 	stw	r3,-8(fp)
    1c78:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    1c7c:	e0800217 	ldw	r2,8(fp)
    1c80:	00c00284 	movi	r3,10
    1c84:	10c00005 	stb	r3,0(r2)
             break;
    1c88:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    1c8c:	d0a6e117 	ldw	r2,-25724(gp)
    1c90:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    1c94:	d0a6e117 	ldw	r2,-25724(gp)
    1c98:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    1c9c:	d0a6e117 	ldw	r2,-25724(gp)
    1ca0:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    1ca4:	d0a6e117 	ldw	r2,-25724(gp)
    1ca8:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    1cac:	d0a6e117 	ldw	r2,-25724(gp)
    1cb0:	10000915 	stw	zero,36(r2)
    1cb4:	e0bff317 	ldw	r2,-52(fp)
    1cb8:	e0bffb15 	stw	r2,-20(fp)
    1cbc:	e0bffb17 	ldw	r2,-20(fp)
    1cc0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    1cc4:	e0bff18b 	ldhu	r2,-58(fp)
}
    1cc8:	e037883a 	mov	sp,fp
    1ccc:	dfc00117 	ldw	ra,4(sp)
    1cd0:	df000017 	ldw	fp,0(sp)
    1cd4:	dec00204 	addi	sp,sp,8
    1cd8:	f800283a 	ret

00001cdc <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    1cdc:	defffe04 	addi	sp,sp,-8
    1ce0:	dfc00115 	stw	ra,4(sp)
    1ce4:	df000015 	stw	fp,0(sp)
    1ce8:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    1cec:	000c8340 	call	c834 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    1cf0:	0002a500 	call	2a50 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    1cf4:	0002a940 	call	2a94 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    1cf8:	0002bf40 	call	2bf4 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    1cfc:	00029740 	call	2974 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    1d00:	0004b740 	call	4b74 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    1d04:	00054bc0 	call	54bc <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    1d08:	00066f00 	call	66f0 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    1d0c:	0002afc0 	call	2afc <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    1d10:	0002b780 	call	2b78 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    1d14:	000c8500 	call	c850 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    1d18:	00034600 	call	3460 <OSDebugInit>
#endif
}
    1d1c:	e037883a 	mov	sp,fp
    1d20:	dfc00117 	ldw	ra,4(sp)
    1d24:	df000017 	ldw	fp,0(sp)
    1d28:	dec00204 	addi	sp,sp,8
    1d2c:	f800283a 	ret

00001d30 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    1d30:	defffc04 	addi	sp,sp,-16
    1d34:	df000315 	stw	fp,12(sp)
    1d38:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    1d3c:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
    1d40:	d0a6d243 	ldbu	r2,-25783(gp)
    1d44:	10803fcc 	andi	r2,r2,255
    1d48:	10800058 	cmpnei	r2,r2,1
    1d4c:	1000131e 	bne	r2,zero,1d9c <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1d50:	0005303a 	rdctl	r2,status
    1d54:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1d58:	e0fffe17 	ldw	r3,-8(fp)
    1d5c:	00bfff84 	movi	r2,-2
    1d60:	1884703a 	and	r2,r3,r2
    1d64:	1001703a 	wrctl	status,r2
  
  return context;
    1d68:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    1d6c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
    1d70:	d0a6e003 	ldbu	r2,-25728(gp)
    1d74:	10803fcc 	andi	r2,r2,255
    1d78:	10803fe0 	cmpeqi	r2,r2,255
    1d7c:	1000031e 	bne	r2,zero,1d8c <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    1d80:	d0a6e003 	ldbu	r2,-25728(gp)
    1d84:	10800044 	addi	r2,r2,1
    1d88:	d0a6e005 	stb	r2,-25728(gp)
    1d8c:	e0bffd17 	ldw	r2,-12(fp)
    1d90:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1d94:	e0bfff17 	ldw	r2,-4(fp)
    1d98:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
    1d9c:	e037883a 	mov	sp,fp
    1da0:	df000017 	ldw	fp,0(sp)
    1da4:	dec00104 	addi	sp,sp,4
    1da8:	f800283a 	ret

00001dac <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    1dac:	defffb04 	addi	sp,sp,-20
    1db0:	dfc00415 	stw	ra,16(sp)
    1db4:	df000315 	stw	fp,12(sp)
    1db8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    1dbc:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
    1dc0:	d0a6d243 	ldbu	r2,-25783(gp)
    1dc4:	10803fcc 	andi	r2,r2,255
    1dc8:	10800058 	cmpnei	r2,r2,1
    1dcc:	10002f1e 	bne	r2,zero,1e8c <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1dd0:	0005303a 	rdctl	r2,status
    1dd4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1dd8:	e0fffe17 	ldw	r3,-8(fp)
    1ddc:	00bfff84 	movi	r2,-2
    1de0:	1884703a 	and	r2,r3,r2
    1de4:	1001703a 	wrctl	status,r2
  
  return context;
    1de8:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    1dec:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    1df0:	d0a6e003 	ldbu	r2,-25728(gp)
    1df4:	10803fcc 	andi	r2,r2,255
    1df8:	10000326 	beq	r2,zero,1e08 <OSIntExit+0x5c>
            OSIntNesting--;
    1dfc:	d0a6e003 	ldbu	r2,-25728(gp)
    1e00:	10bfffc4 	addi	r2,r2,-1
    1e04:	d0a6e005 	stb	r2,-25728(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    1e08:	d0a6e003 	ldbu	r2,-25728(gp)
    1e0c:	10803fcc 	andi	r2,r2,255
    1e10:	10001a1e 	bne	r2,zero,1e7c <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    1e14:	d0a6d203 	ldbu	r2,-25784(gp)
    1e18:	10803fcc 	andi	r2,r2,255
    1e1c:	1000171e 	bne	r2,zero,1e7c <OSIntExit+0xd0>
                OS_SchedNew();
    1e20:	0002e540 	call	2e54 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    1e24:	d0e6d403 	ldbu	r3,-25776(gp)
    1e28:	d0a6d443 	ldbu	r2,-25775(gp)
    1e2c:	18c03fcc 	andi	r3,r3,255
    1e30:	10803fcc 	andi	r2,r2,255
    1e34:	18801126 	beq	r3,r2,1e7c <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    1e38:	d0a6d403 	ldbu	r2,-25776(gp)
    1e3c:	10c03fcc 	andi	r3,r2,255
    1e40:	00800074 	movhi	r2,1
    1e44:	109f5704 	addi	r2,r2,32092
    1e48:	18c7883a 	add	r3,r3,r3
    1e4c:	18c7883a 	add	r3,r3,r3
    1e50:	10c5883a 	add	r2,r2,r3
    1e54:	10800017 	ldw	r2,0(r2)
    1e58:	d0a6dc15 	stw	r2,-25744(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    1e5c:	d0a6dc17 	ldw	r2,-25744(gp)
    1e60:	10c00e17 	ldw	r3,56(r2)
    1e64:	18c00044 	addi	r3,r3,1
    1e68:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    1e6c:	d0a6d717 	ldw	r2,-25764(gp)
    1e70:	10800044 	addi	r2,r2,1
    1e74:	d0a6d715 	stw	r2,-25764(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    1e78:	000c5740 	call	c574 <OSCtxSw>
    1e7c:	e0bffd17 	ldw	r2,-12(fp)
    1e80:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1e84:	e0bfff17 	ldw	r2,-4(fp)
    1e88:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    1e8c:	e037883a 	mov	sp,fp
    1e90:	dfc00117 	ldw	ra,4(sp)
    1e94:	df000017 	ldw	fp,0(sp)
    1e98:	dec00204 	addi	sp,sp,8
    1e9c:	f800283a 	ret

00001ea0 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    1ea0:	defffc04 	addi	sp,sp,-16
    1ea4:	df000315 	stw	fp,12(sp)
    1ea8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    1eac:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    1eb0:	d0a6d243 	ldbu	r2,-25783(gp)
    1eb4:	10803fcc 	andi	r2,r2,255
    1eb8:	10800058 	cmpnei	r2,r2,1
    1ebc:	1000161e 	bne	r2,zero,1f18 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1ec0:	0005303a 	rdctl	r2,status
    1ec4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1ec8:	e0fffe17 	ldw	r3,-8(fp)
    1ecc:	00bfff84 	movi	r2,-2
    1ed0:	1884703a 	and	r2,r3,r2
    1ed4:	1001703a 	wrctl	status,r2
  
  return context;
    1ed8:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    1edc:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    1ee0:	d0a6e003 	ldbu	r2,-25728(gp)
    1ee4:	10803fcc 	andi	r2,r2,255
    1ee8:	1000071e 	bne	r2,zero,1f08 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    1eec:	d0a6d203 	ldbu	r2,-25784(gp)
    1ef0:	10803fcc 	andi	r2,r2,255
    1ef4:	10803fe0 	cmpeqi	r2,r2,255
    1ef8:	1000031e 	bne	r2,zero,1f08 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    1efc:	d0a6d203 	ldbu	r2,-25784(gp)
    1f00:	10800044 	addi	r2,r2,1
    1f04:	d0a6d205 	stb	r2,-25784(gp)
    1f08:	e0bffd17 	ldw	r2,-12(fp)
    1f0c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1f10:	e0bfff17 	ldw	r2,-4(fp)
    1f14:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    1f18:	e037883a 	mov	sp,fp
    1f1c:	df000017 	ldw	fp,0(sp)
    1f20:	dec00104 	addi	sp,sp,4
    1f24:	f800283a 	ret

00001f28 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    1f28:	defff804 	addi	sp,sp,-32
    1f2c:	dfc00715 	stw	ra,28(sp)
    1f30:	df000615 	stw	fp,24(sp)
    1f34:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    1f38:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    1f3c:	d0a6d243 	ldbu	r2,-25783(gp)
    1f40:	10803fcc 	andi	r2,r2,255
    1f44:	10800058 	cmpnei	r2,r2,1
    1f48:	1000281e 	bne	r2,zero,1fec <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1f4c:	0005303a 	rdctl	r2,status
    1f50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1f54:	e0fffb17 	ldw	r3,-20(fp)
    1f58:	00bfff84 	movi	r2,-2
    1f5c:	1884703a 	and	r2,r3,r2
    1f60:	1001703a 	wrctl	status,r2
  
  return context;
    1f64:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
    1f68:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    1f6c:	d0a6d203 	ldbu	r2,-25784(gp)
    1f70:	10803fcc 	andi	r2,r2,255
    1f74:	10001926 	beq	r2,zero,1fdc <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    1f78:	d0a6d203 	ldbu	r2,-25784(gp)
    1f7c:	10bfffc4 	addi	r2,r2,-1
    1f80:	d0a6d205 	stb	r2,-25784(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    1f84:	d0a6d203 	ldbu	r2,-25784(gp)
    1f88:	10803fcc 	andi	r2,r2,255
    1f8c:	10000e1e 	bne	r2,zero,1fc8 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    1f90:	d0a6e003 	ldbu	r2,-25728(gp)
    1f94:	10803fcc 	andi	r2,r2,255
    1f98:	1000061e 	bne	r2,zero,1fb4 <OSSchedUnlock+0x8c>
    1f9c:	e0bffa17 	ldw	r2,-24(fp)
    1fa0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1fa4:	e0bffc17 	ldw	r2,-16(fp)
    1fa8:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    1fac:	0002d880 	call	2d88 <OS_Sched>
    1fb0:	00000e06 	br	1fec <OSSchedUnlock+0xc4>
    1fb4:	e0bffa17 	ldw	r2,-24(fp)
    1fb8:	e0bffd15 	stw	r2,-12(fp)
    1fbc:	e0bffd17 	ldw	r2,-12(fp)
    1fc0:	1001703a 	wrctl	status,r2
    1fc4:	00000906 	br	1fec <OSSchedUnlock+0xc4>
    1fc8:	e0bffa17 	ldw	r2,-24(fp)
    1fcc:	e0bffe15 	stw	r2,-8(fp)
    1fd0:	e0bffe17 	ldw	r2,-8(fp)
    1fd4:	1001703a 	wrctl	status,r2
    1fd8:	00000406 	br	1fec <OSSchedUnlock+0xc4>
    1fdc:	e0bffa17 	ldw	r2,-24(fp)
    1fe0:	e0bfff15 	stw	r2,-4(fp)
    1fe4:	e0bfff17 	ldw	r2,-4(fp)
    1fe8:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    1fec:	e037883a 	mov	sp,fp
    1ff0:	dfc00117 	ldw	ra,4(sp)
    1ff4:	df000017 	ldw	fp,0(sp)
    1ff8:	dec00204 	addi	sp,sp,8
    1ffc:	f800283a 	ret

00002000 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    2000:	defffe04 	addi	sp,sp,-8
    2004:	dfc00115 	stw	ra,4(sp)
    2008:	df000015 	stw	fp,0(sp)
    200c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    2010:	d0a6d243 	ldbu	r2,-25783(gp)
    2014:	10803fcc 	andi	r2,r2,255
    2018:	10000f1e 	bne	r2,zero,2058 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    201c:	0002e540 	call	2e54 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    2020:	d0a6d403 	ldbu	r2,-25776(gp)
    2024:	d0a6d445 	stb	r2,-25775(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    2028:	d0a6d403 	ldbu	r2,-25776(gp)
    202c:	10c03fcc 	andi	r3,r2,255
    2030:	00800074 	movhi	r2,1
    2034:	109f5704 	addi	r2,r2,32092
    2038:	18c7883a 	add	r3,r3,r3
    203c:	18c7883a 	add	r3,r3,r3
    2040:	10c5883a 	add	r2,r2,r3
    2044:	10800017 	ldw	r2,0(r2)
    2048:	d0a6dc15 	stw	r2,-25744(gp)
        OSTCBCur      = OSTCBHighRdy;
    204c:	d0a6dc17 	ldw	r2,-25744(gp)
    2050:	d0a6e115 	stw	r2,-25724(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    2054:	000c6000 	call	c600 <OSStartHighRdy>
    }
}
    2058:	e037883a 	mov	sp,fp
    205c:	dfc00117 	ldw	ra,4(sp)
    2060:	df000017 	ldw	fp,0(sp)
    2064:	dec00204 	addi	sp,sp,8
    2068:	f800283a 	ret

0000206c <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    206c:	defff904 	addi	sp,sp,-28
    2070:	dfc00615 	stw	ra,24(sp)
    2074:	df000515 	stw	fp,20(sp)
    2078:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    207c:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    2080:	01000084 	movi	r4,2
    2084:	0008b980 	call	8b98 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2088:	0005303a 	rdctl	r2,status
    208c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2090:	e0fffc17 	ldw	r3,-16(fp)
    2094:	00bfff84 	movi	r2,-2
    2098:	1884703a 	and	r2,r3,r2
    209c:	1001703a 	wrctl	status,r2
  
  return context;
    20a0:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    20a4:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    20a8:	d026d315 	stw	zero,-25780(gp)
    20ac:	e0bffb17 	ldw	r2,-20(fp)
    20b0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    20b4:	e0bffd17 	ldw	r2,-12(fp)
    20b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    20bc:	0009883a 	mov	r4,zero
    20c0:	0008b980 	call	8b98 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    20c4:	0005303a 	rdctl	r2,status
    20c8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    20cc:	e0fffe17 	ldw	r3,-8(fp)
    20d0:	00bfff84 	movi	r2,-2
    20d4:	1884703a 	and	r2,r3,r2
    20d8:	1001703a 	wrctl	status,r2
  
  return context;
    20dc:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
    20e0:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    20e4:	d0a6d317 	ldw	r2,-25780(gp)
    20e8:	d0a6d815 	stw	r2,-25760(gp)
    OSStatRdy    = OS_TRUE;
    20ec:	00800044 	movi	r2,1
    20f0:	d0a6e405 	stb	r2,-25712(gp)
    20f4:	e0bffb17 	ldw	r2,-20(fp)
    20f8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    20fc:	e0bfff17 	ldw	r2,-4(fp)
    2100:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    2104:	e037883a 	mov	sp,fp
    2108:	dfc00117 	ldw	ra,4(sp)
    210c:	df000017 	ldw	fp,0(sp)
    2110:	dec00204 	addi	sp,sp,8
    2114:	f800283a 	ret

00002118 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    2118:	defff704 	addi	sp,sp,-36
    211c:	dfc00815 	stw	ra,32(sp)
    2120:	df000715 	stw	fp,28(sp)
    2124:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    2128:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    212c:	000c8180 	call	c818 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2130:	0005303a 	rdctl	r2,status
    2134:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2138:	e0fffc17 	ldw	r3,-16(fp)
    213c:	00bfff84 	movi	r2,-2
    2140:	1884703a 	and	r2,r3,r2
    2144:	1001703a 	wrctl	status,r2
  
  return context;
    2148:	e0bffc17 	ldw	r2,-16(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    214c:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
    2150:	d0a6e217 	ldw	r2,-25720(gp)
    2154:	10800044 	addi	r2,r2,1
    2158:	d0a6e215 	stw	r2,-25720(gp)
    215c:	e0bffb17 	ldw	r2,-20(fp)
    2160:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2164:	e0bffd17 	ldw	r2,-12(fp)
    2168:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    216c:	d0a6d243 	ldbu	r2,-25783(gp)
    2170:	10803fcc 	andi	r2,r2,255
    2174:	10800058 	cmpnei	r2,r2,1
    2178:	1000691e 	bne	r2,zero,2320 <OSTimeTick+0x208>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    217c:	d0a6d603 	ldbu	r2,-25768(gp)
    2180:	10803fcc 	andi	r2,r2,255
    2184:	10c00060 	cmpeqi	r3,r2,1
    2188:	1800061e 	bne	r3,zero,21a4 <OSTimeTick+0x8c>
    218c:	10c000a0 	cmpeqi	r3,r2,2
    2190:	1800061e 	bne	r3,zero,21ac <OSTimeTick+0x94>
    2194:	10000a1e 	bne	r2,zero,21c0 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    2198:	00800044 	movi	r2,1
    219c:	e0bffa05 	stb	r2,-24(fp)
                 break;
    21a0:	00000b06 	br	21d0 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    21a4:	e03ffa05 	stb	zero,-24(fp)
                 break;
    21a8:	00000906 	br	21d0 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    21ac:	00800044 	movi	r2,1
    21b0:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    21b4:	00800044 	movi	r2,1
    21b8:	d0a6d605 	stb	r2,-25768(gp)
                 break;
    21bc:	00000406 	br	21d0 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    21c0:	00800044 	movi	r2,1
    21c4:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    21c8:	d026d605 	stb	zero,-25768(gp)
                 break;
    21cc:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    21d0:	e0bffa03 	ldbu	r2,-24(fp)
    21d4:	1000011e 	bne	r2,zero,21dc <OSTimeTick+0xc4>
            return;
    21d8:	00005106 	br	2320 <OSTimeTick+0x208>
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    21dc:	d0a6d517 	ldw	r2,-25772(gp)
    21e0:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    21e4:	00004906 	br	230c <OSTimeTick+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    21e8:	0005303a 	rdctl	r2,status
    21ec:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    21f0:	e0fffe17 	ldw	r3,-8(fp)
    21f4:	00bfff84 	movi	r2,-2
    21f8:	1884703a 	and	r2,r3,r2
    21fc:	1001703a 	wrctl	status,r2
  
  return context;
    2200:	e0bffe17 	ldw	r2,-8(fp)
            OS_ENTER_CRITICAL();
    2204:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    2208:	e0bff917 	ldw	r2,-28(fp)
    220c:	10800b8b 	ldhu	r2,46(r2)
    2210:	10bfffcc 	andi	r2,r2,65535
    2214:	10003626 	beq	r2,zero,22f0 <OSTimeTick+0x1d8>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    2218:	e0bff917 	ldw	r2,-28(fp)
    221c:	10800b8b 	ldhu	r2,46(r2)
    2220:	10bfffc4 	addi	r2,r2,-1
    2224:	1007883a 	mov	r3,r2
    2228:	e0bff917 	ldw	r2,-28(fp)
    222c:	10c00b8d 	sth	r3,46(r2)
    2230:	e0bff917 	ldw	r2,-28(fp)
    2234:	10800b8b 	ldhu	r2,46(r2)
    2238:	10bfffcc 	andi	r2,r2,65535
    223c:	10002c1e 	bne	r2,zero,22f0 <OSTimeTick+0x1d8>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    2240:	e0bff917 	ldw	r2,-28(fp)
    2244:	10800c03 	ldbu	r2,48(r2)
    2248:	10803fcc 	andi	r2,r2,255
    224c:	10800dcc 	andi	r2,r2,55
    2250:	10000b26 	beq	r2,zero,2280 <OSTimeTick+0x168>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    2254:	e0bff917 	ldw	r2,-28(fp)
    2258:	10c00c03 	ldbu	r3,48(r2)
    225c:	00bff204 	movi	r2,-56
    2260:	1884703a 	and	r2,r3,r2
    2264:	1007883a 	mov	r3,r2
    2268:	e0bff917 	ldw	r2,-28(fp)
    226c:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    2270:	e0bff917 	ldw	r2,-28(fp)
    2274:	00c00044 	movi	r3,1
    2278:	10c00c45 	stb	r3,49(r2)
    227c:	00000206 	br	2288 <OSTimeTick+0x170>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    2280:	e0bff917 	ldw	r2,-28(fp)
    2284:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    2288:	e0bff917 	ldw	r2,-28(fp)
    228c:	10800c03 	ldbu	r2,48(r2)
    2290:	10803fcc 	andi	r2,r2,255
    2294:	1080020c 	andi	r2,r2,8
    2298:	1000151e 	bne	r2,zero,22f0 <OSTimeTick+0x1d8>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    229c:	e0bff917 	ldw	r2,-28(fp)
    22a0:	10c00d83 	ldbu	r3,54(r2)
    22a4:	d0a6de03 	ldbu	r2,-25736(gp)
    22a8:	1884b03a 	or	r2,r3,r2
    22ac:	d0a6de05 	stb	r2,-25736(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    22b0:	e0bff917 	ldw	r2,-28(fp)
    22b4:	10800d03 	ldbu	r2,52(r2)
    22b8:	10c03fcc 	andi	r3,r2,255
    22bc:	e0bff917 	ldw	r2,-28(fp)
    22c0:	10800d03 	ldbu	r2,52(r2)
    22c4:	11003fcc 	andi	r4,r2,255
    22c8:	d0a6de44 	addi	r2,gp,-25735
    22cc:	2085883a 	add	r2,r4,r2
    22d0:	11000003 	ldbu	r4,0(r2)
    22d4:	e0bff917 	ldw	r2,-28(fp)
    22d8:	10800d43 	ldbu	r2,53(r2)
    22dc:	2084b03a 	or	r2,r4,r2
    22e0:	1009883a 	mov	r4,r2
    22e4:	d0a6de44 	addi	r2,gp,-25735
    22e8:	1885883a 	add	r2,r3,r2
    22ec:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    22f0:	e0bff917 	ldw	r2,-28(fp)
    22f4:	10800517 	ldw	r2,20(r2)
    22f8:	e0bff915 	stw	r2,-28(fp)
    22fc:	e0bffb17 	ldw	r2,-20(fp)
    2300:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2304:	e0bfff17 	ldw	r2,-4(fp)
    2308:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    230c:	e0bff917 	ldw	r2,-28(fp)
    2310:	10800c83 	ldbu	r2,50(r2)
    2314:	10803fcc 	andi	r2,r2,255
    2318:	10800518 	cmpnei	r2,r2,20
    231c:	103fb21e 	bne	r2,zero,21e8 <OSTimeTick+0xd0>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    2320:	e037883a 	mov	sp,fp
    2324:	dfc00117 	ldw	ra,4(sp)
    2328:	df000017 	ldw	fp,0(sp)
    232c:	dec00204 	addi	sp,sp,8
    2330:	f800283a 	ret

00002334 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    2334:	deffff04 	addi	sp,sp,-4
    2338:	df000015 	stw	fp,0(sp)
    233c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    2340:	00804784 	movi	r2,286
}
    2344:	e037883a 	mov	sp,fp
    2348:	df000017 	ldw	fp,0(sp)
    234c:	dec00104 	addi	sp,sp,4
    2350:	f800283a 	ret

00002354 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    2354:	deffff04 	addi	sp,sp,-4
    2358:	df000015 	stw	fp,0(sp)
    235c:	d839883a 	mov	fp,sp
}
    2360:	e037883a 	mov	sp,fp
    2364:	df000017 	ldw	fp,0(sp)
    2368:	dec00104 	addi	sp,sp,4
    236c:	f800283a 	ret

00002370 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    2370:	defff804 	addi	sp,sp,-32
    2374:	dfc00715 	stw	ra,28(sp)
    2378:	df000615 	stw	fp,24(sp)
    237c:	df000604 	addi	fp,sp,24
    2380:	e13ffc15 	stw	r4,-16(fp)
    2384:	e17ffd15 	stw	r5,-12(fp)
    2388:	3007883a 	mov	r3,r6
    238c:	3805883a 	mov	r2,r7
    2390:	e0fffe05 	stb	r3,-8(fp)
    2394:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    2398:	e0bffc17 	ldw	r2,-16(fp)
    239c:	10800283 	ldbu	r2,10(r2)
    23a0:	10c03fcc 	andi	r3,r2,255
    23a4:	00800074 	movhi	r2,1
    23a8:	10b4d004 	addi	r2,r2,-11456
    23ac:	10c5883a 	add	r2,r2,r3
    23b0:	10800003 	ldbu	r2,0(r2)
    23b4:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    23b8:	e0bffa03 	ldbu	r2,-24(fp)
    23bc:	e0fffc17 	ldw	r3,-16(fp)
    23c0:	1885883a 	add	r2,r3,r2
    23c4:	10800204 	addi	r2,r2,8
    23c8:	108000c3 	ldbu	r2,3(r2)
    23cc:	10c03fcc 	andi	r3,r2,255
    23d0:	00800074 	movhi	r2,1
    23d4:	10b4d004 	addi	r2,r2,-11456
    23d8:	10c5883a 	add	r2,r2,r3
    23dc:	10800003 	ldbu	r2,0(r2)
    23e0:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    23e4:	e0bffa03 	ldbu	r2,-24(fp)
    23e8:	100490fa 	slli	r2,r2,3
    23ec:	1007883a 	mov	r3,r2
    23f0:	e0bffa43 	ldbu	r2,-23(fp)
    23f4:	1885883a 	add	r2,r3,r2
    23f8:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    23fc:	e0fffa83 	ldbu	r3,-22(fp)
    2400:	00800074 	movhi	r2,1
    2404:	109f5704 	addi	r2,r2,32092
    2408:	18c7883a 	add	r3,r3,r3
    240c:	18c7883a 	add	r3,r3,r3
    2410:	10c5883a 	add	r2,r2,r3
    2414:	10800017 	ldw	r2,0(r2)
    2418:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    241c:	e0bffb17 	ldw	r2,-20(fp)
    2420:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    2424:	e0bffb17 	ldw	r2,-20(fp)
    2428:	e0fffd17 	ldw	r3,-12(fp)
    242c:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    2430:	e0bffb17 	ldw	r2,-20(fp)
    2434:	10800c03 	ldbu	r2,48(r2)
    2438:	1007883a 	mov	r3,r2
    243c:	e0bffe03 	ldbu	r2,-8(fp)
    2440:	0084303a 	nor	r2,zero,r2
    2444:	1884703a 	and	r2,r3,r2
    2448:	1007883a 	mov	r3,r2
    244c:	e0bffb17 	ldw	r2,-20(fp)
    2450:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    2454:	e0bffb17 	ldw	r2,-20(fp)
    2458:	e0ffff03 	ldbu	r3,-4(fp)
    245c:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    2460:	e0bffb17 	ldw	r2,-20(fp)
    2464:	10800c03 	ldbu	r2,48(r2)
    2468:	10803fcc 	andi	r2,r2,255
    246c:	1080020c 	andi	r2,r2,8
    2470:	1000111e 	bne	r2,zero,24b8 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    2474:	e0bffb17 	ldw	r2,-20(fp)
    2478:	10c00d83 	ldbu	r3,54(r2)
    247c:	d0a6de03 	ldbu	r2,-25736(gp)
    2480:	1884b03a 	or	r2,r3,r2
    2484:	d0a6de05 	stb	r2,-25736(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    2488:	e0fffa03 	ldbu	r3,-24(fp)
    248c:	e13ffa03 	ldbu	r4,-24(fp)
    2490:	d0a6de44 	addi	r2,gp,-25735
    2494:	2085883a 	add	r2,r4,r2
    2498:	11000003 	ldbu	r4,0(r2)
    249c:	e0bffb17 	ldw	r2,-20(fp)
    24a0:	10800d43 	ldbu	r2,53(r2)
    24a4:	2084b03a 	or	r2,r4,r2
    24a8:	1009883a 	mov	r4,r2
    24ac:	d0a6de44 	addi	r2,gp,-25735
    24b0:	1885883a 	add	r2,r3,r2
    24b4:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    24b8:	e13ffb17 	ldw	r4,-20(fp)
    24bc:	e17ffc17 	ldw	r5,-16(fp)
    24c0:	00027600 	call	2760 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    24c4:	e0bffb17 	ldw	r2,-20(fp)
    24c8:	10800817 	ldw	r2,32(r2)
    24cc:	10000826 	beq	r2,zero,24f0 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    24d0:	e0bffb17 	ldw	r2,-20(fp)
    24d4:	10800817 	ldw	r2,32(r2)
    24d8:	e13ffb17 	ldw	r4,-20(fp)
    24dc:	100b883a 	mov	r5,r2
    24e0:	00028140 	call	2814 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    24e4:	e0bffb17 	ldw	r2,-20(fp)
    24e8:	e0fffc17 	ldw	r3,-16(fp)
    24ec:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
    24f0:	e0bffa83 	ldbu	r2,-22(fp)
}
    24f4:	e037883a 	mov	sp,fp
    24f8:	dfc00117 	ldw	ra,4(sp)
    24fc:	df000017 	ldw	fp,0(sp)
    2500:	dec00204 	addi	sp,sp,8
    2504:	f800283a 	ret

00002508 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    2508:	defffd04 	addi	sp,sp,-12
    250c:	df000215 	stw	fp,8(sp)
    2510:	df000204 	addi	fp,sp,8
    2514:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    2518:	d0a6e117 	ldw	r2,-25724(gp)
    251c:	e0ffff17 	ldw	r3,-4(fp)
    2520:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    2524:	d0a6e117 	ldw	r2,-25724(gp)
    2528:	10800d03 	ldbu	r2,52(r2)
    252c:	10803fcc 	andi	r2,r2,255
    2530:	d0e6e117 	ldw	r3,-25724(gp)
    2534:	18c00d03 	ldbu	r3,52(r3)
    2538:	18c03fcc 	andi	r3,r3,255
    253c:	e13fff17 	ldw	r4,-4(fp)
    2540:	20c7883a 	add	r3,r4,r3
    2544:	18c00204 	addi	r3,r3,8
    2548:	190000c3 	ldbu	r4,3(r3)
    254c:	d0e6e117 	ldw	r3,-25724(gp)
    2550:	18c00d43 	ldbu	r3,53(r3)
    2554:	20c6b03a 	or	r3,r4,r3
    2558:	1809883a 	mov	r4,r3
    255c:	e0ffff17 	ldw	r3,-4(fp)
    2560:	1885883a 	add	r2,r3,r2
    2564:	10800204 	addi	r2,r2,8
    2568:	110000c5 	stb	r4,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    256c:	e0bfff17 	ldw	r2,-4(fp)
    2570:	10c00283 	ldbu	r3,10(r2)
    2574:	d0a6e117 	ldw	r2,-25724(gp)
    2578:	10800d83 	ldbu	r2,54(r2)
    257c:	1884b03a 	or	r2,r3,r2
    2580:	1007883a 	mov	r3,r2
    2584:	e0bfff17 	ldw	r2,-4(fp)
    2588:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    258c:	d0a6e117 	ldw	r2,-25724(gp)
    2590:	10800d03 	ldbu	r2,52(r2)
    2594:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    2598:	e0fffe03 	ldbu	r3,-8(fp)
    259c:	e13ffe03 	ldbu	r4,-8(fp)
    25a0:	d0a6de44 	addi	r2,gp,-25735
    25a4:	2085883a 	add	r2,r4,r2
    25a8:	10800003 	ldbu	r2,0(r2)
    25ac:	1009883a 	mov	r4,r2
    25b0:	d0a6e117 	ldw	r2,-25724(gp)
    25b4:	10800d43 	ldbu	r2,53(r2)
    25b8:	0084303a 	nor	r2,zero,r2
    25bc:	2084703a 	and	r2,r4,r2
    25c0:	1009883a 	mov	r4,r2
    25c4:	d0a6de44 	addi	r2,gp,-25735
    25c8:	1885883a 	add	r2,r3,r2
    25cc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    25d0:	e0fffe03 	ldbu	r3,-8(fp)
    25d4:	d0a6de44 	addi	r2,gp,-25735
    25d8:	1885883a 	add	r2,r3,r2
    25dc:	10800003 	ldbu	r2,0(r2)
    25e0:	10803fcc 	andi	r2,r2,255
    25e4:	1000071e 	bne	r2,zero,2604 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    25e8:	d0a6e117 	ldw	r2,-25724(gp)
    25ec:	10800d83 	ldbu	r2,54(r2)
    25f0:	0084303a 	nor	r2,zero,r2
    25f4:	1007883a 	mov	r3,r2
    25f8:	d0a6de03 	ldbu	r2,-25736(gp)
    25fc:	1884703a 	and	r2,r3,r2
    2600:	d0a6de05 	stb	r2,-25736(gp)
    }
}
    2604:	e037883a 	mov	sp,fp
    2608:	df000017 	ldw	fp,0(sp)
    260c:	dec00104 	addi	sp,sp,4
    2610:	f800283a 	ret

00002614 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    2614:	defffb04 	addi	sp,sp,-20
    2618:	df000415 	stw	fp,16(sp)
    261c:	df000404 	addi	fp,sp,16
    2620:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    2624:	d0a6e117 	ldw	r2,-25724(gp)
    2628:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    262c:	d0a6e117 	ldw	r2,-25724(gp)
    2630:	e0ffff17 	ldw	r3,-4(fp)
    2634:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
    2638:	e0bfff17 	ldw	r2,-4(fp)
    263c:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
    2640:	e0bffc17 	ldw	r2,-16(fp)
    2644:	10800017 	ldw	r2,0(r2)
    2648:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    264c:	00002006 	br	26d0 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    2650:	d0a6e117 	ldw	r2,-25724(gp)
    2654:	10800d03 	ldbu	r2,52(r2)
    2658:	10803fcc 	andi	r2,r2,255
    265c:	d0e6e117 	ldw	r3,-25724(gp)
    2660:	18c00d03 	ldbu	r3,52(r3)
    2664:	18c03fcc 	andi	r3,r3,255
    2668:	e13ffd17 	ldw	r4,-12(fp)
    266c:	20c7883a 	add	r3,r4,r3
    2670:	18c00204 	addi	r3,r3,8
    2674:	190000c3 	ldbu	r4,3(r3)
    2678:	d0e6e117 	ldw	r3,-25724(gp)
    267c:	18c00d43 	ldbu	r3,53(r3)
    2680:	20c6b03a 	or	r3,r4,r3
    2684:	1809883a 	mov	r4,r3
    2688:	e0fffd17 	ldw	r3,-12(fp)
    268c:	1885883a 	add	r2,r3,r2
    2690:	10800204 	addi	r2,r2,8
    2694:	110000c5 	stb	r4,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    2698:	e0bffd17 	ldw	r2,-12(fp)
    269c:	10c00283 	ldbu	r3,10(r2)
    26a0:	d0a6e117 	ldw	r2,-25724(gp)
    26a4:	10800d83 	ldbu	r2,54(r2)
    26a8:	1884b03a 	or	r2,r3,r2
    26ac:	1007883a 	mov	r3,r2
    26b0:	e0bffd17 	ldw	r2,-12(fp)
    26b4:	10c00285 	stb	r3,10(r2)
        pevents++;
    26b8:	e0bffc17 	ldw	r2,-16(fp)
    26bc:	10800104 	addi	r2,r2,4
    26c0:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
    26c4:	e0bffc17 	ldw	r2,-16(fp)
    26c8:	10800017 	ldw	r2,0(r2)
    26cc:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    26d0:	e0bffd17 	ldw	r2,-12(fp)
    26d4:	103fde1e 	bne	r2,zero,2650 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    26d8:	d0a6e117 	ldw	r2,-25724(gp)
    26dc:	10800d03 	ldbu	r2,52(r2)
    26e0:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    26e4:	e0fffe03 	ldbu	r3,-8(fp)
    26e8:	e13ffe03 	ldbu	r4,-8(fp)
    26ec:	d0a6de44 	addi	r2,gp,-25735
    26f0:	2085883a 	add	r2,r4,r2
    26f4:	10800003 	ldbu	r2,0(r2)
    26f8:	1009883a 	mov	r4,r2
    26fc:	d0a6e117 	ldw	r2,-25724(gp)
    2700:	10800d43 	ldbu	r2,53(r2)
    2704:	0084303a 	nor	r2,zero,r2
    2708:	2084703a 	and	r2,r4,r2
    270c:	1009883a 	mov	r4,r2
    2710:	d0a6de44 	addi	r2,gp,-25735
    2714:	1885883a 	add	r2,r3,r2
    2718:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    271c:	e0fffe03 	ldbu	r3,-8(fp)
    2720:	d0a6de44 	addi	r2,gp,-25735
    2724:	1885883a 	add	r2,r3,r2
    2728:	10800003 	ldbu	r2,0(r2)
    272c:	10803fcc 	andi	r2,r2,255
    2730:	1000071e 	bne	r2,zero,2750 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    2734:	d0a6e117 	ldw	r2,-25724(gp)
    2738:	10800d83 	ldbu	r2,54(r2)
    273c:	0084303a 	nor	r2,zero,r2
    2740:	1007883a 	mov	r3,r2
    2744:	d0a6de03 	ldbu	r2,-25736(gp)
    2748:	1884703a 	and	r2,r3,r2
    274c:	d0a6de05 	stb	r2,-25736(gp)
    }
}
    2750:	e037883a 	mov	sp,fp
    2754:	df000017 	ldw	fp,0(sp)
    2758:	dec00104 	addi	sp,sp,4
    275c:	f800283a 	ret

00002760 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    2760:	defffc04 	addi	sp,sp,-16
    2764:	df000315 	stw	fp,12(sp)
    2768:	df000304 	addi	fp,sp,12
    276c:	e13ffe15 	stw	r4,-8(fp)
    2770:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    2774:	e0bffe17 	ldw	r2,-8(fp)
    2778:	10800d03 	ldbu	r2,52(r2)
    277c:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    2780:	e0bffd03 	ldbu	r2,-12(fp)
    2784:	e0fffd03 	ldbu	r3,-12(fp)
    2788:	e13fff17 	ldw	r4,-4(fp)
    278c:	20c7883a 	add	r3,r4,r3
    2790:	18c00204 	addi	r3,r3,8
    2794:	18c000c3 	ldbu	r3,3(r3)
    2798:	1809883a 	mov	r4,r3
    279c:	e0fffe17 	ldw	r3,-8(fp)
    27a0:	18c00d43 	ldbu	r3,53(r3)
    27a4:	00c6303a 	nor	r3,zero,r3
    27a8:	20c6703a 	and	r3,r4,r3
    27ac:	1809883a 	mov	r4,r3
    27b0:	e0ffff17 	ldw	r3,-4(fp)
    27b4:	1885883a 	add	r2,r3,r2
    27b8:	10800204 	addi	r2,r2,8
    27bc:	110000c5 	stb	r4,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
    27c0:	e0bffd03 	ldbu	r2,-12(fp)
    27c4:	e0ffff17 	ldw	r3,-4(fp)
    27c8:	1885883a 	add	r2,r3,r2
    27cc:	10800204 	addi	r2,r2,8
    27d0:	108000c3 	ldbu	r2,3(r2)
    27d4:	10803fcc 	andi	r2,r2,255
    27d8:	10000a1e 	bne	r2,zero,2804 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    27dc:	e0bfff17 	ldw	r2,-4(fp)
    27e0:	10800283 	ldbu	r2,10(r2)
    27e4:	1007883a 	mov	r3,r2
    27e8:	e0bffe17 	ldw	r2,-8(fp)
    27ec:	10800d83 	ldbu	r2,54(r2)
    27f0:	0084303a 	nor	r2,zero,r2
    27f4:	1884703a 	and	r2,r3,r2
    27f8:	1007883a 	mov	r3,r2
    27fc:	e0bfff17 	ldw	r2,-4(fp)
    2800:	10c00285 	stb	r3,10(r2)
    }
}
    2804:	e037883a 	mov	sp,fp
    2808:	df000017 	ldw	fp,0(sp)
    280c:	dec00104 	addi	sp,sp,4
    2810:	f800283a 	ret

00002814 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    2814:	defffa04 	addi	sp,sp,-24
    2818:	df000515 	stw	fp,20(sp)
    281c:	df000504 	addi	fp,sp,20
    2820:	e13ffe15 	stw	r4,-8(fp)
    2824:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    2828:	e0bffe17 	ldw	r2,-8(fp)
    282c:	10800d03 	ldbu	r2,52(r2)
    2830:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
    2834:	e0bffe17 	ldw	r2,-8(fp)
    2838:	10800d83 	ldbu	r2,54(r2)
    283c:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
    2840:	e0bffe17 	ldw	r2,-8(fp)
    2844:	10800d43 	ldbu	r2,53(r2)
    2848:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
    284c:	e0bfff17 	ldw	r2,-4(fp)
    2850:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
    2854:	e0bffb17 	ldw	r2,-20(fp)
    2858:	10800017 	ldw	r2,0(r2)
    285c:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    2860:	00002506 	br	28f8 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
    2864:	e0bffd03 	ldbu	r2,-12(fp)
    2868:	e0fffd03 	ldbu	r3,-12(fp)
    286c:	e13ffc17 	ldw	r4,-16(fp)
    2870:	20c7883a 	add	r3,r4,r3
    2874:	18c00204 	addi	r3,r3,8
    2878:	18c000c3 	ldbu	r3,3(r3)
    287c:	1809883a 	mov	r4,r3
    2880:	e0fffd83 	ldbu	r3,-10(fp)
    2884:	00c6303a 	nor	r3,zero,r3
    2888:	20c6703a 	and	r3,r4,r3
    288c:	1809883a 	mov	r4,r3
    2890:	e0fffc17 	ldw	r3,-16(fp)
    2894:	1885883a 	add	r2,r3,r2
    2898:	10800204 	addi	r2,r2,8
    289c:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
    28a0:	e0bffd03 	ldbu	r2,-12(fp)
    28a4:	e0fffc17 	ldw	r3,-16(fp)
    28a8:	1885883a 	add	r2,r3,r2
    28ac:	10800204 	addi	r2,r2,8
    28b0:	108000c3 	ldbu	r2,3(r2)
    28b4:	10803fcc 	andi	r2,r2,255
    28b8:	1000091e 	bne	r2,zero,28e0 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
    28bc:	e0bffc17 	ldw	r2,-16(fp)
    28c0:	10800283 	ldbu	r2,10(r2)
    28c4:	1007883a 	mov	r3,r2
    28c8:	e0bffd43 	ldbu	r2,-11(fp)
    28cc:	0084303a 	nor	r2,zero,r2
    28d0:	1884703a 	and	r2,r3,r2
    28d4:	1007883a 	mov	r3,r2
    28d8:	e0bffc17 	ldw	r2,-16(fp)
    28dc:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
    28e0:	e0bffb17 	ldw	r2,-20(fp)
    28e4:	10800104 	addi	r2,r2,4
    28e8:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
    28ec:	e0bffb17 	ldw	r2,-20(fp)
    28f0:	10800017 	ldw	r2,0(r2)
    28f4:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    28f8:	e0bffc17 	ldw	r2,-16(fp)
    28fc:	103fd91e 	bne	r2,zero,2864 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
    2900:	e037883a 	mov	sp,fp
    2904:	df000017 	ldw	fp,0(sp)
    2908:	dec00104 	addi	sp,sp,4
    290c:	f800283a 	ret

00002910 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    2910:	defffc04 	addi	sp,sp,-16
    2914:	df000315 	stw	fp,12(sp)
    2918:	df000304 	addi	fp,sp,12
    291c:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    2920:	e0bfff17 	ldw	r2,-4(fp)
    2924:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
    2928:	e0bfff17 	ldw	r2,-4(fp)
    292c:	108002c4 	addi	r2,r2,11
    2930:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    2934:	e03ffe05 	stb	zero,-8(fp)
    2938:	00000706 	br	2958 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
    293c:	e0bffd17 	ldw	r2,-12(fp)
    2940:	10c00044 	addi	r3,r2,1
    2944:	e0fffd15 	stw	r3,-12(fp)
    2948:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    294c:	e0bffe03 	ldbu	r2,-8(fp)
    2950:	10800044 	addi	r2,r2,1
    2954:	e0bffe05 	stb	r2,-8(fp)
    2958:	e0bffe03 	ldbu	r2,-8(fp)
    295c:	108000f0 	cmpltui	r2,r2,3
    2960:	103ff61e 	bne	r2,zero,293c <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
    2964:	e037883a 	mov	sp,fp
    2968:	df000017 	ldw	fp,0(sp)
    296c:	dec00104 	addi	sp,sp,4
    2970:	f800283a 	ret

00002974 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    2974:	defffb04 	addi	sp,sp,-20
    2978:	dfc00415 	stw	ra,16(sp)
    297c:	df000315 	stw	fp,12(sp)
    2980:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    2984:	01000074 	movhi	r4,1
    2988:	211b4304 	addi	r4,r4,27916
    298c:	0142d004 	movi	r5,2880
    2990:	0002cd40 	call	2cd4 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    2994:	00800074 	movhi	r2,1
    2998:	109b4304 	addi	r2,r2,27916
    299c:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
    29a0:	00800074 	movhi	r2,1
    29a4:	109b4f04 	addi	r2,r2,27964
    29a8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    29ac:	e03ffd0d 	sth	zero,-12(fp)
    29b0:	00001306 	br	2a00 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    29b4:	e0bffe17 	ldw	r2,-8(fp)
    29b8:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
    29bc:	e0bffe17 	ldw	r2,-8(fp)
    29c0:	e0ffff17 	ldw	r3,-4(fp)
    29c4:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    29c8:	e0bffe17 	ldw	r2,-8(fp)
    29cc:	00c00fc4 	movi	r3,63
    29d0:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    29d4:	e0bffe17 	ldw	r2,-8(fp)
    29d8:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
    29dc:	e0bffe17 	ldw	r2,-8(fp)
    29e0:	10800c04 	addi	r2,r2,48
    29e4:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
    29e8:	e0bfff17 	ldw	r2,-4(fp)
    29ec:	10800c04 	addi	r2,r2,48
    29f0:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    29f4:	e0bffd0b 	ldhu	r2,-12(fp)
    29f8:	10800044 	addi	r2,r2,1
    29fc:	e0bffd0d 	sth	r2,-12(fp)
    2a00:	e0bffd0b 	ldhu	r2,-12(fp)
    2a04:	10800ef0 	cmpltui	r2,r2,59
    2a08:	103fea1e 	bne	r2,zero,29b4 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    2a0c:	e0bffe17 	ldw	r2,-8(fp)
    2a10:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    2a14:	e0bffe17 	ldw	r2,-8(fp)
    2a18:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    2a1c:	e0bffe17 	ldw	r2,-8(fp)
    2a20:	00c00fc4 	movi	r3,63
    2a24:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    2a28:	e0bffe17 	ldw	r2,-8(fp)
    2a2c:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    2a30:	00800074 	movhi	r2,1
    2a34:	109b4304 	addi	r2,r2,27916
    2a38:	d0a6df15 	stw	r2,-25732(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    2a3c:	e037883a 	mov	sp,fp
    2a40:	dfc00117 	ldw	ra,4(sp)
    2a44:	df000017 	ldw	fp,0(sp)
    2a48:	dec00204 	addi	sp,sp,8
    2a4c:	f800283a 	ret

00002a50 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    2a50:	deffff04 	addi	sp,sp,-4
    2a54:	df000015 	stw	fp,0(sp)
    2a58:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    2a5c:	d026e215 	stw	zero,-25720(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    2a60:	d026e005 	stb	zero,-25728(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    2a64:	d026d205 	stb	zero,-25784(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    2a68:	d026da45 	stb	zero,-25751(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    2a6c:	d026d245 	stb	zero,-25783(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    2a70:	d026d715 	stw	zero,-25764(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    2a74:	d026d315 	stw	zero,-25780(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    2a78:	d026e515 	stw	zero,-25708(gp)
    OSIdleCtrMax  = 0L;
    2a7c:	d026d815 	stw	zero,-25760(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    2a80:	d026e405 	stb	zero,-25712(gp)
#endif
}
    2a84:	e037883a 	mov	sp,fp
    2a88:	df000017 	ldw	fp,0(sp)
    2a8c:	dec00104 	addi	sp,sp,4
    2a90:	f800283a 	ret

00002a94 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    2a94:	defffd04 	addi	sp,sp,-12
    2a98:	df000215 	stw	fp,8(sp)
    2a9c:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    2aa0:	d026de05 	stb	zero,-25736(gp)
    prdytbl       = &OSRdyTbl[0];
    2aa4:	d0a6de44 	addi	r2,gp,-25735
    2aa8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    2aac:	e03ffe05 	stb	zero,-8(fp)
    2ab0:	00000706 	br	2ad0 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
    2ab4:	e0bfff17 	ldw	r2,-4(fp)
    2ab8:	10c00044 	addi	r3,r2,1
    2abc:	e0ffff15 	stw	r3,-4(fp)
    2ac0:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    2ac4:	e0bffe03 	ldbu	r2,-8(fp)
    2ac8:	10800044 	addi	r2,r2,1
    2acc:	e0bffe05 	stb	r2,-8(fp)
    2ad0:	e0bffe03 	ldbu	r2,-8(fp)
    2ad4:	108000f0 	cmpltui	r2,r2,3
    2ad8:	103ff61e 	bne	r2,zero,2ab4 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    2adc:	d026d445 	stb	zero,-25775(gp)
    OSPrioHighRdy = 0;
    2ae0:	d026d405 	stb	zero,-25776(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
    2ae4:	d026dc15 	stw	zero,-25744(gp)
    OSTCBCur      = (OS_TCB *)0;
    2ae8:	d026e115 	stw	zero,-25724(gp)
}
    2aec:	e037883a 	mov	sp,fp
    2af0:	df000017 	ldw	fp,0(sp)
    2af4:	dec00104 	addi	sp,sp,4
    2af8:	f800283a 	ret

00002afc <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    2afc:	defff804 	addi	sp,sp,-32
    2b00:	dfc00715 	stw	ra,28(sp)
    2b04:	df000615 	stw	fp,24(sp)
    2b08:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    2b0c:	00bfffd4 	movui	r2,65535
    2b10:	d8800015 	stw	r2,0(sp)
    2b14:	00800074 	movhi	r2,1
    2b18:	10994304 	addi	r2,r2,25868
    2b1c:	d8800115 	stw	r2,4(sp)
    2b20:	00808004 	movi	r2,512
    2b24:	d8800215 	stw	r2,8(sp)
    2b28:	d8000315 	stw	zero,12(sp)
    2b2c:	008000c4 	movi	r2,3
    2b30:	d8800415 	stw	r2,16(sp)
    2b34:	01000034 	movhi	r4,0
    2b38:	210be304 	addi	r4,r4,12172
    2b3c:	000b883a 	mov	r5,zero
    2b40:	01800074 	movhi	r6,1
    2b44:	319b4204 	addi	r6,r6,27912
    2b48:	01c00504 	movi	r7,20
    2b4c:	00079a00 	call	79a0 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    2b50:	01000504 	movi	r4,20
    2b54:	01400074 	movhi	r5,1
    2b58:	29751004 	addi	r5,r5,-11200
    2b5c:	e1bfff04 	addi	r6,fp,-4
    2b60:	000826c0 	call	826c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    2b64:	e037883a 	mov	sp,fp
    2b68:	dfc00117 	ldw	ra,4(sp)
    2b6c:	df000017 	ldw	fp,0(sp)
    2b70:	dec00204 	addi	sp,sp,8
    2b74:	f800283a 	ret

00002b78 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
    2b78:	defff804 	addi	sp,sp,-32
    2b7c:	dfc00715 	stw	ra,28(sp)
    2b80:	df000615 	stw	fp,24(sp)
    2b84:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    2b88:	00bfff94 	movui	r2,65534
    2b8c:	d8800015 	stw	r2,0(sp)
    2b90:	00800074 	movhi	r2,1
    2b94:	1096cb04 	addi	r2,r2,23340
    2b98:	d8800115 	stw	r2,4(sp)
    2b9c:	00808004 	movi	r2,512
    2ba0:	d8800215 	stw	r2,8(sp)
    2ba4:	d8000315 	stw	zero,12(sp)
    2ba8:	008000c4 	movi	r2,3
    2bac:	d8800415 	stw	r2,16(sp)
    2bb0:	01000034 	movhi	r4,0
    2bb4:	210bfa04 	addi	r4,r4,12264
    2bb8:	000b883a 	mov	r5,zero
    2bbc:	01800074 	movhi	r6,1
    2bc0:	3198ca04 	addi	r6,r6,25384
    2bc4:	01c004c4 	movi	r7,19
    2bc8:	00079a00 	call	79a0 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    2bcc:	010004c4 	movi	r4,19
    2bd0:	01400074 	movhi	r5,1
    2bd4:	29751404 	addi	r5,r5,-11184
    2bd8:	e1bfff04 	addi	r6,fp,-4
    2bdc:	000826c0 	call	826c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
    2be0:	e037883a 	mov	sp,fp
    2be4:	dfc00117 	ldw	ra,4(sp)
    2be8:	df000017 	ldw	fp,0(sp)
    2bec:	dec00204 	addi	sp,sp,8
    2bf0:	f800283a 	ret

00002bf4 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    2bf4:	defffb04 	addi	sp,sp,-20
    2bf8:	dfc00415 	stw	ra,16(sp)
    2bfc:	df000315 	stw	fp,12(sp)
    2c00:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    2c04:	01000074 	movhi	r4,1
    2c08:	211e1304 	addi	r4,r4,30796
    2c0c:	01414404 	movi	r5,1296
    2c10:	0002cd40 	call	2cd4 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    2c14:	01000074 	movhi	r4,1
    2c18:	211f5704 	addi	r4,r4,32092
    2c1c:	01401504 	movi	r5,84
    2c20:	0002cd40 	call	2cd4 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    2c24:	00800074 	movhi	r2,1
    2c28:	109e1304 	addi	r2,r2,30796
    2c2c:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
    2c30:	00800074 	movhi	r2,1
    2c34:	109e2e04 	addi	r2,r2,30904
    2c38:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    2c3c:	e03ffd05 	stb	zero,-12(fp)
    2c40:	00001106 	br	2c88 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
    2c44:	e0bffe17 	ldw	r2,-8(fp)
    2c48:	e0ffff17 	ldw	r3,-4(fp)
    2c4c:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    2c50:	e0bffe17 	ldw	r2,-8(fp)
    2c54:	00c00fc4 	movi	r3,63
    2c58:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    2c5c:	e0bffe17 	ldw	r2,-8(fp)
    2c60:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
    2c64:	e0bffe17 	ldw	r2,-8(fp)
    2c68:	10801b04 	addi	r2,r2,108
    2c6c:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
    2c70:	e0bfff17 	ldw	r2,-4(fp)
    2c74:	10801b04 	addi	r2,r2,108
    2c78:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    2c7c:	e0bffd03 	ldbu	r2,-12(fp)
    2c80:	10800044 	addi	r2,r2,1
    2c84:	e0bffd05 	stb	r2,-12(fp)
    2c88:	e0bffd03 	ldbu	r2,-12(fp)
    2c8c:	108002f0 	cmpltui	r2,r2,11
    2c90:	103fec1e 	bne	r2,zero,2c44 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    2c94:	e0bffe17 	ldw	r2,-8(fp)
    2c98:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    2c9c:	e0bffe17 	ldw	r2,-8(fp)
    2ca0:	00c00fc4 	movi	r3,63
    2ca4:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    2ca8:	e0bffe17 	ldw	r2,-8(fp)
    2cac:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    2cb0:	d026d515 	stw	zero,-25772(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
    2cb4:	00800074 	movhi	r2,1
    2cb8:	109e1304 	addi	r2,r2,30796
    2cbc:	d0a6d915 	stw	r2,-25756(gp)
}
    2cc0:	e037883a 	mov	sp,fp
    2cc4:	dfc00117 	ldw	ra,4(sp)
    2cc8:	df000017 	ldw	fp,0(sp)
    2ccc:	dec00204 	addi	sp,sp,8
    2cd0:	f800283a 	ret

00002cd4 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    2cd4:	defffd04 	addi	sp,sp,-12
    2cd8:	df000215 	stw	fp,8(sp)
    2cdc:	df000204 	addi	fp,sp,8
    2ce0:	e13ffe15 	stw	r4,-8(fp)
    2ce4:	2805883a 	mov	r2,r5
    2ce8:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    2cec:	00000706 	br	2d0c <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
    2cf0:	e0bffe17 	ldw	r2,-8(fp)
    2cf4:	10c00044 	addi	r3,r2,1
    2cf8:	e0fffe15 	stw	r3,-8(fp)
    2cfc:	10000005 	stb	zero,0(r2)
        size--;
    2d00:	e0bfff0b 	ldhu	r2,-4(fp)
    2d04:	10bfffc4 	addi	r2,r2,-1
    2d08:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    2d0c:	e0bfff0b 	ldhu	r2,-4(fp)
    2d10:	103ff71e 	bne	r2,zero,2cf0 <OS_MemClr+0x1c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
    2d14:	e037883a 	mov	sp,fp
    2d18:	df000017 	ldw	fp,0(sp)
    2d1c:	dec00104 	addi	sp,sp,4
    2d20:	f800283a 	ret

00002d24 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    2d24:	defffc04 	addi	sp,sp,-16
    2d28:	df000315 	stw	fp,12(sp)
    2d2c:	df000304 	addi	fp,sp,12
    2d30:	e13ffd15 	stw	r4,-12(fp)
    2d34:	e17ffe15 	stw	r5,-8(fp)
    2d38:	3005883a 	mov	r2,r6
    2d3c:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    2d40:	00000b06 	br	2d70 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
    2d44:	e0bffd17 	ldw	r2,-12(fp)
    2d48:	10c00044 	addi	r3,r2,1
    2d4c:	e0fffd15 	stw	r3,-12(fp)
    2d50:	e0fffe17 	ldw	r3,-8(fp)
    2d54:	19000044 	addi	r4,r3,1
    2d58:	e13ffe15 	stw	r4,-8(fp)
    2d5c:	18c00003 	ldbu	r3,0(r3)
    2d60:	10c00005 	stb	r3,0(r2)
        size--;
    2d64:	e0bfff0b 	ldhu	r2,-4(fp)
    2d68:	10bfffc4 	addi	r2,r2,-1
    2d6c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
    2d70:	e0bfff0b 	ldhu	r2,-4(fp)
    2d74:	103ff31e 	bne	r2,zero,2d44 <OS_MemCopy+0x20>
        *pdest++ = *psrc++;
        size--;
    }
}
    2d78:	e037883a 	mov	sp,fp
    2d7c:	df000017 	ldw	fp,0(sp)
    2d80:	dec00104 	addi	sp,sp,4
    2d84:	f800283a 	ret

00002d88 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    2d88:	defffb04 	addi	sp,sp,-20
    2d8c:	dfc00415 	stw	ra,16(sp)
    2d90:	df000315 	stw	fp,12(sp)
    2d94:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    2d98:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2d9c:	0005303a 	rdctl	r2,status
    2da0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2da4:	e0fffe17 	ldw	r3,-8(fp)
    2da8:	00bfff84 	movi	r2,-2
    2dac:	1884703a 	and	r2,r3,r2
    2db0:	1001703a 	wrctl	status,r2
  
  return context;
    2db4:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    2db8:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    2dbc:	d0a6e003 	ldbu	r2,-25728(gp)
    2dc0:	10803fcc 	andi	r2,r2,255
    2dc4:	10001a1e 	bne	r2,zero,2e30 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    2dc8:	d0a6d203 	ldbu	r2,-25784(gp)
    2dcc:	10803fcc 	andi	r2,r2,255
    2dd0:	1000171e 	bne	r2,zero,2e30 <OS_Sched+0xa8>
            OS_SchedNew();
    2dd4:	0002e540 	call	2e54 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    2dd8:	d0e6d403 	ldbu	r3,-25776(gp)
    2ddc:	d0a6d443 	ldbu	r2,-25775(gp)
    2de0:	18c03fcc 	andi	r3,r3,255
    2de4:	10803fcc 	andi	r2,r2,255
    2de8:	18801126 	beq	r3,r2,2e30 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    2dec:	d0a6d403 	ldbu	r2,-25776(gp)
    2df0:	10c03fcc 	andi	r3,r2,255
    2df4:	00800074 	movhi	r2,1
    2df8:	109f5704 	addi	r2,r2,32092
    2dfc:	18c7883a 	add	r3,r3,r3
    2e00:	18c7883a 	add	r3,r3,r3
    2e04:	10c5883a 	add	r2,r2,r3
    2e08:	10800017 	ldw	r2,0(r2)
    2e0c:	d0a6dc15 	stw	r2,-25744(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    2e10:	d0a6dc17 	ldw	r2,-25744(gp)
    2e14:	10c00e17 	ldw	r3,56(r2)
    2e18:	18c00044 	addi	r3,r3,1
    2e1c:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    2e20:	d0a6d717 	ldw	r2,-25764(gp)
    2e24:	10800044 	addi	r2,r2,1
    2e28:	d0a6d715 	stw	r2,-25764(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
    2e2c:	000c5740 	call	c574 <OSCtxSw>
    2e30:	e0bffd17 	ldw	r2,-12(fp)
    2e34:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2e38:	e0bfff17 	ldw	r2,-4(fp)
    2e3c:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
    2e40:	e037883a 	mov	sp,fp
    2e44:	dfc00117 	ldw	ra,4(sp)
    2e48:	df000017 	ldw	fp,0(sp)
    2e4c:	dec00204 	addi	sp,sp,8
    2e50:	f800283a 	ret

00002e54 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    2e54:	defffe04 	addi	sp,sp,-8
    2e58:	df000115 	stw	fp,4(sp)
    2e5c:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    2e60:	d0a6de03 	ldbu	r2,-25736(gp)
    2e64:	10c03fcc 	andi	r3,r2,255
    2e68:	00800074 	movhi	r2,1
    2e6c:	10b4d004 	addi	r2,r2,-11456
    2e70:	10c5883a 	add	r2,r2,r3
    2e74:	10800003 	ldbu	r2,0(r2)
    2e78:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    2e7c:	e0bfff03 	ldbu	r2,-4(fp)
    2e80:	100490fa 	slli	r2,r2,3
    2e84:	1009883a 	mov	r4,r2
    2e88:	e0ffff03 	ldbu	r3,-4(fp)
    2e8c:	d0a6de44 	addi	r2,gp,-25735
    2e90:	1885883a 	add	r2,r3,r2
    2e94:	10800003 	ldbu	r2,0(r2)
    2e98:	10c03fcc 	andi	r3,r2,255
    2e9c:	00800074 	movhi	r2,1
    2ea0:	10b4d004 	addi	r2,r2,-11456
    2ea4:	10c5883a 	add	r2,r2,r3
    2ea8:	10800003 	ldbu	r2,0(r2)
    2eac:	2085883a 	add	r2,r4,r2
    2eb0:	d0a6d405 	stb	r2,-25776(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    2eb4:	e037883a 	mov	sp,fp
    2eb8:	df000017 	ldw	fp,0(sp)
    2ebc:	dec00104 	addi	sp,sp,4
    2ec0:	f800283a 	ret

00002ec4 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    2ec4:	defffc04 	addi	sp,sp,-16
    2ec8:	df000315 	stw	fp,12(sp)
    2ecc:	df000304 	addi	fp,sp,12
    2ed0:	e13ffe15 	stw	r4,-8(fp)
    2ed4:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
    2ed8:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
    2edc:	00000b06 	br	2f0c <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
    2ee0:	e0bffe17 	ldw	r2,-8(fp)
    2ee4:	10c00044 	addi	r3,r2,1
    2ee8:	e0fffe15 	stw	r3,-8(fp)
    2eec:	e0ffff17 	ldw	r3,-4(fp)
    2ef0:	19000044 	addi	r4,r3,1
    2ef4:	e13fff15 	stw	r4,-4(fp)
    2ef8:	18c00003 	ldbu	r3,0(r3)
    2efc:	10c00005 	stb	r3,0(r2)
        len++;
    2f00:	e0bffd03 	ldbu	r2,-12(fp)
    2f04:	10800044 	addi	r2,r2,1
    2f08:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    2f0c:	e0bfff17 	ldw	r2,-4(fp)
    2f10:	10800003 	ldbu	r2,0(r2)
    2f14:	10803fcc 	andi	r2,r2,255
    2f18:	103ff11e 	bne	r2,zero,2ee0 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
    2f1c:	e0bffe17 	ldw	r2,-8(fp)
    2f20:	10000005 	stb	zero,0(r2)
    return (len);
    2f24:	e0bffd03 	ldbu	r2,-12(fp)
}
    2f28:	e037883a 	mov	sp,fp
    2f2c:	df000017 	ldw	fp,0(sp)
    2f30:	dec00104 	addi	sp,sp,4
    2f34:	f800283a 	ret

00002f38 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    2f38:	defffd04 	addi	sp,sp,-12
    2f3c:	df000215 	stw	fp,8(sp)
    2f40:	df000204 	addi	fp,sp,8
    2f44:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
    2f48:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
    2f4c:	00000606 	br	2f68 <OS_StrLen+0x30>
        psrc++;
    2f50:	e0bfff17 	ldw	r2,-4(fp)
    2f54:	10800044 	addi	r2,r2,1
    2f58:	e0bfff15 	stw	r2,-4(fp)
        len++;
    2f5c:	e0bffe03 	ldbu	r2,-8(fp)
    2f60:	10800044 	addi	r2,r2,1
    2f64:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    2f68:	e0bfff17 	ldw	r2,-4(fp)
    2f6c:	10800003 	ldbu	r2,0(r2)
    2f70:	10803fcc 	andi	r2,r2,255
    2f74:	103ff61e 	bne	r2,zero,2f50 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
    2f78:	e0bffe03 	ldbu	r2,-8(fp)
}
    2f7c:	e037883a 	mov	sp,fp
    2f80:	df000017 	ldw	fp,0(sp)
    2f84:	dec00104 	addi	sp,sp,4
    2f88:	f800283a 	ret

00002f8c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    2f8c:	defffa04 	addi	sp,sp,-24
    2f90:	dfc00515 	stw	ra,20(sp)
    2f94:	df000415 	stw	fp,16(sp)
    2f98:	df000404 	addi	fp,sp,16
    2f9c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    2fa0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2fa4:	0005303a 	rdctl	r2,status
    2fa8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2fac:	e0fffd17 	ldw	r3,-12(fp)
    2fb0:	00bfff84 	movi	r2,-2
    2fb4:	1884703a 	and	r2,r3,r2
    2fb8:	1001703a 	wrctl	status,r2
  
  return context;
    2fbc:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    2fc0:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
    2fc4:	d0a6d317 	ldw	r2,-25780(gp)
    2fc8:	10800044 	addi	r2,r2,1
    2fcc:	d0a6d315 	stw	r2,-25780(gp)
    2fd0:	e0bffc17 	ldw	r2,-16(fp)
    2fd4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2fd8:	e0bffe17 	ldw	r2,-8(fp)
    2fdc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    2fe0:	000c86c0 	call	c86c <OSTaskIdleHook>
    }
    2fe4:	003fef06 	br	2fa4 <OS_TaskIdle+0x18>

00002fe8 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
    2fe8:	defff804 	addi	sp,sp,-32
    2fec:	dfc00715 	stw	ra,28(sp)
    2ff0:	df000615 	stw	fp,24(sp)
    2ff4:	dc400515 	stw	r17,20(sp)
    2ff8:	dc000415 	stw	r16,16(sp)
    2ffc:	df000604 	addi	fp,sp,24
    3000:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3004:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    3008:	00000206 	br	3014 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    300c:	01000044 	movi	r4,1
    3010:	0008b980 	call	8b98 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    3014:	d0a6e403 	ldbu	r2,-25712(gp)
    3018:	10803fcc 	andi	r2,r2,255
    301c:	103ffb26 	beq	r2,zero,300c <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
    3020:	d0e6d817 	ldw	r3,-25760(gp)
    3024:	00947b34 	movhi	r2,20972
    3028:	10a147c4 	addi	r2,r2,-31457
    302c:	1888383a 	mulxuu	r4,r3,r2
    3030:	1885383a 	mul	r2,r3,r2
    3034:	1021883a 	mov	r16,r2
    3038:	2023883a 	mov	r17,r4
    303c:	8804d17a 	srli	r2,r17,5
    3040:	d0a6d815 	stw	r2,-25760(gp)
    if (OSIdleCtrMax == 0L) {
    3044:	d0a6d817 	ldw	r2,-25760(gp)
    3048:	1000031e 	bne	r2,zero,3058 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
    304c:	d026da05 	stb	zero,-25752(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
    3050:	01003fc4 	movi	r4,255
    3054:	00087ec0 	call	87ec <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3058:	0005303a 	rdctl	r2,status
    305c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3060:	e0fffb17 	ldw	r3,-20(fp)
    3064:	00bfff84 	movi	r2,-2
    3068:	1884703a 	and	r2,r3,r2
    306c:	1001703a 	wrctl	status,r2
  
  return context;
    3070:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    3074:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    3078:	d0a6d317 	ldw	r2,-25780(gp)
    307c:	d0a6e515 	stw	r2,-25708(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    3080:	d026d315 	stw	zero,-25780(gp)
    3084:	e0bffa17 	ldw	r2,-24(fp)
    3088:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    308c:	e0bffc17 	ldw	r2,-16(fp)
    3090:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
    3094:	d0e6e517 	ldw	r3,-25708(gp)
    3098:	d0a6d817 	ldw	r2,-25760(gp)
    309c:	1885203a 	divu	r2,r3,r2
    30a0:	1007883a 	mov	r3,r2
    30a4:	00801904 	movi	r2,100
    30a8:	10c5c83a 	sub	r2,r2,r3
    30ac:	d0a6da05 	stb	r2,-25752(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    30b0:	000c7fc0 	call	c7fc <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
    30b4:	00030c40 	call	30c4 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
    30b8:	0009883a 	mov	r4,zero
    30bc:	0008b980 	call	8b98 <OSTimeDly>
    }
    30c0:	003fe506 	br	3058 <OS_TaskStat+0x70>

000030c4 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
    30c4:	defffa04 	addi	sp,sp,-24
    30c8:	dfc00515 	stw	ra,20(sp)
    30cc:	df000415 	stw	fp,16(sp)
    30d0:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    30d4:	e03ffc05 	stb	zero,-16(fp)
    30d8:	00002406 	br	316c <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
    30dc:	e0fffc03 	ldbu	r3,-16(fp)
    30e0:	e0bffe04 	addi	r2,fp,-8
    30e4:	1809883a 	mov	r4,r3
    30e8:	100b883a 	mov	r5,r2
    30ec:	00086240 	call	8624 <OSTaskStkChk>
    30f0:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
    30f4:	e0bffc43 	ldbu	r2,-15(fp)
    30f8:	1000191e 	bne	r2,zero,3160 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
    30fc:	e0fffc03 	ldbu	r3,-16(fp)
    3100:	00800074 	movhi	r2,1
    3104:	109f5704 	addi	r2,r2,32092
    3108:	18c7883a 	add	r3,r3,r3
    310c:	18c7883a 	add	r3,r3,r3
    3110:	10c5883a 	add	r2,r2,r3
    3114:	10800017 	ldw	r2,0(r2)
    3118:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
    311c:	e0bffd17 	ldw	r2,-12(fp)
    3120:	10000f26 	beq	r2,zero,3160 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
    3124:	e0bffd17 	ldw	r2,-12(fp)
    3128:	10800060 	cmpeqi	r2,r2,1
    312c:	10000c1e 	bne	r2,zero,3160 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
    3130:	e0bffd17 	ldw	r2,-12(fp)
    3134:	10c00217 	ldw	r3,8(r2)
    3138:	e0bffd17 	ldw	r2,-12(fp)
    313c:	10800317 	ldw	r2,12(r2)
    3140:	1085883a 	add	r2,r2,r2
    3144:	1085883a 	add	r2,r2,r2
    3148:	1887883a 	add	r3,r3,r2
    314c:	e0bffd17 	ldw	r2,-12(fp)
    3150:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
    3154:	e0ffff17 	ldw	r3,-4(fp)
    3158:	e0bffd17 	ldw	r2,-12(fp)
    315c:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    3160:	e0bffc03 	ldbu	r2,-16(fp)
    3164:	10800044 	addi	r2,r2,1
    3168:	e0bffc05 	stb	r2,-16(fp)
    316c:	e0bffc03 	ldbu	r2,-16(fp)
    3170:	10800570 	cmpltui	r2,r2,21
    3174:	103fd91e 	bne	r2,zero,30dc <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
    3178:	e037883a 	mov	sp,fp
    317c:	dfc00117 	ldw	ra,4(sp)
    3180:	df000017 	ldw	fp,0(sp)
    3184:	dec00204 	addi	sp,sp,8
    3188:	f800283a 	ret

0000318c <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    318c:	defff204 	addi	sp,sp,-56
    3190:	dfc00d15 	stw	ra,52(sp)
    3194:	df000c15 	stw	fp,48(sp)
    3198:	df000c04 	addi	fp,sp,48
    319c:	e17ffc15 	stw	r5,-16(fp)
    31a0:	e1bffd15 	stw	r6,-12(fp)
    31a4:	3807883a 	mov	r3,r7
    31a8:	e0800417 	ldw	r2,16(fp)
    31ac:	e13ffb05 	stb	r4,-20(fp)
    31b0:	e0fffe0d 	sth	r3,-8(fp)
    31b4:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    31b8:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    31bc:	0005303a 	rdctl	r2,status
    31c0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    31c4:	e0fff617 	ldw	r3,-40(fp)
    31c8:	00bfff84 	movi	r2,-2
    31cc:	1884703a 	and	r2,r3,r2
    31d0:	1001703a 	wrctl	status,r2
  
  return context;
    31d4:	e0bff617 	ldw	r2,-40(fp)
#endif



    OS_ENTER_CRITICAL();
    31d8:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    31dc:	d0a6d917 	ldw	r2,-25756(gp)
    31e0:	e0bff515 	stw	r2,-44(fp)
    if (ptcb != (OS_TCB *)0) {
    31e4:	e0bff517 	ldw	r2,-44(fp)
    31e8:	10009326 	beq	r2,zero,3438 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    31ec:	e0bff517 	ldw	r2,-44(fp)
    31f0:	10800517 	ldw	r2,20(r2)
    31f4:	d0a6d915 	stw	r2,-25756(gp)
    31f8:	e0bff417 	ldw	r2,-48(fp)
    31fc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3200:	e0bff717 	ldw	r2,-36(fp)
    3204:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    3208:	e0bff517 	ldw	r2,-44(fp)
    320c:	e0fffc17 	ldw	r3,-16(fp)
    3210:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    3214:	e0bff517 	ldw	r2,-44(fp)
    3218:	e0fffb03 	ldbu	r3,-20(fp)
    321c:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    3220:	e0bff517 	ldw	r2,-44(fp)
    3224:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    3228:	e0bff517 	ldw	r2,-44(fp)
    322c:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
    3230:	e0bff517 	ldw	r2,-44(fp)
    3234:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    3238:	e0bff517 	ldw	r2,-44(fp)
    323c:	e0c00317 	ldw	r3,12(fp)
    3240:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    3244:	e0bff517 	ldw	r2,-44(fp)
    3248:	e0c00217 	ldw	r3,8(fp)
    324c:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
    3250:	e0bff517 	ldw	r2,-44(fp)
    3254:	e0fffd17 	ldw	r3,-12(fp)
    3258:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
    325c:	e0bff517 	ldw	r2,-44(fp)
    3260:	e0ffff0b 	ldhu	r3,-4(fp)
    3264:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
    3268:	e0bff517 	ldw	r2,-44(fp)
    326c:	e0fffe0b 	ldhu	r3,-8(fp)
    3270:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
    3274:	e0bff517 	ldw	r2,-44(fp)
    3278:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
    327c:	e0bffb03 	ldbu	r2,-20(fp)
    3280:	1004d0fa 	srli	r2,r2,3
    3284:	1007883a 	mov	r3,r2
    3288:	e0bff517 	ldw	r2,-44(fp)
    328c:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
    3290:	e0bffb03 	ldbu	r2,-20(fp)
    3294:	108001cc 	andi	r2,r2,7
    3298:	1007883a 	mov	r3,r2
    329c:	e0bff517 	ldw	r2,-44(fp)
    32a0:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
    32a4:	e0bff517 	ldw	r2,-44(fp)
    32a8:	10800d03 	ldbu	r2,52(r2)
    32ac:	10803fcc 	andi	r2,r2,255
    32b0:	00c00044 	movi	r3,1
    32b4:	1884983a 	sll	r2,r3,r2
    32b8:	1007883a 	mov	r3,r2
    32bc:	e0bff517 	ldw	r2,-44(fp)
    32c0:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
    32c4:	e0bff517 	ldw	r2,-44(fp)
    32c8:	10800cc3 	ldbu	r2,51(r2)
    32cc:	10803fcc 	andi	r2,r2,255
    32d0:	00c00044 	movi	r3,1
    32d4:	1884983a 	sll	r2,r3,r2
    32d8:	1007883a 	mov	r3,r2
    32dc:	e0bff517 	ldw	r2,-44(fp)
    32e0:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
    32e4:	e0bff517 	ldw	r2,-44(fp)
    32e8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
    32ec:	e0bff517 	ldw	r2,-44(fp)
    32f0:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
    32f4:	e0bff517 	ldw	r2,-44(fp)
    32f8:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
    32fc:	e0bff517 	ldw	r2,-44(fp)
    3300:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
    3304:	e0bff517 	ldw	r2,-44(fp)
    3308:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
    330c:	e0bff517 	ldw	r2,-44(fp)
    3310:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
    3314:	e0bff517 	ldw	r2,-44(fp)
    3318:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
    331c:	e0bff517 	ldw	r2,-44(fp)
    3320:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
    3324:	e0bff517 	ldw	r2,-44(fp)
    3328:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
    332c:	e0bff517 	ldw	r2,-44(fp)
    3330:	00c00fc4 	movi	r3,63
    3334:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    3338:	e0bff517 	ldw	r2,-44(fp)
    333c:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
    3340:	e13ff517 	ldw	r4,-44(fp)
    3344:	000c8880 	call	c888 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
    3348:	e13ff517 	ldw	r4,-44(fp)
    334c:	000c7a00 	call	c7a0 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3350:	0005303a 	rdctl	r2,status
    3354:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3358:	e0fff817 	ldw	r3,-32(fp)
    335c:	00bfff84 	movi	r2,-2
    3360:	1884703a 	and	r2,r3,r2
    3364:	1001703a 	wrctl	status,r2
  
  return context;
    3368:	e0bff817 	ldw	r2,-32(fp)

        OS_ENTER_CRITICAL();
    336c:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
    3370:	e0fffb03 	ldbu	r3,-20(fp)
    3374:	00800074 	movhi	r2,1
    3378:	109f5704 	addi	r2,r2,32092
    337c:	18c7883a 	add	r3,r3,r3
    3380:	18c7883a 	add	r3,r3,r3
    3384:	10c5883a 	add	r2,r2,r3
    3388:	e0fff517 	ldw	r3,-44(fp)
    338c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
    3390:	d0e6d517 	ldw	r3,-25772(gp)
    3394:	e0bff517 	ldw	r2,-44(fp)
    3398:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
    339c:	e0bff517 	ldw	r2,-44(fp)
    33a0:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
    33a4:	d0a6d517 	ldw	r2,-25772(gp)
    33a8:	10000326 	beq	r2,zero,33b8 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
    33ac:	d0a6d517 	ldw	r2,-25772(gp)
    33b0:	e0fff517 	ldw	r3,-44(fp)
    33b4:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
    33b8:	e0bff517 	ldw	r2,-44(fp)
    33bc:	d0a6d515 	stw	r2,-25772(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    33c0:	e0bff517 	ldw	r2,-44(fp)
    33c4:	10c00d83 	ldbu	r3,54(r2)
    33c8:	d0a6de03 	ldbu	r2,-25736(gp)
    33cc:	1884b03a 	or	r2,r3,r2
    33d0:	d0a6de05 	stb	r2,-25736(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    33d4:	e0bff517 	ldw	r2,-44(fp)
    33d8:	10800d03 	ldbu	r2,52(r2)
    33dc:	10c03fcc 	andi	r3,r2,255
    33e0:	e0bff517 	ldw	r2,-44(fp)
    33e4:	10800d03 	ldbu	r2,52(r2)
    33e8:	11003fcc 	andi	r4,r2,255
    33ec:	d0a6de44 	addi	r2,gp,-25735
    33f0:	2085883a 	add	r2,r4,r2
    33f4:	11000003 	ldbu	r4,0(r2)
    33f8:	e0bff517 	ldw	r2,-44(fp)
    33fc:	10800d43 	ldbu	r2,53(r2)
    3400:	2084b03a 	or	r2,r4,r2
    3404:	1009883a 	mov	r4,r2
    3408:	d0a6de44 	addi	r2,gp,-25735
    340c:	1885883a 	add	r2,r3,r2
    3410:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
    3414:	d0a6da43 	ldbu	r2,-25751(gp)
    3418:	10800044 	addi	r2,r2,1
    341c:	d0a6da45 	stb	r2,-25751(gp)
    3420:	e0bff417 	ldw	r2,-48(fp)
    3424:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3428:	e0bff917 	ldw	r2,-28(fp)
    342c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    3430:	0005883a 	mov	r2,zero
    3434:	00000506 	br	344c <OS_TCBInit+0x2c0>
    3438:	e0bff417 	ldw	r2,-48(fp)
    343c:	e0bffa15 	stw	r2,-24(fp)
    3440:	e0bffa17 	ldw	r2,-24(fp)
    3444:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
    3448:	00801084 	movi	r2,66
}
    344c:	e037883a 	mov	sp,fp
    3450:	dfc00117 	ldw	ra,4(sp)
    3454:	df000017 	ldw	fp,0(sp)
    3458:	dec00204 	addi	sp,sp,8
    345c:	f800283a 	ret

00003460 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
    3460:	defffe04 	addi	sp,sp,-8
    3464:	df000115 	stw	fp,4(sp)
    3468:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
    346c:	d0a00604 	addi	r2,gp,-32744
    3470:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
    3474:	d0a00704 	addi	r2,gp,-32740
    3478:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
    347c:	d0a00884 	addi	r2,gp,-32734
    3480:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
    3484:	d0a00904 	addi	r2,gp,-32732
    3488:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
    348c:	d0a00804 	addi	r2,gp,-32736
    3490:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
    3494:	d0a00984 	addi	r2,gp,-32730
    3498:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
    349c:	d0a00a04 	addi	r2,gp,-32728
    34a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
    34a4:	d0a00a84 	addi	r2,gp,-32726
    34a8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
    34ac:	d0a00b04 	addi	r2,gp,-32724
    34b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
    34b4:	d0a00b84 	addi	r2,gp,-32722
    34b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
    34bc:	d0a00c04 	addi	r2,gp,-32720
    34c0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
    34c4:	d0a00c84 	addi	r2,gp,-32718
    34c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
    34cc:	d0a00d04 	addi	r2,gp,-32716
    34d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
    34d4:	d0a00d84 	addi	r2,gp,-32714
    34d8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
    34dc:	d0a00e04 	addi	r2,gp,-32712
    34e0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
    34e4:	d0a00e84 	addi	r2,gp,-32710
    34e8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
    34ec:	d0a00f04 	addi	r2,gp,-32708
    34f0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
    34f4:	d0a00f84 	addi	r2,gp,-32706
    34f8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
    34fc:	d0a01004 	addi	r2,gp,-32704
    3500:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
    3504:	d0a01084 	addi	r2,gp,-32702
    3508:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
    350c:	d0a01104 	addi	r2,gp,-32700
    3510:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
    3514:	d0a01184 	addi	r2,gp,-32698
    3518:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
    351c:	d0a01204 	addi	r2,gp,-32696
    3520:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
    3524:	d0a01284 	addi	r2,gp,-32694
    3528:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
    352c:	d0a01304 	addi	r2,gp,-32692
    3530:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
    3534:	d0a01384 	addi	r2,gp,-32690
    3538:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
    353c:	d0a01404 	addi	r2,gp,-32688
    3540:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
    3544:	d0a01484 	addi	r2,gp,-32686
    3548:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
    354c:	d0a01504 	addi	r2,gp,-32684
    3550:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
    3554:	d0a01584 	addi	r2,gp,-32682
    3558:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
    355c:	d0a01604 	addi	r2,gp,-32680
    3560:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
    3564:	d0a01684 	addi	r2,gp,-32678
    3568:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
    356c:	d0a01704 	addi	r2,gp,-32676
    3570:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
    3574:	d0a01784 	addi	r2,gp,-32674
    3578:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
    357c:	d0a01804 	addi	r2,gp,-32672
    3580:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
    3584:	d0a01884 	addi	r2,gp,-32670
    3588:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
    358c:	d0a01904 	addi	r2,gp,-32668
    3590:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
    3594:	d0a01984 	addi	r2,gp,-32666
    3598:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
    359c:	d0a01a04 	addi	r2,gp,-32664
    35a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
    35a4:	d0a01a84 	addi	r2,gp,-32662
    35a8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
    35ac:	d0a01b04 	addi	r2,gp,-32660
    35b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
    35b4:	d0a01b84 	addi	r2,gp,-32658
    35b8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
    35bc:	d0a01c04 	addi	r2,gp,-32656
    35c0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
    35c4:	d0a01c84 	addi	r2,gp,-32654
    35c8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
    35cc:	d0a01d04 	addi	r2,gp,-32652
    35d0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
    35d4:	d0a02204 	addi	r2,gp,-32632
    35d8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
    35dc:	e037883a 	mov	sp,fp
    35e0:	df000017 	ldw	fp,0(sp)
    35e4:	dec00104 	addi	sp,sp,4
    35e8:	f800283a 	ret

000035ec <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
    35ec:	defff204 	addi	sp,sp,-56
    35f0:	df000d15 	stw	fp,52(sp)
    35f4:	df000d04 	addi	fp,sp,52
    35f8:	e13ffc15 	stw	r4,-16(fp)
    35fc:	2807883a 	mov	r3,r5
    3600:	3005883a 	mov	r2,r6
    3604:	e1ffff15 	stw	r7,-4(fp)
    3608:	e0fffd0d 	sth	r3,-12(fp)
    360c:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    3610:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    3614:	e0bfff17 	ldw	r2,-4(fp)
    3618:	1000021e 	bne	r2,zero,3624 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
    361c:	0005883a 	mov	r2,zero
    3620:	0000b006 	br	38e4 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    3624:	e0bffc17 	ldw	r2,-16(fp)
    3628:	1000051e 	bne	r2,zero,3640 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    362c:	e0bfff17 	ldw	r2,-4(fp)
    3630:	00c01b84 	movi	r3,110
    3634:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    3638:	0005883a 	mov	r2,zero
    363c:	0000a906 	br	38e4 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    3640:	e0bffc17 	ldw	r2,-16(fp)
    3644:	10800003 	ldbu	r2,0(r2)
    3648:	10803fcc 	andi	r2,r2,255
    364c:	10800160 	cmpeqi	r2,r2,5
    3650:	1000051e 	bne	r2,zero,3668 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
    3654:	e0bfff17 	ldw	r2,-4(fp)
    3658:	00c00044 	movi	r3,1
    365c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    3660:	0005883a 	mov	r2,zero
    3664:	00009f06 	br	38e4 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    3668:	e0fffe03 	ldbu	r3,-8(fp)
    366c:	00bfe004 	movi	r2,-128
    3670:	1884703a 	and	r2,r3,r2
    3674:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
    3678:	e0bff503 	ldbu	r2,-44(fp)
    367c:	10000626 	beq	r2,zero,3698 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
    3680:	e0bffe03 	ldbu	r2,-8(fp)
    3684:	10801fcc 	andi	r2,r2,127
    3688:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    368c:	00800044 	movi	r2,1
    3690:	e0bff385 	stb	r2,-50(fp)
    3694:	00000106 	br	369c <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
    3698:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
    369c:	e0bfff17 	ldw	r2,-4(fp)
    36a0:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    36a4:	0005303a 	rdctl	r2,status
    36a8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    36ac:	e0fff617 	ldw	r3,-40(fp)
    36b0:	00bfff84 	movi	r2,-2
    36b4:	1884703a 	and	r2,r3,r2
    36b8:	1001703a 	wrctl	status,r2
  
  return context;
    36bc:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
    36c0:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
    36c4:	e0bffe03 	ldbu	r2,-8(fp)
    36c8:	10c00060 	cmpeqi	r3,r2,1
    36cc:	18005f1e 	bne	r3,zero,384c <OSFlagAccept+0x260>
    36d0:	10c00088 	cmpgei	r3,r2,2
    36d4:	1800021e 	bne	r3,zero,36e0 <OSFlagAccept+0xf4>
    36d8:	10003f26 	beq	r2,zero,37d8 <OSFlagAccept+0x1ec>
    36dc:	00007706 	br	38bc <OSFlagAccept+0x2d0>
    36e0:	10c000a0 	cmpeqi	r3,r2,2
    36e4:	1800031e 	bne	r3,zero,36f4 <OSFlagAccept+0x108>
    36e8:	108000e0 	cmpeqi	r2,r2,3
    36ec:	10001e1e 	bne	r2,zero,3768 <OSFlagAccept+0x17c>
    36f0:	00007206 	br	38bc <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    36f4:	e0bffc17 	ldw	r2,-16(fp)
    36f8:	10c0020b 	ldhu	r3,8(r2)
    36fc:	e0bffd0b 	ldhu	r2,-12(fp)
    3700:	1884703a 	and	r2,r3,r2
    3704:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    3708:	e0fff30b 	ldhu	r3,-52(fp)
    370c:	e0bffd0b 	ldhu	r2,-12(fp)
    3710:	18800d1e 	bne	r3,r2,3748 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    3714:	e0bff383 	ldbu	r2,-50(fp)
    3718:	10800058 	cmpnei	r2,r2,1
    371c:	10000d1e 	bne	r2,zero,3754 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    3720:	e0bffc17 	ldw	r2,-16(fp)
    3724:	1080020b 	ldhu	r2,8(r2)
    3728:	1007883a 	mov	r3,r2
    372c:	e0bff30b 	ldhu	r2,-52(fp)
    3730:	0084303a 	nor	r2,zero,r2
    3734:	1884703a 	and	r2,r3,r2
    3738:	1007883a 	mov	r3,r2
    373c:	e0bffc17 	ldw	r2,-16(fp)
    3740:	10c0020d 	sth	r3,8(r2)
    3744:	00000306 	br	3754 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    3748:	e0bfff17 	ldw	r2,-4(fp)
    374c:	00c01c04 	movi	r3,112
    3750:	10c00005 	stb	r3,0(r2)
    3754:	e0bff417 	ldw	r2,-48(fp)
    3758:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    375c:	e0bff717 	ldw	r2,-36(fp)
    3760:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    3764:	00005e06 	br	38e0 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    3768:	e0bffc17 	ldw	r2,-16(fp)
    376c:	10c0020b 	ldhu	r3,8(r2)
    3770:	e0bffd0b 	ldhu	r2,-12(fp)
    3774:	1884703a 	and	r2,r3,r2
    3778:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    377c:	e0bff30b 	ldhu	r2,-52(fp)
    3780:	10000d26 	beq	r2,zero,37b8 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    3784:	e0bff383 	ldbu	r2,-50(fp)
    3788:	10800058 	cmpnei	r2,r2,1
    378c:	10000d1e 	bne	r2,zero,37c4 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    3790:	e0bffc17 	ldw	r2,-16(fp)
    3794:	1080020b 	ldhu	r2,8(r2)
    3798:	1007883a 	mov	r3,r2
    379c:	e0bff30b 	ldhu	r2,-52(fp)
    37a0:	0084303a 	nor	r2,zero,r2
    37a4:	1884703a 	and	r2,r3,r2
    37a8:	1007883a 	mov	r3,r2
    37ac:	e0bffc17 	ldw	r2,-16(fp)
    37b0:	10c0020d 	sth	r3,8(r2)
    37b4:	00000306 	br	37c4 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    37b8:	e0bfff17 	ldw	r2,-4(fp)
    37bc:	00c01c04 	movi	r3,112
    37c0:	10c00005 	stb	r3,0(r2)
    37c4:	e0bff417 	ldw	r2,-48(fp)
    37c8:	e0bff815 	stw	r2,-32(fp)
    37cc:	e0bff817 	ldw	r2,-32(fp)
    37d0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    37d4:	00004206 	br	38e0 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    37d8:	e0bffc17 	ldw	r2,-16(fp)
    37dc:	1080020b 	ldhu	r2,8(r2)
    37e0:	0084303a 	nor	r2,zero,r2
    37e4:	1007883a 	mov	r3,r2
    37e8:	e0bffd0b 	ldhu	r2,-12(fp)
    37ec:	1884703a 	and	r2,r3,r2
    37f0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    37f4:	e0fff30b 	ldhu	r3,-52(fp)
    37f8:	e0bffd0b 	ldhu	r2,-12(fp)
    37fc:	18800b1e 	bne	r3,r2,382c <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    3800:	e0bff383 	ldbu	r2,-50(fp)
    3804:	10800058 	cmpnei	r2,r2,1
    3808:	10000b1e 	bne	r2,zero,3838 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    380c:	e0bffc17 	ldw	r2,-16(fp)
    3810:	10c0020b 	ldhu	r3,8(r2)
    3814:	e0bff30b 	ldhu	r2,-52(fp)
    3818:	1884b03a 	or	r2,r3,r2
    381c:	1007883a 	mov	r3,r2
    3820:	e0bffc17 	ldw	r2,-16(fp)
    3824:	10c0020d 	sth	r3,8(r2)
    3828:	00000306 	br	3838 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    382c:	e0bfff17 	ldw	r2,-4(fp)
    3830:	00c01c04 	movi	r3,112
    3834:	10c00005 	stb	r3,0(r2)
    3838:	e0bff417 	ldw	r2,-48(fp)
    383c:	e0bff915 	stw	r2,-28(fp)
    3840:	e0bff917 	ldw	r2,-28(fp)
    3844:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    3848:	00002506 	br	38e0 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    384c:	e0bffc17 	ldw	r2,-16(fp)
    3850:	1080020b 	ldhu	r2,8(r2)
    3854:	0084303a 	nor	r2,zero,r2
    3858:	1007883a 	mov	r3,r2
    385c:	e0bffd0b 	ldhu	r2,-12(fp)
    3860:	1884703a 	and	r2,r3,r2
    3864:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    3868:	e0bff30b 	ldhu	r2,-52(fp)
    386c:	10000b26 	beq	r2,zero,389c <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    3870:	e0bff383 	ldbu	r2,-50(fp)
    3874:	10800058 	cmpnei	r2,r2,1
    3878:	10000b1e 	bne	r2,zero,38a8 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    387c:	e0bffc17 	ldw	r2,-16(fp)
    3880:	10c0020b 	ldhu	r3,8(r2)
    3884:	e0bff30b 	ldhu	r2,-52(fp)
    3888:	1884b03a 	or	r2,r3,r2
    388c:	1007883a 	mov	r3,r2
    3890:	e0bffc17 	ldw	r2,-16(fp)
    3894:	10c0020d 	sth	r3,8(r2)
    3898:	00000306 	br	38a8 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    389c:	e0bfff17 	ldw	r2,-4(fp)
    38a0:	00c01c04 	movi	r3,112
    38a4:	10c00005 	stb	r3,0(r2)
    38a8:	e0bff417 	ldw	r2,-48(fp)
    38ac:	e0bffa15 	stw	r2,-24(fp)
    38b0:	e0bffa17 	ldw	r2,-24(fp)
    38b4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    38b8:	00000906 	br	38e0 <OSFlagAccept+0x2f4>
    38bc:	e0bff417 	ldw	r2,-48(fp)
    38c0:	e0bffb15 	stw	r2,-20(fp)
    38c4:	e0bffb17 	ldw	r2,-20(fp)
    38c8:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    38cc:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
    38d0:	e0bfff17 	ldw	r2,-4(fp)
    38d4:	00c01bc4 	movi	r3,111
    38d8:	10c00005 	stb	r3,0(r2)
             break;
    38dc:	0001883a 	nop
    }
    return (flags_rdy);
    38e0:	e0bff30b 	ldhu	r2,-52(fp)
}
    38e4:	e037883a 	mov	sp,fp
    38e8:	df000017 	ldw	fp,0(sp)
    38ec:	dec00104 	addi	sp,sp,4
    38f0:	f800283a 	ret

000038f4 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
    38f4:	defff804 	addi	sp,sp,-32
    38f8:	df000715 	stw	fp,28(sp)
    38fc:	df000704 	addi	fp,sp,28
    3900:	2005883a 	mov	r2,r4
    3904:	e17fff15 	stw	r5,-4(fp)
    3908:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
    390c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
    3910:	e0bfff17 	ldw	r2,-4(fp)
    3914:	1000021e 	bne	r2,zero,3920 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
    3918:	0005883a 	mov	r2,zero
    391c:	00003b06 	br	3a0c <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
    3920:	00800074 	movhi	r2,1
    3924:	1082d704 	addi	r2,r2,2908
    3928:	10800003 	ldbu	r2,0(r2)
    392c:	10803fcc 	andi	r2,r2,255
    3930:	10000526 	beq	r2,zero,3948 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
    3934:	e0bfff17 	ldw	r2,-4(fp)
    3938:	00c00404 	movi	r3,16
    393c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
    3940:	0005883a 	mov	r2,zero
    3944:	00003106 	br	3a0c <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3948:	0005303a 	rdctl	r2,status
    394c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3950:	e0fffb17 	ldw	r3,-20(fp)
    3954:	00bfff84 	movi	r2,-2
    3958:	1884703a 	and	r2,r3,r2
    395c:	1001703a 	wrctl	status,r2
  
  return context;
    3960:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    3964:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
    3968:	00800074 	movhi	r2,1
    396c:	1082da04 	addi	r2,r2,2920
    3970:	10800017 	ldw	r2,0(r2)
    3974:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
    3978:	e0bffa17 	ldw	r2,-24(fp)
    397c:	10001b26 	beq	r2,zero,39ec <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
    3980:	00800074 	movhi	r2,1
    3984:	1082da04 	addi	r2,r2,2920
    3988:	10800017 	ldw	r2,0(r2)
    398c:	10c00117 	ldw	r3,4(r2)
    3990:	00800074 	movhi	r2,1
    3994:	1082da04 	addi	r2,r2,2920
    3998:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
    399c:	e0bffa17 	ldw	r2,-24(fp)
    39a0:	00c00144 	movi	r3,5
    39a4:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
    39a8:	e0bffa17 	ldw	r2,-24(fp)
    39ac:	e0fffe0b 	ldhu	r3,-8(fp)
    39b0:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
    39b4:	e0bffa17 	ldw	r2,-24(fp)
    39b8:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
    39bc:	e0bffa17 	ldw	r2,-24(fp)
    39c0:	00c00fc4 	movi	r3,63
    39c4:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    39c8:	e0bffa17 	ldw	r2,-24(fp)
    39cc:	100002c5 	stb	zero,11(r2)
    39d0:	e0bff917 	ldw	r2,-28(fp)
    39d4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    39d8:	e0bffc17 	ldw	r2,-16(fp)
    39dc:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
    39e0:	e0bfff17 	ldw	r2,-4(fp)
    39e4:	10000005 	stb	zero,0(r2)
    39e8:	00000706 	br	3a08 <OSFlagCreate+0x114>
    39ec:	e0bff917 	ldw	r2,-28(fp)
    39f0:	e0bffd15 	stw	r2,-12(fp)
    39f4:	e0bffd17 	ldw	r2,-12(fp)
    39f8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
    39fc:	e0bfff17 	ldw	r2,-4(fp)
    3a00:	00c01c84 	movi	r3,114
    3a04:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
    3a08:	e0bffa17 	ldw	r2,-24(fp)
}
    3a0c:	e037883a 	mov	sp,fp
    3a10:	df000017 	ldw	fp,0(sp)
    3a14:	dec00104 	addi	sp,sp,4
    3a18:	f800283a 	ret

00003a1c <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
    3a1c:	defff204 	addi	sp,sp,-56
    3a20:	dfc00d15 	stw	ra,52(sp)
    3a24:	df000c15 	stw	fp,48(sp)
    3a28:	df000c04 	addi	fp,sp,48
    3a2c:	e13ffd15 	stw	r4,-12(fp)
    3a30:	2805883a 	mov	r2,r5
    3a34:	e1bfff15 	stw	r6,-4(fp)
    3a38:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    3a3c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    3a40:	e0bfff17 	ldw	r2,-4(fp)
    3a44:	1000021e 	bne	r2,zero,3a50 <OSFlagDel+0x34>
        return (pgrp);
    3a48:	e0bffd17 	ldw	r2,-12(fp)
    3a4c:	00008a06 	br	3c78 <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    3a50:	e0bffd17 	ldw	r2,-12(fp)
    3a54:	1000051e 	bne	r2,zero,3a6c <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    3a58:	e0bfff17 	ldw	r2,-4(fp)
    3a5c:	00c01b84 	movi	r3,110
    3a60:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    3a64:	e0bffd17 	ldw	r2,-12(fp)
    3a68:	00008306 	br	3c78 <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    3a6c:	00800074 	movhi	r2,1
    3a70:	1082d704 	addi	r2,r2,2908
    3a74:	10800003 	ldbu	r2,0(r2)
    3a78:	10803fcc 	andi	r2,r2,255
    3a7c:	10000526 	beq	r2,zero,3a94 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    3a80:	e0bfff17 	ldw	r2,-4(fp)
    3a84:	00c003c4 	movi	r3,15
    3a88:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    3a8c:	e0bffd17 	ldw	r2,-12(fp)
    3a90:	00007906 	br	3c78 <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
    3a94:	e0bffd17 	ldw	r2,-12(fp)
    3a98:	10800003 	ldbu	r2,0(r2)
    3a9c:	10803fcc 	andi	r2,r2,255
    3aa0:	10800160 	cmpeqi	r2,r2,5
    3aa4:	1000051e 	bne	r2,zero,3abc <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
    3aa8:	e0bfff17 	ldw	r2,-4(fp)
    3aac:	00c00044 	movi	r3,1
    3ab0:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    3ab4:	e0bffd17 	ldw	r2,-12(fp)
    3ab8:	00006f06 	br	3c78 <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3abc:	0005303a 	rdctl	r2,status
    3ac0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3ac4:	e0fff817 	ldw	r3,-32(fp)
    3ac8:	00bfff84 	movi	r2,-2
    3acc:	1884703a 	and	r2,r3,r2
    3ad0:	1001703a 	wrctl	status,r2
  
  return context;
    3ad4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    3ad8:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
    3adc:	e0bffd17 	ldw	r2,-12(fp)
    3ae0:	10800117 	ldw	r2,4(r2)
    3ae4:	10000326 	beq	r2,zero,3af4 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    3ae8:	00800044 	movi	r2,1
    3aec:	e0bff405 	stb	r2,-48(fp)
    3af0:	00000106 	br	3af8 <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    3af4:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
    3af8:	e0bffe03 	ldbu	r2,-8(fp)
    3afc:	10000326 	beq	r2,zero,3b0c <OSFlagDel+0xf0>
    3b00:	10800060 	cmpeqi	r2,r2,1
    3b04:	1000271e 	bne	r2,zero,3ba4 <OSFlagDel+0x188>
    3b08:	00005006 	br	3c4c <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
    3b0c:	e0bff403 	ldbu	r2,-48(fp)
    3b10:	10001a1e 	bne	r2,zero,3b7c <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
    3b14:	e0bffd17 	ldw	r2,-12(fp)
    3b18:	00c00fc4 	movi	r3,63
    3b1c:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    3b20:	e0bffd17 	ldw	r2,-12(fp)
    3b24:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    3b28:	e0bffd17 	ldw	r2,-12(fp)
    3b2c:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
    3b30:	00800074 	movhi	r2,1
    3b34:	1082da04 	addi	r2,r2,2920
    3b38:	10c00017 	ldw	r3,0(r2)
    3b3c:	e0bffd17 	ldw	r2,-12(fp)
    3b40:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
    3b44:	e0bffd17 	ldw	r2,-12(fp)
    3b48:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
    3b4c:	00800074 	movhi	r2,1
    3b50:	1082da04 	addi	r2,r2,2920
    3b54:	e0fffd17 	ldw	r3,-12(fp)
    3b58:	10c00015 	stw	r3,0(r2)
    3b5c:	e0bff717 	ldw	r2,-36(fp)
    3b60:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3b64:	e0bff917 	ldw	r2,-28(fp)
    3b68:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
    3b6c:	e0bfff17 	ldw	r2,-4(fp)
    3b70:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
    3b74:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
    3b78:	00003e06 	br	3c74 <OSFlagDel+0x258>
    3b7c:	e0bff717 	ldw	r2,-36(fp)
    3b80:	e0bffa15 	stw	r2,-24(fp)
    3b84:	e0bffa17 	ldw	r2,-24(fp)
    3b88:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
    3b8c:	e0bfff17 	ldw	r2,-4(fp)
    3b90:	00c01244 	movi	r3,73
    3b94:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
    3b98:	e0bffd17 	ldw	r2,-12(fp)
    3b9c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
    3ba0:	00003406 	br	3c74 <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    3ba4:	e0bffd17 	ldw	r2,-12(fp)
    3ba8:	10800117 	ldw	r2,4(r2)
    3bac:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    3bb0:	00000606 	br	3bcc <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
    3bb4:	e13ff517 	ldw	r4,-44(fp)
    3bb8:	000b883a 	mov	r5,zero
    3bbc:	0004c580 	call	4c58 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    3bc0:	e0bff517 	ldw	r2,-44(fp)
    3bc4:	10800017 	ldw	r2,0(r2)
    3bc8:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    3bcc:	e0bff517 	ldw	r2,-44(fp)
    3bd0:	103ff81e 	bne	r2,zero,3bb4 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
    3bd4:	e0bffd17 	ldw	r2,-12(fp)
    3bd8:	00c00fc4 	movi	r3,63
    3bdc:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    3be0:	e0bffd17 	ldw	r2,-12(fp)
    3be4:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    3be8:	e0bffd17 	ldw	r2,-12(fp)
    3bec:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
    3bf0:	00800074 	movhi	r2,1
    3bf4:	1082da04 	addi	r2,r2,2920
    3bf8:	10c00017 	ldw	r3,0(r2)
    3bfc:	e0bffd17 	ldw	r2,-12(fp)
    3c00:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
    3c04:	e0bffd17 	ldw	r2,-12(fp)
    3c08:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
    3c0c:	00800074 	movhi	r2,1
    3c10:	1082da04 	addi	r2,r2,2920
    3c14:	e0fffd17 	ldw	r3,-12(fp)
    3c18:	10c00015 	stw	r3,0(r2)
    3c1c:	e0bff717 	ldw	r2,-36(fp)
    3c20:	e0bffb15 	stw	r2,-20(fp)
    3c24:	e0bffb17 	ldw	r2,-20(fp)
    3c28:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    3c2c:	e0bff403 	ldbu	r2,-48(fp)
    3c30:	10800058 	cmpnei	r2,r2,1
    3c34:	1000011e 	bne	r2,zero,3c3c <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    3c38:	0002d880 	call	2d88 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
    3c3c:	e0bfff17 	ldw	r2,-4(fp)
    3c40:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
    3c44:	e03ff615 	stw	zero,-40(fp)
             break;
    3c48:	00000a06 	br	3c74 <OSFlagDel+0x258>
    3c4c:	e0bff717 	ldw	r2,-36(fp)
    3c50:	e0bffc15 	stw	r2,-16(fp)
    3c54:	e0bffc17 	ldw	r2,-16(fp)
    3c58:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
    3c5c:	e0bfff17 	ldw	r2,-4(fp)
    3c60:	00c001c4 	movi	r3,7
    3c64:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
    3c68:	e0bffd17 	ldw	r2,-12(fp)
    3c6c:	e0bff615 	stw	r2,-40(fp)
             break;
    3c70:	0001883a 	nop
    }
    return (pgrp_return);
    3c74:	e0bff617 	ldw	r2,-40(fp)
}
    3c78:	e037883a 	mov	sp,fp
    3c7c:	dfc00117 	ldw	ra,4(sp)
    3c80:	df000017 	ldw	fp,0(sp)
    3c84:	dec00204 	addi	sp,sp,8
    3c88:	f800283a 	ret

00003c8c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    3c8c:	defff604 	addi	sp,sp,-40
    3c90:	dfc00915 	stw	ra,36(sp)
    3c94:	df000815 	stw	fp,32(sp)
    3c98:	df000804 	addi	fp,sp,32
    3c9c:	e13ffd15 	stw	r4,-12(fp)
    3ca0:	e17ffe15 	stw	r5,-8(fp)
    3ca4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3ca8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    3cac:	e0bfff17 	ldw	r2,-4(fp)
    3cb0:	1000021e 	bne	r2,zero,3cbc <OSFlagNameGet+0x30>
        return (0);
    3cb4:	0005883a 	mov	r2,zero
    3cb8:	00003b06 	br	3da8 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    3cbc:	e0bffd17 	ldw	r2,-12(fp)
    3cc0:	1000051e 	bne	r2,zero,3cd8 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    3cc4:	e0bfff17 	ldw	r2,-4(fp)
    3cc8:	00c01b84 	movi	r3,110
    3ccc:	10c00005 	stb	r3,0(r2)
        return (0);
    3cd0:	0005883a 	mov	r2,zero
    3cd4:	00003406 	br	3da8 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    3cd8:	e0bffe17 	ldw	r2,-8(fp)
    3cdc:	1000051e 	bne	r2,zero,3cf4 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    3ce0:	e0bfff17 	ldw	r2,-4(fp)
    3ce4:	00c00304 	movi	r3,12
    3ce8:	10c00005 	stb	r3,0(r2)
        return (0);
    3cec:	0005883a 	mov	r2,zero
    3cf0:	00002d06 	br	3da8 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    3cf4:	00800074 	movhi	r2,1
    3cf8:	1082d704 	addi	r2,r2,2908
    3cfc:	10800003 	ldbu	r2,0(r2)
    3d00:	10803fcc 	andi	r2,r2,255
    3d04:	10000526 	beq	r2,zero,3d1c <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
    3d08:	e0bfff17 	ldw	r2,-4(fp)
    3d0c:	00c00444 	movi	r3,17
    3d10:	10c00005 	stb	r3,0(r2)
        return (0);
    3d14:	0005883a 	mov	r2,zero
    3d18:	00002306 	br	3da8 <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3d1c:	0005303a 	rdctl	r2,status
    3d20:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3d24:	e0fffa17 	ldw	r3,-24(fp)
    3d28:	00bfff84 	movi	r2,-2
    3d2c:	1884703a 	and	r2,r3,r2
    3d30:	1001703a 	wrctl	status,r2
  
  return context;
    3d34:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    3d38:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    3d3c:	e0bffd17 	ldw	r2,-12(fp)
    3d40:	10800003 	ldbu	r2,0(r2)
    3d44:	10803fcc 	andi	r2,r2,255
    3d48:	10800160 	cmpeqi	r2,r2,5
    3d4c:	1000091e 	bne	r2,zero,3d74 <OSFlagNameGet+0xe8>
    3d50:	e0bff817 	ldw	r2,-32(fp)
    3d54:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3d58:	e0bffb17 	ldw	r2,-20(fp)
    3d5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    3d60:	e0bfff17 	ldw	r2,-4(fp)
    3d64:	00c00044 	movi	r3,1
    3d68:	10c00005 	stb	r3,0(r2)
        return (0);
    3d6c:	0005883a 	mov	r2,zero
    3d70:	00000d06 	br	3da8 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
    3d74:	e0bffd17 	ldw	r2,-12(fp)
    3d78:	10800284 	addi	r2,r2,10
    3d7c:	e13ffe17 	ldw	r4,-8(fp)
    3d80:	100b883a 	mov	r5,r2
    3d84:	0002ec40 	call	2ec4 <OS_StrCopy>
    3d88:	e0bff905 	stb	r2,-28(fp)
    3d8c:	e0bff817 	ldw	r2,-32(fp)
    3d90:	e0bffc15 	stw	r2,-16(fp)
    3d94:	e0bffc17 	ldw	r2,-16(fp)
    3d98:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    3d9c:	e0bfff17 	ldw	r2,-4(fp)
    3da0:	10000005 	stb	zero,0(r2)
    return (len);
    3da4:	e0bff903 	ldbu	r2,-28(fp)
}
    3da8:	e037883a 	mov	sp,fp
    3dac:	dfc00117 	ldw	ra,4(sp)
    3db0:	df000017 	ldw	fp,0(sp)
    3db4:	dec00204 	addi	sp,sp,8
    3db8:	f800283a 	ret

00003dbc <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    3dbc:	defff504 	addi	sp,sp,-44
    3dc0:	dfc00a15 	stw	ra,40(sp)
    3dc4:	df000915 	stw	fp,36(sp)
    3dc8:	df000904 	addi	fp,sp,36
    3dcc:	e13ffd15 	stw	r4,-12(fp)
    3dd0:	e17ffe15 	stw	r5,-8(fp)
    3dd4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3dd8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    3ddc:	e0bfff17 	ldw	r2,-4(fp)
    3de0:	1000011e 	bne	r2,zero,3de8 <OSFlagNameSet+0x2c>
        return;
    3de4:	00004406 	br	3ef8 <OSFlagNameSet+0x13c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    3de8:	e0bffd17 	ldw	r2,-12(fp)
    3dec:	1000041e 	bne	r2,zero,3e00 <OSFlagNameSet+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    3df0:	e0bfff17 	ldw	r2,-4(fp)
    3df4:	00c01b84 	movi	r3,110
    3df8:	10c00005 	stb	r3,0(r2)
        return;
    3dfc:	00003e06 	br	3ef8 <OSFlagNameSet+0x13c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    3e00:	e0bffe17 	ldw	r2,-8(fp)
    3e04:	1000041e 	bne	r2,zero,3e18 <OSFlagNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
    3e08:	e0bfff17 	ldw	r2,-4(fp)
    3e0c:	00c00304 	movi	r3,12
    3e10:	10c00005 	stb	r3,0(r2)
        return;
    3e14:	00003806 	br	3ef8 <OSFlagNameSet+0x13c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    3e18:	00800074 	movhi	r2,1
    3e1c:	1082d704 	addi	r2,r2,2908
    3e20:	10800003 	ldbu	r2,0(r2)
    3e24:	10803fcc 	andi	r2,r2,255
    3e28:	10000426 	beq	r2,zero,3e3c <OSFlagNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
    3e2c:	e0bfff17 	ldw	r2,-4(fp)
    3e30:	00c00484 	movi	r3,18
    3e34:	10c00005 	stb	r3,0(r2)
        return;
    3e38:	00002f06 	br	3ef8 <OSFlagNameSet+0x13c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3e3c:	0005303a 	rdctl	r2,status
    3e40:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3e44:	e0fff917 	ldw	r3,-28(fp)
    3e48:	00bfff84 	movi	r2,-2
    3e4c:	1884703a 	and	r2,r3,r2
    3e50:	1001703a 	wrctl	status,r2
  
  return context;
    3e54:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    3e58:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    3e5c:	e0bffd17 	ldw	r2,-12(fp)
    3e60:	10800003 	ldbu	r2,0(r2)
    3e64:	10803fcc 	andi	r2,r2,255
    3e68:	10800160 	cmpeqi	r2,r2,5
    3e6c:	1000081e 	bne	r2,zero,3e90 <OSFlagNameSet+0xd4>
    3e70:	e0bff717 	ldw	r2,-36(fp)
    3e74:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3e78:	e0bffa17 	ldw	r2,-24(fp)
    3e7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    3e80:	e0bfff17 	ldw	r2,-4(fp)
    3e84:	00c00044 	movi	r3,1
    3e88:	10c00005 	stb	r3,0(r2)
        return;
    3e8c:	00001a06 	br	3ef8 <OSFlagNameSet+0x13c>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    3e90:	e13ffe17 	ldw	r4,-8(fp)
    3e94:	0002f380 	call	2f38 <OS_StrLen>
    3e98:	e0bff805 	stb	r2,-32(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
    3e9c:	e0bff803 	ldbu	r2,-32(fp)
    3ea0:	10800830 	cmpltui	r2,r2,32
    3ea4:	1000081e 	bne	r2,zero,3ec8 <OSFlagNameSet+0x10c>
    3ea8:	e0bff717 	ldw	r2,-36(fp)
    3eac:	e0bffb15 	stw	r2,-20(fp)
    3eb0:	e0bffb17 	ldw	r2,-20(fp)
    3eb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
    3eb8:	e0bfff17 	ldw	r2,-4(fp)
    3ebc:	00c01cc4 	movi	r3,115
    3ec0:	10c00005 	stb	r3,0(r2)
        return;
    3ec4:	00000c06 	br	3ef8 <OSFlagNameSet+0x13c>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    3ec8:	e0bffd17 	ldw	r2,-12(fp)
    3ecc:	10800284 	addi	r2,r2,10
    3ed0:	1009883a 	mov	r4,r2
    3ed4:	e17ffe17 	ldw	r5,-8(fp)
    3ed8:	0002ec40 	call	2ec4 <OS_StrCopy>
    3edc:	e0bff717 	ldw	r2,-36(fp)
    3ee0:	e0bffc15 	stw	r2,-16(fp)
    3ee4:	e0bffc17 	ldw	r2,-16(fp)
    3ee8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    3eec:	e0bfff17 	ldw	r2,-4(fp)
    3ef0:	10000005 	stb	zero,0(r2)
    return;
    3ef4:	0001883a 	nop
}
    3ef8:	e037883a 	mov	sp,fp
    3efc:	dfc00117 	ldw	ra,4(sp)
    3f00:	df000017 	ldw	fp,0(sp)
    3f04:	dec00204 	addi	sp,sp,8
    3f08:	f800283a 	ret

00003f0c <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
    3f0c:	deffe204 	addi	sp,sp,-120
    3f10:	dfc01d15 	stw	ra,116(sp)
    3f14:	df001c15 	stw	fp,112(sp)
    3f18:	df001c04 	addi	fp,sp,112
    3f1c:	e13ffc15 	stw	r4,-16(fp)
    3f20:	2809883a 	mov	r4,r5
    3f24:	3007883a 	mov	r3,r6
    3f28:	3805883a 	mov	r2,r7
    3f2c:	e13ffd0d 	sth	r4,-12(fp)
    3f30:	e0fffe05 	stb	r3,-8(fp)
    3f34:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    3f38:	e03fe615 	stw	zero,-104(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    3f3c:	e0800217 	ldw	r2,8(fp)
    3f40:	1000021e 	bne	r2,zero,3f4c <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
    3f44:	0005883a 	mov	r2,zero
    3f48:	00016706 	br	44e8 <OSFlagPend+0x5dc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    3f4c:	e0bffc17 	ldw	r2,-16(fp)
    3f50:	1000051e 	bne	r2,zero,3f68 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    3f54:	e0800217 	ldw	r2,8(fp)
    3f58:	00c01b84 	movi	r3,110
    3f5c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    3f60:	0005883a 	mov	r2,zero
    3f64:	00016006 	br	44e8 <OSFlagPend+0x5dc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    3f68:	00800074 	movhi	r2,1
    3f6c:	1082d704 	addi	r2,r2,2908
    3f70:	10800003 	ldbu	r2,0(r2)
    3f74:	10803fcc 	andi	r2,r2,255
    3f78:	10000526 	beq	r2,zero,3f90 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
    3f7c:	e0800217 	ldw	r2,8(fp)
    3f80:	00c00084 	movi	r3,2
    3f84:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    3f88:	0005883a 	mov	r2,zero
    3f8c:	00015606 	br	44e8 <OSFlagPend+0x5dc>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
    3f90:	00800074 	movhi	r2,1
    3f94:	1082c904 	addi	r2,r2,2852
    3f98:	10800003 	ldbu	r2,0(r2)
    3f9c:	10803fcc 	andi	r2,r2,255
    3fa0:	10000526 	beq	r2,zero,3fb8 <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
    3fa4:	e0800217 	ldw	r2,8(fp)
    3fa8:	00c00344 	movi	r3,13
    3fac:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    3fb0:	0005883a 	mov	r2,zero
    3fb4:	00014c06 	br	44e8 <OSFlagPend+0x5dc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    3fb8:	e0bffc17 	ldw	r2,-16(fp)
    3fbc:	10800003 	ldbu	r2,0(r2)
    3fc0:	10803fcc 	andi	r2,r2,255
    3fc4:	10800160 	cmpeqi	r2,r2,5
    3fc8:	1000051e 	bne	r2,zero,3fe0 <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
    3fcc:	e0800217 	ldw	r2,8(fp)
    3fd0:	00c00044 	movi	r3,1
    3fd4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    3fd8:	0005883a 	mov	r2,zero
    3fdc:	00014206 	br	44e8 <OSFlagPend+0x5dc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    3fe0:	e0fffe03 	ldbu	r3,-8(fp)
    3fe4:	00bfe004 	movi	r2,-128
    3fe8:	1884703a 	and	r2,r3,r2
    3fec:	e0bfe705 	stb	r2,-100(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
    3ff0:	e0bfe703 	ldbu	r2,-100(fp)
    3ff4:	10000626 	beq	r2,zero,4010 <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
    3ff8:	e0bffe03 	ldbu	r2,-8(fp)
    3ffc:	10801fcc 	andi	r2,r2,127
    4000:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    4004:	00800044 	movi	r2,1
    4008:	e0bfe505 	stb	r2,-108(fp)
    400c:	00000106 	br	4014 <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
    4010:	e03fe505 	stb	zero,-108(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4014:	0005303a 	rdctl	r2,status
    4018:	e0bfe915 	stw	r2,-92(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    401c:	e0ffe917 	ldw	r3,-92(fp)
    4020:	00bfff84 	movi	r2,-2
    4024:	1884703a 	and	r2,r3,r2
    4028:	1001703a 	wrctl	status,r2
  
  return context;
    402c:	e0bfe917 	ldw	r2,-92(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    4030:	e0bfe615 	stw	r2,-104(fp)
    switch (wait_type) {
    4034:	e0bffe03 	ldbu	r2,-8(fp)
    4038:	10c00060 	cmpeqi	r3,r2,1
    403c:	1800921e 	bne	r3,zero,4288 <OSFlagPend+0x37c>
    4040:	10c00088 	cmpgei	r3,r2,2
    4044:	1800021e 	bne	r3,zero,4050 <OSFlagPend+0x144>
    4048:	10006126 	beq	r2,zero,41d0 <OSFlagPend+0x2c4>
    404c:	0000bb06 	br	433c <OSFlagPend+0x430>
    4050:	10c000a0 	cmpeqi	r3,r2,2
    4054:	1800031e 	bne	r3,zero,4064 <OSFlagPend+0x158>
    4058:	108000e0 	cmpeqi	r2,r2,3
    405c:	10002f1e 	bne	r2,zero,411c <OSFlagPend+0x210>
    4060:	0000b606 	br	433c <OSFlagPend+0x430>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
    4064:	e0bffc17 	ldw	r2,-16(fp)
    4068:	10c0020b 	ldhu	r3,8(r2)
    406c:	e0bffd0b 	ldhu	r2,-12(fp)
    4070:	1884703a 	and	r2,r3,r2
    4074:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    4078:	e0ffe78b 	ldhu	r3,-98(fp)
    407c:	e0bffd0b 	ldhu	r2,-12(fp)
    4080:	1880191e 	bne	r3,r2,40e8 <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    4084:	e0bfe503 	ldbu	r2,-108(fp)
    4088:	10800058 	cmpnei	r2,r2,1
    408c:	1000091e 	bne	r2,zero,40b4 <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    4090:	e0bffc17 	ldw	r2,-16(fp)
    4094:	1080020b 	ldhu	r2,8(r2)
    4098:	1007883a 	mov	r3,r2
    409c:	e0bfe78b 	ldhu	r2,-98(fp)
    40a0:	0084303a 	nor	r2,zero,r2
    40a4:	1884703a 	and	r2,r3,r2
    40a8:	1007883a 	mov	r3,r2
    40ac:	e0bffc17 	ldw	r2,-16(fp)
    40b0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    40b4:	00800074 	movhi	r2,1
    40b8:	1082d804 	addi	r2,r2,2912
    40bc:	10800017 	ldw	r2,0(r2)
    40c0:	e0ffe78b 	ldhu	r3,-98(fp)
    40c4:	10c00b0d 	sth	r3,44(r2)
    40c8:	e0bfe617 	ldw	r2,-104(fp)
    40cc:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    40d0:	e0bfea17 	ldw	r2,-88(fp)
    40d4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    40d8:	e0800217 	ldw	r2,8(fp)
    40dc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    40e0:	e0bfe78b 	ldhu	r2,-98(fp)
    40e4:	00010006 	br	44e8 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    40e8:	e1bffd0b 	ldhu	r6,-12(fp)
    40ec:	e0fffe03 	ldbu	r3,-8(fp)
    40f0:	e0bfff0b 	ldhu	r2,-4(fp)
    40f4:	e17ff704 	addi	r5,fp,-36
    40f8:	d8800015 	stw	r2,0(sp)
    40fc:	e13ffc17 	ldw	r4,-16(fp)
    4100:	180f883a 	mov	r7,r3
    4104:	00049b00 	call	49b0 <OS_FlagBlock>
    4108:	e0bfe617 	ldw	r2,-104(fp)
    410c:	e0bfeb15 	stw	r2,-84(fp)
    4110:	e0bfeb17 	ldw	r2,-84(fp)
    4114:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    4118:	00009206 	br	4364 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
    411c:	e0bffc17 	ldw	r2,-16(fp)
    4120:	10c0020b 	ldhu	r3,8(r2)
    4124:	e0bffd0b 	ldhu	r2,-12(fp)
    4128:	1884703a 	and	r2,r3,r2
    412c:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    4130:	e0bfe78b 	ldhu	r2,-98(fp)
    4134:	10001926 	beq	r2,zero,419c <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    4138:	e0bfe503 	ldbu	r2,-108(fp)
    413c:	10800058 	cmpnei	r2,r2,1
    4140:	1000091e 	bne	r2,zero,4168 <OSFlagPend+0x25c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    4144:	e0bffc17 	ldw	r2,-16(fp)
    4148:	1080020b 	ldhu	r2,8(r2)
    414c:	1007883a 	mov	r3,r2
    4150:	e0bfe78b 	ldhu	r2,-98(fp)
    4154:	0084303a 	nor	r2,zero,r2
    4158:	1884703a 	and	r2,r3,r2
    415c:	1007883a 	mov	r3,r2
    4160:	e0bffc17 	ldw	r2,-16(fp)
    4164:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    4168:	00800074 	movhi	r2,1
    416c:	1082d804 	addi	r2,r2,2912
    4170:	10800017 	ldw	r2,0(r2)
    4174:	e0ffe78b 	ldhu	r3,-98(fp)
    4178:	10c00b0d 	sth	r3,44(r2)
    417c:	e0bfe617 	ldw	r2,-104(fp)
    4180:	e0bfec15 	stw	r2,-80(fp)
    4184:	e0bfec17 	ldw	r2,-80(fp)
    4188:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    418c:	e0800217 	ldw	r2,8(fp)
    4190:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    4194:	e0bfe78b 	ldhu	r2,-98(fp)
    4198:	0000d306 	br	44e8 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    419c:	e1bffd0b 	ldhu	r6,-12(fp)
    41a0:	e0fffe03 	ldbu	r3,-8(fp)
    41a4:	e0bfff0b 	ldhu	r2,-4(fp)
    41a8:	e17ff704 	addi	r5,fp,-36
    41ac:	d8800015 	stw	r2,0(sp)
    41b0:	e13ffc17 	ldw	r4,-16(fp)
    41b4:	180f883a 	mov	r7,r3
    41b8:	00049b00 	call	49b0 <OS_FlagBlock>
    41bc:	e0bfe617 	ldw	r2,-104(fp)
    41c0:	e0bfed15 	stw	r2,-76(fp)
    41c4:	e0bfed17 	ldw	r2,-76(fp)
    41c8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    41cc:	00006506 	br	4364 <OSFlagPend+0x458>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    41d0:	e0bffc17 	ldw	r2,-16(fp)
    41d4:	1080020b 	ldhu	r2,8(r2)
    41d8:	0084303a 	nor	r2,zero,r2
    41dc:	1007883a 	mov	r3,r2
    41e0:	e0bffd0b 	ldhu	r2,-12(fp)
    41e4:	1884703a 	and	r2,r3,r2
    41e8:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    41ec:	e0ffe78b 	ldhu	r3,-98(fp)
    41f0:	e0bffd0b 	ldhu	r2,-12(fp)
    41f4:	1880171e 	bne	r3,r2,4254 <OSFlagPend+0x348>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    41f8:	e0bfe503 	ldbu	r2,-108(fp)
    41fc:	10800058 	cmpnei	r2,r2,1
    4200:	1000071e 	bne	r2,zero,4220 <OSFlagPend+0x314>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    4204:	e0bffc17 	ldw	r2,-16(fp)
    4208:	10c0020b 	ldhu	r3,8(r2)
    420c:	e0bfe78b 	ldhu	r2,-98(fp)
    4210:	1884b03a 	or	r2,r3,r2
    4214:	1007883a 	mov	r3,r2
    4218:	e0bffc17 	ldw	r2,-16(fp)
    421c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    4220:	00800074 	movhi	r2,1
    4224:	1082d804 	addi	r2,r2,2912
    4228:	10800017 	ldw	r2,0(r2)
    422c:	e0ffe78b 	ldhu	r3,-98(fp)
    4230:	10c00b0d 	sth	r3,44(r2)
    4234:	e0bfe617 	ldw	r2,-104(fp)
    4238:	e0bfee15 	stw	r2,-72(fp)
    423c:	e0bfee17 	ldw	r2,-72(fp)
    4240:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    4244:	e0800217 	ldw	r2,8(fp)
    4248:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    424c:	e0bfe78b 	ldhu	r2,-98(fp)
    4250:	0000a506 	br	44e8 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    4254:	e1bffd0b 	ldhu	r6,-12(fp)
    4258:	e0fffe03 	ldbu	r3,-8(fp)
    425c:	e0bfff0b 	ldhu	r2,-4(fp)
    4260:	e17ff704 	addi	r5,fp,-36
    4264:	d8800015 	stw	r2,0(sp)
    4268:	e13ffc17 	ldw	r4,-16(fp)
    426c:	180f883a 	mov	r7,r3
    4270:	00049b00 	call	49b0 <OS_FlagBlock>
    4274:	e0bfe617 	ldw	r2,-104(fp)
    4278:	e0bfef15 	stw	r2,-68(fp)
    427c:	e0bfef17 	ldw	r2,-68(fp)
    4280:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    4284:	00003706 	br	4364 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    4288:	e0bffc17 	ldw	r2,-16(fp)
    428c:	1080020b 	ldhu	r2,8(r2)
    4290:	0084303a 	nor	r2,zero,r2
    4294:	1007883a 	mov	r3,r2
    4298:	e0bffd0b 	ldhu	r2,-12(fp)
    429c:	1884703a 	and	r2,r3,r2
    42a0:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    42a4:	e0bfe78b 	ldhu	r2,-98(fp)
    42a8:	10001726 	beq	r2,zero,4308 <OSFlagPend+0x3fc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    42ac:	e0bfe503 	ldbu	r2,-108(fp)
    42b0:	10800058 	cmpnei	r2,r2,1
    42b4:	1000071e 	bne	r2,zero,42d4 <OSFlagPend+0x3c8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    42b8:	e0bffc17 	ldw	r2,-16(fp)
    42bc:	10c0020b 	ldhu	r3,8(r2)
    42c0:	e0bfe78b 	ldhu	r2,-98(fp)
    42c4:	1884b03a 	or	r2,r3,r2
    42c8:	1007883a 	mov	r3,r2
    42cc:	e0bffc17 	ldw	r2,-16(fp)
    42d0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    42d4:	00800074 	movhi	r2,1
    42d8:	1082d804 	addi	r2,r2,2912
    42dc:	10800017 	ldw	r2,0(r2)
    42e0:	e0ffe78b 	ldhu	r3,-98(fp)
    42e4:	10c00b0d 	sth	r3,44(r2)
    42e8:	e0bfe617 	ldw	r2,-104(fp)
    42ec:	e0bff015 	stw	r2,-64(fp)
    42f0:	e0bff017 	ldw	r2,-64(fp)
    42f4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    42f8:	e0800217 	ldw	r2,8(fp)
    42fc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    4300:	e0bfe78b 	ldhu	r2,-98(fp)
    4304:	00007806 	br	44e8 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    4308:	e1bffd0b 	ldhu	r6,-12(fp)
    430c:	e0fffe03 	ldbu	r3,-8(fp)
    4310:	e0bfff0b 	ldhu	r2,-4(fp)
    4314:	e17ff704 	addi	r5,fp,-36
    4318:	d8800015 	stw	r2,0(sp)
    431c:	e13ffc17 	ldw	r4,-16(fp)
    4320:	180f883a 	mov	r7,r3
    4324:	00049b00 	call	49b0 <OS_FlagBlock>
    4328:	e0bfe617 	ldw	r2,-104(fp)
    432c:	e0bff115 	stw	r2,-60(fp)
    4330:	e0bff117 	ldw	r2,-60(fp)
    4334:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    4338:	00000a06 	br	4364 <OSFlagPend+0x458>
    433c:	e0bfe617 	ldw	r2,-104(fp)
    4340:	e0bff215 	stw	r2,-56(fp)
    4344:	e0bff217 	ldw	r2,-56(fp)
    4348:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    434c:	e03fe78d 	sth	zero,-98(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
    4350:	e0800217 	ldw	r2,8(fp)
    4354:	00c01bc4 	movi	r3,111
    4358:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
    435c:	e0bfe78b 	ldhu	r2,-98(fp)
    4360:	00006106 	br	44e8 <OSFlagPend+0x5dc>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
    4364:	0002d880 	call	2d88 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4368:	0005303a 	rdctl	r2,status
    436c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4370:	e0fff317 	ldw	r3,-52(fp)
    4374:	00bfff84 	movi	r2,-2
    4378:	1884703a 	and	r2,r3,r2
    437c:	1001703a 	wrctl	status,r2
  
  return context;
    4380:	e0bff317 	ldw	r2,-52(fp)
    OS_ENTER_CRITICAL();
    4384:	e0bfe615 	stw	r2,-104(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
    4388:	00800074 	movhi	r2,1
    438c:	1082d804 	addi	r2,r2,2912
    4390:	10800017 	ldw	r2,0(r2)
    4394:	10800c43 	ldbu	r2,49(r2)
    4398:	10803fcc 	andi	r2,r2,255
    439c:	10002226 	beq	r2,zero,4428 <OSFlagPend+0x51c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
    43a0:	00800074 	movhi	r2,1
    43a4:	1082d804 	addi	r2,r2,2912
    43a8:	10800017 	ldw	r2,0(r2)
    43ac:	10800c43 	ldbu	r2,49(r2)
    43b0:	e0bfe805 	stb	r2,-96(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    43b4:	00800074 	movhi	r2,1
    43b8:	1082d804 	addi	r2,r2,2912
    43bc:	10800017 	ldw	r2,0(r2)
    43c0:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
    43c4:	e0bff704 	addi	r2,fp,-36
    43c8:	1009883a 	mov	r4,r2
    43cc:	0004d680 	call	4d68 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
    43d0:	00800074 	movhi	r2,1
    43d4:	1082d804 	addi	r2,r2,2912
    43d8:	10800017 	ldw	r2,0(r2)
    43dc:	10000c05 	stb	zero,48(r2)
    43e0:	e0bfe617 	ldw	r2,-104(fp)
    43e4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    43e8:	e0bff417 	ldw	r2,-48(fp)
    43ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
    43f0:	e03fe78d 	sth	zero,-98(fp)
        switch (pend_stat) {
    43f4:	e0bfe803 	ldbu	r2,-96(fp)
    43f8:	108000a0 	cmpeqi	r2,r2,2
    43fc:	10000426 	beq	r2,zero,4410 <OSFlagPend+0x504>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
    4400:	e0800217 	ldw	r2,8(fp)
    4404:	00c00384 	movi	r3,14
    4408:	10c00005 	stb	r3,0(r2)
                 break;
    440c:	00000406 	br	4420 <OSFlagPend+0x514>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
    4410:	e0800217 	ldw	r2,8(fp)
    4414:	00c00284 	movi	r3,10
    4418:	10c00005 	stb	r3,0(r2)
                 break;
    441c:	0001883a 	nop
        }
        return (flags_rdy);
    4420:	e0bfe78b 	ldhu	r2,-98(fp)
    4424:	00003006 	br	44e8 <OSFlagPend+0x5dc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
    4428:	00800074 	movhi	r2,1
    442c:	1082d804 	addi	r2,r2,2912
    4430:	10800017 	ldw	r2,0(r2)
    4434:	10800b0b 	ldhu	r2,44(r2)
    4438:	e0bfe78d 	sth	r2,-98(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
    443c:	e0bfe503 	ldbu	r2,-108(fp)
    4440:	10800058 	cmpnei	r2,r2,1
    4444:	1000211e 	bne	r2,zero,44cc <OSFlagPend+0x5c0>
        switch (wait_type) {
    4448:	e0bffe03 	ldbu	r2,-8(fp)
    444c:	10001616 	blt	r2,zero,44a8 <OSFlagPend+0x59c>
    4450:	10c00090 	cmplti	r3,r2,2
    4454:	18000c1e 	bne	r3,zero,4488 <OSFlagPend+0x57c>
    4458:	10800108 	cmpgei	r2,r2,4
    445c:	1000121e 	bne	r2,zero,44a8 <OSFlagPend+0x59c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
    4460:	e0bffc17 	ldw	r2,-16(fp)
    4464:	1080020b 	ldhu	r2,8(r2)
    4468:	1007883a 	mov	r3,r2
    446c:	e0bfe78b 	ldhu	r2,-98(fp)
    4470:	0084303a 	nor	r2,zero,r2
    4474:	1884703a 	and	r2,r3,r2
    4478:	1007883a 	mov	r3,r2
    447c:	e0bffc17 	ldw	r2,-16(fp)
    4480:	10c0020d 	sth	r3,8(r2)
                 break;
    4484:	00001106 	br	44cc <OSFlagPend+0x5c0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
    4488:	e0bffc17 	ldw	r2,-16(fp)
    448c:	10c0020b 	ldhu	r3,8(r2)
    4490:	e0bfe78b 	ldhu	r2,-98(fp)
    4494:	1884b03a 	or	r2,r3,r2
    4498:	1007883a 	mov	r3,r2
    449c:	e0bffc17 	ldw	r2,-16(fp)
    44a0:	10c0020d 	sth	r3,8(r2)
                 break;
    44a4:	00000906 	br	44cc <OSFlagPend+0x5c0>
    44a8:	e0bfe617 	ldw	r2,-104(fp)
    44ac:	e0bff515 	stw	r2,-44(fp)
    44b0:	e0bff517 	ldw	r2,-44(fp)
    44b4:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    44b8:	e0800217 	ldw	r2,8(fp)
    44bc:	00c01bc4 	movi	r3,111
    44c0:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    44c4:	0005883a 	mov	r2,zero
    44c8:	00000706 	br	44e8 <OSFlagPend+0x5dc>
    44cc:	e0bfe617 	ldw	r2,-104(fp)
    44d0:	e0bff615 	stw	r2,-40(fp)
    44d4:	e0bff617 	ldw	r2,-40(fp)
    44d8:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
    44dc:	e0800217 	ldw	r2,8(fp)
    44e0:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
    44e4:	e0bfe78b 	ldhu	r2,-98(fp)
}
    44e8:	e037883a 	mov	sp,fp
    44ec:	dfc00117 	ldw	ra,4(sp)
    44f0:	df000017 	ldw	fp,0(sp)
    44f4:	dec00204 	addi	sp,sp,8
    44f8:	f800283a 	ret

000044fc <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
    44fc:	defffb04 	addi	sp,sp,-20
    4500:	df000415 	stw	fp,16(sp)
    4504:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    4508:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    450c:	0005303a 	rdctl	r2,status
    4510:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4514:	e0fffe17 	ldw	r3,-8(fp)
    4518:	00bfff84 	movi	r2,-2
    451c:	1884703a 	and	r2,r3,r2
    4520:	1001703a 	wrctl	status,r2
  
  return context;
    4524:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    4528:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
    452c:	00800074 	movhi	r2,1
    4530:	1082d804 	addi	r2,r2,2912
    4534:	10800017 	ldw	r2,0(r2)
    4538:	10800b0b 	ldhu	r2,44(r2)
    453c:	e0bffd0d 	sth	r2,-12(fp)
    4540:	e0bffc17 	ldw	r2,-16(fp)
    4544:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4548:	e0bfff17 	ldw	r2,-4(fp)
    454c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
    4550:	e0bffd0b 	ldhu	r2,-12(fp)
}
    4554:	e037883a 	mov	sp,fp
    4558:	df000017 	ldw	fp,0(sp)
    455c:	dec00104 	addi	sp,sp,4
    4560:	f800283a 	ret

00004564 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
    4564:	deffef04 	addi	sp,sp,-68
    4568:	dfc01015 	stw	ra,64(sp)
    456c:	df000f15 	stw	fp,60(sp)
    4570:	df000f04 	addi	fp,sp,60
    4574:	e13ffc15 	stw	r4,-16(fp)
    4578:	2807883a 	mov	r3,r5
    457c:	3005883a 	mov	r2,r6
    4580:	e1ffff15 	stw	r7,-4(fp)
    4584:	e0fffd0d 	sth	r3,-12(fp)
    4588:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
    458c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    4590:	e0bfff17 	ldw	r2,-4(fp)
    4594:	1000021e 	bne	r2,zero,45a0 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
    4598:	0005883a 	mov	r2,zero
    459c:	0000ce06 	br	48d8 <OSFlagPost+0x374>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
    45a0:	e0bffc17 	ldw	r2,-16(fp)
    45a4:	1000051e 	bne	r2,zero,45bc <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    45a8:	e0bfff17 	ldw	r2,-4(fp)
    45ac:	00c01b84 	movi	r3,110
    45b0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    45b4:	0005883a 	mov	r2,zero
    45b8:	0000c706 	br	48d8 <OSFlagPost+0x374>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
    45bc:	e0bffc17 	ldw	r2,-16(fp)
    45c0:	10800003 	ldbu	r2,0(r2)
    45c4:	10803fcc 	andi	r2,r2,255
    45c8:	10800160 	cmpeqi	r2,r2,5
    45cc:	1000051e 	bne	r2,zero,45e4 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
    45d0:	e0bfff17 	ldw	r2,-4(fp)
    45d4:	00c00044 	movi	r3,1
    45d8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    45dc:	0005883a 	mov	r2,zero
    45e0:	0000bd06 	br	48d8 <OSFlagPost+0x374>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    45e4:	0005303a 	rdctl	r2,status
    45e8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    45ec:	e0fff617 	ldw	r3,-40(fp)
    45f0:	00bfff84 	movi	r2,-2
    45f4:	1884703a 	and	r2,r3,r2
    45f8:	1001703a 	wrctl	status,r2
  
  return context;
    45fc:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    4600:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
    4604:	e0bffe03 	ldbu	r2,-8(fp)
    4608:	10000326 	beq	r2,zero,4618 <OSFlagPost+0xb4>
    460c:	10800060 	cmpeqi	r2,r2,1
    4610:	10000b1e 	bne	r2,zero,4640 <OSFlagPost+0xdc>
    4614:	00001206 	br	4660 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
    4618:	e0bffc17 	ldw	r2,-16(fp)
    461c:	1080020b 	ldhu	r2,8(r2)
    4620:	1007883a 	mov	r3,r2
    4624:	e0bffd0b 	ldhu	r2,-12(fp)
    4628:	0084303a 	nor	r2,zero,r2
    462c:	1884703a 	and	r2,r3,r2
    4630:	1007883a 	mov	r3,r2
    4634:	e0bffc17 	ldw	r2,-16(fp)
    4638:	10c0020d 	sth	r3,8(r2)
             break;
    463c:	00001106 	br	4684 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
    4640:	e0bffc17 	ldw	r2,-16(fp)
    4644:	10c0020b 	ldhu	r3,8(r2)
    4648:	e0bffd0b 	ldhu	r2,-12(fp)
    464c:	1884b03a 	or	r2,r3,r2
    4650:	1007883a 	mov	r3,r2
    4654:	e0bffc17 	ldw	r2,-16(fp)
    4658:	10c0020d 	sth	r3,8(r2)
             break;
    465c:	00000906 	br	4684 <OSFlagPost+0x120>
    4660:	e0bff317 	ldw	r2,-52(fp)
    4664:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4668:	e0bff717 	ldw	r2,-36(fp)
    466c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
    4670:	e0bfff17 	ldw	r2,-4(fp)
    4674:	00c01c44 	movi	r3,113
    4678:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
    467c:	0005883a 	mov	r2,zero
    4680:	00009506 	br	48d8 <OSFlagPost+0x374>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    4684:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    4688:	e0bffc17 	ldw	r2,-16(fp)
    468c:	10800117 	ldw	r2,4(r2)
    4690:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    4694:	00007406 	br	4868 <OSFlagPost+0x304>
        switch (pnode->OSFlagNodeWaitType) {
    4698:	e0bff117 	ldw	r2,-60(fp)
    469c:	10800483 	ldbu	r2,18(r2)
    46a0:	10803fcc 	andi	r2,r2,255
    46a4:	10c00060 	cmpeqi	r3,r2,1
    46a8:	18004d1e 	bne	r3,zero,47e0 <OSFlagPost+0x27c>
    46ac:	10c00088 	cmpgei	r3,r2,2
    46b0:	1800021e 	bne	r3,zero,46bc <OSFlagPost+0x158>
    46b4:	10003126 	beq	r2,zero,477c <OSFlagPost+0x218>
    46b8:	00005f06 	br	4838 <OSFlagPost+0x2d4>
    46bc:	10c000a0 	cmpeqi	r3,r2,2
    46c0:	1800031e 	bne	r3,zero,46d0 <OSFlagPost+0x16c>
    46c4:	108000e0 	cmpeqi	r2,r2,3
    46c8:	1000181e 	bne	r2,zero,472c <OSFlagPost+0x1c8>
    46cc:	00005a06 	br	4838 <OSFlagPost+0x2d4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    46d0:	e0bffc17 	ldw	r2,-16(fp)
    46d4:	10c0020b 	ldhu	r3,8(r2)
    46d8:	e0bff117 	ldw	r2,-60(fp)
    46dc:	1080040b 	ldhu	r2,16(r2)
    46e0:	1884703a 	and	r2,r3,r2
    46e4:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    46e8:	e0bff117 	ldw	r2,-60(fp)
    46ec:	1080040b 	ldhu	r2,16(r2)
    46f0:	10ffffcc 	andi	r3,r2,65535
    46f4:	e0bff40b 	ldhu	r2,-48(fp)
    46f8:	18800b1e 	bne	r3,r2,4728 <OSFlagPost+0x1c4>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    46fc:	e0bff40b 	ldhu	r2,-48(fp)
    4700:	e13ff117 	ldw	r4,-60(fp)
    4704:	100b883a 	mov	r5,r2
    4708:	0004c580 	call	4c58 <OS_FlagTaskRdy>
    470c:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
    4710:	e0bff483 	ldbu	r2,-46(fp)
    4714:	10800058 	cmpnei	r2,r2,1
    4718:	1000031e 	bne	r2,zero,4728 <OSFlagPost+0x1c4>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    471c:	00800044 	movi	r2,1
    4720:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    4724:	00004d06 	br	485c <OSFlagPost+0x2f8>
    4728:	00004c06 	br	485c <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    472c:	e0bffc17 	ldw	r2,-16(fp)
    4730:	10c0020b 	ldhu	r3,8(r2)
    4734:	e0bff117 	ldw	r2,-60(fp)
    4738:	1080040b 	ldhu	r2,16(r2)
    473c:	1884703a 	and	r2,r3,r2
    4740:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    4744:	e0bff40b 	ldhu	r2,-48(fp)
    4748:	10000b26 	beq	r2,zero,4778 <OSFlagPost+0x214>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    474c:	e0bff40b 	ldhu	r2,-48(fp)
    4750:	e13ff117 	ldw	r4,-60(fp)
    4754:	100b883a 	mov	r5,r2
    4758:	0004c580 	call	4c58 <OS_FlagTaskRdy>
    475c:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
    4760:	e0bff483 	ldbu	r2,-46(fp)
    4764:	10800058 	cmpnei	r2,r2,1
    4768:	1000031e 	bne	r2,zero,4778 <OSFlagPost+0x214>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    476c:	00800044 	movi	r2,1
    4770:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    4774:	00003906 	br	485c <OSFlagPost+0x2f8>
    4778:	00003806 	br	485c <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    477c:	e0bffc17 	ldw	r2,-16(fp)
    4780:	1080020b 	ldhu	r2,8(r2)
    4784:	0084303a 	nor	r2,zero,r2
    4788:	1007883a 	mov	r3,r2
    478c:	e0bff117 	ldw	r2,-60(fp)
    4790:	1080040b 	ldhu	r2,16(r2)
    4794:	1884703a 	and	r2,r3,r2
    4798:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    479c:	e0bff117 	ldw	r2,-60(fp)
    47a0:	1080040b 	ldhu	r2,16(r2)
    47a4:	10ffffcc 	andi	r3,r2,65535
    47a8:	e0bff40b 	ldhu	r2,-48(fp)
    47ac:	18800b1e 	bne	r3,r2,47dc <OSFlagPost+0x278>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    47b0:	e0bff40b 	ldhu	r2,-48(fp)
    47b4:	e13ff117 	ldw	r4,-60(fp)
    47b8:	100b883a 	mov	r5,r2
    47bc:	0004c580 	call	4c58 <OS_FlagTaskRdy>
    47c0:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
    47c4:	e0bff483 	ldbu	r2,-46(fp)
    47c8:	10800058 	cmpnei	r2,r2,1
    47cc:	1000031e 	bne	r2,zero,47dc <OSFlagPost+0x278>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    47d0:	00800044 	movi	r2,1
    47d4:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    47d8:	00002006 	br	485c <OSFlagPost+0x2f8>
    47dc:	00001f06 	br	485c <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    47e0:	e0bffc17 	ldw	r2,-16(fp)
    47e4:	1080020b 	ldhu	r2,8(r2)
    47e8:	0084303a 	nor	r2,zero,r2
    47ec:	1007883a 	mov	r3,r2
    47f0:	e0bff117 	ldw	r2,-60(fp)
    47f4:	1080040b 	ldhu	r2,16(r2)
    47f8:	1884703a 	and	r2,r3,r2
    47fc:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    4800:	e0bff40b 	ldhu	r2,-48(fp)
    4804:	10000b26 	beq	r2,zero,4834 <OSFlagPost+0x2d0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    4808:	e0bff40b 	ldhu	r2,-48(fp)
    480c:	e13ff117 	ldw	r4,-60(fp)
    4810:	100b883a 	mov	r5,r2
    4814:	0004c580 	call	4c58 <OS_FlagTaskRdy>
    4818:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
    481c:	e0bff483 	ldbu	r2,-46(fp)
    4820:	10800058 	cmpnei	r2,r2,1
    4824:	1000031e 	bne	r2,zero,4834 <OSFlagPost+0x2d0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    4828:	00800044 	movi	r2,1
    482c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    4830:	00000a06 	br	485c <OSFlagPost+0x2f8>
    4834:	00000906 	br	485c <OSFlagPost+0x2f8>
    4838:	e0bff317 	ldw	r2,-52(fp)
    483c:	e0bff815 	stw	r2,-32(fp)
    4840:	e0bff817 	ldw	r2,-32(fp)
    4844:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    4848:	e0bfff17 	ldw	r2,-4(fp)
    484c:	00c01bc4 	movi	r3,111
    4850:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    4854:	0005883a 	mov	r2,zero
    4858:	00001f06 	br	48d8 <OSFlagPost+0x374>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    485c:	e0bff117 	ldw	r2,-60(fp)
    4860:	10800017 	ldw	r2,0(r2)
    4864:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    4868:	e0bff117 	ldw	r2,-60(fp)
    486c:	103f8a1e 	bne	r2,zero,4698 <OSFlagPost+0x134>
    4870:	e0bff317 	ldw	r2,-52(fp)
    4874:	e0bff915 	stw	r2,-28(fp)
    4878:	e0bff917 	ldw	r2,-28(fp)
    487c:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
    4880:	e0bff203 	ldbu	r2,-56(fp)
    4884:	10800058 	cmpnei	r2,r2,1
    4888:	1000011e 	bne	r2,zero,4890 <OSFlagPost+0x32c>
        OS_Sched();
    488c:	0002d880 	call	2d88 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4890:	0005303a 	rdctl	r2,status
    4894:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4898:	e0fffa17 	ldw	r3,-24(fp)
    489c:	00bfff84 	movi	r2,-2
    48a0:	1884703a 	and	r2,r3,r2
    48a4:	1001703a 	wrctl	status,r2
  
  return context;
    48a8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    48ac:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
    48b0:	e0bffc17 	ldw	r2,-16(fp)
    48b4:	1080020b 	ldhu	r2,8(r2)
    48b8:	e0bff50d 	sth	r2,-44(fp)
    48bc:	e0bff317 	ldw	r2,-52(fp)
    48c0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    48c4:	e0bffb17 	ldw	r2,-20(fp)
    48c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
    48cc:	e0bfff17 	ldw	r2,-4(fp)
    48d0:	10000005 	stb	zero,0(r2)
    return (flags_cur);
    48d4:	e0bff50b 	ldhu	r2,-44(fp)
}
    48d8:	e037883a 	mov	sp,fp
    48dc:	dfc00117 	ldw	ra,4(sp)
    48e0:	df000017 	ldw	fp,0(sp)
    48e4:	dec00204 	addi	sp,sp,8
    48e8:	f800283a 	ret

000048ec <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
    48ec:	defff904 	addi	sp,sp,-28
    48f0:	df000615 	stw	fp,24(sp)
    48f4:	df000604 	addi	fp,sp,24
    48f8:	e13ffe15 	stw	r4,-8(fp)
    48fc:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
    4900:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
    4904:	e0bfff17 	ldw	r2,-4(fp)
    4908:	1000021e 	bne	r2,zero,4914 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
    490c:	0005883a 	mov	r2,zero
    4910:	00002306 	br	49a0 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
    4914:	e0bffe17 	ldw	r2,-8(fp)
    4918:	1000051e 	bne	r2,zero,4930 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    491c:	e0bfff17 	ldw	r2,-4(fp)
    4920:	00c01b84 	movi	r3,110
    4924:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    4928:	0005883a 	mov	r2,zero
    492c:	00001c06 	br	49a0 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
    4930:	e0bffe17 	ldw	r2,-8(fp)
    4934:	10800003 	ldbu	r2,0(r2)
    4938:	10803fcc 	andi	r2,r2,255
    493c:	10800160 	cmpeqi	r2,r2,5
    4940:	1000051e 	bne	r2,zero,4958 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    4944:	e0bfff17 	ldw	r2,-4(fp)
    4948:	00c00044 	movi	r3,1
    494c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    4950:	0005883a 	mov	r2,zero
    4954:	00001206 	br	49a0 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4958:	0005303a 	rdctl	r2,status
    495c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4960:	e0fffc17 	ldw	r3,-16(fp)
    4964:	00bfff84 	movi	r2,-2
    4968:	1884703a 	and	r2,r3,r2
    496c:	1001703a 	wrctl	status,r2
  
  return context;
    4970:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    4974:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
    4978:	e0bffe17 	ldw	r2,-8(fp)
    497c:	1080020b 	ldhu	r2,8(r2)
    4980:	e0bffb0d 	sth	r2,-20(fp)
    4984:	e0bffa17 	ldw	r2,-24(fp)
    4988:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    498c:	e0bffd17 	ldw	r2,-12(fp)
    4990:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    4994:	e0bfff17 	ldw	r2,-4(fp)
    4998:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
    499c:	e0bffb0b 	ldhu	r2,-20(fp)
}
    49a0:	e037883a 	mov	sp,fp
    49a4:	df000017 	ldw	fp,0(sp)
    49a8:	dec00104 	addi	sp,sp,4
    49ac:	f800283a 	ret

000049b0 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
    49b0:	defff804 	addi	sp,sp,-32
    49b4:	df000715 	stw	fp,28(sp)
    49b8:	df000704 	addi	fp,sp,28
    49bc:	e13ffb15 	stw	r4,-20(fp)
    49c0:	e17ffc15 	stw	r5,-16(fp)
    49c4:	3009883a 	mov	r4,r6
    49c8:	3807883a 	mov	r3,r7
    49cc:	e0800117 	ldw	r2,4(fp)
    49d0:	e13ffd0d 	sth	r4,-12(fp)
    49d4:	e0fffe05 	stb	r3,-8(fp)
    49d8:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
    49dc:	00800074 	movhi	r2,1
    49e0:	1082d804 	addi	r2,r2,2912
    49e4:	10c00017 	ldw	r3,0(r2)
    49e8:	00800074 	movhi	r2,1
    49ec:	1082d804 	addi	r2,r2,2912
    49f0:	10800017 	ldw	r2,0(r2)
    49f4:	10800c03 	ldbu	r2,48(r2)
    49f8:	10800814 	ori	r2,r2,32
    49fc:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
    4a00:	00800074 	movhi	r2,1
    4a04:	1082d804 	addi	r2,r2,2912
    4a08:	10800017 	ldw	r2,0(r2)
    4a0c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
    4a10:	00800074 	movhi	r2,1
    4a14:	1082d804 	addi	r2,r2,2912
    4a18:	10800017 	ldw	r2,0(r2)
    4a1c:	e0ffff0b 	ldhu	r3,-4(fp)
    4a20:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
    4a24:	00800074 	movhi	r2,1
    4a28:	1082d804 	addi	r2,r2,2912
    4a2c:	10800017 	ldw	r2,0(r2)
    4a30:	e0fffc17 	ldw	r3,-16(fp)
    4a34:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
    4a38:	e0bffc17 	ldw	r2,-16(fp)
    4a3c:	e0fffd0b 	ldhu	r3,-12(fp)
    4a40:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
    4a44:	e0bffc17 	ldw	r2,-16(fp)
    4a48:	e0fffe03 	ldbu	r3,-8(fp)
    4a4c:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
    4a50:	00800074 	movhi	r2,1
    4a54:	1082d804 	addi	r2,r2,2912
    4a58:	10c00017 	ldw	r3,0(r2)
    4a5c:	e0bffc17 	ldw	r2,-16(fp)
    4a60:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
    4a64:	e0bffb17 	ldw	r2,-20(fp)
    4a68:	10c00117 	ldw	r3,4(r2)
    4a6c:	e0bffc17 	ldw	r2,-16(fp)
    4a70:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
    4a74:	e0bffc17 	ldw	r2,-16(fp)
    4a78:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
    4a7c:	e0bffc17 	ldw	r2,-16(fp)
    4a80:	e0fffb17 	ldw	r3,-20(fp)
    4a84:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    4a88:	e0bffb17 	ldw	r2,-20(fp)
    4a8c:	10800117 	ldw	r2,4(r2)
    4a90:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
    4a94:	e0bff917 	ldw	r2,-28(fp)
    4a98:	10000326 	beq	r2,zero,4aa8 <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
    4a9c:	e0bff917 	ldw	r2,-28(fp)
    4aa0:	e0fffc17 	ldw	r3,-16(fp)
    4aa4:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
    4aa8:	e0bffb17 	ldw	r2,-20(fp)
    4aac:	e0fffc17 	ldw	r3,-16(fp)
    4ab0:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
    4ab4:	00800074 	movhi	r2,1
    4ab8:	1082d804 	addi	r2,r2,2912
    4abc:	10800017 	ldw	r2,0(r2)
    4ac0:	10800d03 	ldbu	r2,52(r2)
    4ac4:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    4ac8:	e0fffa03 	ldbu	r3,-24(fp)
    4acc:	e13ffa03 	ldbu	r4,-24(fp)
    4ad0:	00800074 	movhi	r2,1
    4ad4:	1082d544 	addi	r2,r2,2901
    4ad8:	1105883a 	add	r2,r2,r4
    4adc:	10800003 	ldbu	r2,0(r2)
    4ae0:	1009883a 	mov	r4,r2
    4ae4:	00800074 	movhi	r2,1
    4ae8:	1082d804 	addi	r2,r2,2912
    4aec:	10800017 	ldw	r2,0(r2)
    4af0:	10800d43 	ldbu	r2,53(r2)
    4af4:	0084303a 	nor	r2,zero,r2
    4af8:	2084703a 	and	r2,r4,r2
    4afc:	1009883a 	mov	r4,r2
    4b00:	00800074 	movhi	r2,1
    4b04:	1082d544 	addi	r2,r2,2901
    4b08:	10c5883a 	add	r2,r2,r3
    4b0c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
    4b10:	e0fffa03 	ldbu	r3,-24(fp)
    4b14:	00800074 	movhi	r2,1
    4b18:	1082d544 	addi	r2,r2,2901
    4b1c:	10c5883a 	add	r2,r2,r3
    4b20:	10800003 	ldbu	r2,0(r2)
    4b24:	10803fcc 	andi	r2,r2,255
    4b28:	10000e1e 	bne	r2,zero,4b64 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    4b2c:	00800074 	movhi	r2,1
    4b30:	1082d804 	addi	r2,r2,2912
    4b34:	10800017 	ldw	r2,0(r2)
    4b38:	10800d83 	ldbu	r2,54(r2)
    4b3c:	0084303a 	nor	r2,zero,r2
    4b40:	1007883a 	mov	r3,r2
    4b44:	00800074 	movhi	r2,1
    4b48:	1082d504 	addi	r2,r2,2900
    4b4c:	10800003 	ldbu	r2,0(r2)
    4b50:	1884703a 	and	r2,r3,r2
    4b54:	1007883a 	mov	r3,r2
    4b58:	00800074 	movhi	r2,1
    4b5c:	1082d504 	addi	r2,r2,2900
    4b60:	10c00005 	stb	r3,0(r2)
    }
}
    4b64:	e037883a 	mov	sp,fp
    4b68:	df000017 	ldw	fp,0(sp)
    4b6c:	dec00104 	addi	sp,sp,4
    4b70:	f800283a 	ret

00004b74 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
    4b74:	defffb04 	addi	sp,sp,-20
    4b78:	dfc00415 	stw	ra,16(sp)
    4b7c:	df000315 	stw	fp,12(sp)
    4b80:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    4b84:	01000074 	movhi	r4,1
    4b88:	2112e304 	addi	r4,r4,19340
    4b8c:	0140dc04 	movi	r5,880
    4b90:	0002cd40 	call	2cd4 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
    4b94:	00800074 	movhi	r2,1
    4b98:	1092e304 	addi	r2,r2,19340
    4b9c:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
    4ba0:	00800074 	movhi	r2,1
    4ba4:	1092ee04 	addi	r2,r2,19384
    4ba8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    4bac:	e03ffd0d 	sth	zero,-12(fp)
    4bb0:	00001306 	br	4c00 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    4bb4:	e0bffe17 	ldw	r2,-8(fp)
    4bb8:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
    4bbc:	e0bffe17 	ldw	r2,-8(fp)
    4bc0:	e0ffff17 	ldw	r3,-4(fp)
    4bc4:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
    4bc8:	e0bffe17 	ldw	r2,-8(fp)
    4bcc:	00c00fc4 	movi	r3,63
    4bd0:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    4bd4:	e0bffe17 	ldw	r2,-8(fp)
    4bd8:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
    4bdc:	e0bffe17 	ldw	r2,-8(fp)
    4be0:	10800b04 	addi	r2,r2,44
    4be4:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
    4be8:	e0bfff17 	ldw	r2,-4(fp)
    4bec:	10800b04 	addi	r2,r2,44
    4bf0:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    4bf4:	e0bffd0b 	ldhu	r2,-12(fp)
    4bf8:	10800044 	addi	r2,r2,1
    4bfc:	e0bffd0d 	sth	r2,-12(fp)
    4c00:	e0bffd0b 	ldhu	r2,-12(fp)
    4c04:	108004f0 	cmpltui	r2,r2,19
    4c08:	103fea1e 	bne	r2,zero,4bb4 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    4c0c:	e0bffe17 	ldw	r2,-8(fp)
    4c10:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
    4c14:	e0bffe17 	ldw	r2,-8(fp)
    4c18:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
    4c1c:	e0bffe17 	ldw	r2,-8(fp)
    4c20:	00c00fc4 	movi	r3,63
    4c24:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    4c28:	e0bffe17 	ldw	r2,-8(fp)
    4c2c:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
    4c30:	00800074 	movhi	r2,1
    4c34:	1082da04 	addi	r2,r2,2920
    4c38:	00c00074 	movhi	r3,1
    4c3c:	18d2e304 	addi	r3,r3,19340
    4c40:	10c00015 	stw	r3,0(r2)
#endif
}
    4c44:	e037883a 	mov	sp,fp
    4c48:	dfc00117 	ldw	ra,4(sp)
    4c4c:	df000017 	ldw	fp,0(sp)
    4c50:	dec00204 	addi	sp,sp,8
    4c54:	f800283a 	ret

00004c58 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
    4c58:	defffa04 	addi	sp,sp,-24
    4c5c:	dfc00515 	stw	ra,20(sp)
    4c60:	df000415 	stw	fp,16(sp)
    4c64:	df000404 	addi	fp,sp,16
    4c68:	e13ffe15 	stw	r4,-8(fp)
    4c6c:	2805883a 	mov	r2,r5
    4c70:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
    4c74:	e0bffe17 	ldw	r2,-8(fp)
    4c78:	10800217 	ldw	r2,8(r2)
    4c7c:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
    4c80:	e0bffd17 	ldw	r2,-12(fp)
    4c84:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
    4c88:	e0bffd17 	ldw	r2,-12(fp)
    4c8c:	e0ffff0b 	ldhu	r3,-4(fp)
    4c90:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
    4c94:	e0bffd17 	ldw	r2,-12(fp)
    4c98:	10c00c03 	ldbu	r3,48(r2)
    4c9c:	00bff7c4 	movi	r2,-33
    4ca0:	1884703a 	and	r2,r3,r2
    4ca4:	1007883a 	mov	r3,r2
    4ca8:	e0bffd17 	ldw	r2,-12(fp)
    4cac:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
    4cb0:	e0bffd17 	ldw	r2,-12(fp)
    4cb4:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
    4cb8:	e0bffd17 	ldw	r2,-12(fp)
    4cbc:	10800c03 	ldbu	r2,48(r2)
    4cc0:	10803fcc 	andi	r2,r2,255
    4cc4:	10001f1e 	bne	r2,zero,4d44 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
    4cc8:	e0bffd17 	ldw	r2,-12(fp)
    4ccc:	10c00d83 	ldbu	r3,54(r2)
    4cd0:	00800074 	movhi	r2,1
    4cd4:	1082d504 	addi	r2,r2,2900
    4cd8:	10800003 	ldbu	r2,0(r2)
    4cdc:	1884b03a 	or	r2,r3,r2
    4ce0:	1007883a 	mov	r3,r2
    4ce4:	00800074 	movhi	r2,1
    4ce8:	1082d504 	addi	r2,r2,2900
    4cec:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    4cf0:	e0bffd17 	ldw	r2,-12(fp)
    4cf4:	10800d03 	ldbu	r2,52(r2)
    4cf8:	10c03fcc 	andi	r3,r2,255
    4cfc:	e0bffd17 	ldw	r2,-12(fp)
    4d00:	10800d03 	ldbu	r2,52(r2)
    4d04:	11003fcc 	andi	r4,r2,255
    4d08:	00800074 	movhi	r2,1
    4d0c:	1082d544 	addi	r2,r2,2901
    4d10:	1105883a 	add	r2,r2,r4
    4d14:	11000003 	ldbu	r4,0(r2)
    4d18:	e0bffd17 	ldw	r2,-12(fp)
    4d1c:	10800d43 	ldbu	r2,53(r2)
    4d20:	2084b03a 	or	r2,r4,r2
    4d24:	1009883a 	mov	r4,r2
    4d28:	00800074 	movhi	r2,1
    4d2c:	1082d544 	addi	r2,r2,2901
    4d30:	10c5883a 	add	r2,r2,r3
    4d34:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
    4d38:	00800044 	movi	r2,1
    4d3c:	e0bffc05 	stb	r2,-16(fp)
    4d40:	00000106 	br	4d48 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
    4d44:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
    4d48:	e13ffe17 	ldw	r4,-8(fp)
    4d4c:	0004d680 	call	4d68 <OS_FlagUnlink>
    return (sched);
    4d50:	e0bffc03 	ldbu	r2,-16(fp)
}
    4d54:	e037883a 	mov	sp,fp
    4d58:	dfc00117 	ldw	ra,4(sp)
    4d5c:	df000017 	ldw	fp,0(sp)
    4d60:	dec00204 	addi	sp,sp,8
    4d64:	f800283a 	ret

00004d68 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
    4d68:	defffa04 	addi	sp,sp,-24
    4d6c:	df000515 	stw	fp,20(sp)
    4d70:	df000504 	addi	fp,sp,20
    4d74:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
    4d78:	e0bfff17 	ldw	r2,-4(fp)
    4d7c:	10800117 	ldw	r2,4(r2)
    4d80:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    4d84:	e0bfff17 	ldw	r2,-4(fp)
    4d88:	10800017 	ldw	r2,0(r2)
    4d8c:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
    4d90:	e0bffb17 	ldw	r2,-20(fp)
    4d94:	10000b1e 	bne	r2,zero,4dc4 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
    4d98:	e0bfff17 	ldw	r2,-4(fp)
    4d9c:	10800317 	ldw	r2,12(r2)
    4da0:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
    4da4:	e0bffd17 	ldw	r2,-12(fp)
    4da8:	e0fffc17 	ldw	r3,-16(fp)
    4dac:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
    4db0:	e0bffc17 	ldw	r2,-16(fp)
    4db4:	10000b26 	beq	r2,zero,4de4 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
    4db8:	e0bffc17 	ldw	r2,-16(fp)
    4dbc:	10000115 	stw	zero,4(r2)
    4dc0:	00000806 	br	4de4 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
    4dc4:	e0bffb17 	ldw	r2,-20(fp)
    4dc8:	e0fffc17 	ldw	r3,-16(fp)
    4dcc:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
    4dd0:	e0bffc17 	ldw	r2,-16(fp)
    4dd4:	10000326 	beq	r2,zero,4de4 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
    4dd8:	e0bffc17 	ldw	r2,-16(fp)
    4ddc:	e0fffb17 	ldw	r3,-20(fp)
    4de0:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
    4de4:	e0bfff17 	ldw	r2,-4(fp)
    4de8:	10800217 	ldw	r2,8(r2)
    4dec:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
    4df0:	e0bffe17 	ldw	r2,-8(fp)
    4df4:	10000a15 	stw	zero,40(r2)
#endif
}
    4df8:	e037883a 	mov	sp,fp
    4dfc:	df000017 	ldw	fp,0(sp)
    4e00:	dec00104 	addi	sp,sp,4
    4e04:	f800283a 	ret

00004e08 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
    4e08:	defff404 	addi	sp,sp,-48
    4e0c:	df000b15 	stw	fp,44(sp)
    4e10:	df000b04 	addi	fp,sp,44
    4e14:	e13ffc15 	stw	r4,-16(fp)
    4e18:	e17ffd15 	stw	r5,-12(fp)
    4e1c:	e1bffe15 	stw	r6,-8(fp)
    4e20:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    4e24:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    4e28:	e0bfff17 	ldw	r2,-4(fp)
    4e2c:	1000021e 	bne	r2,zero,4e38 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
    4e30:	0005883a 	mov	r2,zero
    4e34:	00006d06 	br	4fec <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
    4e38:	e0bffc17 	ldw	r2,-16(fp)
    4e3c:	1000051e 	bne	r2,zero,4e54 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    4e40:	e0bfff17 	ldw	r2,-4(fp)
    4e44:	00c01884 	movi	r3,98
    4e48:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    4e4c:	0005883a 	mov	r2,zero
    4e50:	00006606 	br	4fec <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
    4e54:	e0bffc17 	ldw	r2,-16(fp)
    4e58:	108000cc 	andi	r2,r2,3
    4e5c:	10000526 	beq	r2,zero,4e74 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    4e60:	e0bfff17 	ldw	r2,-4(fp)
    4e64:	00c01884 	movi	r3,98
    4e68:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    4e6c:	0005883a 	mov	r2,zero
    4e70:	00005e06 	br	4fec <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
    4e74:	e0bffd17 	ldw	r2,-12(fp)
    4e78:	108000a8 	cmpgeui	r2,r2,2
    4e7c:	1000051e 	bne	r2,zero,4e94 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
    4e80:	e0bfff17 	ldw	r2,-4(fp)
    4e84:	00c016c4 	movi	r3,91
    4e88:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    4e8c:	0005883a 	mov	r2,zero
    4e90:	00005606 	br	4fec <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
    4e94:	e0bffe17 	ldw	r2,-8(fp)
    4e98:	10800128 	cmpgeui	r2,r2,4
    4e9c:	1000051e 	bne	r2,zero,4eb4 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
    4ea0:	e0bfff17 	ldw	r2,-4(fp)
    4ea4:	00c01704 	movi	r3,92
    4ea8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    4eac:	0005883a 	mov	r2,zero
    4eb0:	00004e06 	br	4fec <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4eb4:	0005303a 	rdctl	r2,status
    4eb8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4ebc:	e0fffa17 	ldw	r3,-24(fp)
    4ec0:	00bfff84 	movi	r2,-2
    4ec4:	1884703a 	and	r2,r3,r2
    4ec8:	1001703a 	wrctl	status,r2
  
  return context;
    4ecc:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    4ed0:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
    4ed4:	00800074 	movhi	r2,1
    4ed8:	1082d204 	addi	r2,r2,2888
    4edc:	10800017 	ldw	r2,0(r2)
    4ee0:	e0bff915 	stw	r2,-28(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
    4ee4:	00800074 	movhi	r2,1
    4ee8:	1082d204 	addi	r2,r2,2888
    4eec:	10800017 	ldw	r2,0(r2)
    4ef0:	10000726 	beq	r2,zero,4f10 <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
    4ef4:	00800074 	movhi	r2,1
    4ef8:	1082d204 	addi	r2,r2,2888
    4efc:	10800017 	ldw	r2,0(r2)
    4f00:	10c00117 	ldw	r3,4(r2)
    4f04:	00800074 	movhi	r2,1
    4f08:	1082d204 	addi	r2,r2,2888
    4f0c:	10c00015 	stw	r3,0(r2)
    4f10:	e0bff817 	ldw	r2,-32(fp)
    4f14:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4f18:	e0bffb17 	ldw	r2,-20(fp)
    4f1c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
    4f20:	e0bff917 	ldw	r2,-28(fp)
    4f24:	1000051e 	bne	r2,zero,4f3c <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
    4f28:	e0bfff17 	ldw	r2,-4(fp)
    4f2c:	00c01684 	movi	r3,90
    4f30:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    4f34:	0005883a 	mov	r2,zero
    4f38:	00002c06 	br	4fec <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    4f3c:	e0bffc17 	ldw	r2,-16(fp)
    4f40:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
    4f44:	e0fffc17 	ldw	r3,-16(fp)
    4f48:	e0bffe17 	ldw	r2,-8(fp)
    4f4c:	1885883a 	add	r2,r3,r2
    4f50:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
    4f54:	e03ff715 	stw	zero,-36(fp)
    4f58:	00000c06 	br	4f8c <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
    4f5c:	e0bff617 	ldw	r2,-40(fp)
    4f60:	e0fff517 	ldw	r3,-44(fp)
    4f64:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
    4f68:	e0bff517 	ldw	r2,-44(fp)
    4f6c:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    4f70:	e0fff517 	ldw	r3,-44(fp)
    4f74:	e0bffe17 	ldw	r2,-8(fp)
    4f78:	1885883a 	add	r2,r3,r2
    4f7c:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
    4f80:	e0bff717 	ldw	r2,-36(fp)
    4f84:	10800044 	addi	r2,r2,1
    4f88:	e0bff715 	stw	r2,-36(fp)
    4f8c:	e0bffd17 	ldw	r2,-12(fp)
    4f90:	10bfffc4 	addi	r2,r2,-1
    4f94:	e0fff717 	ldw	r3,-36(fp)
    4f98:	18bff036 	bltu	r3,r2,4f5c <OSMemCreate+0x154>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
    4f9c:	e0bff617 	ldw	r2,-40(fp)
    4fa0:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
    4fa4:	e0bff917 	ldw	r2,-28(fp)
    4fa8:	e0fffc17 	ldw	r3,-16(fp)
    4fac:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
    4fb0:	e0bff917 	ldw	r2,-28(fp)
    4fb4:	e0fffc17 	ldw	r3,-16(fp)
    4fb8:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
    4fbc:	e0bff917 	ldw	r2,-28(fp)
    4fc0:	e0fffd17 	ldw	r3,-12(fp)
    4fc4:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
    4fc8:	e0bff917 	ldw	r2,-28(fp)
    4fcc:	e0fffd17 	ldw	r3,-12(fp)
    4fd0:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
    4fd4:	e0bff917 	ldw	r2,-28(fp)
    4fd8:	e0fffe17 	ldw	r3,-8(fp)
    4fdc:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
    4fe0:	e0bfff17 	ldw	r2,-4(fp)
    4fe4:	10000005 	stb	zero,0(r2)
    return (pmem);
    4fe8:	e0bff917 	ldw	r2,-28(fp)
}
    4fec:	e037883a 	mov	sp,fp
    4ff0:	df000017 	ldw	fp,0(sp)
    4ff4:	dec00104 	addi	sp,sp,4
    4ff8:	f800283a 	ret

00004ffc <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
    4ffc:	defff804 	addi	sp,sp,-32
    5000:	df000715 	stw	fp,28(sp)
    5004:	df000704 	addi	fp,sp,28
    5008:	e13ffe15 	stw	r4,-8(fp)
    500c:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    5010:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    5014:	e0bfff17 	ldw	r2,-4(fp)
    5018:	1000021e 	bne	r2,zero,5024 <OSMemGet+0x28>
        return ((void *)0);
    501c:	0005883a 	mov	r2,zero
    5020:	00002e06 	br	50dc <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
    5024:	e0bffe17 	ldw	r2,-8(fp)
    5028:	1000051e 	bne	r2,zero,5040 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    502c:	e0bfff17 	ldw	r2,-4(fp)
    5030:	00c01804 	movi	r3,96
    5034:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    5038:	0005883a 	mov	r2,zero
    503c:	00002706 	br	50dc <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5040:	0005303a 	rdctl	r2,status
    5044:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5048:	e0fffb17 	ldw	r3,-20(fp)
    504c:	00bfff84 	movi	r2,-2
    5050:	1884703a 	and	r2,r3,r2
    5054:	1001703a 	wrctl	status,r2
  
  return context;
    5058:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    505c:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
    5060:	e0bffe17 	ldw	r2,-8(fp)
    5064:	10800417 	ldw	r2,16(r2)
    5068:	10001426 	beq	r2,zero,50bc <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
    506c:	e0bffe17 	ldw	r2,-8(fp)
    5070:	10800117 	ldw	r2,4(r2)
    5074:	e0bffa15 	stw	r2,-24(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
    5078:	e0bffa17 	ldw	r2,-24(fp)
    507c:	10c00017 	ldw	r3,0(r2)
    5080:	e0bffe17 	ldw	r2,-8(fp)
    5084:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
    5088:	e0bffe17 	ldw	r2,-8(fp)
    508c:	10800417 	ldw	r2,16(r2)
    5090:	10ffffc4 	addi	r3,r2,-1
    5094:	e0bffe17 	ldw	r2,-8(fp)
    5098:	10c00415 	stw	r3,16(r2)
    509c:	e0bff917 	ldw	r2,-28(fp)
    50a0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    50a4:	e0bffc17 	ldw	r2,-16(fp)
    50a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
    50ac:	e0bfff17 	ldw	r2,-4(fp)
    50b0:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
    50b4:	e0bffa17 	ldw	r2,-24(fp)
    50b8:	00000806 	br	50dc <OSMemGet+0xe0>
    50bc:	e0bff917 	ldw	r2,-28(fp)
    50c0:	e0bffd15 	stw	r2,-12(fp)
    50c4:	e0bffd17 	ldw	r2,-12(fp)
    50c8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
    50cc:	e0bfff17 	ldw	r2,-4(fp)
    50d0:	00c01744 	movi	r3,93
    50d4:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
    50d8:	0005883a 	mov	r2,zero
}
    50dc:	e037883a 	mov	sp,fp
    50e0:	df000017 	ldw	fp,0(sp)
    50e4:	dec00104 	addi	sp,sp,4
    50e8:	f800283a 	ret

000050ec <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    50ec:	defff704 	addi	sp,sp,-36
    50f0:	dfc00815 	stw	ra,32(sp)
    50f4:	df000715 	stw	fp,28(sp)
    50f8:	df000704 	addi	fp,sp,28
    50fc:	e13ffd15 	stw	r4,-12(fp)
    5100:	e17ffe15 	stw	r5,-8(fp)
    5104:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    5108:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    510c:	e0bfff17 	ldw	r2,-4(fp)
    5110:	1000021e 	bne	r2,zero,511c <OSMemNameGet+0x30>
        return (0);
    5114:	0005883a 	mov	r2,zero
    5118:	00002d06 	br	51d0 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    511c:	e0bffd17 	ldw	r2,-12(fp)
    5120:	1000051e 	bne	r2,zero,5138 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    5124:	e0bfff17 	ldw	r2,-4(fp)
    5128:	00c01804 	movi	r3,96
    512c:	10c00005 	stb	r3,0(r2)
        return (0);
    5130:	0005883a 	mov	r2,zero
    5134:	00002606 	br	51d0 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    5138:	e0bffe17 	ldw	r2,-8(fp)
    513c:	1000051e 	bne	r2,zero,5154 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    5140:	e0bfff17 	ldw	r2,-4(fp)
    5144:	00c00304 	movi	r3,12
    5148:	10c00005 	stb	r3,0(r2)
        return (0);
    514c:	0005883a 	mov	r2,zero
    5150:	00001f06 	br	51d0 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    5154:	00800074 	movhi	r2,1
    5158:	1082d704 	addi	r2,r2,2908
    515c:	10800003 	ldbu	r2,0(r2)
    5160:	10803fcc 	andi	r2,r2,255
    5164:	10000526 	beq	r2,zero,517c <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
    5168:	e0bfff17 	ldw	r2,-4(fp)
    516c:	00c00444 	movi	r3,17
    5170:	10c00005 	stb	r3,0(r2)
        return (0);
    5174:	0005883a 	mov	r2,zero
    5178:	00001506 	br	51d0 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    517c:	0005303a 	rdctl	r2,status
    5180:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5184:	e0fffb17 	ldw	r3,-20(fp)
    5188:	00bfff84 	movi	r2,-2
    518c:	1884703a 	and	r2,r3,r2
    5190:	1001703a 	wrctl	status,r2
  
  return context;
    5194:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    5198:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
    519c:	e0bffd17 	ldw	r2,-12(fp)
    51a0:	10800504 	addi	r2,r2,20
    51a4:	e13ffe17 	ldw	r4,-8(fp)
    51a8:	100b883a 	mov	r5,r2
    51ac:	0002ec40 	call	2ec4 <OS_StrCopy>
    51b0:	e0bffa05 	stb	r2,-24(fp)
    51b4:	e0bff917 	ldw	r2,-28(fp)
    51b8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    51bc:	e0bffc17 	ldw	r2,-16(fp)
    51c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    51c4:	e0bfff17 	ldw	r2,-4(fp)
    51c8:	10000005 	stb	zero,0(r2)
    return (len);
    51cc:	e0bffa03 	ldbu	r2,-24(fp)
}
    51d0:	e037883a 	mov	sp,fp
    51d4:	dfc00117 	ldw	ra,4(sp)
    51d8:	df000017 	ldw	fp,0(sp)
    51dc:	dec00204 	addi	sp,sp,8
    51e0:	f800283a 	ret

000051e4 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    51e4:	defff604 	addi	sp,sp,-40
    51e8:	dfc00915 	stw	ra,36(sp)
    51ec:	df000815 	stw	fp,32(sp)
    51f0:	df000804 	addi	fp,sp,32
    51f4:	e13ffd15 	stw	r4,-12(fp)
    51f8:	e17ffe15 	stw	r5,-8(fp)
    51fc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    5200:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    5204:	e0bfff17 	ldw	r2,-4(fp)
    5208:	1000011e 	bne	r2,zero,5210 <OSMemNameSet+0x2c>
        return;
    520c:	00003606 	br	52e8 <OSMemNameSet+0x104>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    5210:	e0bffd17 	ldw	r2,-12(fp)
    5214:	1000041e 	bne	r2,zero,5228 <OSMemNameSet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    5218:	e0bfff17 	ldw	r2,-4(fp)
    521c:	00c01804 	movi	r3,96
    5220:	10c00005 	stb	r3,0(r2)
        return;
    5224:	00003006 	br	52e8 <OSMemNameSet+0x104>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    5228:	e0bffe17 	ldw	r2,-8(fp)
    522c:	1000041e 	bne	r2,zero,5240 <OSMemNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
    5230:	e0bfff17 	ldw	r2,-4(fp)
    5234:	00c00304 	movi	r3,12
    5238:	10c00005 	stb	r3,0(r2)
        return;
    523c:	00002a06 	br	52e8 <OSMemNameSet+0x104>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    5240:	00800074 	movhi	r2,1
    5244:	1082d704 	addi	r2,r2,2908
    5248:	10800003 	ldbu	r2,0(r2)
    524c:	10803fcc 	andi	r2,r2,255
    5250:	10000426 	beq	r2,zero,5264 <OSMemNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
    5254:	e0bfff17 	ldw	r2,-4(fp)
    5258:	00c00484 	movi	r3,18
    525c:	10c00005 	stb	r3,0(r2)
        return;
    5260:	00002106 	br	52e8 <OSMemNameSet+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5264:	0005303a 	rdctl	r2,status
    5268:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    526c:	e0fffa17 	ldw	r3,-24(fp)
    5270:	00bfff84 	movi	r2,-2
    5274:	1884703a 	and	r2,r3,r2
    5278:	1001703a 	wrctl	status,r2
  
  return context;
    527c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    5280:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    5284:	e13ffe17 	ldw	r4,-8(fp)
    5288:	0002f380 	call	2f38 <OS_StrLen>
    528c:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
    5290:	e0bff903 	ldbu	r2,-28(fp)
    5294:	10800830 	cmpltui	r2,r2,32
    5298:	1000081e 	bne	r2,zero,52bc <OSMemNameSet+0xd8>
    529c:	e0bff817 	ldw	r2,-32(fp)
    52a0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    52a4:	e0bffb17 	ldw	r2,-20(fp)
    52a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
    52ac:	e0bfff17 	ldw	r2,-4(fp)
    52b0:	00c018c4 	movi	r3,99
    52b4:	10c00005 	stb	r3,0(r2)
        return;
    52b8:	00000b06 	br	52e8 <OSMemNameSet+0x104>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    52bc:	e0bffd17 	ldw	r2,-12(fp)
    52c0:	10800504 	addi	r2,r2,20
    52c4:	1009883a 	mov	r4,r2
    52c8:	e17ffe17 	ldw	r5,-8(fp)
    52cc:	0002ec40 	call	2ec4 <OS_StrCopy>
    52d0:	e0bff817 	ldw	r2,-32(fp)
    52d4:	e0bffc15 	stw	r2,-16(fp)
    52d8:	e0bffc17 	ldw	r2,-16(fp)
    52dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    52e0:	e0bfff17 	ldw	r2,-4(fp)
    52e4:	10000005 	stb	zero,0(r2)
}
    52e8:	e037883a 	mov	sp,fp
    52ec:	dfc00117 	ldw	ra,4(sp)
    52f0:	df000017 	ldw	fp,0(sp)
    52f4:	dec00204 	addi	sp,sp,8
    52f8:	f800283a 	ret

000052fc <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
    52fc:	defff904 	addi	sp,sp,-28
    5300:	df000615 	stw	fp,24(sp)
    5304:	df000604 	addi	fp,sp,24
    5308:	e13ffe15 	stw	r4,-8(fp)
    530c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    5310:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    5314:	e0bffe17 	ldw	r2,-8(fp)
    5318:	1000021e 	bne	r2,zero,5324 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    531c:	00801804 	movi	r2,96
    5320:	00002806 	br	53c4 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
    5324:	e0bfff17 	ldw	r2,-4(fp)
    5328:	1000021e 	bne	r2,zero,5334 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
    532c:	008017c4 	movi	r2,95
    5330:	00002406 	br	53c4 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5334:	0005303a 	rdctl	r2,status
    5338:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    533c:	e0fffb17 	ldw	r3,-20(fp)
    5340:	00bfff84 	movi	r2,-2
    5344:	1884703a 	and	r2,r3,r2
    5348:	1001703a 	wrctl	status,r2
  
  return context;
    534c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    5350:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
    5354:	e0bffe17 	ldw	r2,-8(fp)
    5358:	10c00417 	ldw	r3,16(r2)
    535c:	e0bffe17 	ldw	r2,-8(fp)
    5360:	10800317 	ldw	r2,12(r2)
    5364:	18800636 	bltu	r3,r2,5380 <OSMemPut+0x84>
    5368:	e0bffa17 	ldw	r2,-24(fp)
    536c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5370:	e0bffc17 	ldw	r2,-16(fp)
    5374:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
    5378:	00801784 	movi	r2,94
    537c:	00001106 	br	53c4 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
    5380:	e0bffe17 	ldw	r2,-8(fp)
    5384:	10c00117 	ldw	r3,4(r2)
    5388:	e0bfff17 	ldw	r2,-4(fp)
    538c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
    5390:	e0bffe17 	ldw	r2,-8(fp)
    5394:	e0ffff17 	ldw	r3,-4(fp)
    5398:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
    539c:	e0bffe17 	ldw	r2,-8(fp)
    53a0:	10800417 	ldw	r2,16(r2)
    53a4:	10c00044 	addi	r3,r2,1
    53a8:	e0bffe17 	ldw	r2,-8(fp)
    53ac:	10c00415 	stw	r3,16(r2)
    53b0:	e0bffa17 	ldw	r2,-24(fp)
    53b4:	e0bffd15 	stw	r2,-12(fp)
    53b8:	e0bffd17 	ldw	r2,-12(fp)
    53bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
    53c0:	0005883a 	mov	r2,zero
}
    53c4:	e037883a 	mov	sp,fp
    53c8:	df000017 	ldw	fp,0(sp)
    53cc:	dec00104 	addi	sp,sp,4
    53d0:	f800283a 	ret

000053d4 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
    53d4:	defffa04 	addi	sp,sp,-24
    53d8:	df000515 	stw	fp,20(sp)
    53dc:	df000504 	addi	fp,sp,20
    53e0:	e13ffe15 	stw	r4,-8(fp)
    53e4:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    53e8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    53ec:	e0bffe17 	ldw	r2,-8(fp)
    53f0:	1000021e 	bne	r2,zero,53fc <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    53f4:	00801804 	movi	r2,96
    53f8:	00002c06 	br	54ac <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
    53fc:	e0bfff17 	ldw	r2,-4(fp)
    5400:	1000021e 	bne	r2,zero,540c <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
    5404:	00801844 	movi	r2,97
    5408:	00002806 	br	54ac <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    540c:	0005303a 	rdctl	r2,status
    5410:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5414:	e0fffc17 	ldw	r3,-16(fp)
    5418:	00bfff84 	movi	r2,-2
    541c:	1884703a 	and	r2,r3,r2
    5420:	1001703a 	wrctl	status,r2
  
  return context;
    5424:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    5428:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
    542c:	e0bffe17 	ldw	r2,-8(fp)
    5430:	10c00017 	ldw	r3,0(r2)
    5434:	e0bfff17 	ldw	r2,-4(fp)
    5438:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
    543c:	e0bffe17 	ldw	r2,-8(fp)
    5440:	10c00117 	ldw	r3,4(r2)
    5444:	e0bfff17 	ldw	r2,-4(fp)
    5448:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
    544c:	e0bffe17 	ldw	r2,-8(fp)
    5450:	10c00217 	ldw	r3,8(r2)
    5454:	e0bfff17 	ldw	r2,-4(fp)
    5458:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
    545c:	e0bffe17 	ldw	r2,-8(fp)
    5460:	10c00317 	ldw	r3,12(r2)
    5464:	e0bfff17 	ldw	r2,-4(fp)
    5468:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
    546c:	e0bffe17 	ldw	r2,-8(fp)
    5470:	10c00417 	ldw	r3,16(r2)
    5474:	e0bfff17 	ldw	r2,-4(fp)
    5478:	10c00415 	stw	r3,16(r2)
    547c:	e0bffb17 	ldw	r2,-20(fp)
    5480:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5484:	e0bffd17 	ldw	r2,-12(fp)
    5488:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
    548c:	e0bfff17 	ldw	r2,-4(fp)
    5490:	10c00317 	ldw	r3,12(r2)
    5494:	e0bfff17 	ldw	r2,-4(fp)
    5498:	10800417 	ldw	r2,16(r2)
    549c:	1887c83a 	sub	r3,r3,r2
    54a0:	e0bfff17 	ldw	r2,-4(fp)
    54a4:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
    54a8:	0005883a 	mov	r2,zero
}
    54ac:	e037883a 	mov	sp,fp
    54b0:	df000017 	ldw	fp,0(sp)
    54b4:	dec00104 	addi	sp,sp,4
    54b8:	f800283a 	ret

000054bc <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
    54bc:	defffc04 	addi	sp,sp,-16
    54c0:	dfc00315 	stw	ra,12(sp)
    54c4:	df000215 	stw	fp,8(sp)
    54c8:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    54cc:	01000074 	movhi	r4,1
    54d0:	2113bf04 	addi	r4,r4,20220
    54d4:	01430c04 	movi	r5,3120
    54d8:	0002cd40 	call	2cd4 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    54dc:	00800074 	movhi	r2,1
    54e0:	1093bf04 	addi	r2,r2,20220
    54e4:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    54e8:	e03fff0d 	sth	zero,-4(fp)
    54ec:	00001306 	br	553c <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
    54f0:	e0bfff0b 	ldhu	r2,-4(fp)
    54f4:	10800044 	addi	r2,r2,1
    54f8:	10c00d24 	muli	r3,r2,52
    54fc:	00800074 	movhi	r2,1
    5500:	1093bf04 	addi	r2,r2,20220
    5504:	1887883a 	add	r3,r3,r2
    5508:	e0bffe17 	ldw	r2,-8(fp)
    550c:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
    5510:	e0bffe17 	ldw	r2,-8(fp)
    5514:	00c00fc4 	movi	r3,63
    5518:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
    551c:	e0bffe17 	ldw	r2,-8(fp)
    5520:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
    5524:	e0bffe17 	ldw	r2,-8(fp)
    5528:	10800d04 	addi	r2,r2,52
    552c:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    5530:	e0bfff0b 	ldhu	r2,-4(fp)
    5534:	10800044 	addi	r2,r2,1
    5538:	e0bfff0d 	sth	r2,-4(fp)
    553c:	e0bfff0b 	ldhu	r2,-4(fp)
    5540:	10800ef0 	cmpltui	r2,r2,59
    5544:	103fea1e 	bne	r2,zero,54f0 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
    5548:	e0bffe17 	ldw	r2,-8(fp)
    554c:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
    5550:	e0bffe17 	ldw	r2,-8(fp)
    5554:	00c00fc4 	movi	r3,63
    5558:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
    555c:	e0bffe17 	ldw	r2,-8(fp)
    5560:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
    5564:	00800074 	movhi	r2,1
    5568:	1082d204 	addi	r2,r2,2888
    556c:	00c00074 	movhi	r3,1
    5570:	18d3bf04 	addi	r3,r3,20220
    5574:	10c00015 	stw	r3,0(r2)
#endif
}
    5578:	e037883a 	mov	sp,fp
    557c:	dfc00117 	ldw	ra,4(sp)
    5580:	df000017 	ldw	fp,0(sp)
    5584:	dec00204 	addi	sp,sp,8
    5588:	f800283a 	ret

0000558c <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
    558c:	defff804 	addi	sp,sp,-32
    5590:	df000715 	stw	fp,28(sp)
    5594:	df000704 	addi	fp,sp,28
    5598:	e13ffe15 	stw	r4,-8(fp)
    559c:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    55a0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    55a4:	e0bfff17 	ldw	r2,-4(fp)
    55a8:	1000021e 	bne	r2,zero,55b4 <OSQAccept+0x28>
        return ((void *)0);
    55ac:	0005883a 	mov	r2,zero
    55b0:	00004206 	br	56bc <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    55b4:	e0bffe17 	ldw	r2,-8(fp)
    55b8:	1000051e 	bne	r2,zero,55d0 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    55bc:	e0bfff17 	ldw	r2,-4(fp)
    55c0:	00c00104 	movi	r3,4
    55c4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    55c8:	0005883a 	mov	r2,zero
    55cc:	00003b06 	br	56bc <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    55d0:	e0bffe17 	ldw	r2,-8(fp)
    55d4:	10800003 	ldbu	r2,0(r2)
    55d8:	10803fcc 	andi	r2,r2,255
    55dc:	108000a0 	cmpeqi	r2,r2,2
    55e0:	1000051e 	bne	r2,zero,55f8 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    55e4:	e0bfff17 	ldw	r2,-4(fp)
    55e8:	00c00044 	movi	r3,1
    55ec:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    55f0:	0005883a 	mov	r2,zero
    55f4:	00003106 	br	56bc <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    55f8:	0005303a 	rdctl	r2,status
    55fc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5600:	e0fffc17 	ldw	r3,-16(fp)
    5604:	00bfff84 	movi	r2,-2
    5608:	1884703a 	and	r2,r3,r2
    560c:	1001703a 	wrctl	status,r2
  
  return context;
    5610:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    5614:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    5618:	e0bffe17 	ldw	r2,-8(fp)
    561c:	10800117 	ldw	r2,4(r2)
    5620:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    5624:	e0bffb17 	ldw	r2,-20(fp)
    5628:	1080058b 	ldhu	r2,22(r2)
    562c:	10bfffcc 	andi	r2,r2,65535
    5630:	10001926 	beq	r2,zero,5698 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    5634:	e0bffb17 	ldw	r2,-20(fp)
    5638:	10800417 	ldw	r2,16(r2)
    563c:	11000104 	addi	r4,r2,4
    5640:	e0fffb17 	ldw	r3,-20(fp)
    5644:	19000415 	stw	r4,16(r3)
    5648:	10800017 	ldw	r2,0(r2)
    564c:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    5650:	e0bffb17 	ldw	r2,-20(fp)
    5654:	1080058b 	ldhu	r2,22(r2)
    5658:	10bfffc4 	addi	r2,r2,-1
    565c:	1007883a 	mov	r3,r2
    5660:	e0bffb17 	ldw	r2,-20(fp)
    5664:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    5668:	e0bffb17 	ldw	r2,-20(fp)
    566c:	10c00417 	ldw	r3,16(r2)
    5670:	e0bffb17 	ldw	r2,-20(fp)
    5674:	10800217 	ldw	r2,8(r2)
    5678:	1880041e 	bne	r3,r2,568c <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
    567c:	e0bffb17 	ldw	r2,-20(fp)
    5680:	10c00117 	ldw	r3,4(r2)
    5684:	e0bffb17 	ldw	r2,-20(fp)
    5688:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
    568c:	e0bfff17 	ldw	r2,-4(fp)
    5690:	10000005 	stb	zero,0(r2)
    5694:	00000406 	br	56a8 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
    5698:	e0bfff17 	ldw	r2,-4(fp)
    569c:	00c007c4 	movi	r3,31
    56a0:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
    56a4:	e03ff915 	stw	zero,-28(fp)
    56a8:	e0bffa17 	ldw	r2,-24(fp)
    56ac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    56b0:	e0bffd17 	ldw	r2,-12(fp)
    56b4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
    56b8:	e0bff917 	ldw	r2,-28(fp)
}
    56bc:	e037883a 	mov	sp,fp
    56c0:	df000017 	ldw	fp,0(sp)
    56c4:	dec00104 	addi	sp,sp,4
    56c8:	f800283a 	ret

000056cc <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
    56cc:	defff404 	addi	sp,sp,-48
    56d0:	dfc00b15 	stw	ra,44(sp)
    56d4:	df000a15 	stw	fp,40(sp)
    56d8:	df000a04 	addi	fp,sp,40
    56dc:	e13ffe15 	stw	r4,-8(fp)
    56e0:	2805883a 	mov	r2,r5
    56e4:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    56e8:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    56ec:	00800074 	movhi	r2,1
    56f0:	1082d704 	addi	r2,r2,2908
    56f4:	10800003 	ldbu	r2,0(r2)
    56f8:	10803fcc 	andi	r2,r2,255
    56fc:	10000226 	beq	r2,zero,5708 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
    5700:	0005883a 	mov	r2,zero
    5704:	00006b06 	br	58b4 <OSQCreate+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5708:	0005303a 	rdctl	r2,status
    570c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5710:	e0fff917 	ldw	r3,-28(fp)
    5714:	00bfff84 	movi	r2,-2
    5718:	1884703a 	and	r2,r3,r2
    571c:	1001703a 	wrctl	status,r2
  
  return context;
    5720:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    5724:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
    5728:	00800074 	movhi	r2,1
    572c:	1082d604 	addi	r2,r2,2904
    5730:	10800017 	ldw	r2,0(r2)
    5734:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
    5738:	00800074 	movhi	r2,1
    573c:	1082d604 	addi	r2,r2,2904
    5740:	10800017 	ldw	r2,0(r2)
    5744:	10000726 	beq	r2,zero,5764 <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    5748:	00800074 	movhi	r2,1
    574c:	1082d604 	addi	r2,r2,2904
    5750:	10800017 	ldw	r2,0(r2)
    5754:	10c00117 	ldw	r3,4(r2)
    5758:	00800074 	movhi	r2,1
    575c:	1082d604 	addi	r2,r2,2904
    5760:	10c00015 	stw	r3,0(r2)
    5764:	e0bff717 	ldw	r2,-36(fp)
    5768:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    576c:	e0bffa17 	ldw	r2,-24(fp)
    5770:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
    5774:	e0bff617 	ldw	r2,-40(fp)
    5778:	10004d26 	beq	r2,zero,58b0 <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    577c:	0005303a 	rdctl	r2,status
    5780:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5784:	e0fffb17 	ldw	r3,-20(fp)
    5788:	00bfff84 	movi	r2,-2
    578c:	1884703a 	and	r2,r3,r2
    5790:	1001703a 	wrctl	status,r2
  
  return context;
    5794:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
    5798:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
    579c:	00800074 	movhi	r2,1
    57a0:	1082d404 	addi	r2,r2,2896
    57a4:	10800017 	ldw	r2,0(r2)
    57a8:	e0bff815 	stw	r2,-32(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
    57ac:	e0bff817 	ldw	r2,-32(fp)
    57b0:	10003126 	beq	r2,zero,5878 <OSQCreate+0x1ac>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
    57b4:	00800074 	movhi	r2,1
    57b8:	1082d404 	addi	r2,r2,2896
    57bc:	10800017 	ldw	r2,0(r2)
    57c0:	10c00017 	ldw	r3,0(r2)
    57c4:	00800074 	movhi	r2,1
    57c8:	1082d404 	addi	r2,r2,2896
    57cc:	10c00015 	stw	r3,0(r2)
    57d0:	e0bff717 	ldw	r2,-36(fp)
    57d4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    57d8:	e0bffc17 	ldw	r2,-16(fp)
    57dc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
    57e0:	e0bff817 	ldw	r2,-32(fp)
    57e4:	e0fffe17 	ldw	r3,-8(fp)
    57e8:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
    57ec:	e0bfff0b 	ldhu	r2,-4(fp)
    57f0:	1085883a 	add	r2,r2,r2
    57f4:	1085883a 	add	r2,r2,r2
    57f8:	1007883a 	mov	r3,r2
    57fc:	e0bffe17 	ldw	r2,-8(fp)
    5800:	10c7883a 	add	r3,r2,r3
    5804:	e0bff817 	ldw	r2,-32(fp)
    5808:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
    580c:	e0bff817 	ldw	r2,-32(fp)
    5810:	e0fffe17 	ldw	r3,-8(fp)
    5814:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
    5818:	e0bff817 	ldw	r2,-32(fp)
    581c:	e0fffe17 	ldw	r3,-8(fp)
    5820:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
    5824:	e0bff817 	ldw	r2,-32(fp)
    5828:	e0ffff0b 	ldhu	r3,-4(fp)
    582c:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
    5830:	e0bff817 	ldw	r2,-32(fp)
    5834:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
    5838:	e0bff617 	ldw	r2,-40(fp)
    583c:	00c00084 	movi	r3,2
    5840:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
    5844:	e0bff617 	ldw	r2,-40(fp)
    5848:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
    584c:	e0bff617 	ldw	r2,-40(fp)
    5850:	e0fff817 	ldw	r3,-32(fp)
    5854:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
    5858:	e0bff617 	ldw	r2,-40(fp)
    585c:	00c00fc4 	movi	r3,63
    5860:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
    5864:	e0bff617 	ldw	r2,-40(fp)
    5868:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
    586c:	e13ff617 	ldw	r4,-40(fp)
    5870:	00029100 	call	2910 <OS_EventWaitListInit>
    5874:	00000e06 	br	58b0 <OSQCreate+0x1e4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
    5878:	00800074 	movhi	r2,1
    587c:	1082d604 	addi	r2,r2,2904
    5880:	10c00017 	ldw	r3,0(r2)
    5884:	e0bff617 	ldw	r2,-40(fp)
    5888:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
    588c:	00800074 	movhi	r2,1
    5890:	1082d604 	addi	r2,r2,2904
    5894:	e0fff617 	ldw	r3,-40(fp)
    5898:	10c00015 	stw	r3,0(r2)
    589c:	e0bff717 	ldw	r2,-36(fp)
    58a0:	e0bffd15 	stw	r2,-12(fp)
    58a4:	e0bffd17 	ldw	r2,-12(fp)
    58a8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
    58ac:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
    58b0:	e0bff617 	ldw	r2,-40(fp)
}
    58b4:	e037883a 	mov	sp,fp
    58b8:	dfc00117 	ldw	ra,4(sp)
    58bc:	df000017 	ldw	fp,0(sp)
    58c0:	dec00204 	addi	sp,sp,8
    58c4:	f800283a 	ret

000058c8 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    58c8:	defff204 	addi	sp,sp,-56
    58cc:	dfc00d15 	stw	ra,52(sp)
    58d0:	df000c15 	stw	fp,48(sp)
    58d4:	df000c04 	addi	fp,sp,48
    58d8:	e13ffd15 	stw	r4,-12(fp)
    58dc:	2805883a 	mov	r2,r5
    58e0:	e1bfff15 	stw	r6,-4(fp)
    58e4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    58e8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    58ec:	e0bfff17 	ldw	r2,-4(fp)
    58f0:	1000021e 	bne	r2,zero,58fc <OSQDel+0x34>
        return (pevent);
    58f4:	e0bffd17 	ldw	r2,-12(fp)
    58f8:	0000a006 	br	5b7c <OSQDel+0x2b4>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    58fc:	e0bffd17 	ldw	r2,-12(fp)
    5900:	1000051e 	bne	r2,zero,5918 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    5904:	e0bfff17 	ldw	r2,-4(fp)
    5908:	00c00104 	movi	r3,4
    590c:	10c00005 	stb	r3,0(r2)
        return (pevent);
    5910:	e0bffd17 	ldw	r2,-12(fp)
    5914:	00009906 	br	5b7c <OSQDel+0x2b4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    5918:	e0bffd17 	ldw	r2,-12(fp)
    591c:	10800003 	ldbu	r2,0(r2)
    5920:	10803fcc 	andi	r2,r2,255
    5924:	108000a0 	cmpeqi	r2,r2,2
    5928:	1000051e 	bne	r2,zero,5940 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    592c:	e0bfff17 	ldw	r2,-4(fp)
    5930:	00c00044 	movi	r3,1
    5934:	10c00005 	stb	r3,0(r2)
        return (pevent);
    5938:	e0bffd17 	ldw	r2,-12(fp)
    593c:	00008f06 	br	5b7c <OSQDel+0x2b4>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    5940:	00800074 	movhi	r2,1
    5944:	1082d704 	addi	r2,r2,2908
    5948:	10800003 	ldbu	r2,0(r2)
    594c:	10803fcc 	andi	r2,r2,255
    5950:	10000526 	beq	r2,zero,5968 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    5954:	e0bfff17 	ldw	r2,-4(fp)
    5958:	00c003c4 	movi	r3,15
    595c:	10c00005 	stb	r3,0(r2)
        return (pevent);
    5960:	e0bffd17 	ldw	r2,-12(fp)
    5964:	00008506 	br	5b7c <OSQDel+0x2b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5968:	0005303a 	rdctl	r2,status
    596c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5970:	e0fff817 	ldw	r3,-32(fp)
    5974:	00bfff84 	movi	r2,-2
    5978:	1884703a 	and	r2,r3,r2
    597c:	1001703a 	wrctl	status,r2
  
  return context;
    5980:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    5984:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
    5988:	e0bffd17 	ldw	r2,-12(fp)
    598c:	10800283 	ldbu	r2,10(r2)
    5990:	10803fcc 	andi	r2,r2,255
    5994:	10000326 	beq	r2,zero,59a4 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    5998:	00800044 	movi	r2,1
    599c:	e0bff405 	stb	r2,-48(fp)
    59a0:	00000106 	br	59a8 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    59a4:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
    59a8:	e0bffe03 	ldbu	r2,-8(fp)
    59ac:	10000326 	beq	r2,zero,59bc <OSQDel+0xf4>
    59b0:	10800060 	cmpeqi	r2,r2,1
    59b4:	1000381e 	bne	r2,zero,5a98 <OSQDel+0x1d0>
    59b8:	00006506 	br	5b50 <OSQDel+0x288>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
    59bc:	e0bff403 	ldbu	r2,-48(fp)
    59c0:	1000261e 	bne	r2,zero,5a5c <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    59c4:	e0bffd17 	ldw	r2,-12(fp)
    59c8:	00c00fc4 	movi	r3,63
    59cc:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    59d0:	e0bffd17 	ldw	r2,-12(fp)
    59d4:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
    59d8:	e0bffd17 	ldw	r2,-12(fp)
    59dc:	10800117 	ldw	r2,4(r2)
    59e0:	e0bff715 	stw	r2,-36(fp)
                 pq->OSQPtr             = OSQFreeList;
    59e4:	00800074 	movhi	r2,1
    59e8:	1082d404 	addi	r2,r2,2896
    59ec:	10c00017 	ldw	r3,0(r2)
    59f0:	e0bff717 	ldw	r2,-36(fp)
    59f4:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
    59f8:	00800074 	movhi	r2,1
    59fc:	1082d404 	addi	r2,r2,2896
    5a00:	e0fff717 	ldw	r3,-36(fp)
    5a04:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    5a08:	e0bffd17 	ldw	r2,-12(fp)
    5a0c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    5a10:	00800074 	movhi	r2,1
    5a14:	1082d604 	addi	r2,r2,2904
    5a18:	10c00017 	ldw	r3,0(r2)
    5a1c:	e0bffd17 	ldw	r2,-12(fp)
    5a20:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    5a24:	e0bffd17 	ldw	r2,-12(fp)
    5a28:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    5a2c:	00800074 	movhi	r2,1
    5a30:	1082d604 	addi	r2,r2,2904
    5a34:	e0fffd17 	ldw	r3,-12(fp)
    5a38:	10c00015 	stw	r3,0(r2)
    5a3c:	e0bff617 	ldw	r2,-40(fp)
    5a40:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5a44:	e0bff917 	ldw	r2,-28(fp)
    5a48:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    5a4c:	e0bfff17 	ldw	r2,-4(fp)
    5a50:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
    5a54:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    5a58:	00004706 	br	5b78 <OSQDel+0x2b0>
    5a5c:	e0bff617 	ldw	r2,-40(fp)
    5a60:	e0bffa15 	stw	r2,-24(fp)
    5a64:	e0bffa17 	ldw	r2,-24(fp)
    5a68:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
    5a6c:	e0bfff17 	ldw	r2,-4(fp)
    5a70:	00c01244 	movi	r3,73
    5a74:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    5a78:	e0bffd17 	ldw	r2,-12(fp)
    5a7c:	e0bff515 	stw	r2,-44(fp)
             }
             break;
    5a80:	00003d06 	br	5b78 <OSQDel+0x2b0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
    5a84:	e13ffd17 	ldw	r4,-12(fp)
    5a88:	000b883a 	mov	r5,zero
    5a8c:	01800104 	movi	r6,4
    5a90:	000f883a 	mov	r7,zero
    5a94:	00023700 	call	2370 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
    5a98:	e0bffd17 	ldw	r2,-12(fp)
    5a9c:	10800283 	ldbu	r2,10(r2)
    5aa0:	10803fcc 	andi	r2,r2,255
    5aa4:	103ff71e 	bne	r2,zero,5a84 <OSQDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    5aa8:	e0bffd17 	ldw	r2,-12(fp)
    5aac:	00c00fc4 	movi	r3,63
    5ab0:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    5ab4:	e0bffd17 	ldw	r2,-12(fp)
    5ab8:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
    5abc:	e0bffd17 	ldw	r2,-12(fp)
    5ac0:	10800117 	ldw	r2,4(r2)
    5ac4:	e0bff715 	stw	r2,-36(fp)
             pq->OSQPtr             = OSQFreeList;
    5ac8:	00800074 	movhi	r2,1
    5acc:	1082d404 	addi	r2,r2,2896
    5ad0:	10c00017 	ldw	r3,0(r2)
    5ad4:	e0bff717 	ldw	r2,-36(fp)
    5ad8:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
    5adc:	00800074 	movhi	r2,1
    5ae0:	1082d404 	addi	r2,r2,2896
    5ae4:	e0fff717 	ldw	r3,-36(fp)
    5ae8:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    5aec:	e0bffd17 	ldw	r2,-12(fp)
    5af0:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    5af4:	00800074 	movhi	r2,1
    5af8:	1082d604 	addi	r2,r2,2904
    5afc:	10c00017 	ldw	r3,0(r2)
    5b00:	e0bffd17 	ldw	r2,-12(fp)
    5b04:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    5b08:	e0bffd17 	ldw	r2,-12(fp)
    5b0c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    5b10:	00800074 	movhi	r2,1
    5b14:	1082d604 	addi	r2,r2,2904
    5b18:	e0fffd17 	ldw	r3,-12(fp)
    5b1c:	10c00015 	stw	r3,0(r2)
    5b20:	e0bff617 	ldw	r2,-40(fp)
    5b24:	e0bffb15 	stw	r2,-20(fp)
    5b28:	e0bffb17 	ldw	r2,-20(fp)
    5b2c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    5b30:	e0bff403 	ldbu	r2,-48(fp)
    5b34:	10800058 	cmpnei	r2,r2,1
    5b38:	1000011e 	bne	r2,zero,5b40 <OSQDel+0x278>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    5b3c:	0002d880 	call	2d88 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    5b40:	e0bfff17 	ldw	r2,-4(fp)
    5b44:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
    5b48:	e03ff515 	stw	zero,-44(fp)
             break;
    5b4c:	00000a06 	br	5b78 <OSQDel+0x2b0>
    5b50:	e0bff617 	ldw	r2,-40(fp)
    5b54:	e0bffc15 	stw	r2,-16(fp)
    5b58:	e0bffc17 	ldw	r2,-16(fp)
    5b5c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    5b60:	e0bfff17 	ldw	r2,-4(fp)
    5b64:	00c001c4 	movi	r3,7
    5b68:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    5b6c:	e0bffd17 	ldw	r2,-12(fp)
    5b70:	e0bff515 	stw	r2,-44(fp)
             break;
    5b74:	0001883a 	nop
    }
    return (pevent_return);
    5b78:	e0bff517 	ldw	r2,-44(fp)
}
    5b7c:	e037883a 	mov	sp,fp
    5b80:	dfc00117 	ldw	ra,4(sp)
    5b84:	df000017 	ldw	fp,0(sp)
    5b88:	dec00204 	addi	sp,sp,8
    5b8c:	f800283a 	ret

00005b90 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
    5b90:	defffa04 	addi	sp,sp,-24
    5b94:	df000515 	stw	fp,20(sp)
    5b98:	df000504 	addi	fp,sp,20
    5b9c:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    5ba0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    5ba4:	e0bfff17 	ldw	r2,-4(fp)
    5ba8:	1000021e 	bne	r2,zero,5bb4 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
    5bac:	00800104 	movi	r2,4
    5bb0:	00002106 	br	5c38 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    5bb4:	e0bfff17 	ldw	r2,-4(fp)
    5bb8:	10800003 	ldbu	r2,0(r2)
    5bbc:	10803fcc 	andi	r2,r2,255
    5bc0:	108000a0 	cmpeqi	r2,r2,2
    5bc4:	1000021e 	bne	r2,zero,5bd0 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
    5bc8:	00800044 	movi	r2,1
    5bcc:	00001a06 	br	5c38 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5bd0:	0005303a 	rdctl	r2,status
    5bd4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5bd8:	e0fffd17 	ldw	r3,-12(fp)
    5bdc:	00bfff84 	movi	r2,-2
    5be0:	1884703a 	and	r2,r3,r2
    5be4:	1001703a 	wrctl	status,r2
  
  return context;
    5be8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    5bec:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
    5bf0:	e0bfff17 	ldw	r2,-4(fp)
    5bf4:	10800117 	ldw	r2,4(r2)
    5bf8:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
    5bfc:	e0bffc17 	ldw	r2,-16(fp)
    5c00:	10c00117 	ldw	r3,4(r2)
    5c04:	e0bffc17 	ldw	r2,-16(fp)
    5c08:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
    5c0c:	e0bffc17 	ldw	r2,-16(fp)
    5c10:	10c00117 	ldw	r3,4(r2)
    5c14:	e0bffc17 	ldw	r2,-16(fp)
    5c18:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
    5c1c:	e0bffc17 	ldw	r2,-16(fp)
    5c20:	1000058d 	sth	zero,22(r2)
    5c24:	e0bffb17 	ldw	r2,-20(fp)
    5c28:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5c2c:	e0bffe17 	ldw	r2,-8(fp)
    5c30:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    5c34:	0005883a 	mov	r2,zero
}
    5c38:	e037883a 	mov	sp,fp
    5c3c:	df000017 	ldw	fp,0(sp)
    5c40:	dec00104 	addi	sp,sp,4
    5c44:	f800283a 	ret

00005c48 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    5c48:	defff304 	addi	sp,sp,-52
    5c4c:	dfc00c15 	stw	ra,48(sp)
    5c50:	df000b15 	stw	fp,44(sp)
    5c54:	df000b04 	addi	fp,sp,44
    5c58:	e13ffd15 	stw	r4,-12(fp)
    5c5c:	2805883a 	mov	r2,r5
    5c60:	e1bfff15 	stw	r6,-4(fp)
    5c64:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    5c68:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    5c6c:	e0bfff17 	ldw	r2,-4(fp)
    5c70:	1000021e 	bne	r2,zero,5c7c <OSQPend+0x34>
        return ((void *)0);
    5c74:	0005883a 	mov	r2,zero
    5c78:	0000ad06 	br	5f30 <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    5c7c:	e0bffd17 	ldw	r2,-12(fp)
    5c80:	1000051e 	bne	r2,zero,5c98 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    5c84:	e0bfff17 	ldw	r2,-4(fp)
    5c88:	00c00104 	movi	r3,4
    5c8c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    5c90:	0005883a 	mov	r2,zero
    5c94:	0000a606 	br	5f30 <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    5c98:	e0bffd17 	ldw	r2,-12(fp)
    5c9c:	10800003 	ldbu	r2,0(r2)
    5ca0:	10803fcc 	andi	r2,r2,255
    5ca4:	108000a0 	cmpeqi	r2,r2,2
    5ca8:	1000051e 	bne	r2,zero,5cc0 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    5cac:	e0bfff17 	ldw	r2,-4(fp)
    5cb0:	00c00044 	movi	r3,1
    5cb4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    5cb8:	0005883a 	mov	r2,zero
    5cbc:	00009c06 	br	5f30 <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    5cc0:	00800074 	movhi	r2,1
    5cc4:	1082d704 	addi	r2,r2,2908
    5cc8:	10800003 	ldbu	r2,0(r2)
    5ccc:	10803fcc 	andi	r2,r2,255
    5cd0:	10000526 	beq	r2,zero,5ce8 <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
    5cd4:	e0bfff17 	ldw	r2,-4(fp)
    5cd8:	00c00084 	movi	r3,2
    5cdc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    5ce0:	0005883a 	mov	r2,zero
    5ce4:	00009206 	br	5f30 <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
    5ce8:	00800074 	movhi	r2,1
    5cec:	1082c904 	addi	r2,r2,2852
    5cf0:	10800003 	ldbu	r2,0(r2)
    5cf4:	10803fcc 	andi	r2,r2,255
    5cf8:	10000526 	beq	r2,zero,5d10 <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
    5cfc:	e0bfff17 	ldw	r2,-4(fp)
    5d00:	00c00344 	movi	r3,13
    5d04:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    5d08:	0005883a 	mov	r2,zero
    5d0c:	00008806 	br	5f30 <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5d10:	0005303a 	rdctl	r2,status
    5d14:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5d18:	e0fff817 	ldw	r3,-32(fp)
    5d1c:	00bfff84 	movi	r2,-2
    5d20:	1884703a 	and	r2,r3,r2
    5d24:	1001703a 	wrctl	status,r2
  
  return context;
    5d28:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    5d2c:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    5d30:	e0bffd17 	ldw	r2,-12(fp)
    5d34:	10800117 	ldw	r2,4(r2)
    5d38:	e0bff715 	stw	r2,-36(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    5d3c:	e0bff717 	ldw	r2,-36(fp)
    5d40:	1080058b 	ldhu	r2,22(r2)
    5d44:	10bfffcc 	andi	r2,r2,65535
    5d48:	10001e26 	beq	r2,zero,5dc4 <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    5d4c:	e0bff717 	ldw	r2,-36(fp)
    5d50:	10800417 	ldw	r2,16(r2)
    5d54:	11000104 	addi	r4,r2,4
    5d58:	e0fff717 	ldw	r3,-36(fp)
    5d5c:	19000415 	stw	r4,16(r3)
    5d60:	10800017 	ldw	r2,0(r2)
    5d64:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    5d68:	e0bff717 	ldw	r2,-36(fp)
    5d6c:	1080058b 	ldhu	r2,22(r2)
    5d70:	10bfffc4 	addi	r2,r2,-1
    5d74:	1007883a 	mov	r3,r2
    5d78:	e0bff717 	ldw	r2,-36(fp)
    5d7c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    5d80:	e0bff717 	ldw	r2,-36(fp)
    5d84:	10c00417 	ldw	r3,16(r2)
    5d88:	e0bff717 	ldw	r2,-36(fp)
    5d8c:	10800217 	ldw	r2,8(r2)
    5d90:	1880041e 	bne	r3,r2,5da4 <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
    5d94:	e0bff717 	ldw	r2,-36(fp)
    5d98:	10c00117 	ldw	r3,4(r2)
    5d9c:	e0bff717 	ldw	r2,-36(fp)
    5da0:	10c00415 	stw	r3,16(r2)
    5da4:	e0bff617 	ldw	r2,-40(fp)
    5da8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5dac:	e0bff917 	ldw	r2,-28(fp)
    5db0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    5db4:	e0bfff17 	ldw	r2,-4(fp)
    5db8:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
    5dbc:	e0bff517 	ldw	r2,-44(fp)
    5dc0:	00005b06 	br	5f30 <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
    5dc4:	00800074 	movhi	r2,1
    5dc8:	1082d804 	addi	r2,r2,2912
    5dcc:	10c00017 	ldw	r3,0(r2)
    5dd0:	00800074 	movhi	r2,1
    5dd4:	1082d804 	addi	r2,r2,2912
    5dd8:	10800017 	ldw	r2,0(r2)
    5ddc:	10800c03 	ldbu	r2,48(r2)
    5de0:	10800114 	ori	r2,r2,4
    5de4:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    5de8:	00800074 	movhi	r2,1
    5dec:	1082d804 	addi	r2,r2,2912
    5df0:	10800017 	ldw	r2,0(r2)
    5df4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
    5df8:	00800074 	movhi	r2,1
    5dfc:	1082d804 	addi	r2,r2,2912
    5e00:	10800017 	ldw	r2,0(r2)
    5e04:	e0fffe0b 	ldhu	r3,-8(fp)
    5e08:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
    5e0c:	e13ffd17 	ldw	r4,-12(fp)
    5e10:	00025080 	call	2508 <OS_EventTaskWait>
    5e14:	e0bff617 	ldw	r2,-40(fp)
    5e18:	e0bffa15 	stw	r2,-24(fp)
    5e1c:	e0bffa17 	ldw	r2,-24(fp)
    5e20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
    5e24:	0002d880 	call	2d88 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5e28:	0005303a 	rdctl	r2,status
    5e2c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5e30:	e0fffb17 	ldw	r3,-20(fp)
    5e34:	00bfff84 	movi	r2,-2
    5e38:	1884703a 	and	r2,r3,r2
    5e3c:	1001703a 	wrctl	status,r2
  
  return context;
    5e40:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
    5e44:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    5e48:	00800074 	movhi	r2,1
    5e4c:	1082d804 	addi	r2,r2,2912
    5e50:	10800017 	ldw	r2,0(r2)
    5e54:	10800c43 	ldbu	r2,49(r2)
    5e58:	10803fcc 	andi	r2,r2,255
    5e5c:	10000326 	beq	r2,zero,5e6c <OSQPend+0x224>
    5e60:	108000a0 	cmpeqi	r2,r2,2
    5e64:	1000091e 	bne	r2,zero,5e8c <OSQPend+0x244>
    5e68:	00000d06 	br	5ea0 <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
    5e6c:	00800074 	movhi	r2,1
    5e70:	1082d804 	addi	r2,r2,2912
    5e74:	10800017 	ldw	r2,0(r2)
    5e78:	10800917 	ldw	r2,36(r2)
    5e7c:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
    5e80:	e0bfff17 	ldw	r2,-4(fp)
    5e84:	10000005 	stb	zero,0(r2)
             break;
    5e88:	00001006 	br	5ecc <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
    5e8c:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    5e90:	e0bfff17 	ldw	r2,-4(fp)
    5e94:	00c00384 	movi	r3,14
    5e98:	10c00005 	stb	r3,0(r2)
             break;
    5e9c:	00000b06 	br	5ecc <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
    5ea0:	00800074 	movhi	r2,1
    5ea4:	1082d804 	addi	r2,r2,2912
    5ea8:	10800017 	ldw	r2,0(r2)
    5eac:	1009883a 	mov	r4,r2
    5eb0:	e17ffd17 	ldw	r5,-12(fp)
    5eb4:	00027600 	call	2760 <OS_EventTaskRemove>
             pmsg = (void *)0;
    5eb8:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    5ebc:	e0bfff17 	ldw	r2,-4(fp)
    5ec0:	00c00284 	movi	r3,10
    5ec4:	10c00005 	stb	r3,0(r2)
             break;
    5ec8:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    5ecc:	00800074 	movhi	r2,1
    5ed0:	1082d804 	addi	r2,r2,2912
    5ed4:	10800017 	ldw	r2,0(r2)
    5ed8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    5edc:	00800074 	movhi	r2,1
    5ee0:	1082d804 	addi	r2,r2,2912
    5ee4:	10800017 	ldw	r2,0(r2)
    5ee8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    5eec:	00800074 	movhi	r2,1
    5ef0:	1082d804 	addi	r2,r2,2912
    5ef4:	10800017 	ldw	r2,0(r2)
    5ef8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    5efc:	00800074 	movhi	r2,1
    5f00:	1082d804 	addi	r2,r2,2912
    5f04:	10800017 	ldw	r2,0(r2)
    5f08:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
    5f0c:	00800074 	movhi	r2,1
    5f10:	1082d804 	addi	r2,r2,2912
    5f14:	10800017 	ldw	r2,0(r2)
    5f18:	10000915 	stw	zero,36(r2)
    5f1c:	e0bff617 	ldw	r2,-40(fp)
    5f20:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5f24:	e0bffc17 	ldw	r2,-16(fp)
    5f28:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
    5f2c:	e0bff517 	ldw	r2,-44(fp)
}
    5f30:	e037883a 	mov	sp,fp
    5f34:	dfc00117 	ldw	ra,4(sp)
    5f38:	df000017 	ldw	fp,0(sp)
    5f3c:	dec00204 	addi	sp,sp,8
    5f40:	f800283a 	ret

00005f44 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    5f44:	defff604 	addi	sp,sp,-40
    5f48:	dfc00915 	stw	ra,36(sp)
    5f4c:	df000815 	stw	fp,32(sp)
    5f50:	df000804 	addi	fp,sp,32
    5f54:	e13ffd15 	stw	r4,-12(fp)
    5f58:	2805883a 	mov	r2,r5
    5f5c:	e1bfff15 	stw	r6,-4(fp)
    5f60:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    5f64:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    5f68:	e0bfff17 	ldw	r2,-4(fp)
    5f6c:	1000021e 	bne	r2,zero,5f78 <OSQPendAbort+0x34>
        return (0);
    5f70:	0005883a 	mov	r2,zero
    5f74:	00004906 	br	609c <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    5f78:	e0bffd17 	ldw	r2,-12(fp)
    5f7c:	1000051e 	bne	r2,zero,5f94 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    5f80:	e0bfff17 	ldw	r2,-4(fp)
    5f84:	00c00104 	movi	r3,4
    5f88:	10c00005 	stb	r3,0(r2)
        return (0);
    5f8c:	0005883a 	mov	r2,zero
    5f90:	00004206 	br	609c <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    5f94:	e0bffd17 	ldw	r2,-12(fp)
    5f98:	10800003 	ldbu	r2,0(r2)
    5f9c:	10803fcc 	andi	r2,r2,255
    5fa0:	108000a0 	cmpeqi	r2,r2,2
    5fa4:	1000051e 	bne	r2,zero,5fbc <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    5fa8:	e0bfff17 	ldw	r2,-4(fp)
    5fac:	00c00044 	movi	r3,1
    5fb0:	10c00005 	stb	r3,0(r2)
        return (0);
    5fb4:	0005883a 	mov	r2,zero
    5fb8:	00003806 	br	609c <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5fbc:	0005303a 	rdctl	r2,status
    5fc0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5fc4:	e0fffa17 	ldw	r3,-24(fp)
    5fc8:	00bfff84 	movi	r2,-2
    5fcc:	1884703a 	and	r2,r3,r2
    5fd0:	1001703a 	wrctl	status,r2
  
  return context;
    5fd4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    5fd8:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
    5fdc:	e0bffd17 	ldw	r2,-12(fp)
    5fe0:	10800283 	ldbu	r2,10(r2)
    5fe4:	10803fcc 	andi	r2,r2,255
    5fe8:	10002526 	beq	r2,zero,6080 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
    5fec:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
    5ff0:	e0bffe03 	ldbu	r2,-8(fp)
    5ff4:	10800060 	cmpeqi	r2,r2,1
    5ff8:	10000e26 	beq	r2,zero,6034 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    5ffc:	00000806 	br	6020 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    6000:	e13ffd17 	ldw	r4,-12(fp)
    6004:	000b883a 	mov	r5,zero
    6008:	01800104 	movi	r6,4
    600c:	01c00084 	movi	r7,2
    6010:	00023700 	call	2370 <OS_EventTaskRdy>
                     nbr_tasks++;
    6014:	e0bff803 	ldbu	r2,-32(fp)
    6018:	10800044 	addi	r2,r2,1
    601c:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    6020:	e0bffd17 	ldw	r2,-12(fp)
    6024:	10800283 	ldbu	r2,10(r2)
    6028:	10803fcc 	andi	r2,r2,255
    602c:	103ff41e 	bne	r2,zero,6000 <OSQPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    6030:	00000906 	br	6058 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    6034:	e13ffd17 	ldw	r4,-12(fp)
    6038:	000b883a 	mov	r5,zero
    603c:	01800104 	movi	r6,4
    6040:	01c00084 	movi	r7,2
    6044:	00023700 	call	2370 <OS_EventTaskRdy>
                 nbr_tasks++;
    6048:	e0bff803 	ldbu	r2,-32(fp)
    604c:	10800044 	addi	r2,r2,1
    6050:	e0bff805 	stb	r2,-32(fp)
                 break;
    6054:	0001883a 	nop
    6058:	e0bff917 	ldw	r2,-28(fp)
    605c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6060:	e0bffb17 	ldw	r2,-20(fp)
    6064:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
    6068:	0002d880 	call	2d88 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    606c:	e0bfff17 	ldw	r2,-4(fp)
    6070:	00c00384 	movi	r3,14
    6074:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    6078:	e0bff803 	ldbu	r2,-32(fp)
    607c:	00000706 	br	609c <OSQPendAbort+0x158>
    6080:	e0bff917 	ldw	r2,-28(fp)
    6084:	e0bffc15 	stw	r2,-16(fp)
    6088:	e0bffc17 	ldw	r2,-16(fp)
    608c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    6090:	e0bfff17 	ldw	r2,-4(fp)
    6094:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
    6098:	0005883a 	mov	r2,zero
}
    609c:	e037883a 	mov	sp,fp
    60a0:	dfc00117 	ldw	ra,4(sp)
    60a4:	df000017 	ldw	fp,0(sp)
    60a8:	dec00204 	addi	sp,sp,8
    60ac:	f800283a 	ret

000060b0 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
    60b0:	defff604 	addi	sp,sp,-40
    60b4:	dfc00915 	stw	ra,36(sp)
    60b8:	df000815 	stw	fp,32(sp)
    60bc:	df000804 	addi	fp,sp,32
    60c0:	e13ffe15 	stw	r4,-8(fp)
    60c4:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    60c8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    60cc:	e0bffe17 	ldw	r2,-8(fp)
    60d0:	1000021e 	bne	r2,zero,60dc <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
    60d4:	00800104 	movi	r2,4
    60d8:	00004a06 	br	6204 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    60dc:	e0bffe17 	ldw	r2,-8(fp)
    60e0:	10800003 	ldbu	r2,0(r2)
    60e4:	10803fcc 	andi	r2,r2,255
    60e8:	108000a0 	cmpeqi	r2,r2,2
    60ec:	1000021e 	bne	r2,zero,60f8 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
    60f0:	00800044 	movi	r2,1
    60f4:	00004306 	br	6204 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    60f8:	0005303a 	rdctl	r2,status
    60fc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6100:	e0fffa17 	ldw	r3,-24(fp)
    6104:	00bfff84 	movi	r2,-2
    6108:	1884703a 	and	r2,r3,r2
    610c:	1001703a 	wrctl	status,r2
  
  return context;
    6110:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    6114:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
    6118:	e0bffe17 	ldw	r2,-8(fp)
    611c:	10800283 	ldbu	r2,10(r2)
    6120:	10803fcc 	andi	r2,r2,255
    6124:	10000c26 	beq	r2,zero,6158 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    6128:	e13ffe17 	ldw	r4,-8(fp)
    612c:	e17fff17 	ldw	r5,-4(fp)
    6130:	01800104 	movi	r6,4
    6134:	000f883a 	mov	r7,zero
    6138:	00023700 	call	2370 <OS_EventTaskRdy>
    613c:	e0bff817 	ldw	r2,-32(fp)
    6140:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6144:	e0bffb17 	ldw	r2,-20(fp)
    6148:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
    614c:	0002d880 	call	2d88 <OS_Sched>
        return (OS_ERR_NONE);
    6150:	0005883a 	mov	r2,zero
    6154:	00002b06 	br	6204 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
    6158:	e0bffe17 	ldw	r2,-8(fp)
    615c:	10800117 	ldw	r2,4(r2)
    6160:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
    6164:	e0bff917 	ldw	r2,-28(fp)
    6168:	10c0058b 	ldhu	r3,22(r2)
    616c:	e0bff917 	ldw	r2,-28(fp)
    6170:	1080050b 	ldhu	r2,20(r2)
    6174:	18ffffcc 	andi	r3,r3,65535
    6178:	10bfffcc 	andi	r2,r2,65535
    617c:	18800636 	bltu	r3,r2,6198 <OSQPost+0xe8>
    6180:	e0bff817 	ldw	r2,-32(fp)
    6184:	e0bffc15 	stw	r2,-16(fp)
    6188:	e0bffc17 	ldw	r2,-16(fp)
    618c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    6190:	00800784 	movi	r2,30
    6194:	00001b06 	br	6204 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
    6198:	e0bff917 	ldw	r2,-28(fp)
    619c:	10800317 	ldw	r2,12(r2)
    61a0:	11000104 	addi	r4,r2,4
    61a4:	e0fff917 	ldw	r3,-28(fp)
    61a8:	19000315 	stw	r4,12(r3)
    61ac:	e0ffff17 	ldw	r3,-4(fp)
    61b0:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
    61b4:	e0bff917 	ldw	r2,-28(fp)
    61b8:	1080058b 	ldhu	r2,22(r2)
    61bc:	10800044 	addi	r2,r2,1
    61c0:	1007883a 	mov	r3,r2
    61c4:	e0bff917 	ldw	r2,-28(fp)
    61c8:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
    61cc:	e0bff917 	ldw	r2,-28(fp)
    61d0:	10c00317 	ldw	r3,12(r2)
    61d4:	e0bff917 	ldw	r2,-28(fp)
    61d8:	10800217 	ldw	r2,8(r2)
    61dc:	1880041e 	bne	r3,r2,61f0 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
    61e0:	e0bff917 	ldw	r2,-28(fp)
    61e4:	10c00117 	ldw	r3,4(r2)
    61e8:	e0bff917 	ldw	r2,-28(fp)
    61ec:	10c00315 	stw	r3,12(r2)
    61f0:	e0bff817 	ldw	r2,-32(fp)
    61f4:	e0bffd15 	stw	r2,-12(fp)
    61f8:	e0bffd17 	ldw	r2,-12(fp)
    61fc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    6200:	0005883a 	mov	r2,zero
}
    6204:	e037883a 	mov	sp,fp
    6208:	dfc00117 	ldw	ra,4(sp)
    620c:	df000017 	ldw	fp,0(sp)
    6210:	dec00204 	addi	sp,sp,8
    6214:	f800283a 	ret

00006218 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
    6218:	defff604 	addi	sp,sp,-40
    621c:	dfc00915 	stw	ra,36(sp)
    6220:	df000815 	stw	fp,32(sp)
    6224:	df000804 	addi	fp,sp,32
    6228:	e13ffe15 	stw	r4,-8(fp)
    622c:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    6230:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    6234:	e0bffe17 	ldw	r2,-8(fp)
    6238:	1000021e 	bne	r2,zero,6244 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
    623c:	00800104 	movi	r2,4
    6240:	00004c06 	br	6374 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    6244:	e0bffe17 	ldw	r2,-8(fp)
    6248:	10800003 	ldbu	r2,0(r2)
    624c:	10803fcc 	andi	r2,r2,255
    6250:	108000a0 	cmpeqi	r2,r2,2
    6254:	1000021e 	bne	r2,zero,6260 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
    6258:	00800044 	movi	r2,1
    625c:	00004506 	br	6374 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6260:	0005303a 	rdctl	r2,status
    6264:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6268:	e0fffa17 	ldw	r3,-24(fp)
    626c:	00bfff84 	movi	r2,-2
    6270:	1884703a 	and	r2,r3,r2
    6274:	1001703a 	wrctl	status,r2
  
  return context;
    6278:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    627c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
    6280:	e0bffe17 	ldw	r2,-8(fp)
    6284:	10800283 	ldbu	r2,10(r2)
    6288:	10803fcc 	andi	r2,r2,255
    628c:	10000c26 	beq	r2,zero,62c0 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    6290:	e13ffe17 	ldw	r4,-8(fp)
    6294:	e17fff17 	ldw	r5,-4(fp)
    6298:	01800104 	movi	r6,4
    629c:	000f883a 	mov	r7,zero
    62a0:	00023700 	call	2370 <OS_EventTaskRdy>
    62a4:	e0bff817 	ldw	r2,-32(fp)
    62a8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    62ac:	e0bffb17 	ldw	r2,-20(fp)
    62b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
    62b4:	0002d880 	call	2d88 <OS_Sched>
        return (OS_ERR_NONE);
    62b8:	0005883a 	mov	r2,zero
    62bc:	00002d06 	br	6374 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    62c0:	e0bffe17 	ldw	r2,-8(fp)
    62c4:	10800117 	ldw	r2,4(r2)
    62c8:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    62cc:	e0bff917 	ldw	r2,-28(fp)
    62d0:	10c0058b 	ldhu	r3,22(r2)
    62d4:	e0bff917 	ldw	r2,-28(fp)
    62d8:	1080050b 	ldhu	r2,20(r2)
    62dc:	18ffffcc 	andi	r3,r3,65535
    62e0:	10bfffcc 	andi	r2,r2,65535
    62e4:	18800636 	bltu	r3,r2,6300 <OSQPostFront+0xe8>
    62e8:	e0bff817 	ldw	r2,-32(fp)
    62ec:	e0bffc15 	stw	r2,-16(fp)
    62f0:	e0bffc17 	ldw	r2,-16(fp)
    62f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    62f8:	00800784 	movi	r2,30
    62fc:	00001d06 	br	6374 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
    6300:	e0bff917 	ldw	r2,-28(fp)
    6304:	10c00417 	ldw	r3,16(r2)
    6308:	e0bff917 	ldw	r2,-28(fp)
    630c:	10800117 	ldw	r2,4(r2)
    6310:	1880041e 	bne	r3,r2,6324 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
    6314:	e0bff917 	ldw	r2,-28(fp)
    6318:	10c00217 	ldw	r3,8(r2)
    631c:	e0bff917 	ldw	r2,-28(fp)
    6320:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
    6324:	e0bff917 	ldw	r2,-28(fp)
    6328:	10800417 	ldw	r2,16(r2)
    632c:	10ffff04 	addi	r3,r2,-4
    6330:	e0bff917 	ldw	r2,-28(fp)
    6334:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
    6338:	e0bff917 	ldw	r2,-28(fp)
    633c:	10800417 	ldw	r2,16(r2)
    6340:	e0ffff17 	ldw	r3,-4(fp)
    6344:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    6348:	e0bff917 	ldw	r2,-28(fp)
    634c:	1080058b 	ldhu	r2,22(r2)
    6350:	10800044 	addi	r2,r2,1
    6354:	1007883a 	mov	r3,r2
    6358:	e0bff917 	ldw	r2,-28(fp)
    635c:	10c0058d 	sth	r3,22(r2)
    6360:	e0bff817 	ldw	r2,-32(fp)
    6364:	e0bffd15 	stw	r2,-12(fp)
    6368:	e0bffd17 	ldw	r2,-12(fp)
    636c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    6370:	0005883a 	mov	r2,zero
}
    6374:	e037883a 	mov	sp,fp
    6378:	dfc00117 	ldw	ra,4(sp)
    637c:	df000017 	ldw	fp,0(sp)
    6380:	dec00204 	addi	sp,sp,8
    6384:	f800283a 	ret

00006388 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
    6388:	defff504 	addi	sp,sp,-44
    638c:	dfc00a15 	stw	ra,40(sp)
    6390:	df000915 	stw	fp,36(sp)
    6394:	df000904 	addi	fp,sp,36
    6398:	e13ffd15 	stw	r4,-12(fp)
    639c:	e17ffe15 	stw	r5,-8(fp)
    63a0:	3005883a 	mov	r2,r6
    63a4:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    63a8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    63ac:	e0bffd17 	ldw	r2,-12(fp)
    63b0:	1000021e 	bne	r2,zero,63bc <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
    63b4:	00800104 	movi	r2,4
    63b8:	00007106 	br	6580 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    63bc:	e0bffd17 	ldw	r2,-12(fp)
    63c0:	10800003 	ldbu	r2,0(r2)
    63c4:	10803fcc 	andi	r2,r2,255
    63c8:	108000a0 	cmpeqi	r2,r2,2
    63cc:	1000021e 	bne	r2,zero,63d8 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
    63d0:	00800044 	movi	r2,1
    63d4:	00006a06 	br	6580 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    63d8:	0005303a 	rdctl	r2,status
    63dc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    63e0:	e0fff917 	ldw	r3,-28(fp)
    63e4:	00bfff84 	movi	r2,-2
    63e8:	1884703a 	and	r2,r3,r2
    63ec:	1001703a 	wrctl	status,r2
  
  return context;
    63f0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    63f4:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
    63f8:	e0bffd17 	ldw	r2,-12(fp)
    63fc:	10800283 	ldbu	r2,10(r2)
    6400:	10803fcc 	andi	r2,r2,255
    6404:	10001d26 	beq	r2,zero,647c <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
    6408:	e0bfff03 	ldbu	r2,-4(fp)
    640c:	1080004c 	andi	r2,r2,1
    6410:	10000b26 	beq	r2,zero,6440 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    6414:	00000506 	br	642c <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    6418:	e13ffd17 	ldw	r4,-12(fp)
    641c:	e17ffe17 	ldw	r5,-8(fp)
    6420:	01800104 	movi	r6,4
    6424:	000f883a 	mov	r7,zero
    6428:	00023700 	call	2370 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    642c:	e0bffd17 	ldw	r2,-12(fp)
    6430:	10800283 	ldbu	r2,10(r2)
    6434:	10803fcc 	andi	r2,r2,255
    6438:	103ff71e 	bne	r2,zero,6418 <OSQPostOpt+0x90>
    643c:	00000506 	br	6454 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    6440:	e13ffd17 	ldw	r4,-12(fp)
    6444:	e17ffe17 	ldw	r5,-8(fp)
    6448:	01800104 	movi	r6,4
    644c:	000f883a 	mov	r7,zero
    6450:	00023700 	call	2370 <OS_EventTaskRdy>
    6454:	e0bff717 	ldw	r2,-36(fp)
    6458:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    645c:	e0bffa17 	ldw	r2,-24(fp)
    6460:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
    6464:	e0bfff03 	ldbu	r2,-4(fp)
    6468:	1080010c 	andi	r2,r2,4
    646c:	1000011e 	bne	r2,zero,6474 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
    6470:	0002d880 	call	2d88 <OS_Sched>
        }
        return (OS_ERR_NONE);
    6474:	0005883a 	mov	r2,zero
    6478:	00004106 	br	6580 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    647c:	e0bffd17 	ldw	r2,-12(fp)
    6480:	10800117 	ldw	r2,4(r2)
    6484:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    6488:	e0bff817 	ldw	r2,-32(fp)
    648c:	10c0058b 	ldhu	r3,22(r2)
    6490:	e0bff817 	ldw	r2,-32(fp)
    6494:	1080050b 	ldhu	r2,20(r2)
    6498:	18ffffcc 	andi	r3,r3,65535
    649c:	10bfffcc 	andi	r2,r2,65535
    64a0:	18800636 	bltu	r3,r2,64bc <OSQPostOpt+0x134>
    64a4:	e0bff717 	ldw	r2,-36(fp)
    64a8:	e0bffb15 	stw	r2,-20(fp)
    64ac:	e0bffb17 	ldw	r2,-20(fp)
    64b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    64b4:	00800784 	movi	r2,30
    64b8:	00003106 	br	6580 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
    64bc:	e0bfff03 	ldbu	r2,-4(fp)
    64c0:	1080008c 	andi	r2,r2,2
    64c4:	10001326 	beq	r2,zero,6514 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
    64c8:	e0bff817 	ldw	r2,-32(fp)
    64cc:	10c00417 	ldw	r3,16(r2)
    64d0:	e0bff817 	ldw	r2,-32(fp)
    64d4:	10800117 	ldw	r2,4(r2)
    64d8:	1880041e 	bne	r3,r2,64ec <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
    64dc:	e0bff817 	ldw	r2,-32(fp)
    64e0:	10c00217 	ldw	r3,8(r2)
    64e4:	e0bff817 	ldw	r2,-32(fp)
    64e8:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
    64ec:	e0bff817 	ldw	r2,-32(fp)
    64f0:	10800417 	ldw	r2,16(r2)
    64f4:	10ffff04 	addi	r3,r2,-4
    64f8:	e0bff817 	ldw	r2,-32(fp)
    64fc:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
    6500:	e0bff817 	ldw	r2,-32(fp)
    6504:	10800417 	ldw	r2,16(r2)
    6508:	e0fffe17 	ldw	r3,-8(fp)
    650c:	10c00015 	stw	r3,0(r2)
    6510:	00001006 	br	6554 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
    6514:	e0bff817 	ldw	r2,-32(fp)
    6518:	10800317 	ldw	r2,12(r2)
    651c:	11000104 	addi	r4,r2,4
    6520:	e0fff817 	ldw	r3,-32(fp)
    6524:	19000315 	stw	r4,12(r3)
    6528:	e0fffe17 	ldw	r3,-8(fp)
    652c:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
    6530:	e0bff817 	ldw	r2,-32(fp)
    6534:	10c00317 	ldw	r3,12(r2)
    6538:	e0bff817 	ldw	r2,-32(fp)
    653c:	10800217 	ldw	r2,8(r2)
    6540:	1880041e 	bne	r3,r2,6554 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
    6544:	e0bff817 	ldw	r2,-32(fp)
    6548:	10c00117 	ldw	r3,4(r2)
    654c:	e0bff817 	ldw	r2,-32(fp)
    6550:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    6554:	e0bff817 	ldw	r2,-32(fp)
    6558:	1080058b 	ldhu	r2,22(r2)
    655c:	10800044 	addi	r2,r2,1
    6560:	1007883a 	mov	r3,r2
    6564:	e0bff817 	ldw	r2,-32(fp)
    6568:	10c0058d 	sth	r3,22(r2)
    656c:	e0bff717 	ldw	r2,-36(fp)
    6570:	e0bffc15 	stw	r2,-16(fp)
    6574:	e0bffc17 	ldw	r2,-16(fp)
    6578:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    657c:	0005883a 	mov	r2,zero
}
    6580:	e037883a 	mov	sp,fp
    6584:	dfc00117 	ldw	ra,4(sp)
    6588:	df000017 	ldw	fp,0(sp)
    658c:	dec00204 	addi	sp,sp,8
    6590:	f800283a 	ret

00006594 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
    6594:	defff604 	addi	sp,sp,-40
    6598:	df000915 	stw	fp,36(sp)
    659c:	df000904 	addi	fp,sp,36
    65a0:	e13ffe15 	stw	r4,-8(fp)
    65a4:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    65a8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    65ac:	e0bffe17 	ldw	r2,-8(fp)
    65b0:	1000021e 	bne	r2,zero,65bc <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    65b4:	00800104 	movi	r2,4
    65b8:	00004906 	br	66e0 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
    65bc:	e0bfff17 	ldw	r2,-4(fp)
    65c0:	1000021e 	bne	r2,zero,65cc <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    65c4:	00800244 	movi	r2,9
    65c8:	00004506 	br	66e0 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    65cc:	e0bffe17 	ldw	r2,-8(fp)
    65d0:	10800003 	ldbu	r2,0(r2)
    65d4:	10803fcc 	andi	r2,r2,255
    65d8:	108000a0 	cmpeqi	r2,r2,2
    65dc:	1000021e 	bne	r2,zero,65e8 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    65e0:	00800044 	movi	r2,1
    65e4:	00003e06 	br	66e0 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    65e8:	0005303a 	rdctl	r2,status
    65ec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    65f0:	e0fffc17 	ldw	r3,-16(fp)
    65f4:	00bfff84 	movi	r2,-2
    65f8:	1884703a 	and	r2,r3,r2
    65fc:	1001703a 	wrctl	status,r2
  
  return context;
    6600:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    6604:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    6608:	e0bffe17 	ldw	r2,-8(fp)
    660c:	10c00283 	ldbu	r3,10(r2)
    6610:	e0bfff17 	ldw	r2,-4(fp)
    6614:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
    6618:	e0bffe17 	ldw	r2,-8(fp)
    661c:	108002c4 	addi	r2,r2,11
    6620:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
    6624:	e0bfff17 	ldw	r2,-4(fp)
    6628:	10800204 	addi	r2,r2,8
    662c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    6630:	e03ff705 	stb	zero,-36(fp)
    6634:	00000b06 	br	6664 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
    6638:	e0bff917 	ldw	r2,-28(fp)
    663c:	10c00044 	addi	r3,r2,1
    6640:	e0fff915 	stw	r3,-28(fp)
    6644:	e0fff817 	ldw	r3,-32(fp)
    6648:	19000044 	addi	r4,r3,1
    664c:	e13ff815 	stw	r4,-32(fp)
    6650:	18c00003 	ldbu	r3,0(r3)
    6654:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    6658:	e0bff703 	ldbu	r2,-36(fp)
    665c:	10800044 	addi	r2,r2,1
    6660:	e0bff705 	stb	r2,-36(fp)
    6664:	e0bff703 	ldbu	r2,-36(fp)
    6668:	108000f0 	cmpltui	r2,r2,3
    666c:	103ff21e 	bne	r2,zero,6638 <OSQQuery+0xa4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
    6670:	e0bffe17 	ldw	r2,-8(fp)
    6674:	10800117 	ldw	r2,4(r2)
    6678:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
    667c:	e0bffb17 	ldw	r2,-20(fp)
    6680:	1080058b 	ldhu	r2,22(r2)
    6684:	10bfffcc 	andi	r2,r2,65535
    6688:	10000626 	beq	r2,zero,66a4 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
    668c:	e0bffb17 	ldw	r2,-20(fp)
    6690:	10800417 	ldw	r2,16(r2)
    6694:	10c00017 	ldw	r3,0(r2)
    6698:	e0bfff17 	ldw	r2,-4(fp)
    669c:	10c00015 	stw	r3,0(r2)
    66a0:	00000206 	br	66ac <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
    66a4:	e0bfff17 	ldw	r2,-4(fp)
    66a8:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
    66ac:	e0bffb17 	ldw	r2,-20(fp)
    66b0:	10c0058b 	ldhu	r3,22(r2)
    66b4:	e0bfff17 	ldw	r2,-4(fp)
    66b8:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
    66bc:	e0bffb17 	ldw	r2,-20(fp)
    66c0:	10c0050b 	ldhu	r3,20(r2)
    66c4:	e0bfff17 	ldw	r2,-4(fp)
    66c8:	10c0018d 	sth	r3,6(r2)
    66cc:	e0bffa17 	ldw	r2,-24(fp)
    66d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    66d4:	e0bffd17 	ldw	r2,-12(fp)
    66d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    66dc:	0005883a 	mov	r2,zero
}
    66e0:	e037883a 	mov	sp,fp
    66e4:	df000017 	ldw	fp,0(sp)
    66e8:	dec00104 	addi	sp,sp,4
    66ec:	f800283a 	ret

000066f0 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
    66f0:	defffb04 	addi	sp,sp,-20
    66f4:	dfc00415 	stw	ra,16(sp)
    66f8:	df000315 	stw	fp,12(sp)
    66fc:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    6700:	01000074 	movhi	r4,1
    6704:	2118cb04 	addi	r4,r4,25388
    6708:	01407804 	movi	r5,480
    670c:	0002cd40 	call	2cd4 <OS_MemClr>
    pq1 = &OSQTbl[0];
    6710:	00800074 	movhi	r2,1
    6714:	1098cb04 	addi	r2,r2,25388
    6718:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
    671c:	00800074 	movhi	r2,1
    6720:	1098d104 	addi	r2,r2,25412
    6724:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    6728:	e03ffd0d 	sth	zero,-12(fp)
    672c:	00000c06 	br	6760 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
    6730:	e0bffe17 	ldw	r2,-8(fp)
    6734:	e0ffff17 	ldw	r3,-4(fp)
    6738:	10c00015 	stw	r3,0(r2)
        pq1++;
    673c:	e0bffe17 	ldw	r2,-8(fp)
    6740:	10800604 	addi	r2,r2,24
    6744:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
    6748:	e0bfff17 	ldw	r2,-4(fp)
    674c:	10800604 	addi	r2,r2,24
    6750:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    6754:	e0bffd0b 	ldhu	r2,-12(fp)
    6758:	10800044 	addi	r2,r2,1
    675c:	e0bffd0d 	sth	r2,-12(fp)
    6760:	e0bffd0b 	ldhu	r2,-12(fp)
    6764:	108004f0 	cmpltui	r2,r2,19
    6768:	103ff11e 	bne	r2,zero,6730 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
    676c:	e0bffe17 	ldw	r2,-8(fp)
    6770:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
    6774:	00800074 	movhi	r2,1
    6778:	1082d404 	addi	r2,r2,2896
    677c:	00c00074 	movhi	r3,1
    6780:	18d8cb04 	addi	r3,r3,25388
    6784:	10c00015 	stw	r3,0(r2)
#endif
}
    6788:	e037883a 	mov	sp,fp
    678c:	dfc00117 	ldw	ra,4(sp)
    6790:	df000017 	ldw	fp,0(sp)
    6794:	dec00204 	addi	sp,sp,8
    6798:	f800283a 	ret

0000679c <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
    679c:	defffa04 	addi	sp,sp,-24
    67a0:	df000515 	stw	fp,20(sp)
    67a4:	df000504 	addi	fp,sp,20
    67a8:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    67ac:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    67b0:	e0bfff17 	ldw	r2,-4(fp)
    67b4:	1000021e 	bne	r2,zero,67c0 <OSSemAccept+0x24>
        return (0);
    67b8:	0005883a 	mov	r2,zero
    67bc:	00001f06 	br	683c <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    67c0:	e0bfff17 	ldw	r2,-4(fp)
    67c4:	10800003 	ldbu	r2,0(r2)
    67c8:	10803fcc 	andi	r2,r2,255
    67cc:	108000e0 	cmpeqi	r2,r2,3
    67d0:	1000021e 	bne	r2,zero,67dc <OSSemAccept+0x40>
        return (0);
    67d4:	0005883a 	mov	r2,zero
    67d8:	00001806 	br	683c <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    67dc:	0005303a 	rdctl	r2,status
    67e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    67e4:	e0fffd17 	ldw	r3,-12(fp)
    67e8:	00bfff84 	movi	r2,-2
    67ec:	1884703a 	and	r2,r3,r2
    67f0:	1001703a 	wrctl	status,r2
  
  return context;
    67f4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    67f8:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
    67fc:	e0bfff17 	ldw	r2,-4(fp)
    6800:	1080020b 	ldhu	r2,8(r2)
    6804:	e0bffc0d 	sth	r2,-16(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
    6808:	e0bffc0b 	ldhu	r2,-16(fp)
    680c:	10000626 	beq	r2,zero,6828 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
    6810:	e0bfff17 	ldw	r2,-4(fp)
    6814:	1080020b 	ldhu	r2,8(r2)
    6818:	10bfffc4 	addi	r2,r2,-1
    681c:	1007883a 	mov	r3,r2
    6820:	e0bfff17 	ldw	r2,-4(fp)
    6824:	10c0020d 	sth	r3,8(r2)
    6828:	e0bffb17 	ldw	r2,-20(fp)
    682c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6830:	e0bffe17 	ldw	r2,-8(fp)
    6834:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
    6838:	e0bffc0b 	ldhu	r2,-16(fp)
}
    683c:	e037883a 	mov	sp,fp
    6840:	df000017 	ldw	fp,0(sp)
    6844:	dec00104 	addi	sp,sp,4
    6848:	f800283a 	ret

0000684c <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
    684c:	defff904 	addi	sp,sp,-28
    6850:	dfc00615 	stw	ra,24(sp)
    6854:	df000515 	stw	fp,20(sp)
    6858:	df000504 	addi	fp,sp,20
    685c:	2005883a 	mov	r2,r4
    6860:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    6864:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    6868:	00800074 	movhi	r2,1
    686c:	1082d704 	addi	r2,r2,2908
    6870:	10800003 	ldbu	r2,0(r2)
    6874:	10803fcc 	andi	r2,r2,255
    6878:	10000226 	beq	r2,zero,6884 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
    687c:	0005883a 	mov	r2,zero
    6880:	00002d06 	br	6938 <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6884:	0005303a 	rdctl	r2,status
    6888:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    688c:	e0fffd17 	ldw	r3,-12(fp)
    6890:	00bfff84 	movi	r2,-2
    6894:	1884703a 	and	r2,r3,r2
    6898:	1001703a 	wrctl	status,r2
  
  return context;
    689c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    68a0:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
    68a4:	00800074 	movhi	r2,1
    68a8:	1082d604 	addi	r2,r2,2904
    68ac:	10800017 	ldw	r2,0(r2)
    68b0:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
    68b4:	00800074 	movhi	r2,1
    68b8:	1082d604 	addi	r2,r2,2904
    68bc:	10800017 	ldw	r2,0(r2)
    68c0:	10000726 	beq	r2,zero,68e0 <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    68c4:	00800074 	movhi	r2,1
    68c8:	1082d604 	addi	r2,r2,2904
    68cc:	10800017 	ldw	r2,0(r2)
    68d0:	10c00117 	ldw	r3,4(r2)
    68d4:	00800074 	movhi	r2,1
    68d8:	1082d604 	addi	r2,r2,2904
    68dc:	10c00015 	stw	r3,0(r2)
    68e0:	e0bffb17 	ldw	r2,-20(fp)
    68e4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    68e8:	e0bffe17 	ldw	r2,-8(fp)
    68ec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
    68f0:	e0bffc17 	ldw	r2,-16(fp)
    68f4:	10000f26 	beq	r2,zero,6934 <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
    68f8:	e0bffc17 	ldw	r2,-16(fp)
    68fc:	00c000c4 	movi	r3,3
    6900:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
    6904:	e0bffc17 	ldw	r2,-16(fp)
    6908:	e0ffff0b 	ldhu	r3,-4(fp)
    690c:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
    6910:	e0bffc17 	ldw	r2,-16(fp)
    6914:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
    6918:	e0bffc17 	ldw	r2,-16(fp)
    691c:	00c00fc4 	movi	r3,63
    6920:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
    6924:	e0bffc17 	ldw	r2,-16(fp)
    6928:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
    692c:	e13ffc17 	ldw	r4,-16(fp)
    6930:	00029100 	call	2910 <OS_EventWaitListInit>
    }
    return (pevent);
    6934:	e0bffc17 	ldw	r2,-16(fp)
}
    6938:	e037883a 	mov	sp,fp
    693c:	dfc00117 	ldw	ra,4(sp)
    6940:	df000017 	ldw	fp,0(sp)
    6944:	dec00204 	addi	sp,sp,8
    6948:	f800283a 	ret

0000694c <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    694c:	defff304 	addi	sp,sp,-52
    6950:	dfc00c15 	stw	ra,48(sp)
    6954:	df000b15 	stw	fp,44(sp)
    6958:	df000b04 	addi	fp,sp,44
    695c:	e13ffd15 	stw	r4,-12(fp)
    6960:	2805883a 	mov	r2,r5
    6964:	e1bfff15 	stw	r6,-4(fp)
    6968:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    696c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    6970:	e0bfff17 	ldw	r2,-4(fp)
    6974:	1000021e 	bne	r2,zero,6980 <OSSemDel+0x34>
        return (pevent);
    6978:	e0bffd17 	ldw	r2,-12(fp)
    697c:	00008806 	br	6ba0 <OSSemDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    6980:	e0bffd17 	ldw	r2,-12(fp)
    6984:	1000051e 	bne	r2,zero,699c <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    6988:	e0bfff17 	ldw	r2,-4(fp)
    698c:	00c00104 	movi	r3,4
    6990:	10c00005 	stb	r3,0(r2)
        return (pevent);
    6994:	e0bffd17 	ldw	r2,-12(fp)
    6998:	00008106 	br	6ba0 <OSSemDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    699c:	e0bffd17 	ldw	r2,-12(fp)
    69a0:	10800003 	ldbu	r2,0(r2)
    69a4:	10803fcc 	andi	r2,r2,255
    69a8:	108000e0 	cmpeqi	r2,r2,3
    69ac:	1000051e 	bne	r2,zero,69c4 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    69b0:	e0bfff17 	ldw	r2,-4(fp)
    69b4:	00c00044 	movi	r3,1
    69b8:	10c00005 	stb	r3,0(r2)
        return (pevent);
    69bc:	e0bffd17 	ldw	r2,-12(fp)
    69c0:	00007706 	br	6ba0 <OSSemDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    69c4:	00800074 	movhi	r2,1
    69c8:	1082d704 	addi	r2,r2,2908
    69cc:	10800003 	ldbu	r2,0(r2)
    69d0:	10803fcc 	andi	r2,r2,255
    69d4:	10000526 	beq	r2,zero,69ec <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
    69d8:	e0bfff17 	ldw	r2,-4(fp)
    69dc:	00c003c4 	movi	r3,15
    69e0:	10c00005 	stb	r3,0(r2)
        return (pevent);
    69e4:	e0bffd17 	ldw	r2,-12(fp)
    69e8:	00006d06 	br	6ba0 <OSSemDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    69ec:	0005303a 	rdctl	r2,status
    69f0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    69f4:	e0fff817 	ldw	r3,-32(fp)
    69f8:	00bfff84 	movi	r2,-2
    69fc:	1884703a 	and	r2,r3,r2
    6a00:	1001703a 	wrctl	status,r2
  
  return context;
    6a04:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    6a08:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
    6a0c:	e0bffd17 	ldw	r2,-12(fp)
    6a10:	10800283 	ldbu	r2,10(r2)
    6a14:	10803fcc 	andi	r2,r2,255
    6a18:	10000326 	beq	r2,zero,6a28 <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    6a1c:	00800044 	movi	r2,1
    6a20:	e0bff505 	stb	r2,-44(fp)
    6a24:	00000106 	br	6a2c <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    6a28:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
    6a2c:	e0bffe03 	ldbu	r2,-8(fp)
    6a30:	10000326 	beq	r2,zero,6a40 <OSSemDel+0xf4>
    6a34:	10800060 	cmpeqi	r2,r2,1
    6a38:	10002c1e 	bne	r2,zero,6aec <OSSemDel+0x1a0>
    6a3c:	00004d06 	br	6b74 <OSSemDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
    6a40:	e0bff503 	ldbu	r2,-44(fp)
    6a44:	10001a1e 	bne	r2,zero,6ab0 <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    6a48:	e0bffd17 	ldw	r2,-12(fp)
    6a4c:	00c00fc4 	movi	r3,63
    6a50:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    6a54:	e0bffd17 	ldw	r2,-12(fp)
    6a58:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    6a5c:	e0bffd17 	ldw	r2,-12(fp)
    6a60:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    6a64:	00800074 	movhi	r2,1
    6a68:	1082d604 	addi	r2,r2,2904
    6a6c:	10c00017 	ldw	r3,0(r2)
    6a70:	e0bffd17 	ldw	r2,-12(fp)
    6a74:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    6a78:	e0bffd17 	ldw	r2,-12(fp)
    6a7c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    6a80:	00800074 	movhi	r2,1
    6a84:	1082d604 	addi	r2,r2,2904
    6a88:	e0fffd17 	ldw	r3,-12(fp)
    6a8c:	10c00015 	stw	r3,0(r2)
    6a90:	e0bff717 	ldw	r2,-36(fp)
    6a94:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6a98:	e0bff917 	ldw	r2,-28(fp)
    6a9c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    6aa0:	e0bfff17 	ldw	r2,-4(fp)
    6aa4:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
    6aa8:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    6aac:	00003b06 	br	6b9c <OSSemDel+0x250>
    6ab0:	e0bff717 	ldw	r2,-36(fp)
    6ab4:	e0bffa15 	stw	r2,-24(fp)
    6ab8:	e0bffa17 	ldw	r2,-24(fp)
    6abc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
    6ac0:	e0bfff17 	ldw	r2,-4(fp)
    6ac4:	00c01244 	movi	r3,73
    6ac8:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    6acc:	e0bffd17 	ldw	r2,-12(fp)
    6ad0:	e0bff615 	stw	r2,-40(fp)
             }
             break;
    6ad4:	00003106 	br	6b9c <OSSemDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    6ad8:	e13ffd17 	ldw	r4,-12(fp)
    6adc:	000b883a 	mov	r5,zero
    6ae0:	01800044 	movi	r6,1
    6ae4:	000f883a 	mov	r7,zero
    6ae8:	00023700 	call	2370 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
    6aec:	e0bffd17 	ldw	r2,-12(fp)
    6af0:	10800283 	ldbu	r2,10(r2)
    6af4:	10803fcc 	andi	r2,r2,255
    6af8:	103ff71e 	bne	r2,zero,6ad8 <OSSemDel+0x18c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    6afc:	e0bffd17 	ldw	r2,-12(fp)
    6b00:	00c00fc4 	movi	r3,63
    6b04:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    6b08:	e0bffd17 	ldw	r2,-12(fp)
    6b0c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    6b10:	e0bffd17 	ldw	r2,-12(fp)
    6b14:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    6b18:	00800074 	movhi	r2,1
    6b1c:	1082d604 	addi	r2,r2,2904
    6b20:	10c00017 	ldw	r3,0(r2)
    6b24:	e0bffd17 	ldw	r2,-12(fp)
    6b28:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    6b2c:	e0bffd17 	ldw	r2,-12(fp)
    6b30:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    6b34:	00800074 	movhi	r2,1
    6b38:	1082d604 	addi	r2,r2,2904
    6b3c:	e0fffd17 	ldw	r3,-12(fp)
    6b40:	10c00015 	stw	r3,0(r2)
    6b44:	e0bff717 	ldw	r2,-36(fp)
    6b48:	e0bffb15 	stw	r2,-20(fp)
    6b4c:	e0bffb17 	ldw	r2,-20(fp)
    6b50:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    6b54:	e0bff503 	ldbu	r2,-44(fp)
    6b58:	10800058 	cmpnei	r2,r2,1
    6b5c:	1000011e 	bne	r2,zero,6b64 <OSSemDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    6b60:	0002d880 	call	2d88 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    6b64:	e0bfff17 	ldw	r2,-4(fp)
    6b68:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
    6b6c:	e03ff615 	stw	zero,-40(fp)
             break;
    6b70:	00000a06 	br	6b9c <OSSemDel+0x250>
    6b74:	e0bff717 	ldw	r2,-36(fp)
    6b78:	e0bffc15 	stw	r2,-16(fp)
    6b7c:	e0bffc17 	ldw	r2,-16(fp)
    6b80:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    6b84:	e0bfff17 	ldw	r2,-4(fp)
    6b88:	00c001c4 	movi	r3,7
    6b8c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    6b90:	e0bffd17 	ldw	r2,-12(fp)
    6b94:	e0bff615 	stw	r2,-40(fp)
             break;
    6b98:	0001883a 	nop
    }
    return (pevent_return);
    6b9c:	e0bff617 	ldw	r2,-40(fp)
}
    6ba0:	e037883a 	mov	sp,fp
    6ba4:	dfc00117 	ldw	ra,4(sp)
    6ba8:	df000017 	ldw	fp,0(sp)
    6bac:	dec00204 	addi	sp,sp,8
    6bb0:	f800283a 	ret

00006bb4 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    6bb4:	defff504 	addi	sp,sp,-44
    6bb8:	dfc00a15 	stw	ra,40(sp)
    6bbc:	df000915 	stw	fp,36(sp)
    6bc0:	df000904 	addi	fp,sp,36
    6bc4:	e13ffd15 	stw	r4,-12(fp)
    6bc8:	2805883a 	mov	r2,r5
    6bcc:	e1bfff15 	stw	r6,-4(fp)
    6bd0:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    6bd4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    6bd8:	e0bfff17 	ldw	r2,-4(fp)
    6bdc:	1000011e 	bne	r2,zero,6be4 <OSSemPend+0x30>
        return;
    6be0:	00008906 	br	6e08 <OSSemPend+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    6be4:	e0bffd17 	ldw	r2,-12(fp)
    6be8:	1000041e 	bne	r2,zero,6bfc <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
    6bec:	e0bfff17 	ldw	r2,-4(fp)
    6bf0:	00c00104 	movi	r3,4
    6bf4:	10c00005 	stb	r3,0(r2)
        return;
    6bf8:	00008306 	br	6e08 <OSSemPend+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    6bfc:	e0bffd17 	ldw	r2,-12(fp)
    6c00:	10800003 	ldbu	r2,0(r2)
    6c04:	10803fcc 	andi	r2,r2,255
    6c08:	108000e0 	cmpeqi	r2,r2,3
    6c0c:	1000041e 	bne	r2,zero,6c20 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    6c10:	e0bfff17 	ldw	r2,-4(fp)
    6c14:	00c00044 	movi	r3,1
    6c18:	10c00005 	stb	r3,0(r2)
        return;
    6c1c:	00007a06 	br	6e08 <OSSemPend+0x254>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
    6c20:	00800074 	movhi	r2,1
    6c24:	1082d704 	addi	r2,r2,2908
    6c28:	10800003 	ldbu	r2,0(r2)
    6c2c:	10803fcc 	andi	r2,r2,255
    6c30:	10000426 	beq	r2,zero,6c44 <OSSemPend+0x90>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
    6c34:	e0bfff17 	ldw	r2,-4(fp)
    6c38:	00c00084 	movi	r3,2
    6c3c:	10c00005 	stb	r3,0(r2)
        return;
    6c40:	00007106 	br	6e08 <OSSemPend+0x254>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
    6c44:	00800074 	movhi	r2,1
    6c48:	1082c904 	addi	r2,r2,2852
    6c4c:	10800003 	ldbu	r2,0(r2)
    6c50:	10803fcc 	andi	r2,r2,255
    6c54:	10000426 	beq	r2,zero,6c68 <OSSemPend+0xb4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
    6c58:	e0bfff17 	ldw	r2,-4(fp)
    6c5c:	00c00344 	movi	r3,13
    6c60:	10c00005 	stb	r3,0(r2)
        return;
    6c64:	00006806 	br	6e08 <OSSemPend+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6c68:	0005303a 	rdctl	r2,status
    6c6c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6c70:	e0fff817 	ldw	r3,-32(fp)
    6c74:	00bfff84 	movi	r2,-2
    6c78:	1884703a 	and	r2,r3,r2
    6c7c:	1001703a 	wrctl	status,r2
  
  return context;
    6c80:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    6c84:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
    6c88:	e0bffd17 	ldw	r2,-12(fp)
    6c8c:	1080020b 	ldhu	r2,8(r2)
    6c90:	10bfffcc 	andi	r2,r2,65535
    6c94:	10000d26 	beq	r2,zero,6ccc <OSSemPend+0x118>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
    6c98:	e0bffd17 	ldw	r2,-12(fp)
    6c9c:	1080020b 	ldhu	r2,8(r2)
    6ca0:	10bfffc4 	addi	r2,r2,-1
    6ca4:	1007883a 	mov	r3,r2
    6ca8:	e0bffd17 	ldw	r2,-12(fp)
    6cac:	10c0020d 	sth	r3,8(r2)
    6cb0:	e0bff717 	ldw	r2,-36(fp)
    6cb4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6cb8:	e0bff917 	ldw	r2,-28(fp)
    6cbc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    6cc0:	e0bfff17 	ldw	r2,-4(fp)
    6cc4:	10000005 	stb	zero,0(r2)
        return;
    6cc8:	00004f06 	br	6e08 <OSSemPend+0x254>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
    6ccc:	00800074 	movhi	r2,1
    6cd0:	1082d804 	addi	r2,r2,2912
    6cd4:	10c00017 	ldw	r3,0(r2)
    6cd8:	00800074 	movhi	r2,1
    6cdc:	1082d804 	addi	r2,r2,2912
    6ce0:	10800017 	ldw	r2,0(r2)
    6ce4:	10800c03 	ldbu	r2,48(r2)
    6ce8:	10800054 	ori	r2,r2,1
    6cec:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    6cf0:	00800074 	movhi	r2,1
    6cf4:	1082d804 	addi	r2,r2,2912
    6cf8:	10800017 	ldw	r2,0(r2)
    6cfc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
    6d00:	00800074 	movhi	r2,1
    6d04:	1082d804 	addi	r2,r2,2912
    6d08:	10800017 	ldw	r2,0(r2)
    6d0c:	e0fffe0b 	ldhu	r3,-8(fp)
    6d10:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    6d14:	e13ffd17 	ldw	r4,-12(fp)
    6d18:	00025080 	call	2508 <OS_EventTaskWait>
    6d1c:	e0bff717 	ldw	r2,-36(fp)
    6d20:	e0bffa15 	stw	r2,-24(fp)
    6d24:	e0bffa17 	ldw	r2,-24(fp)
    6d28:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
    6d2c:	0002d880 	call	2d88 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6d30:	0005303a 	rdctl	r2,status
    6d34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6d38:	e0fffb17 	ldw	r3,-20(fp)
    6d3c:	00bfff84 	movi	r2,-2
    6d40:	1884703a 	and	r2,r3,r2
    6d44:	1001703a 	wrctl	status,r2
  
  return context;
    6d48:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
    6d4c:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    6d50:	00800074 	movhi	r2,1
    6d54:	1082d804 	addi	r2,r2,2912
    6d58:	10800017 	ldw	r2,0(r2)
    6d5c:	10800c43 	ldbu	r2,49(r2)
    6d60:	10803fcc 	andi	r2,r2,255
    6d64:	10000326 	beq	r2,zero,6d74 <OSSemPend+0x1c0>
    6d68:	108000a0 	cmpeqi	r2,r2,2
    6d6c:	1000041e 	bne	r2,zero,6d80 <OSSemPend+0x1cc>
    6d70:	00000706 	br	6d90 <OSSemPend+0x1dc>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
    6d74:	e0bfff17 	ldw	r2,-4(fp)
    6d78:	10000005 	stb	zero,0(r2)
             break;
    6d7c:	00000e06 	br	6db8 <OSSemPend+0x204>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    6d80:	e0bfff17 	ldw	r2,-4(fp)
    6d84:	00c00384 	movi	r3,14
    6d88:	10c00005 	stb	r3,0(r2)
             break;
    6d8c:	00000a06 	br	6db8 <OSSemPend+0x204>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
    6d90:	00800074 	movhi	r2,1
    6d94:	1082d804 	addi	r2,r2,2912
    6d98:	10800017 	ldw	r2,0(r2)
    6d9c:	1009883a 	mov	r4,r2
    6da0:	e17ffd17 	ldw	r5,-12(fp)
    6da4:	00027600 	call	2760 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    6da8:	e0bfff17 	ldw	r2,-4(fp)
    6dac:	00c00284 	movi	r3,10
    6db0:	10c00005 	stb	r3,0(r2)
             break;
    6db4:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    6db8:	00800074 	movhi	r2,1
    6dbc:	1082d804 	addi	r2,r2,2912
    6dc0:	10800017 	ldw	r2,0(r2)
    6dc4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    6dc8:	00800074 	movhi	r2,1
    6dcc:	1082d804 	addi	r2,r2,2912
    6dd0:	10800017 	ldw	r2,0(r2)
    6dd4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    6dd8:	00800074 	movhi	r2,1
    6ddc:	1082d804 	addi	r2,r2,2912
    6de0:	10800017 	ldw	r2,0(r2)
    6de4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    6de8:	00800074 	movhi	r2,1
    6dec:	1082d804 	addi	r2,r2,2912
    6df0:	10800017 	ldw	r2,0(r2)
    6df4:	10000815 	stw	zero,32(r2)
    6df8:	e0bff717 	ldw	r2,-36(fp)
    6dfc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6e00:	e0bffc17 	ldw	r2,-16(fp)
    6e04:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
    6e08:	e037883a 	mov	sp,fp
    6e0c:	dfc00117 	ldw	ra,4(sp)
    6e10:	df000017 	ldw	fp,0(sp)
    6e14:	dec00204 	addi	sp,sp,8
    6e18:	f800283a 	ret

00006e1c <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    6e1c:	defff604 	addi	sp,sp,-40
    6e20:	dfc00915 	stw	ra,36(sp)
    6e24:	df000815 	stw	fp,32(sp)
    6e28:	df000804 	addi	fp,sp,32
    6e2c:	e13ffd15 	stw	r4,-12(fp)
    6e30:	2805883a 	mov	r2,r5
    6e34:	e1bfff15 	stw	r6,-4(fp)
    6e38:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    6e3c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    6e40:	e0bfff17 	ldw	r2,-4(fp)
    6e44:	1000021e 	bne	r2,zero,6e50 <OSSemPendAbort+0x34>
        return (0);
    6e48:	0005883a 	mov	r2,zero
    6e4c:	00004906 	br	6f74 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    6e50:	e0bffd17 	ldw	r2,-12(fp)
    6e54:	1000051e 	bne	r2,zero,6e6c <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    6e58:	e0bfff17 	ldw	r2,-4(fp)
    6e5c:	00c00104 	movi	r3,4
    6e60:	10c00005 	stb	r3,0(r2)
        return (0);
    6e64:	0005883a 	mov	r2,zero
    6e68:	00004206 	br	6f74 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    6e6c:	e0bffd17 	ldw	r2,-12(fp)
    6e70:	10800003 	ldbu	r2,0(r2)
    6e74:	10803fcc 	andi	r2,r2,255
    6e78:	108000e0 	cmpeqi	r2,r2,3
    6e7c:	1000051e 	bne	r2,zero,6e94 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    6e80:	e0bfff17 	ldw	r2,-4(fp)
    6e84:	00c00044 	movi	r3,1
    6e88:	10c00005 	stb	r3,0(r2)
        return (0);
    6e8c:	0005883a 	mov	r2,zero
    6e90:	00003806 	br	6f74 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6e94:	0005303a 	rdctl	r2,status
    6e98:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6e9c:	e0fffa17 	ldw	r3,-24(fp)
    6ea0:	00bfff84 	movi	r2,-2
    6ea4:	1884703a 	and	r2,r3,r2
    6ea8:	1001703a 	wrctl	status,r2
  
  return context;
    6eac:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    6eb0:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
    6eb4:	e0bffd17 	ldw	r2,-12(fp)
    6eb8:	10800283 	ldbu	r2,10(r2)
    6ebc:	10803fcc 	andi	r2,r2,255
    6ec0:	10002526 	beq	r2,zero,6f58 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
    6ec4:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
    6ec8:	e0bffe03 	ldbu	r2,-8(fp)
    6ecc:	10800060 	cmpeqi	r2,r2,1
    6ed0:	10000e26 	beq	r2,zero,6f0c <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    6ed4:	00000806 	br	6ef8 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    6ed8:	e13ffd17 	ldw	r4,-12(fp)
    6edc:	000b883a 	mov	r5,zero
    6ee0:	01800044 	movi	r6,1
    6ee4:	01c00084 	movi	r7,2
    6ee8:	00023700 	call	2370 <OS_EventTaskRdy>
                     nbr_tasks++;
    6eec:	e0bff803 	ldbu	r2,-32(fp)
    6ef0:	10800044 	addi	r2,r2,1
    6ef4:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    6ef8:	e0bffd17 	ldw	r2,-12(fp)
    6efc:	10800283 	ldbu	r2,10(r2)
    6f00:	10803fcc 	andi	r2,r2,255
    6f04:	103ff41e 	bne	r2,zero,6ed8 <OSSemPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    6f08:	00000906 	br	6f30 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    6f0c:	e13ffd17 	ldw	r4,-12(fp)
    6f10:	000b883a 	mov	r5,zero
    6f14:	01800044 	movi	r6,1
    6f18:	01c00084 	movi	r7,2
    6f1c:	00023700 	call	2370 <OS_EventTaskRdy>
                 nbr_tasks++;
    6f20:	e0bff803 	ldbu	r2,-32(fp)
    6f24:	10800044 	addi	r2,r2,1
    6f28:	e0bff805 	stb	r2,-32(fp)
                 break;
    6f2c:	0001883a 	nop
    6f30:	e0bff917 	ldw	r2,-28(fp)
    6f34:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6f38:	e0bffb17 	ldw	r2,-20(fp)
    6f3c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    6f40:	0002d880 	call	2d88 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    6f44:	e0bfff17 	ldw	r2,-4(fp)
    6f48:	00c00384 	movi	r3,14
    6f4c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    6f50:	e0bff803 	ldbu	r2,-32(fp)
    6f54:	00000706 	br	6f74 <OSSemPendAbort+0x158>
    6f58:	e0bff917 	ldw	r2,-28(fp)
    6f5c:	e0bffc15 	stw	r2,-16(fp)
    6f60:	e0bffc17 	ldw	r2,-16(fp)
    6f64:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    6f68:	e0bfff17 	ldw	r2,-4(fp)
    6f6c:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
    6f70:	0005883a 	mov	r2,zero
}
    6f74:	e037883a 	mov	sp,fp
    6f78:	dfc00117 	ldw	ra,4(sp)
    6f7c:	df000017 	ldw	fp,0(sp)
    6f80:	dec00204 	addi	sp,sp,8
    6f84:	f800283a 	ret

00006f88 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
    6f88:	defff804 	addi	sp,sp,-32
    6f8c:	dfc00715 	stw	ra,28(sp)
    6f90:	df000615 	stw	fp,24(sp)
    6f94:	df000604 	addi	fp,sp,24
    6f98:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    6f9c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    6fa0:	e0bfff17 	ldw	r2,-4(fp)
    6fa4:	1000021e 	bne	r2,zero,6fb0 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
    6fa8:	00800104 	movi	r2,4
    6fac:	00003506 	br	7084 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    6fb0:	e0bfff17 	ldw	r2,-4(fp)
    6fb4:	10800003 	ldbu	r2,0(r2)
    6fb8:	10803fcc 	andi	r2,r2,255
    6fbc:	108000e0 	cmpeqi	r2,r2,3
    6fc0:	1000021e 	bne	r2,zero,6fcc <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
    6fc4:	00800044 	movi	r2,1
    6fc8:	00002e06 	br	7084 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6fcc:	0005303a 	rdctl	r2,status
    6fd0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6fd4:	e0fffb17 	ldw	r3,-20(fp)
    6fd8:	00bfff84 	movi	r2,-2
    6fdc:	1884703a 	and	r2,r3,r2
    6fe0:	1001703a 	wrctl	status,r2
  
  return context;
    6fe4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    6fe8:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
    6fec:	e0bfff17 	ldw	r2,-4(fp)
    6ff0:	10800283 	ldbu	r2,10(r2)
    6ff4:	10803fcc 	andi	r2,r2,255
    6ff8:	10000c26 	beq	r2,zero,702c <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    6ffc:	e13fff17 	ldw	r4,-4(fp)
    7000:	000b883a 	mov	r5,zero
    7004:	01800044 	movi	r6,1
    7008:	000f883a 	mov	r7,zero
    700c:	00023700 	call	2370 <OS_EventTaskRdy>
    7010:	e0bffa17 	ldw	r2,-24(fp)
    7014:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7018:	e0bffc17 	ldw	r2,-16(fp)
    701c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    7020:	0002d880 	call	2d88 <OS_Sched>
        return (OS_ERR_NONE);
    7024:	0005883a 	mov	r2,zero
    7028:	00001606 	br	7084 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
    702c:	e0bfff17 	ldw	r2,-4(fp)
    7030:	1080020b 	ldhu	r2,8(r2)
    7034:	10ffffcc 	andi	r3,r2,65535
    7038:	00bfffd4 	movui	r2,65535
    703c:	18800c26 	beq	r3,r2,7070 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
    7040:	e0bfff17 	ldw	r2,-4(fp)
    7044:	1080020b 	ldhu	r2,8(r2)
    7048:	10800044 	addi	r2,r2,1
    704c:	1007883a 	mov	r3,r2
    7050:	e0bfff17 	ldw	r2,-4(fp)
    7054:	10c0020d 	sth	r3,8(r2)
    7058:	e0bffa17 	ldw	r2,-24(fp)
    705c:	e0bffd15 	stw	r2,-12(fp)
    7060:	e0bffd17 	ldw	r2,-12(fp)
    7064:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    7068:	0005883a 	mov	r2,zero
    706c:	00000506 	br	7084 <OSSemPost+0xfc>
    7070:	e0bffa17 	ldw	r2,-24(fp)
    7074:	e0bffe15 	stw	r2,-8(fp)
    7078:	e0bffe17 	ldw	r2,-8(fp)
    707c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
    7080:	00800c84 	movi	r2,50
}
    7084:	e037883a 	mov	sp,fp
    7088:	dfc00117 	ldw	ra,4(sp)
    708c:	df000017 	ldw	fp,0(sp)
    7090:	dec00204 	addi	sp,sp,8
    7094:	f800283a 	ret

00007098 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
    7098:	defff704 	addi	sp,sp,-36
    709c:	df000815 	stw	fp,32(sp)
    70a0:	df000804 	addi	fp,sp,32
    70a4:	e13ffe15 	stw	r4,-8(fp)
    70a8:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    70ac:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    70b0:	e0bffe17 	ldw	r2,-8(fp)
    70b4:	1000021e 	bne	r2,zero,70c0 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    70b8:	00800104 	movi	r2,4
    70bc:	00003606 	br	7198 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
    70c0:	e0bfff17 	ldw	r2,-4(fp)
    70c4:	1000021e 	bne	r2,zero,70d0 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    70c8:	00800244 	movi	r2,9
    70cc:	00003206 	br	7198 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    70d0:	e0bffe17 	ldw	r2,-8(fp)
    70d4:	10800003 	ldbu	r2,0(r2)
    70d8:	10803fcc 	andi	r2,r2,255
    70dc:	108000e0 	cmpeqi	r2,r2,3
    70e0:	1000021e 	bne	r2,zero,70ec <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    70e4:	00800044 	movi	r2,1
    70e8:	00002b06 	br	7198 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    70ec:	0005303a 	rdctl	r2,status
    70f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    70f4:	e0fffc17 	ldw	r3,-16(fp)
    70f8:	00bfff84 	movi	r2,-2
    70fc:	1884703a 	and	r2,r3,r2
    7100:	1001703a 	wrctl	status,r2
  
  return context;
    7104:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    7108:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    710c:	e0bffe17 	ldw	r2,-8(fp)
    7110:	10c00283 	ldbu	r3,10(r2)
    7114:	e0bfff17 	ldw	r2,-4(fp)
    7118:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
    711c:	e0bffe17 	ldw	r2,-8(fp)
    7120:	108002c4 	addi	r2,r2,11
    7124:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
    7128:	e0bfff17 	ldw	r2,-4(fp)
    712c:	10800084 	addi	r2,r2,2
    7130:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    7134:	e03ffa05 	stb	zero,-24(fp)
    7138:	00000b06 	br	7168 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
    713c:	e0bff917 	ldw	r2,-28(fp)
    7140:	10c00044 	addi	r3,r2,1
    7144:	e0fff915 	stw	r3,-28(fp)
    7148:	e0fff817 	ldw	r3,-32(fp)
    714c:	19000044 	addi	r4,r3,1
    7150:	e13ff815 	stw	r4,-32(fp)
    7154:	18c00003 	ldbu	r3,0(r3)
    7158:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    715c:	e0bffa03 	ldbu	r2,-24(fp)
    7160:	10800044 	addi	r2,r2,1
    7164:	e0bffa05 	stb	r2,-24(fp)
    7168:	e0bffa03 	ldbu	r2,-24(fp)
    716c:	108000f0 	cmpltui	r2,r2,3
    7170:	103ff21e 	bne	r2,zero,713c <OSSemQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
    7174:	e0bffe17 	ldw	r2,-8(fp)
    7178:	10c0020b 	ldhu	r3,8(r2)
    717c:	e0bfff17 	ldw	r2,-4(fp)
    7180:	10c0000d 	sth	r3,0(r2)
    7184:	e0bffb17 	ldw	r2,-20(fp)
    7188:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    718c:	e0bffd17 	ldw	r2,-12(fp)
    7190:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    7194:	0005883a 	mov	r2,zero
}
    7198:	e037883a 	mov	sp,fp
    719c:	df000017 	ldw	fp,0(sp)
    71a0:	dec00104 	addi	sp,sp,4
    71a4:	f800283a 	ret

000071a8 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
    71a8:	defff904 	addi	sp,sp,-28
    71ac:	df000615 	stw	fp,24(sp)
    71b0:	df000604 	addi	fp,sp,24
    71b4:	e13ffd15 	stw	r4,-12(fp)
    71b8:	2805883a 	mov	r2,r5
    71bc:	e1bfff15 	stw	r6,-4(fp)
    71c0:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    71c4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    71c8:	e0bfff17 	ldw	r2,-4(fp)
    71cc:	1000011e 	bne	r2,zero,71d4 <OSSemSet+0x2c>
        return;
    71d0:	00003006 	br	7294 <OSSemSet+0xec>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    71d4:	e0bffd17 	ldw	r2,-12(fp)
    71d8:	1000041e 	bne	r2,zero,71ec <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    71dc:	e0bfff17 	ldw	r2,-4(fp)
    71e0:	00c00104 	movi	r3,4
    71e4:	10c00005 	stb	r3,0(r2)
        return;
    71e8:	00002a06 	br	7294 <OSSemSet+0xec>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    71ec:	e0bffd17 	ldw	r2,-12(fp)
    71f0:	10800003 	ldbu	r2,0(r2)
    71f4:	10803fcc 	andi	r2,r2,255
    71f8:	108000e0 	cmpeqi	r2,r2,3
    71fc:	1000041e 	bne	r2,zero,7210 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
    7200:	e0bfff17 	ldw	r2,-4(fp)
    7204:	00c00044 	movi	r3,1
    7208:	10c00005 	stb	r3,0(r2)
        return;
    720c:	00002106 	br	7294 <OSSemSet+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7210:	0005303a 	rdctl	r2,status
    7214:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7218:	e0fffb17 	ldw	r3,-20(fp)
    721c:	00bfff84 	movi	r2,-2
    7220:	1884703a 	and	r2,r3,r2
    7224:	1001703a 	wrctl	status,r2
  
  return context;
    7228:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    722c:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
    7230:	e0bfff17 	ldw	r2,-4(fp)
    7234:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
    7238:	e0bffd17 	ldw	r2,-12(fp)
    723c:	1080020b 	ldhu	r2,8(r2)
    7240:	10bfffcc 	andi	r2,r2,65535
    7244:	10000426 	beq	r2,zero,7258 <OSSemSet+0xb0>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
    7248:	e0bffd17 	ldw	r2,-12(fp)
    724c:	e0fffe0b 	ldhu	r3,-8(fp)
    7250:	10c0020d 	sth	r3,8(r2)
    7254:	00000b06 	br	7284 <OSSemSet+0xdc>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
    7258:	e0bffd17 	ldw	r2,-12(fp)
    725c:	10800283 	ldbu	r2,10(r2)
    7260:	10803fcc 	andi	r2,r2,255
    7264:	1000041e 	bne	r2,zero,7278 <OSSemSet+0xd0>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
    7268:	e0bffd17 	ldw	r2,-12(fp)
    726c:	e0fffe0b 	ldhu	r3,-8(fp)
    7270:	10c0020d 	sth	r3,8(r2)
    7274:	00000306 	br	7284 <OSSemSet+0xdc>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
    7278:	e0bfff17 	ldw	r2,-4(fp)
    727c:	00c01244 	movi	r3,73
    7280:	10c00005 	stb	r3,0(r2)
    7284:	e0bffa17 	ldw	r2,-24(fp)
    7288:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    728c:	e0bffc17 	ldw	r2,-16(fp)
    7290:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
    7294:	e037883a 	mov	sp,fp
    7298:	df000017 	ldw	fp,0(sp)
    729c:	dec00104 	addi	sp,sp,4
    72a0:	f800283a 	ret

000072a4 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
    72a4:	defff104 	addi	sp,sp,-60
    72a8:	dfc00e15 	stw	ra,56(sp)
    72ac:	df000d15 	stw	fp,52(sp)
    72b0:	df000d04 	addi	fp,sp,52
    72b4:	2007883a 	mov	r3,r4
    72b8:	2805883a 	mov	r2,r5
    72bc:	e0fffe05 	stb	r3,-8(fp)
    72c0:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
    72c4:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
    72c8:	e0bffe03 	ldbu	r2,-8(fp)
    72cc:	10800530 	cmpltui	r2,r2,20
    72d0:	1000051e 	bne	r2,zero,72e8 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
    72d4:	e0bffe03 	ldbu	r2,-8(fp)
    72d8:	10803fe0 	cmpeqi	r2,r2,255
    72dc:	1000021e 	bne	r2,zero,72e8 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
    72e0:	00800a84 	movi	r2,42
    72e4:	00013a06 	br	77d0 <OSTaskChangePrio+0x52c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
    72e8:	e0bfff03 	ldbu	r2,-4(fp)
    72ec:	10800530 	cmpltui	r2,r2,20
    72f0:	1000021e 	bne	r2,zero,72fc <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
    72f4:	00800a84 	movi	r2,42
    72f8:	00013506 	br	77d0 <OSTaskChangePrio+0x52c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    72fc:	0005303a 	rdctl	r2,status
    7300:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7304:	e0fff917 	ldw	r3,-28(fp)
    7308:	00bfff84 	movi	r2,-2
    730c:	1884703a 	and	r2,r3,r2
    7310:	1001703a 	wrctl	status,r2
  
  return context;
    7314:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    7318:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
    731c:	e0ffff03 	ldbu	r3,-4(fp)
    7320:	00800074 	movhi	r2,1
    7324:	109f5704 	addi	r2,r2,32092
    7328:	18c7883a 	add	r3,r3,r3
    732c:	18c7883a 	add	r3,r3,r3
    7330:	10c5883a 	add	r2,r2,r3
    7334:	10800017 	ldw	r2,0(r2)
    7338:	10000626 	beq	r2,zero,7354 <OSTaskChangePrio+0xb0>
    733c:	e0bff517 	ldw	r2,-44(fp)
    7340:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7344:	e0bffa17 	ldw	r2,-24(fp)
    7348:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
    734c:	00800a04 	movi	r2,40
    7350:	00011f06 	br	77d0 <OSTaskChangePrio+0x52c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
    7354:	e0bffe03 	ldbu	r2,-8(fp)
    7358:	10803fd8 	cmpnei	r2,r2,255
    735c:	1000051e 	bne	r2,zero,7374 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
    7360:	00800074 	movhi	r2,1
    7364:	1082d804 	addi	r2,r2,2912
    7368:	10800017 	ldw	r2,0(r2)
    736c:	10800c83 	ldbu	r2,50(r2)
    7370:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
    7374:	e0fffe03 	ldbu	r3,-8(fp)
    7378:	00800074 	movhi	r2,1
    737c:	109f5704 	addi	r2,r2,32092
    7380:	18c7883a 	add	r3,r3,r3
    7384:	18c7883a 	add	r3,r3,r3
    7388:	10c5883a 	add	r2,r2,r3
    738c:	10800017 	ldw	r2,0(r2)
    7390:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
    7394:	e0bff617 	ldw	r2,-40(fp)
    7398:	1000061e 	bne	r2,zero,73b4 <OSTaskChangePrio+0x110>
    739c:	e0bff517 	ldw	r2,-44(fp)
    73a0:	e0bffb15 	stw	r2,-20(fp)
    73a4:	e0bffb17 	ldw	r2,-20(fp)
    73a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
    73ac:	00800a44 	movi	r2,41
    73b0:	00010706 	br	77d0 <OSTaskChangePrio+0x52c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
    73b4:	e0bff617 	ldw	r2,-40(fp)
    73b8:	10800058 	cmpnei	r2,r2,1
    73bc:	1000061e 	bne	r2,zero,73d8 <OSTaskChangePrio+0x134>
    73c0:	e0bff517 	ldw	r2,-44(fp)
    73c4:	e0bffc15 	stw	r2,-16(fp)
    73c8:	e0bffc17 	ldw	r2,-16(fp)
    73cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
    73d0:	008010c4 	movi	r2,67
    73d4:	0000fe06 	br	77d0 <OSTaskChangePrio+0x52c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
    73d8:	e0bfff03 	ldbu	r2,-4(fp)
    73dc:	1004d0fa 	srli	r2,r2,3
    73e0:	e0bff705 	stb	r2,-36(fp)
    x_new                 = (INT8U)(newprio & 0x07);
    73e4:	e0bfff03 	ldbu	r2,-4(fp)
    73e8:	108001cc 	andi	r2,r2,7
    73ec:	e0bff745 	stb	r2,-35(fp)
    bity_new              = (INT8U)(1 << y_new);
    73f0:	e0bff703 	ldbu	r2,-36(fp)
    73f4:	00c00044 	movi	r3,1
    73f8:	1884983a 	sll	r2,r3,r2
    73fc:	e0bff785 	stb	r2,-34(fp)
    bitx_new              = (INT8U)(1 << x_new);
    7400:	e0bff743 	ldbu	r2,-35(fp)
    7404:	00c00044 	movi	r3,1
    7408:	1884983a 	sll	r2,r3,r2
    740c:	e0bff7c5 	stb	r2,-33(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
    7410:	e0fffe03 	ldbu	r3,-8(fp)
    7414:	00800074 	movhi	r2,1
    7418:	109f5704 	addi	r2,r2,32092
    741c:	18c7883a 	add	r3,r3,r3
    7420:	18c7883a 	add	r3,r3,r3
    7424:	10c5883a 	add	r2,r2,r3
    7428:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
    742c:	e0ffff03 	ldbu	r3,-4(fp)
    7430:	00800074 	movhi	r2,1
    7434:	109f5704 	addi	r2,r2,32092
    7438:	18c7883a 	add	r3,r3,r3
    743c:	18c7883a 	add	r3,r3,r3
    7440:	10c5883a 	add	r2,r2,r3
    7444:	e0fff617 	ldw	r3,-40(fp)
    7448:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
    744c:	e0bff617 	ldw	r2,-40(fp)
    7450:	10800d03 	ldbu	r2,52(r2)
    7454:	e0bff805 	stb	r2,-32(fp)
    bity_old              =  ptcb->OSTCBBitY;
    7458:	e0bff617 	ldw	r2,-40(fp)
    745c:	10800d83 	ldbu	r2,54(r2)
    7460:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
    7464:	e0bff617 	ldw	r2,-40(fp)
    7468:	10800d43 	ldbu	r2,53(r2)
    746c:	e0bff885 	stb	r2,-30(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
    7470:	e0fff803 	ldbu	r3,-32(fp)
    7474:	00800074 	movhi	r2,1
    7478:	1082d544 	addi	r2,r2,2901
    747c:	10c5883a 	add	r2,r2,r3
    7480:	10c00003 	ldbu	r3,0(r2)
    7484:	e0bff883 	ldbu	r2,-30(fp)
    7488:	1884703a 	and	r2,r3,r2
    748c:	10803fcc 	andi	r2,r2,255
    7490:	10003726 	beq	r2,zero,7570 <OSTaskChangePrio+0x2cc>
         OSRdyTbl[y_old] &= ~bitx_old;
    7494:	e0fff803 	ldbu	r3,-32(fp)
    7498:	e13ff803 	ldbu	r4,-32(fp)
    749c:	00800074 	movhi	r2,1
    74a0:	1082d544 	addi	r2,r2,2901
    74a4:	1105883a 	add	r2,r2,r4
    74a8:	10800003 	ldbu	r2,0(r2)
    74ac:	1009883a 	mov	r4,r2
    74b0:	e0bff883 	ldbu	r2,-30(fp)
    74b4:	0084303a 	nor	r2,zero,r2
    74b8:	2084703a 	and	r2,r4,r2
    74bc:	1009883a 	mov	r4,r2
    74c0:	00800074 	movhi	r2,1
    74c4:	1082d544 	addi	r2,r2,2901
    74c8:	10c5883a 	add	r2,r2,r3
    74cc:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
    74d0:	e0fff803 	ldbu	r3,-32(fp)
    74d4:	00800074 	movhi	r2,1
    74d8:	1082d544 	addi	r2,r2,2901
    74dc:	10c5883a 	add	r2,r2,r3
    74e0:	10800003 	ldbu	r2,0(r2)
    74e4:	10803fcc 	andi	r2,r2,255
    74e8:	10000b1e 	bne	r2,zero,7518 <OSTaskChangePrio+0x274>
             OSRdyGrp &= ~bity_old;
    74ec:	e0bff843 	ldbu	r2,-31(fp)
    74f0:	0084303a 	nor	r2,zero,r2
    74f4:	1007883a 	mov	r3,r2
    74f8:	00800074 	movhi	r2,1
    74fc:	1082d504 	addi	r2,r2,2900
    7500:	10800003 	ldbu	r2,0(r2)
    7504:	1884703a 	and	r2,r3,r2
    7508:	1007883a 	mov	r3,r2
    750c:	00800074 	movhi	r2,1
    7510:	1082d504 	addi	r2,r2,2900
    7514:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
    7518:	00800074 	movhi	r2,1
    751c:	1082d504 	addi	r2,r2,2900
    7520:	10c00003 	ldbu	r3,0(r2)
    7524:	e0bff783 	ldbu	r2,-34(fp)
    7528:	1884b03a 	or	r2,r3,r2
    752c:	1007883a 	mov	r3,r2
    7530:	00800074 	movhi	r2,1
    7534:	1082d504 	addi	r2,r2,2900
    7538:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
    753c:	e0fff703 	ldbu	r3,-36(fp)
    7540:	e13ff703 	ldbu	r4,-36(fp)
    7544:	00800074 	movhi	r2,1
    7548:	1082d544 	addi	r2,r2,2901
    754c:	1105883a 	add	r2,r2,r4
    7550:	11000003 	ldbu	r4,0(r2)
    7554:	e0bff7c3 	ldbu	r2,-33(fp)
    7558:	2084b03a 	or	r2,r4,r2
    755c:	1009883a 	mov	r4,r2
    7560:	00800074 	movhi	r2,1
    7564:	1082d544 	addi	r2,r2,2901
    7568:	10c5883a 	add	r2,r2,r3
    756c:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
    7570:	e0bff617 	ldw	r2,-40(fp)
    7574:	10800717 	ldw	r2,28(r2)
    7578:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
    757c:	e0bff317 	ldw	r2,-52(fp)
    7580:	10003326 	beq	r2,zero,7650 <OSTaskChangePrio+0x3ac>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
    7584:	e0bff803 	ldbu	r2,-32(fp)
    7588:	e0fff803 	ldbu	r3,-32(fp)
    758c:	e13ff317 	ldw	r4,-52(fp)
    7590:	20c7883a 	add	r3,r4,r3
    7594:	18c00204 	addi	r3,r3,8
    7598:	18c000c3 	ldbu	r3,3(r3)
    759c:	1809883a 	mov	r4,r3
    75a0:	e0fff883 	ldbu	r3,-30(fp)
    75a4:	00c6303a 	nor	r3,zero,r3
    75a8:	20c6703a 	and	r3,r4,r3
    75ac:	1809883a 	mov	r4,r3
    75b0:	e0fff317 	ldw	r3,-52(fp)
    75b4:	1885883a 	add	r2,r3,r2
    75b8:	10800204 	addi	r2,r2,8
    75bc:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
    75c0:	e0bff803 	ldbu	r2,-32(fp)
    75c4:	e0fff317 	ldw	r3,-52(fp)
    75c8:	1885883a 	add	r2,r3,r2
    75cc:	10800204 	addi	r2,r2,8
    75d0:	108000c3 	ldbu	r2,3(r2)
    75d4:	10803fcc 	andi	r2,r2,255
    75d8:	1000091e 	bne	r2,zero,7600 <OSTaskChangePrio+0x35c>
            pevent->OSEventGrp    &= ~bity_old;
    75dc:	e0bff317 	ldw	r2,-52(fp)
    75e0:	10800283 	ldbu	r2,10(r2)
    75e4:	1007883a 	mov	r3,r2
    75e8:	e0bff843 	ldbu	r2,-31(fp)
    75ec:	0084303a 	nor	r2,zero,r2
    75f0:	1884703a 	and	r2,r3,r2
    75f4:	1007883a 	mov	r3,r2
    75f8:	e0bff317 	ldw	r2,-52(fp)
    75fc:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
    7600:	e0bff317 	ldw	r2,-52(fp)
    7604:	10c00283 	ldbu	r3,10(r2)
    7608:	e0bff783 	ldbu	r2,-34(fp)
    760c:	1884b03a 	or	r2,r3,r2
    7610:	1007883a 	mov	r3,r2
    7614:	e0bff317 	ldw	r2,-52(fp)
    7618:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
    761c:	e0bff703 	ldbu	r2,-36(fp)
    7620:	e0fff703 	ldbu	r3,-36(fp)
    7624:	e13ff317 	ldw	r4,-52(fp)
    7628:	20c7883a 	add	r3,r4,r3
    762c:	18c00204 	addi	r3,r3,8
    7630:	190000c3 	ldbu	r4,3(r3)
    7634:	e0fff7c3 	ldbu	r3,-33(fp)
    7638:	20c6b03a 	or	r3,r4,r3
    763c:	1809883a 	mov	r4,r3
    7640:	e0fff317 	ldw	r3,-52(fp)
    7644:	1885883a 	add	r2,r3,r2
    7648:	10800204 	addi	r2,r2,8
    764c:	110000c5 	stb	r4,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
    7650:	e0bff617 	ldw	r2,-40(fp)
    7654:	10800817 	ldw	r2,32(r2)
    7658:	10004226 	beq	r2,zero,7764 <OSTaskChangePrio+0x4c0>
        pevents =  ptcb->OSTCBEventMultiPtr;
    765c:	e0bff617 	ldw	r2,-40(fp)
    7660:	10800817 	ldw	r2,32(r2)
    7664:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
    7668:	e0bff417 	ldw	r2,-48(fp)
    766c:	10800017 	ldw	r2,0(r2)
    7670:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
    7674:	00003906 	br	775c <OSTaskChangePrio+0x4b8>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
    7678:	e0bff803 	ldbu	r2,-32(fp)
    767c:	e0fff803 	ldbu	r3,-32(fp)
    7680:	e13ff317 	ldw	r4,-52(fp)
    7684:	20c7883a 	add	r3,r4,r3
    7688:	18c00204 	addi	r3,r3,8
    768c:	18c000c3 	ldbu	r3,3(r3)
    7690:	1809883a 	mov	r4,r3
    7694:	e0fff883 	ldbu	r3,-30(fp)
    7698:	00c6303a 	nor	r3,zero,r3
    769c:	20c6703a 	and	r3,r4,r3
    76a0:	1809883a 	mov	r4,r3
    76a4:	e0fff317 	ldw	r3,-52(fp)
    76a8:	1885883a 	add	r2,r3,r2
    76ac:	10800204 	addi	r2,r2,8
    76b0:	110000c5 	stb	r4,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
    76b4:	e0bff803 	ldbu	r2,-32(fp)
    76b8:	e0fff317 	ldw	r3,-52(fp)
    76bc:	1885883a 	add	r2,r3,r2
    76c0:	10800204 	addi	r2,r2,8
    76c4:	108000c3 	ldbu	r2,3(r2)
    76c8:	10803fcc 	andi	r2,r2,255
    76cc:	1000091e 	bne	r2,zero,76f4 <OSTaskChangePrio+0x450>
                pevent->OSEventGrp    &= ~bity_old;
    76d0:	e0bff317 	ldw	r2,-52(fp)
    76d4:	10800283 	ldbu	r2,10(r2)
    76d8:	1007883a 	mov	r3,r2
    76dc:	e0bff843 	ldbu	r2,-31(fp)
    76e0:	0084303a 	nor	r2,zero,r2
    76e4:	1884703a 	and	r2,r3,r2
    76e8:	1007883a 	mov	r3,r2
    76ec:	e0bff317 	ldw	r2,-52(fp)
    76f0:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
    76f4:	e0bff317 	ldw	r2,-52(fp)
    76f8:	10c00283 	ldbu	r3,10(r2)
    76fc:	e0bff783 	ldbu	r2,-34(fp)
    7700:	1884b03a 	or	r2,r3,r2
    7704:	1007883a 	mov	r3,r2
    7708:	e0bff317 	ldw	r2,-52(fp)
    770c:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
    7710:	e0bff703 	ldbu	r2,-36(fp)
    7714:	e0fff703 	ldbu	r3,-36(fp)
    7718:	e13ff317 	ldw	r4,-52(fp)
    771c:	20c7883a 	add	r3,r4,r3
    7720:	18c00204 	addi	r3,r3,8
    7724:	190000c3 	ldbu	r4,3(r3)
    7728:	e0fff7c3 	ldbu	r3,-33(fp)
    772c:	20c6b03a 	or	r3,r4,r3
    7730:	1809883a 	mov	r4,r3
    7734:	e0fff317 	ldw	r3,-52(fp)
    7738:	1885883a 	add	r2,r3,r2
    773c:	10800204 	addi	r2,r2,8
    7740:	110000c5 	stb	r4,3(r2)
            pevents++;
    7744:	e0bff417 	ldw	r2,-48(fp)
    7748:	10800104 	addi	r2,r2,4
    774c:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
    7750:	e0bff417 	ldw	r2,-48(fp)
    7754:	10800017 	ldw	r2,0(r2)
    7758:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
    775c:	e0bff317 	ldw	r2,-52(fp)
    7760:	103fc51e 	bne	r2,zero,7678 <OSTaskChangePrio+0x3d4>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
    7764:	e0bff617 	ldw	r2,-40(fp)
    7768:	e0ffff03 	ldbu	r3,-4(fp)
    776c:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
    7770:	e0bff617 	ldw	r2,-40(fp)
    7774:	e0fff703 	ldbu	r3,-36(fp)
    7778:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
    777c:	e0bff617 	ldw	r2,-40(fp)
    7780:	e0fff743 	ldbu	r3,-35(fp)
    7784:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
    7788:	e0bff617 	ldw	r2,-40(fp)
    778c:	e0fff783 	ldbu	r3,-34(fp)
    7790:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
    7794:	e0bff617 	ldw	r2,-40(fp)
    7798:	e0fff7c3 	ldbu	r3,-33(fp)
    779c:	10c00d45 	stb	r3,53(r2)
    77a0:	e0bff517 	ldw	r2,-44(fp)
    77a4:	e0bffd15 	stw	r2,-12(fp)
    77a8:	e0bffd17 	ldw	r2,-12(fp)
    77ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    77b0:	00800074 	movhi	r2,1
    77b4:	1082c944 	addi	r2,r2,2853
    77b8:	10800003 	ldbu	r2,0(r2)
    77bc:	10803fcc 	andi	r2,r2,255
    77c0:	10800058 	cmpnei	r2,r2,1
    77c4:	1000011e 	bne	r2,zero,77cc <OSTaskChangePrio+0x528>
        OS_Sched();                                         /* Find new highest priority task          */
    77c8:	0002d880 	call	2d88 <OS_Sched>
    }
    return (OS_ERR_NONE);
    77cc:	0005883a 	mov	r2,zero
}
    77d0:	e037883a 	mov	sp,fp
    77d4:	dfc00117 	ldw	ra,4(sp)
    77d8:	df000017 	ldw	fp,0(sp)
    77dc:	dec00204 	addi	sp,sp,8
    77e0:	f800283a 	ret

000077e4 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
    77e4:	deffee04 	addi	sp,sp,-72
    77e8:	dfc01115 	stw	ra,68(sp)
    77ec:	df001015 	stw	fp,64(sp)
    77f0:	df001004 	addi	fp,sp,64
    77f4:	e13ffc15 	stw	r4,-16(fp)
    77f8:	e17ffd15 	stw	r5,-12(fp)
    77fc:	e1bffe15 	stw	r6,-8(fp)
    7800:	3805883a 	mov	r2,r7
    7804:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    7808:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    780c:	e0bfff03 	ldbu	r2,-4(fp)
    7810:	10800570 	cmpltui	r2,r2,21
    7814:	1000021e 	bne	r2,zero,7820 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
    7818:	00800a84 	movi	r2,42
    781c:	00005b06 	br	798c <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7820:	0005303a 	rdctl	r2,status
    7824:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7828:	e0fff617 	ldw	r3,-40(fp)
    782c:	00bfff84 	movi	r2,-2
    7830:	1884703a 	and	r2,r3,r2
    7834:	1001703a 	wrctl	status,r2
  
  return context;
    7838:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    783c:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    7840:	00800074 	movhi	r2,1
    7844:	1082d704 	addi	r2,r2,2908
    7848:	10800003 	ldbu	r2,0(r2)
    784c:	10803fcc 	andi	r2,r2,255
    7850:	10000626 	beq	r2,zero,786c <OSTaskCreate+0x88>
    7854:	e0bff317 	ldw	r2,-52(fp)
    7858:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    785c:	e0bff717 	ldw	r2,-36(fp)
    7860:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    7864:	00800f04 	movi	r2,60
    7868:	00004806 	br	798c <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    786c:	e0ffff03 	ldbu	r3,-4(fp)
    7870:	00800074 	movhi	r2,1
    7874:	109f5704 	addi	r2,r2,32092
    7878:	18c7883a 	add	r3,r3,r3
    787c:	18c7883a 	add	r3,r3,r3
    7880:	10c5883a 	add	r2,r2,r3
    7884:	10800017 	ldw	r2,0(r2)
    7888:	10003b1e 	bne	r2,zero,7978 <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    788c:	e0ffff03 	ldbu	r3,-4(fp)
    7890:	00800074 	movhi	r2,1
    7894:	109f5704 	addi	r2,r2,32092
    7898:	18c7883a 	add	r3,r3,r3
    789c:	18c7883a 	add	r3,r3,r3
    78a0:	10c5883a 	add	r2,r2,r3
    78a4:	00c00044 	movi	r3,1
    78a8:	10c00015 	stw	r3,0(r2)
    78ac:	e0bff317 	ldw	r2,-52(fp)
    78b0:	e0bff815 	stw	r2,-32(fp)
    78b4:	e0bff817 	ldw	r2,-32(fp)
    78b8:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
    78bc:	e13ffc17 	ldw	r4,-16(fp)
    78c0:	e17ffd17 	ldw	r5,-12(fp)
    78c4:	e1bffe17 	ldw	r6,-8(fp)
    78c8:	000f883a 	mov	r7,zero
    78cc:	000c6440 	call	c644 <OSTaskStkInit>
    78d0:	e0bff415 	stw	r2,-48(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
    78d4:	e0bfff03 	ldbu	r2,-4(fp)
    78d8:	d8000015 	stw	zero,0(sp)
    78dc:	d8000115 	stw	zero,4(sp)
    78e0:	d8000215 	stw	zero,8(sp)
    78e4:	1009883a 	mov	r4,r2
    78e8:	e17ff417 	ldw	r5,-48(fp)
    78ec:	000d883a 	mov	r6,zero
    78f0:	000f883a 	mov	r7,zero
    78f4:	000318c0 	call	318c <OS_TCBInit>
    78f8:	e0bff505 	stb	r2,-44(fp)
        if (err == OS_ERR_NONE) {
    78fc:	e0bff503 	ldbu	r2,-44(fp)
    7900:	1000081e 	bne	r2,zero,7924 <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
    7904:	00800074 	movhi	r2,1
    7908:	1082c944 	addi	r2,r2,2853
    790c:	10800003 	ldbu	r2,0(r2)
    7910:	10803fcc 	andi	r2,r2,255
    7914:	10800058 	cmpnei	r2,r2,1
    7918:	1000151e 	bne	r2,zero,7970 <OSTaskCreate+0x18c>
                OS_Sched();
    791c:	0002d880 	call	2d88 <OS_Sched>
    7920:	00001306 	br	7970 <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7924:	0005303a 	rdctl	r2,status
    7928:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    792c:	e0fff917 	ldw	r3,-28(fp)
    7930:	00bfff84 	movi	r2,-2
    7934:	1884703a 	and	r2,r3,r2
    7938:	1001703a 	wrctl	status,r2
  
  return context;
    793c:	e0bff917 	ldw	r2,-28(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    7940:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
    7944:	e0ffff03 	ldbu	r3,-4(fp)
    7948:	00800074 	movhi	r2,1
    794c:	109f5704 	addi	r2,r2,32092
    7950:	18c7883a 	add	r3,r3,r3
    7954:	18c7883a 	add	r3,r3,r3
    7958:	10c5883a 	add	r2,r2,r3
    795c:	10000015 	stw	zero,0(r2)
    7960:	e0bff317 	ldw	r2,-52(fp)
    7964:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7968:	e0bffa17 	ldw	r2,-24(fp)
    796c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
    7970:	e0bff503 	ldbu	r2,-44(fp)
    7974:	00000506 	br	798c <OSTaskCreate+0x1a8>
    7978:	e0bff317 	ldw	r2,-52(fp)
    797c:	e0bffb15 	stw	r2,-20(fp)
    7980:	e0bffb17 	ldw	r2,-20(fp)
    7984:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    7988:	00800a04 	movi	r2,40
}
    798c:	e037883a 	mov	sp,fp
    7990:	dfc00117 	ldw	ra,4(sp)
    7994:	df000017 	ldw	fp,0(sp)
    7998:	dec00204 	addi	sp,sp,8
    799c:	f800283a 	ret

000079a0 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
    79a0:	deffec04 	addi	sp,sp,-80
    79a4:	dfc01315 	stw	ra,76(sp)
    79a8:	df001215 	stw	fp,72(sp)
    79ac:	df001204 	addi	fp,sp,72
    79b0:	e13ffa15 	stw	r4,-24(fp)
    79b4:	e17ffb15 	stw	r5,-20(fp)
    79b8:	e1bffc15 	stw	r6,-16(fp)
    79bc:	3809883a 	mov	r4,r7
    79c0:	e0c00217 	ldw	r3,8(fp)
    79c4:	e0800617 	ldw	r2,24(fp)
    79c8:	e13ffd05 	stb	r4,-12(fp)
    79cc:	e0fffe0d 	sth	r3,-8(fp)
    79d0:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    79d4:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    79d8:	e0bffd03 	ldbu	r2,-12(fp)
    79dc:	10800570 	cmpltui	r2,r2,21
    79e0:	1000021e 	bne	r2,zero,79ec <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
    79e4:	00800a84 	movi	r2,42
    79e8:	00006306 	br	7b78 <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    79ec:	0005303a 	rdctl	r2,status
    79f0:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    79f4:	e0fff417 	ldw	r3,-48(fp)
    79f8:	00bfff84 	movi	r2,-2
    79fc:	1884703a 	and	r2,r3,r2
    7a00:	1001703a 	wrctl	status,r2
  
  return context;
    7a04:	e0bff417 	ldw	r2,-48(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    7a08:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    7a0c:	00800074 	movhi	r2,1
    7a10:	1082d704 	addi	r2,r2,2908
    7a14:	10800003 	ldbu	r2,0(r2)
    7a18:	10803fcc 	andi	r2,r2,255
    7a1c:	10000626 	beq	r2,zero,7a38 <OSTaskCreateExt+0x98>
    7a20:	e0bff117 	ldw	r2,-60(fp)
    7a24:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7a28:	e0bff517 	ldw	r2,-44(fp)
    7a2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    7a30:	00800f04 	movi	r2,60
    7a34:	00005006 	br	7b78 <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    7a38:	e0fffd03 	ldbu	r3,-12(fp)
    7a3c:	00800074 	movhi	r2,1
    7a40:	109f5704 	addi	r2,r2,32092
    7a44:	18c7883a 	add	r3,r3,r3
    7a48:	18c7883a 	add	r3,r3,r3
    7a4c:	10c5883a 	add	r2,r2,r3
    7a50:	10800017 	ldw	r2,0(r2)
    7a54:	1000431e 	bne	r2,zero,7b64 <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    7a58:	e0fffd03 	ldbu	r3,-12(fp)
    7a5c:	00800074 	movhi	r2,1
    7a60:	109f5704 	addi	r2,r2,32092
    7a64:	18c7883a 	add	r3,r3,r3
    7a68:	18c7883a 	add	r3,r3,r3
    7a6c:	10c5883a 	add	r2,r2,r3
    7a70:	00c00044 	movi	r3,1
    7a74:	10c00015 	stw	r3,0(r2)
    7a78:	e0bff117 	ldw	r2,-60(fp)
    7a7c:	e0bff615 	stw	r2,-40(fp)
    7a80:	e0bff617 	ldw	r2,-40(fp)
    7a84:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
    7a88:	e0bfff0b 	ldhu	r2,-4(fp)
    7a8c:	e1000317 	ldw	r4,12(fp)
    7a90:	e1400417 	ldw	r5,16(fp)
    7a94:	100d883a 	mov	r6,r2
    7a98:	0008b2c0 	call	8b2c <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
    7a9c:	e0bfff0b 	ldhu	r2,-4(fp)
    7aa0:	e13ffa17 	ldw	r4,-24(fp)
    7aa4:	e17ffb17 	ldw	r5,-20(fp)
    7aa8:	e1bffc17 	ldw	r6,-16(fp)
    7aac:	100f883a 	mov	r7,r2
    7ab0:	000c6440 	call	c644 <OSTaskStkInit>
    7ab4:	e0bff215 	stw	r2,-56(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
    7ab8:	e13ffd03 	ldbu	r4,-12(fp)
    7abc:	e1fffe0b 	ldhu	r7,-8(fp)
    7ac0:	e0bfff0b 	ldhu	r2,-4(fp)
    7ac4:	e0c00417 	ldw	r3,16(fp)
    7ac8:	d8c00015 	stw	r3,0(sp)
    7acc:	e0c00517 	ldw	r3,20(fp)
    7ad0:	d8c00115 	stw	r3,4(sp)
    7ad4:	d8800215 	stw	r2,8(sp)
    7ad8:	e17ff217 	ldw	r5,-56(fp)
    7adc:	e1800317 	ldw	r6,12(fp)
    7ae0:	000318c0 	call	318c <OS_TCBInit>
    7ae4:	e0bff305 	stb	r2,-52(fp)
        if (err == OS_ERR_NONE) {
    7ae8:	e0bff303 	ldbu	r2,-52(fp)
    7aec:	1000081e 	bne	r2,zero,7b10 <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
    7af0:	00800074 	movhi	r2,1
    7af4:	1082c944 	addi	r2,r2,2853
    7af8:	10800003 	ldbu	r2,0(r2)
    7afc:	10803fcc 	andi	r2,r2,255
    7b00:	10800058 	cmpnei	r2,r2,1
    7b04:	1000151e 	bne	r2,zero,7b5c <OSTaskCreateExt+0x1bc>
                OS_Sched();
    7b08:	0002d880 	call	2d88 <OS_Sched>
    7b0c:	00001306 	br	7b5c <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7b10:	0005303a 	rdctl	r2,status
    7b14:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7b18:	e0fff717 	ldw	r3,-36(fp)
    7b1c:	00bfff84 	movi	r2,-2
    7b20:	1884703a 	and	r2,r3,r2
    7b24:	1001703a 	wrctl	status,r2
  
  return context;
    7b28:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    7b2c:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
    7b30:	e0fffd03 	ldbu	r3,-12(fp)
    7b34:	00800074 	movhi	r2,1
    7b38:	109f5704 	addi	r2,r2,32092
    7b3c:	18c7883a 	add	r3,r3,r3
    7b40:	18c7883a 	add	r3,r3,r3
    7b44:	10c5883a 	add	r2,r2,r3
    7b48:	10000015 	stw	zero,0(r2)
    7b4c:	e0bff117 	ldw	r2,-60(fp)
    7b50:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7b54:	e0bff817 	ldw	r2,-32(fp)
    7b58:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
    7b5c:	e0bff303 	ldbu	r2,-52(fp)
    7b60:	00000506 	br	7b78 <OSTaskCreateExt+0x1d8>
    7b64:	e0bff117 	ldw	r2,-60(fp)
    7b68:	e0bff915 	stw	r2,-28(fp)
    7b6c:	e0bff917 	ldw	r2,-28(fp)
    7b70:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    7b74:	00800a04 	movi	r2,40
}
    7b78:	e037883a 	mov	sp,fp
    7b7c:	dfc00117 	ldw	ra,4(sp)
    7b80:	df000017 	ldw	fp,0(sp)
    7b84:	dec00204 	addi	sp,sp,8
    7b88:	f800283a 	ret

00007b8c <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
    7b8c:	defff404 	addi	sp,sp,-48
    7b90:	dfc00b15 	stw	ra,44(sp)
    7b94:	df000a15 	stw	fp,40(sp)
    7b98:	df000a04 	addi	fp,sp,40
    7b9c:	2005883a 	mov	r2,r4
    7ba0:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
    7ba4:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
    7ba8:	00800074 	movhi	r2,1
    7bac:	1082d704 	addi	r2,r2,2908
    7bb0:	10800003 	ldbu	r2,0(r2)
    7bb4:	10803fcc 	andi	r2,r2,255
    7bb8:	10000226 	beq	r2,zero,7bc4 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
    7bbc:	00801004 	movi	r2,64
    7bc0:	0000e506 	br	7f58 <OSTaskDel+0x3cc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
    7bc4:	e0bfff03 	ldbu	r2,-4(fp)
    7bc8:	10800518 	cmpnei	r2,r2,20
    7bcc:	1000021e 	bne	r2,zero,7bd8 <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
    7bd0:	00800f84 	movi	r2,62
    7bd4:	0000e006 	br	7f58 <OSTaskDel+0x3cc>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
    7bd8:	e0bfff03 	ldbu	r2,-4(fp)
    7bdc:	10800530 	cmpltui	r2,r2,20
    7be0:	1000051e 	bne	r2,zero,7bf8 <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
    7be4:	e0bfff03 	ldbu	r2,-4(fp)
    7be8:	10803fe0 	cmpeqi	r2,r2,255
    7bec:	1000021e 	bne	r2,zero,7bf8 <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
    7bf0:	00800a84 	movi	r2,42
    7bf4:	0000d806 	br	7f58 <OSTaskDel+0x3cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7bf8:	0005303a 	rdctl	r2,status
    7bfc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7c00:	e0fff917 	ldw	r3,-28(fp)
    7c04:	00bfff84 	movi	r2,-2
    7c08:	1884703a 	and	r2,r3,r2
    7c0c:	1001703a 	wrctl	status,r2
  
  return context;
    7c10:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
    7c14:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
    7c18:	e0bfff03 	ldbu	r2,-4(fp)
    7c1c:	10803fd8 	cmpnei	r2,r2,255
    7c20:	1000051e 	bne	r2,zero,7c38 <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
    7c24:	00800074 	movhi	r2,1
    7c28:	1082d804 	addi	r2,r2,2912
    7c2c:	10800017 	ldw	r2,0(r2)
    7c30:	10800c83 	ldbu	r2,50(r2)
    7c34:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    7c38:	e0ffff03 	ldbu	r3,-4(fp)
    7c3c:	00800074 	movhi	r2,1
    7c40:	109f5704 	addi	r2,r2,32092
    7c44:	18c7883a 	add	r3,r3,r3
    7c48:	18c7883a 	add	r3,r3,r3
    7c4c:	10c5883a 	add	r2,r2,r3
    7c50:	10800017 	ldw	r2,0(r2)
    7c54:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
    7c58:	e0bff717 	ldw	r2,-36(fp)
    7c5c:	1000061e 	bne	r2,zero,7c78 <OSTaskDel+0xec>
    7c60:	e0bff617 	ldw	r2,-40(fp)
    7c64:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7c68:	e0bffa17 	ldw	r2,-24(fp)
    7c6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    7c70:	008010c4 	movi	r2,67
    7c74:	0000b806 	br	7f58 <OSTaskDel+0x3cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
    7c78:	e0bff717 	ldw	r2,-36(fp)
    7c7c:	10800058 	cmpnei	r2,r2,1
    7c80:	1000061e 	bne	r2,zero,7c9c <OSTaskDel+0x110>
    7c84:	e0bff617 	ldw	r2,-40(fp)
    7c88:	e0bffb15 	stw	r2,-20(fp)
    7c8c:	e0bffb17 	ldw	r2,-20(fp)
    7c90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    7c94:	00800f44 	movi	r2,61
    7c98:	0000af06 	br	7f58 <OSTaskDel+0x3cc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
    7c9c:	e0bff717 	ldw	r2,-36(fp)
    7ca0:	10800d03 	ldbu	r2,52(r2)
    7ca4:	10c03fcc 	andi	r3,r2,255
    7ca8:	e0bff717 	ldw	r2,-36(fp)
    7cac:	10800d03 	ldbu	r2,52(r2)
    7cb0:	11003fcc 	andi	r4,r2,255
    7cb4:	00800074 	movhi	r2,1
    7cb8:	1082d544 	addi	r2,r2,2901
    7cbc:	1105883a 	add	r2,r2,r4
    7cc0:	10800003 	ldbu	r2,0(r2)
    7cc4:	1009883a 	mov	r4,r2
    7cc8:	e0bff717 	ldw	r2,-36(fp)
    7ccc:	10800d43 	ldbu	r2,53(r2)
    7cd0:	0084303a 	nor	r2,zero,r2
    7cd4:	2084703a 	and	r2,r4,r2
    7cd8:	1009883a 	mov	r4,r2
    7cdc:	00800074 	movhi	r2,1
    7ce0:	1082d544 	addi	r2,r2,2901
    7ce4:	10c5883a 	add	r2,r2,r3
    7ce8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
    7cec:	e0bff717 	ldw	r2,-36(fp)
    7cf0:	10800d03 	ldbu	r2,52(r2)
    7cf4:	10c03fcc 	andi	r3,r2,255
    7cf8:	00800074 	movhi	r2,1
    7cfc:	1082d544 	addi	r2,r2,2901
    7d00:	10c5883a 	add	r2,r2,r3
    7d04:	10800003 	ldbu	r2,0(r2)
    7d08:	10803fcc 	andi	r2,r2,255
    7d0c:	10000c1e 	bne	r2,zero,7d40 <OSTaskDel+0x1b4>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
    7d10:	e0bff717 	ldw	r2,-36(fp)
    7d14:	10800d83 	ldbu	r2,54(r2)
    7d18:	0084303a 	nor	r2,zero,r2
    7d1c:	1007883a 	mov	r3,r2
    7d20:	00800074 	movhi	r2,1
    7d24:	1082d504 	addi	r2,r2,2900
    7d28:	10800003 	ldbu	r2,0(r2)
    7d2c:	1884703a 	and	r2,r3,r2
    7d30:	1007883a 	mov	r3,r2
    7d34:	00800074 	movhi	r2,1
    7d38:	1082d504 	addi	r2,r2,2900
    7d3c:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
    7d40:	e0bff717 	ldw	r2,-36(fp)
    7d44:	10800717 	ldw	r2,28(r2)
    7d48:	10000526 	beq	r2,zero,7d60 <OSTaskDel+0x1d4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
    7d4c:	e0bff717 	ldw	r2,-36(fp)
    7d50:	10800717 	ldw	r2,28(r2)
    7d54:	e13ff717 	ldw	r4,-36(fp)
    7d58:	100b883a 	mov	r5,r2
    7d5c:	00027600 	call	2760 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
    7d60:	e0bff717 	ldw	r2,-36(fp)
    7d64:	10800817 	ldw	r2,32(r2)
    7d68:	10000526 	beq	r2,zero,7d80 <OSTaskDel+0x1f4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    7d6c:	e0bff717 	ldw	r2,-36(fp)
    7d70:	10800817 	ldw	r2,32(r2)
    7d74:	e13ff717 	ldw	r4,-36(fp)
    7d78:	100b883a 	mov	r5,r2
    7d7c:	00028140 	call	2814 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
    7d80:	e0bff717 	ldw	r2,-36(fp)
    7d84:	10800a17 	ldw	r2,40(r2)
    7d88:	e0bff815 	stw	r2,-32(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
    7d8c:	e0bff817 	ldw	r2,-32(fp)
    7d90:	10000226 	beq	r2,zero,7d9c <OSTaskDel+0x210>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
    7d94:	e13ff817 	ldw	r4,-32(fp)
    7d98:	0004d680 	call	4d68 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
    7d9c:	e0bff717 	ldw	r2,-36(fp)
    7da0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
    7da4:	e0bff717 	ldw	r2,-36(fp)
    7da8:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    7dac:	e0bff717 	ldw	r2,-36(fp)
    7db0:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
    7db4:	00800074 	movhi	r2,1
    7db8:	1082c904 	addi	r2,r2,2852
    7dbc:	10800003 	ldbu	r2,0(r2)
    7dc0:	10803fcc 	andi	r2,r2,255
    7dc4:	10803fe0 	cmpeqi	r2,r2,255
    7dc8:	1000081e 	bne	r2,zero,7dec <OSTaskDel+0x260>
        OSLockNesting++;
    7dcc:	00800074 	movhi	r2,1
    7dd0:	1082c904 	addi	r2,r2,2852
    7dd4:	10800003 	ldbu	r2,0(r2)
    7dd8:	10800044 	addi	r2,r2,1
    7ddc:	1007883a 	mov	r3,r2
    7de0:	00800074 	movhi	r2,1
    7de4:	1082c904 	addi	r2,r2,2852
    7de8:	10c00005 	stb	r3,0(r2)
    7dec:	e0bff617 	ldw	r2,-40(fp)
    7df0:	e0bffc15 	stw	r2,-16(fp)
    7df4:	e0bffc17 	ldw	r2,-16(fp)
    7df8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
    7dfc:	00023540 	call	2354 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7e00:	0005303a 	rdctl	r2,status
    7e04:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7e08:	e0fffd17 	ldw	r3,-12(fp)
    7e0c:	00bfff84 	movi	r2,-2
    7e10:	1884703a 	and	r2,r3,r2
    7e14:	1001703a 	wrctl	status,r2
  
  return context;
    7e18:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
    7e1c:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
    7e20:	00800074 	movhi	r2,1
    7e24:	1082c904 	addi	r2,r2,2852
    7e28:	10800003 	ldbu	r2,0(r2)
    7e2c:	10803fcc 	andi	r2,r2,255
    7e30:	10000826 	beq	r2,zero,7e54 <OSTaskDel+0x2c8>
        OSLockNesting--;
    7e34:	00800074 	movhi	r2,1
    7e38:	1082c904 	addi	r2,r2,2852
    7e3c:	10800003 	ldbu	r2,0(r2)
    7e40:	10bfffc4 	addi	r2,r2,-1
    7e44:	1007883a 	mov	r3,r2
    7e48:	00800074 	movhi	r2,1
    7e4c:	1082c904 	addi	r2,r2,2852
    7e50:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
    7e54:	e13ff717 	ldw	r4,-36(fp)
    7e58:	000c7c00 	call	c7c0 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
    7e5c:	00800074 	movhi	r2,1
    7e60:	1082d144 	addi	r2,r2,2885
    7e64:	10800003 	ldbu	r2,0(r2)
    7e68:	10bfffc4 	addi	r2,r2,-1
    7e6c:	1007883a 	mov	r3,r2
    7e70:	00800074 	movhi	r2,1
    7e74:	1082d144 	addi	r2,r2,2885
    7e78:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
    7e7c:	e0ffff03 	ldbu	r3,-4(fp)
    7e80:	00800074 	movhi	r2,1
    7e84:	109f5704 	addi	r2,r2,32092
    7e88:	18c7883a 	add	r3,r3,r3
    7e8c:	18c7883a 	add	r3,r3,r3
    7e90:	10c5883a 	add	r2,r2,r3
    7e94:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
    7e98:	e0bff717 	ldw	r2,-36(fp)
    7e9c:	10800617 	ldw	r2,24(r2)
    7ea0:	1000091e 	bne	r2,zero,7ec8 <OSTaskDel+0x33c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
    7ea4:	e0bff717 	ldw	r2,-36(fp)
    7ea8:	10800517 	ldw	r2,20(r2)
    7eac:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
    7eb0:	e0bff717 	ldw	r2,-36(fp)
    7eb4:	10c00517 	ldw	r3,20(r2)
    7eb8:	00800074 	movhi	r2,1
    7ebc:	1082cc04 	addi	r2,r2,2864
    7ec0:	10c00015 	stw	r3,0(r2)
    7ec4:	00000a06 	br	7ef0 <OSTaskDel+0x364>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
    7ec8:	e0bff717 	ldw	r2,-36(fp)
    7ecc:	10800617 	ldw	r2,24(r2)
    7ed0:	e0fff717 	ldw	r3,-36(fp)
    7ed4:	18c00517 	ldw	r3,20(r3)
    7ed8:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
    7edc:	e0bff717 	ldw	r2,-36(fp)
    7ee0:	10800517 	ldw	r2,20(r2)
    7ee4:	e0fff717 	ldw	r3,-36(fp)
    7ee8:	18c00617 	ldw	r3,24(r3)
    7eec:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
    7ef0:	00800074 	movhi	r2,1
    7ef4:	1082d004 	addi	r2,r2,2880
    7ef8:	10c00017 	ldw	r3,0(r2)
    7efc:	e0bff717 	ldw	r2,-36(fp)
    7f00:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
    7f04:	00800074 	movhi	r2,1
    7f08:	1082d004 	addi	r2,r2,2880
    7f0c:	e0fff717 	ldw	r3,-36(fp)
    7f10:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
    7f14:	e0bff717 	ldw	r2,-36(fp)
    7f18:	00c00fc4 	movi	r3,63
    7f1c:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    7f20:	e0bff717 	ldw	r2,-36(fp)
    7f24:	10001345 	stb	zero,77(r2)
    7f28:	e0bff617 	ldw	r2,-40(fp)
    7f2c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7f30:	e0bffe17 	ldw	r2,-8(fp)
    7f34:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    7f38:	00800074 	movhi	r2,1
    7f3c:	1082c944 	addi	r2,r2,2853
    7f40:	10800003 	ldbu	r2,0(r2)
    7f44:	10803fcc 	andi	r2,r2,255
    7f48:	10800058 	cmpnei	r2,r2,1
    7f4c:	1000011e 	bne	r2,zero,7f54 <OSTaskDel+0x3c8>
        OS_Sched();                                     /* Find new highest priority task              */
    7f50:	0002d880 	call	2d88 <OS_Sched>
    }
    return (OS_ERR_NONE);
    7f54:	0005883a 	mov	r2,zero
}
    7f58:	e037883a 	mov	sp,fp
    7f5c:	dfc00117 	ldw	ra,4(sp)
    7f60:	df000017 	ldw	fp,0(sp)
    7f64:	dec00204 	addi	sp,sp,8
    7f68:	f800283a 	ret

00007f6c <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
    7f6c:	defff504 	addi	sp,sp,-44
    7f70:	df000a15 	stw	fp,40(sp)
    7f74:	df000a04 	addi	fp,sp,40
    7f78:	2005883a 	mov	r2,r4
    7f7c:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7f80:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
    7f84:	e0bfff03 	ldbu	r2,-4(fp)
    7f88:	10800518 	cmpnei	r2,r2,20
    7f8c:	1000021e 	bne	r2,zero,7f98 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
    7f90:	00800f84 	movi	r2,62
    7f94:	00004706 	br	80b4 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    7f98:	e0bfff03 	ldbu	r2,-4(fp)
    7f9c:	10800530 	cmpltui	r2,r2,20
    7fa0:	1000051e 	bne	r2,zero,7fb8 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
    7fa4:	e0bfff03 	ldbu	r2,-4(fp)
    7fa8:	10803fe0 	cmpeqi	r2,r2,255
    7fac:	1000021e 	bne	r2,zero,7fb8 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
    7fb0:	00800a84 	movi	r2,42
    7fb4:	00003f06 	br	80b4 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
    7fb8:	e0bfff03 	ldbu	r2,-4(fp)
    7fbc:	10803fd8 	cmpnei	r2,r2,255
    7fc0:	1000131e 	bne	r2,zero,8010 <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7fc4:	0005303a 	rdctl	r2,status
    7fc8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7fcc:	e0fff917 	ldw	r3,-28(fp)
    7fd0:	00bfff84 	movi	r2,-2
    7fd4:	1884703a 	and	r2,r3,r2
    7fd8:	1001703a 	wrctl	status,r2
  
  return context;
    7fdc:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
    7fe0:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
    7fe4:	00800074 	movhi	r2,1
    7fe8:	1082d804 	addi	r2,r2,2912
    7fec:	10800017 	ldw	r2,0(r2)
    7ff0:	10800dc3 	ldbu	r2,55(r2)
    7ff4:	e0bff705 	stb	r2,-36(fp)
    7ff8:	e0bff617 	ldw	r2,-40(fp)
    7ffc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8000:	e0bffa17 	ldw	r2,-24(fp)
    8004:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
    8008:	e0bff703 	ldbu	r2,-36(fp)
    800c:	00002906 	br	80b4 <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8010:	0005303a 	rdctl	r2,status
    8014:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8018:	e0fffb17 	ldw	r3,-20(fp)
    801c:	00bfff84 	movi	r2,-2
    8020:	1884703a 	and	r2,r3,r2
    8024:	1001703a 	wrctl	status,r2
  
  return context;
    8028:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    802c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
    8030:	e0ffff03 	ldbu	r3,-4(fp)
    8034:	00800074 	movhi	r2,1
    8038:	109f5704 	addi	r2,r2,32092
    803c:	18c7883a 	add	r3,r3,r3
    8040:	18c7883a 	add	r3,r3,r3
    8044:	10c5883a 	add	r2,r2,r3
    8048:	10800017 	ldw	r2,0(r2)
    804c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
    8050:	e0bff817 	ldw	r2,-32(fp)
    8054:	1000061e 	bne	r2,zero,8070 <OSTaskDelReq+0x104>
    8058:	e0bff617 	ldw	r2,-40(fp)
    805c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8060:	e0bffc17 	ldw	r2,-16(fp)
    8064:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
    8068:	008010c4 	movi	r2,67
    806c:	00001106 	br	80b4 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
    8070:	e0bff817 	ldw	r2,-32(fp)
    8074:	10800058 	cmpnei	r2,r2,1
    8078:	1000061e 	bne	r2,zero,8094 <OSTaskDelReq+0x128>
    807c:	e0bff617 	ldw	r2,-40(fp)
    8080:	e0bffd15 	stw	r2,-12(fp)
    8084:	e0bffd17 	ldw	r2,-12(fp)
    8088:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    808c:	00800f44 	movi	r2,61
    8090:	00000806 	br	80b4 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
    8094:	e0bff817 	ldw	r2,-32(fp)
    8098:	00c00fc4 	movi	r3,63
    809c:	10c00dc5 	stb	r3,55(r2)
    80a0:	e0bff617 	ldw	r2,-40(fp)
    80a4:	e0bffe15 	stw	r2,-8(fp)
    80a8:	e0bffe17 	ldw	r2,-8(fp)
    80ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    80b0:	0005883a 	mov	r2,zero
}
    80b4:	e037883a 	mov	sp,fp
    80b8:	df000017 	ldw	fp,0(sp)
    80bc:	dec00104 	addi	sp,sp,4
    80c0:	f800283a 	ret

000080c4 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
    80c4:	defff404 	addi	sp,sp,-48
    80c8:	dfc00b15 	stw	ra,44(sp)
    80cc:	df000a15 	stw	fp,40(sp)
    80d0:	df000a04 	addi	fp,sp,40
    80d4:	2005883a 	mov	r2,r4
    80d8:	e17ffe15 	stw	r5,-8(fp)
    80dc:	e1bfff15 	stw	r6,-4(fp)
    80e0:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
    80e4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
    80e8:	e0bfff17 	ldw	r2,-4(fp)
    80ec:	1000021e 	bne	r2,zero,80f8 <OSTaskNameGet+0x34>
        return (0);
    80f0:	0005883a 	mov	r2,zero
    80f4:	00005806 	br	8258 <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
    80f8:	e0bffd03 	ldbu	r2,-12(fp)
    80fc:	10800570 	cmpltui	r2,r2,21
    8100:	1000081e 	bne	r2,zero,8124 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
    8104:	e0bffd03 	ldbu	r2,-12(fp)
    8108:	10803fe0 	cmpeqi	r2,r2,255
    810c:	1000051e 	bne	r2,zero,8124 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
    8110:	e0bfff17 	ldw	r2,-4(fp)
    8114:	00c00a84 	movi	r3,42
    8118:	10c00005 	stb	r3,0(r2)
            return (0);
    811c:	0005883a 	mov	r2,zero
    8120:	00004d06 	br	8258 <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
    8124:	e0bffe17 	ldw	r2,-8(fp)
    8128:	1000051e 	bne	r2,zero,8140 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
    812c:	e0bfff17 	ldw	r2,-4(fp)
    8130:	00c00304 	movi	r3,12
    8134:	10c00005 	stb	r3,0(r2)
        return (0);
    8138:	0005883a 	mov	r2,zero
    813c:	00004606 	br	8258 <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
    8140:	00800074 	movhi	r2,1
    8144:	1082d704 	addi	r2,r2,2908
    8148:	10800003 	ldbu	r2,0(r2)
    814c:	10803fcc 	andi	r2,r2,255
    8150:	10000526 	beq	r2,zero,8168 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
    8154:	e0bfff17 	ldw	r2,-4(fp)
    8158:	00c00444 	movi	r3,17
    815c:	10c00005 	stb	r3,0(r2)
        return (0);
    8160:	0005883a 	mov	r2,zero
    8164:	00003c06 	br	8258 <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8168:	0005303a 	rdctl	r2,status
    816c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8170:	e0fff917 	ldw	r3,-28(fp)
    8174:	00bfff84 	movi	r2,-2
    8178:	1884703a 	and	r2,r3,r2
    817c:	1001703a 	wrctl	status,r2
  
  return context;
    8180:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    8184:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
    8188:	e0bffd03 	ldbu	r2,-12(fp)
    818c:	10803fd8 	cmpnei	r2,r2,255
    8190:	1000051e 	bne	r2,zero,81a8 <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
    8194:	00800074 	movhi	r2,1
    8198:	1082d804 	addi	r2,r2,2912
    819c:	10800017 	ldw	r2,0(r2)
    81a0:	10800c83 	ldbu	r2,50(r2)
    81a4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    81a8:	e0fffd03 	ldbu	r3,-12(fp)
    81ac:	00800074 	movhi	r2,1
    81b0:	109f5704 	addi	r2,r2,32092
    81b4:	18c7883a 	add	r3,r3,r3
    81b8:	18c7883a 	add	r3,r3,r3
    81bc:	10c5883a 	add	r2,r2,r3
    81c0:	10800017 	ldw	r2,0(r2)
    81c4:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
    81c8:	e0bff717 	ldw	r2,-36(fp)
    81cc:	1000091e 	bne	r2,zero,81f4 <OSTaskNameGet+0x130>
    81d0:	e0bff617 	ldw	r2,-40(fp)
    81d4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    81d8:	e0bffa17 	ldw	r2,-24(fp)
    81dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
    81e0:	e0bfff17 	ldw	r2,-4(fp)
    81e4:	00c010c4 	movi	r3,67
    81e8:	10c00005 	stb	r3,0(r2)
        return (0);
    81ec:	0005883a 	mov	r2,zero
    81f0:	00001906 	br	8258 <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
    81f4:	e0bff717 	ldw	r2,-36(fp)
    81f8:	10800058 	cmpnei	r2,r2,1
    81fc:	1000091e 	bne	r2,zero,8224 <OSTaskNameGet+0x160>
    8200:	e0bff617 	ldw	r2,-40(fp)
    8204:	e0bffb15 	stw	r2,-20(fp)
    8208:	e0bffb17 	ldw	r2,-20(fp)
    820c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
    8210:	e0bfff17 	ldw	r2,-4(fp)
    8214:	00c010c4 	movi	r3,67
    8218:	10c00005 	stb	r3,0(r2)
        return (0);
    821c:	0005883a 	mov	r2,zero
    8220:	00000d06 	br	8258 <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
    8224:	e0bff717 	ldw	r2,-36(fp)
    8228:	10801304 	addi	r2,r2,76
    822c:	e13ffe17 	ldw	r4,-8(fp)
    8230:	100b883a 	mov	r5,r2
    8234:	0002ec40 	call	2ec4 <OS_StrCopy>
    8238:	e0bff805 	stb	r2,-32(fp)
    823c:	e0bff617 	ldw	r2,-40(fp)
    8240:	e0bffc15 	stw	r2,-16(fp)
    8244:	e0bffc17 	ldw	r2,-16(fp)
    8248:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    824c:	e0bfff17 	ldw	r2,-4(fp)
    8250:	10000005 	stb	zero,0(r2)
    return (len);
    8254:	e0bff803 	ldbu	r2,-32(fp)
}
    8258:	e037883a 	mov	sp,fp
    825c:	dfc00117 	ldw	ra,4(sp)
    8260:	df000017 	ldw	fp,0(sp)
    8264:	dec00204 	addi	sp,sp,8
    8268:	f800283a 	ret

0000826c <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
    826c:	defff304 	addi	sp,sp,-52
    8270:	dfc00c15 	stw	ra,48(sp)
    8274:	df000b15 	stw	fp,44(sp)
    8278:	df000b04 	addi	fp,sp,44
    827c:	2005883a 	mov	r2,r4
    8280:	e17ffe15 	stw	r5,-8(fp)
    8284:	e1bfff15 	stw	r6,-4(fp)
    8288:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    828c:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    8290:	e0bfff17 	ldw	r2,-4(fp)
    8294:	1000011e 	bne	r2,zero,829c <OSTaskNameSet+0x30>
        return;
    8298:	00005f06 	br	8418 <OSTaskNameSet+0x1ac>
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
    829c:	e0bffd03 	ldbu	r2,-12(fp)
    82a0:	10800570 	cmpltui	r2,r2,21
    82a4:	1000071e 	bne	r2,zero,82c4 <OSTaskNameSet+0x58>
        if (prio != OS_PRIO_SELF) {
    82a8:	e0bffd03 	ldbu	r2,-12(fp)
    82ac:	10803fe0 	cmpeqi	r2,r2,255
    82b0:	1000041e 	bne	r2,zero,82c4 <OSTaskNameSet+0x58>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
    82b4:	e0bfff17 	ldw	r2,-4(fp)
    82b8:	00c00a84 	movi	r3,42
    82bc:	10c00005 	stb	r3,0(r2)
            return;
    82c0:	00005506 	br	8418 <OSTaskNameSet+0x1ac>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
    82c4:	e0bffe17 	ldw	r2,-8(fp)
    82c8:	1000041e 	bne	r2,zero,82dc <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
    82cc:	e0bfff17 	ldw	r2,-4(fp)
    82d0:	00c00304 	movi	r3,12
    82d4:	10c00005 	stb	r3,0(r2)
        return;
    82d8:	00004f06 	br	8418 <OSTaskNameSet+0x1ac>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
    82dc:	00800074 	movhi	r2,1
    82e0:	1082d704 	addi	r2,r2,2908
    82e4:	10800003 	ldbu	r2,0(r2)
    82e8:	10803fcc 	andi	r2,r2,255
    82ec:	10000426 	beq	r2,zero,8300 <OSTaskNameSet+0x94>
        *perr = OS_ERR_NAME_SET_ISR;
    82f0:	e0bfff17 	ldw	r2,-4(fp)
    82f4:	00c00484 	movi	r3,18
    82f8:	10c00005 	stb	r3,0(r2)
        return;
    82fc:	00004606 	br	8418 <OSTaskNameSet+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8300:	0005303a 	rdctl	r2,status
    8304:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8308:	e0fff817 	ldw	r3,-32(fp)
    830c:	00bfff84 	movi	r2,-2
    8310:	1884703a 	and	r2,r3,r2
    8314:	1001703a 	wrctl	status,r2
  
  return context;
    8318:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    831c:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
    8320:	e0bffd03 	ldbu	r2,-12(fp)
    8324:	10803fd8 	cmpnei	r2,r2,255
    8328:	1000051e 	bne	r2,zero,8340 <OSTaskNameSet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
    832c:	00800074 	movhi	r2,1
    8330:	1082d804 	addi	r2,r2,2912
    8334:	10800017 	ldw	r2,0(r2)
    8338:	10800c83 	ldbu	r2,50(r2)
    833c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    8340:	e0fffd03 	ldbu	r3,-12(fp)
    8344:	00800074 	movhi	r2,1
    8348:	109f5704 	addi	r2,r2,32092
    834c:	18c7883a 	add	r3,r3,r3
    8350:	18c7883a 	add	r3,r3,r3
    8354:	10c5883a 	add	r2,r2,r3
    8358:	10800017 	ldw	r2,0(r2)
    835c:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
    8360:	e0bff617 	ldw	r2,-40(fp)
    8364:	1000081e 	bne	r2,zero,8388 <OSTaskNameSet+0x11c>
    8368:	e0bff517 	ldw	r2,-44(fp)
    836c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8370:	e0bff917 	ldw	r2,-28(fp)
    8374:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
    8378:	e0bfff17 	ldw	r2,-4(fp)
    837c:	00c010c4 	movi	r3,67
    8380:	10c00005 	stb	r3,0(r2)
        return;
    8384:	00002406 	br	8418 <OSTaskNameSet+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
    8388:	e0bff617 	ldw	r2,-40(fp)
    838c:	10800058 	cmpnei	r2,r2,1
    8390:	1000081e 	bne	r2,zero,83b4 <OSTaskNameSet+0x148>
    8394:	e0bff517 	ldw	r2,-44(fp)
    8398:	e0bffa15 	stw	r2,-24(fp)
    839c:	e0bffa17 	ldw	r2,-24(fp)
    83a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
    83a4:	e0bfff17 	ldw	r2,-4(fp)
    83a8:	00c010c4 	movi	r3,67
    83ac:	10c00005 	stb	r3,0(r2)
        return;
    83b0:	00001906 	br	8418 <OSTaskNameSet+0x1ac>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
    83b4:	e13ffe17 	ldw	r4,-8(fp)
    83b8:	0002f380 	call	2f38 <OS_StrLen>
    83bc:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
    83c0:	e0bff703 	ldbu	r2,-36(fp)
    83c4:	10800830 	cmpltui	r2,r2,32
    83c8:	1000081e 	bne	r2,zero,83ec <OSTaskNameSet+0x180>
    83cc:	e0bff517 	ldw	r2,-44(fp)
    83d0:	e0bffb15 	stw	r2,-20(fp)
    83d4:	e0bffb17 	ldw	r2,-20(fp)
    83d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
    83dc:	e0bfff17 	ldw	r2,-4(fp)
    83e0:	00c01044 	movi	r3,65
    83e4:	10c00005 	stb	r3,0(r2)
        return;
    83e8:	00000b06 	br	8418 <OSTaskNameSet+0x1ac>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    83ec:	e0bff617 	ldw	r2,-40(fp)
    83f0:	10801304 	addi	r2,r2,76
    83f4:	1009883a 	mov	r4,r2
    83f8:	e17ffe17 	ldw	r5,-8(fp)
    83fc:	0002ec40 	call	2ec4 <OS_StrCopy>
    8400:	e0bff517 	ldw	r2,-44(fp)
    8404:	e0bffc15 	stw	r2,-16(fp)
    8408:	e0bffc17 	ldw	r2,-16(fp)
    840c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    8410:	e0bfff17 	ldw	r2,-4(fp)
    8414:	10000005 	stb	zero,0(r2)
}
    8418:	e037883a 	mov	sp,fp
    841c:	dfc00117 	ldw	ra,4(sp)
    8420:	df000017 	ldw	fp,0(sp)
    8424:	dec00204 	addi	sp,sp,8
    8428:	f800283a 	ret

0000842c <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
    842c:	defff404 	addi	sp,sp,-48
    8430:	dfc00b15 	stw	ra,44(sp)
    8434:	df000a15 	stw	fp,40(sp)
    8438:	df000a04 	addi	fp,sp,40
    843c:	2005883a 	mov	r2,r4
    8440:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    8444:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
    8448:	e0bfff03 	ldbu	r2,-4(fp)
    844c:	10800530 	cmpltui	r2,r2,20
    8450:	1000021e 	bne	r2,zero,845c <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    8454:	00800a84 	movi	r2,42
    8458:	00006d06 	br	8610 <OSTaskResume+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    845c:	0005303a 	rdctl	r2,status
    8460:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8464:	e0fff817 	ldw	r3,-32(fp)
    8468:	00bfff84 	movi	r2,-2
    846c:	1884703a 	and	r2,r3,r2
    8470:	1001703a 	wrctl	status,r2
  
  return context;
    8474:	e0bff817 	ldw	r2,-32(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    8478:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
    847c:	e0ffff03 	ldbu	r3,-4(fp)
    8480:	00800074 	movhi	r2,1
    8484:	109f5704 	addi	r2,r2,32092
    8488:	18c7883a 	add	r3,r3,r3
    848c:	18c7883a 	add	r3,r3,r3
    8490:	10c5883a 	add	r2,r2,r3
    8494:	10800017 	ldw	r2,0(r2)
    8498:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
    849c:	e0bff717 	ldw	r2,-36(fp)
    84a0:	1000061e 	bne	r2,zero,84bc <OSTaskResume+0x90>
    84a4:	e0bff617 	ldw	r2,-40(fp)
    84a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    84ac:	e0bff917 	ldw	r2,-28(fp)
    84b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
    84b4:	00801184 	movi	r2,70
    84b8:	00005506 	br	8610 <OSTaskResume+0x1e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
    84bc:	e0bff717 	ldw	r2,-36(fp)
    84c0:	10800058 	cmpnei	r2,r2,1
    84c4:	1000061e 	bne	r2,zero,84e0 <OSTaskResume+0xb4>
    84c8:	e0bff617 	ldw	r2,-40(fp)
    84cc:	e0bffa15 	stw	r2,-24(fp)
    84d0:	e0bffa17 	ldw	r2,-24(fp)
    84d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    84d8:	008010c4 	movi	r2,67
    84dc:	00004c06 	br	8610 <OSTaskResume+0x1e4>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
    84e0:	e0bff717 	ldw	r2,-36(fp)
    84e4:	10800c03 	ldbu	r2,48(r2)
    84e8:	10803fcc 	andi	r2,r2,255
    84ec:	1080020c 	andi	r2,r2,8
    84f0:	10004226 	beq	r2,zero,85fc <OSTaskResume+0x1d0>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
    84f4:	e0bff717 	ldw	r2,-36(fp)
    84f8:	10c00c03 	ldbu	r3,48(r2)
    84fc:	00bffdc4 	movi	r2,-9
    8500:	1884703a 	and	r2,r3,r2
    8504:	1007883a 	mov	r3,r2
    8508:	e0bff717 	ldw	r2,-36(fp)
    850c:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
    8510:	e0bff717 	ldw	r2,-36(fp)
    8514:	10800c03 	ldbu	r2,48(r2)
    8518:	10803fcc 	andi	r2,r2,255
    851c:	1000311e 	bne	r2,zero,85e4 <OSTaskResume+0x1b8>
            if (ptcb->OSTCBDly == 0) {
    8520:	e0bff717 	ldw	r2,-36(fp)
    8524:	10800b8b 	ldhu	r2,46(r2)
    8528:	10bfffcc 	andi	r2,r2,65535
    852c:	1000281e 	bne	r2,zero,85d0 <OSTaskResume+0x1a4>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
    8530:	e0bff717 	ldw	r2,-36(fp)
    8534:	10c00d83 	ldbu	r3,54(r2)
    8538:	00800074 	movhi	r2,1
    853c:	1082d504 	addi	r2,r2,2900
    8540:	10800003 	ldbu	r2,0(r2)
    8544:	1884b03a 	or	r2,r3,r2
    8548:	1007883a 	mov	r3,r2
    854c:	00800074 	movhi	r2,1
    8550:	1082d504 	addi	r2,r2,2900
    8554:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    8558:	e0bff717 	ldw	r2,-36(fp)
    855c:	10800d03 	ldbu	r2,52(r2)
    8560:	10c03fcc 	andi	r3,r2,255
    8564:	e0bff717 	ldw	r2,-36(fp)
    8568:	10800d03 	ldbu	r2,52(r2)
    856c:	11003fcc 	andi	r4,r2,255
    8570:	00800074 	movhi	r2,1
    8574:	1082d544 	addi	r2,r2,2901
    8578:	1105883a 	add	r2,r2,r4
    857c:	11000003 	ldbu	r4,0(r2)
    8580:	e0bff717 	ldw	r2,-36(fp)
    8584:	10800d43 	ldbu	r2,53(r2)
    8588:	2084b03a 	or	r2,r4,r2
    858c:	1009883a 	mov	r4,r2
    8590:	00800074 	movhi	r2,1
    8594:	1082d544 	addi	r2,r2,2901
    8598:	10c5883a 	add	r2,r2,r3
    859c:	11000005 	stb	r4,0(r2)
    85a0:	e0bff617 	ldw	r2,-40(fp)
    85a4:	e0bffb15 	stw	r2,-20(fp)
    85a8:	e0bffb17 	ldw	r2,-20(fp)
    85ac:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
    85b0:	00800074 	movhi	r2,1
    85b4:	1082c944 	addi	r2,r2,2853
    85b8:	10800003 	ldbu	r2,0(r2)
    85bc:	10803fcc 	andi	r2,r2,255
    85c0:	10800058 	cmpnei	r2,r2,1
    85c4:	10000b1e 	bne	r2,zero,85f4 <OSTaskResume+0x1c8>
                    OS_Sched();                               /* Find new highest priority task        */
    85c8:	0002d880 	call	2d88 <OS_Sched>
    85cc:	00000906 	br	85f4 <OSTaskResume+0x1c8>
    85d0:	e0bff617 	ldw	r2,-40(fp)
    85d4:	e0bffc15 	stw	r2,-16(fp)
    85d8:	e0bffc17 	ldw	r2,-16(fp)
    85dc:	1001703a 	wrctl	status,r2
    85e0:	00000406 	br	85f4 <OSTaskResume+0x1c8>
    85e4:	e0bff617 	ldw	r2,-40(fp)
    85e8:	e0bffd15 	stw	r2,-12(fp)
    85ec:	e0bffd17 	ldw	r2,-12(fp)
    85f0:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
    85f4:	0005883a 	mov	r2,zero
    85f8:	00000506 	br	8610 <OSTaskResume+0x1e4>
    85fc:	e0bff617 	ldw	r2,-40(fp)
    8600:	e0bffe15 	stw	r2,-8(fp)
    8604:	e0bffe17 	ldw	r2,-8(fp)
    8608:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
    860c:	00801104 	movi	r2,68
}
    8610:	e037883a 	mov	sp,fp
    8614:	dfc00117 	ldw	ra,4(sp)
    8618:	df000017 	ldw	fp,0(sp)
    861c:	dec00204 	addi	sp,sp,8
    8620:	f800283a 	ret

00008624 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
    8624:	defff304 	addi	sp,sp,-52
    8628:	df000c15 	stw	fp,48(sp)
    862c:	df000c04 	addi	fp,sp,48
    8630:	2005883a 	mov	r2,r4
    8634:	e17fff15 	stw	r5,-4(fp)
    8638:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    863c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
    8640:	e0bffe03 	ldbu	r2,-8(fp)
    8644:	10800570 	cmpltui	r2,r2,21
    8648:	1000051e 	bne	r2,zero,8660 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
    864c:	e0bffe03 	ldbu	r2,-8(fp)
    8650:	10803fe0 	cmpeqi	r2,r2,255
    8654:	1000021e 	bne	r2,zero,8660 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
    8658:	00800a84 	movi	r2,42
    865c:	00005f06 	br	87dc <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
    8660:	e0bfff17 	ldw	r2,-4(fp)
    8664:	1000021e 	bne	r2,zero,8670 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
    8668:	00800244 	movi	r2,9
    866c:	00005b06 	br	87dc <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
    8670:	e0bfff17 	ldw	r2,-4(fp)
    8674:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
    8678:	e0bfff17 	ldw	r2,-4(fp)
    867c:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8680:	0005303a 	rdctl	r2,status
    8684:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8688:	e0fff917 	ldw	r3,-28(fp)
    868c:	00bfff84 	movi	r2,-2
    8690:	1884703a 	and	r2,r3,r2
    8694:	1001703a 	wrctl	status,r2
  
  return context;
    8698:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    869c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
    86a0:	e0bffe03 	ldbu	r2,-8(fp)
    86a4:	10803fd8 	cmpnei	r2,r2,255
    86a8:	1000051e 	bne	r2,zero,86c0 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
    86ac:	00800074 	movhi	r2,1
    86b0:	1082d804 	addi	r2,r2,2912
    86b4:	10800017 	ldw	r2,0(r2)
    86b8:	10800c83 	ldbu	r2,50(r2)
    86bc:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    86c0:	e0fffe03 	ldbu	r3,-8(fp)
    86c4:	00800074 	movhi	r2,1
    86c8:	109f5704 	addi	r2,r2,32092
    86cc:	18c7883a 	add	r3,r3,r3
    86d0:	18c7883a 	add	r3,r3,r3
    86d4:	10c5883a 	add	r2,r2,r3
    86d8:	10800017 	ldw	r2,0(r2)
    86dc:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
    86e0:	e0bff717 	ldw	r2,-36(fp)
    86e4:	1000061e 	bne	r2,zero,8700 <OSTaskStkChk+0xdc>
    86e8:	e0bff617 	ldw	r2,-40(fp)
    86ec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    86f0:	e0bffa17 	ldw	r2,-24(fp)
    86f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    86f8:	008010c4 	movi	r2,67
    86fc:	00003706 	br	87dc <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
    8700:	e0bff717 	ldw	r2,-36(fp)
    8704:	10800058 	cmpnei	r2,r2,1
    8708:	1000061e 	bne	r2,zero,8724 <OSTaskStkChk+0x100>
    870c:	e0bff617 	ldw	r2,-40(fp)
    8710:	e0bffb15 	stw	r2,-20(fp)
    8714:	e0bffb17 	ldw	r2,-20(fp)
    8718:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    871c:	008010c4 	movi	r2,67
    8720:	00002e06 	br	87dc <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
    8724:	e0bff717 	ldw	r2,-36(fp)
    8728:	1080040b 	ldhu	r2,16(r2)
    872c:	10bfffcc 	andi	r2,r2,65535
    8730:	1080004c 	andi	r2,r2,1
    8734:	1000061e 	bne	r2,zero,8750 <OSTaskStkChk+0x12c>
    8738:	e0bff617 	ldw	r2,-40(fp)
    873c:	e0bffc15 	stw	r2,-16(fp)
    8740:	e0bffc17 	ldw	r2,-16(fp)
    8744:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
    8748:	00801144 	movi	r2,69
    874c:	00002306 	br	87dc <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
    8750:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
    8754:	e0bff717 	ldw	r2,-36(fp)
    8758:	10800317 	ldw	r2,12(r2)
    875c:	e0bff815 	stw	r2,-32(fp)
    pchk  = ptcb->OSTCBStkBottom;
    8760:	e0bff717 	ldw	r2,-36(fp)
    8764:	10800217 	ldw	r2,8(r2)
    8768:	e0bff415 	stw	r2,-48(fp)
    876c:	e0bff617 	ldw	r2,-40(fp)
    8770:	e0bffd15 	stw	r2,-12(fp)
    8774:	e0bffd17 	ldw	r2,-12(fp)
    8778:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    877c:	00000306 	br	878c <OSTaskStkChk+0x168>
        nfree++;
    8780:	e0bff517 	ldw	r2,-44(fp)
    8784:	10800044 	addi	r2,r2,1
    8788:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    878c:	e0bff417 	ldw	r2,-48(fp)
    8790:	10c00104 	addi	r3,r2,4
    8794:	e0fff415 	stw	r3,-48(fp)
    8798:	10800017 	ldw	r2,0(r2)
    879c:	103ff826 	beq	r2,zero,8780 <OSTaskStkChk+0x15c>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
    87a0:	e0bff517 	ldw	r2,-44(fp)
    87a4:	1085883a 	add	r2,r2,r2
    87a8:	1085883a 	add	r2,r2,r2
    87ac:	1007883a 	mov	r3,r2
    87b0:	e0bfff17 	ldw	r2,-4(fp)
    87b4:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
    87b8:	e0fff817 	ldw	r3,-32(fp)
    87bc:	e0bff517 	ldw	r2,-44(fp)
    87c0:	1885c83a 	sub	r2,r3,r2
    87c4:	1085883a 	add	r2,r2,r2
    87c8:	1085883a 	add	r2,r2,r2
    87cc:	1007883a 	mov	r3,r2
    87d0:	e0bfff17 	ldw	r2,-4(fp)
    87d4:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
    87d8:	0005883a 	mov	r2,zero
}
    87dc:	e037883a 	mov	sp,fp
    87e0:	df000017 	ldw	fp,0(sp)
    87e4:	dec00104 	addi	sp,sp,4
    87e8:	f800283a 	ret

000087ec <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
    87ec:	defff504 	addi	sp,sp,-44
    87f0:	dfc00a15 	stw	ra,40(sp)
    87f4:	df000915 	stw	fp,36(sp)
    87f8:	df000904 	addi	fp,sp,36
    87fc:	2005883a 	mov	r2,r4
    8800:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    8804:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
    8808:	e0bfff03 	ldbu	r2,-4(fp)
    880c:	10800518 	cmpnei	r2,r2,20
    8810:	1000021e 	bne	r2,zero,881c <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
    8814:	008011c4 	movi	r2,71
    8818:	00007406 	br	89ec <OSTaskSuspend+0x200>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    881c:	e0bfff03 	ldbu	r2,-4(fp)
    8820:	10800530 	cmpltui	r2,r2,20
    8824:	1000051e 	bne	r2,zero,883c <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
    8828:	e0bfff03 	ldbu	r2,-4(fp)
    882c:	10803fe0 	cmpeqi	r2,r2,255
    8830:	1000021e 	bne	r2,zero,883c <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
    8834:	00800a84 	movi	r2,42
    8838:	00006c06 	br	89ec <OSTaskSuspend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    883c:	0005303a 	rdctl	r2,status
    8840:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8844:	e0fffb17 	ldw	r3,-20(fp)
    8848:	00bfff84 	movi	r2,-2
    884c:	1884703a 	and	r2,r3,r2
    8850:	1001703a 	wrctl	status,r2
  
  return context;
    8854:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
    8858:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
    885c:	e0bfff03 	ldbu	r2,-4(fp)
    8860:	10803fd8 	cmpnei	r2,r2,255
    8864:	1000081e 	bne	r2,zero,8888 <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
    8868:	00800074 	movhi	r2,1
    886c:	1082d804 	addi	r2,r2,2912
    8870:	10800017 	ldw	r2,0(r2)
    8874:	10800c83 	ldbu	r2,50(r2)
    8878:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
    887c:	00800044 	movi	r2,1
    8880:	e0bff705 	stb	r2,-36(fp)
    8884:	00000b06 	br	88b4 <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
    8888:	00800074 	movhi	r2,1
    888c:	1082d804 	addi	r2,r2,2912
    8890:	10800017 	ldw	r2,0(r2)
    8894:	10800c83 	ldbu	r2,50(r2)
    8898:	10c03fcc 	andi	r3,r2,255
    889c:	e0bfff03 	ldbu	r2,-4(fp)
    88a0:	1880031e 	bne	r3,r2,88b0 <OSTaskSuspend+0xc4>
        self = OS_TRUE;
    88a4:	00800044 	movi	r2,1
    88a8:	e0bff705 	stb	r2,-36(fp)
    88ac:	00000106 	br	88b4 <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
    88b0:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    88b4:	e0ffff03 	ldbu	r3,-4(fp)
    88b8:	00800074 	movhi	r2,1
    88bc:	109f5704 	addi	r2,r2,32092
    88c0:	18c7883a 	add	r3,r3,r3
    88c4:	18c7883a 	add	r3,r3,r3
    88c8:	10c5883a 	add	r2,r2,r3
    88cc:	10800017 	ldw	r2,0(r2)
    88d0:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
    88d4:	e0bff917 	ldw	r2,-28(fp)
    88d8:	1000061e 	bne	r2,zero,88f4 <OSTaskSuspend+0x108>
    88dc:	e0bff817 	ldw	r2,-32(fp)
    88e0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    88e4:	e0bffc17 	ldw	r2,-16(fp)
    88e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
    88ec:	00801204 	movi	r2,72
    88f0:	00003e06 	br	89ec <OSTaskSuspend+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
    88f4:	e0bff917 	ldw	r2,-28(fp)
    88f8:	10800058 	cmpnei	r2,r2,1
    88fc:	1000061e 	bne	r2,zero,8918 <OSTaskSuspend+0x12c>
    8900:	e0bff817 	ldw	r2,-32(fp)
    8904:	e0bffd15 	stw	r2,-12(fp)
    8908:	e0bffd17 	ldw	r2,-12(fp)
    890c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    8910:	008010c4 	movi	r2,67
    8914:	00003506 	br	89ec <OSTaskSuspend+0x200>
    }
    y            = ptcb->OSTCBY;
    8918:	e0bff917 	ldw	r2,-28(fp)
    891c:	10800d03 	ldbu	r2,52(r2)
    8920:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
    8924:	e0fffa03 	ldbu	r3,-24(fp)
    8928:	e13ffa03 	ldbu	r4,-24(fp)
    892c:	00800074 	movhi	r2,1
    8930:	1082d544 	addi	r2,r2,2901
    8934:	1105883a 	add	r2,r2,r4
    8938:	10800003 	ldbu	r2,0(r2)
    893c:	1009883a 	mov	r4,r2
    8940:	e0bff917 	ldw	r2,-28(fp)
    8944:	10800d43 	ldbu	r2,53(r2)
    8948:	0084303a 	nor	r2,zero,r2
    894c:	2084703a 	and	r2,r4,r2
    8950:	1009883a 	mov	r4,r2
    8954:	00800074 	movhi	r2,1
    8958:	1082d544 	addi	r2,r2,2901
    895c:	10c5883a 	add	r2,r2,r3
    8960:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    8964:	e0fffa03 	ldbu	r3,-24(fp)
    8968:	00800074 	movhi	r2,1
    896c:	1082d544 	addi	r2,r2,2901
    8970:	10c5883a 	add	r2,r2,r3
    8974:	10800003 	ldbu	r2,0(r2)
    8978:	10803fcc 	andi	r2,r2,255
    897c:	10000c1e 	bne	r2,zero,89b0 <OSTaskSuspend+0x1c4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
    8980:	e0bff917 	ldw	r2,-28(fp)
    8984:	10800d83 	ldbu	r2,54(r2)
    8988:	0084303a 	nor	r2,zero,r2
    898c:	1007883a 	mov	r3,r2
    8990:	00800074 	movhi	r2,1
    8994:	1082d504 	addi	r2,r2,2900
    8998:	10800003 	ldbu	r2,0(r2)
    899c:	1884703a 	and	r2,r3,r2
    89a0:	1007883a 	mov	r3,r2
    89a4:	00800074 	movhi	r2,1
    89a8:	1082d504 	addi	r2,r2,2900
    89ac:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
    89b0:	e0bff917 	ldw	r2,-28(fp)
    89b4:	10800c03 	ldbu	r2,48(r2)
    89b8:	10800214 	ori	r2,r2,8
    89bc:	1007883a 	mov	r3,r2
    89c0:	e0bff917 	ldw	r2,-28(fp)
    89c4:	10c00c05 	stb	r3,48(r2)
    89c8:	e0bff817 	ldw	r2,-32(fp)
    89cc:	e0bffe15 	stw	r2,-8(fp)
    89d0:	e0bffe17 	ldw	r2,-8(fp)
    89d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
    89d8:	e0bff703 	ldbu	r2,-36(fp)
    89dc:	10800058 	cmpnei	r2,r2,1
    89e0:	1000011e 	bne	r2,zero,89e8 <OSTaskSuspend+0x1fc>
        OS_Sched();                                             /* Find new highest priority task      */
    89e4:	0002d880 	call	2d88 <OS_Sched>
    }
    return (OS_ERR_NONE);
    89e8:	0005883a 	mov	r2,zero
}
    89ec:	e037883a 	mov	sp,fp
    89f0:	dfc00117 	ldw	ra,4(sp)
    89f4:	df000017 	ldw	fp,0(sp)
    89f8:	dec00204 	addi	sp,sp,8
    89fc:	f800283a 	ret

00008a00 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
    8a00:	defff604 	addi	sp,sp,-40
    8a04:	dfc00915 	stw	ra,36(sp)
    8a08:	df000815 	stw	fp,32(sp)
    8a0c:	df000804 	addi	fp,sp,32
    8a10:	2005883a 	mov	r2,r4
    8a14:	e17fff15 	stw	r5,-4(fp)
    8a18:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    8a1c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
    8a20:	e0bffe03 	ldbu	r2,-8(fp)
    8a24:	10800570 	cmpltui	r2,r2,21
    8a28:	1000051e 	bne	r2,zero,8a40 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
    8a2c:	e0bffe03 	ldbu	r2,-8(fp)
    8a30:	10803fe0 	cmpeqi	r2,r2,255
    8a34:	1000021e 	bne	r2,zero,8a40 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
    8a38:	00800a84 	movi	r2,42
    8a3c:	00003606 	br	8b18 <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
    8a40:	e0bfff17 	ldw	r2,-4(fp)
    8a44:	1000021e 	bne	r2,zero,8a50 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
    8a48:	00800244 	movi	r2,9
    8a4c:	00003206 	br	8b18 <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8a50:	0005303a 	rdctl	r2,status
    8a54:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8a58:	e0fffa17 	ldw	r3,-24(fp)
    8a5c:	00bfff84 	movi	r2,-2
    8a60:	1884703a 	and	r2,r3,r2
    8a64:	1001703a 	wrctl	status,r2
  
  return context;
    8a68:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    8a6c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
    8a70:	e0bffe03 	ldbu	r2,-8(fp)
    8a74:	10803fd8 	cmpnei	r2,r2,255
    8a78:	1000051e 	bne	r2,zero,8a90 <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
    8a7c:	00800074 	movhi	r2,1
    8a80:	1082d804 	addi	r2,r2,2912
    8a84:	10800017 	ldw	r2,0(r2)
    8a88:	10800c83 	ldbu	r2,50(r2)
    8a8c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    8a90:	e0fffe03 	ldbu	r3,-8(fp)
    8a94:	00800074 	movhi	r2,1
    8a98:	109f5704 	addi	r2,r2,32092
    8a9c:	18c7883a 	add	r3,r3,r3
    8aa0:	18c7883a 	add	r3,r3,r3
    8aa4:	10c5883a 	add	r2,r2,r3
    8aa8:	10800017 	ldw	r2,0(r2)
    8aac:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
    8ab0:	e0bff917 	ldw	r2,-28(fp)
    8ab4:	1000061e 	bne	r2,zero,8ad0 <OSTaskQuery+0xd0>
    8ab8:	e0bff817 	ldw	r2,-32(fp)
    8abc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8ac0:	e0bffb17 	ldw	r2,-20(fp)
    8ac4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
    8ac8:	00800a44 	movi	r2,41
    8acc:	00001206 	br	8b18 <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
    8ad0:	e0bff917 	ldw	r2,-28(fp)
    8ad4:	10800058 	cmpnei	r2,r2,1
    8ad8:	1000061e 	bne	r2,zero,8af4 <OSTaskQuery+0xf4>
    8adc:	e0bff817 	ldw	r2,-32(fp)
    8ae0:	e0bffc15 	stw	r2,-16(fp)
    8ae4:	e0bffc17 	ldw	r2,-16(fp)
    8ae8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    8aec:	008010c4 	movi	r2,67
    8af0:	00000906 	br	8b18 <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
    8af4:	e13fff17 	ldw	r4,-4(fp)
    8af8:	e17ff917 	ldw	r5,-28(fp)
    8afc:	01801b04 	movi	r6,108
    8b00:	0002d240 	call	2d24 <OS_MemCopy>
    8b04:	e0bff817 	ldw	r2,-32(fp)
    8b08:	e0bffd15 	stw	r2,-12(fp)
    8b0c:	e0bffd17 	ldw	r2,-12(fp)
    8b10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    8b14:	0005883a 	mov	r2,zero
}
    8b18:	e037883a 	mov	sp,fp
    8b1c:	dfc00117 	ldw	ra,4(sp)
    8b20:	df000017 	ldw	fp,0(sp)
    8b24:	dec00204 	addi	sp,sp,8
    8b28:	f800283a 	ret

00008b2c <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    8b2c:	defffc04 	addi	sp,sp,-16
    8b30:	df000315 	stw	fp,12(sp)
    8b34:	df000304 	addi	fp,sp,12
    8b38:	e13ffd15 	stw	r4,-12(fp)
    8b3c:	e17ffe15 	stw	r5,-8(fp)
    8b40:	3005883a 	mov	r2,r6
    8b44:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
    8b48:	e0bfff0b 	ldhu	r2,-4(fp)
    8b4c:	1080004c 	andi	r2,r2,1
    8b50:	10000d26 	beq	r2,zero,8b88 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
    8b54:	e0bfff0b 	ldhu	r2,-4(fp)
    8b58:	1080008c 	andi	r2,r2,2
    8b5c:	10000a26 	beq	r2,zero,8b88 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    8b60:	00000706 	br	8b80 <OS_TaskStkClr+0x54>
                size--;
    8b64:	e0bffe17 	ldw	r2,-8(fp)
    8b68:	10bfffc4 	addi	r2,r2,-1
    8b6c:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
    8b70:	e0bffd17 	ldw	r2,-12(fp)
    8b74:	10c00104 	addi	r3,r2,4
    8b78:	e0fffd15 	stw	r3,-12(fp)
    8b7c:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    8b80:	e0bffe17 	ldw	r2,-8(fp)
    8b84:	103ff71e 	bne	r2,zero,8b64 <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
    8b88:	e037883a 	mov	sp,fp
    8b8c:	df000017 	ldw	fp,0(sp)
    8b90:	dec00104 	addi	sp,sp,4
    8b94:	f800283a 	ret

00008b98 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
    8b98:	defff904 	addi	sp,sp,-28
    8b9c:	dfc00615 	stw	ra,24(sp)
    8ba0:	df000515 	stw	fp,20(sp)
    8ba4:	df000504 	addi	fp,sp,20
    8ba8:	2005883a 	mov	r2,r4
    8bac:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    8bb0:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    8bb4:	00800074 	movhi	r2,1
    8bb8:	1082d704 	addi	r2,r2,2908
    8bbc:	10800003 	ldbu	r2,0(r2)
    8bc0:	10803fcc 	andi	r2,r2,255
    8bc4:	10000126 	beq	r2,zero,8bcc <OSTimeDly+0x34>
        return;
    8bc8:	00004006 	br	8ccc <OSTimeDly+0x134>
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
    8bcc:	e0bfff0b 	ldhu	r2,-4(fp)
    8bd0:	10003e26 	beq	r2,zero,8ccc <OSTimeDly+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8bd4:	0005303a 	rdctl	r2,status
    8bd8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8bdc:	e0fffd17 	ldw	r3,-12(fp)
    8be0:	00bfff84 	movi	r2,-2
    8be4:	1884703a 	and	r2,r3,r2
    8be8:	1001703a 	wrctl	status,r2
  
  return context;
    8bec:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
    8bf0:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
    8bf4:	00800074 	movhi	r2,1
    8bf8:	1082d804 	addi	r2,r2,2912
    8bfc:	10800017 	ldw	r2,0(r2)
    8c00:	10800d03 	ldbu	r2,52(r2)
    8c04:	e0bffc05 	stb	r2,-16(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    8c08:	e0fffc03 	ldbu	r3,-16(fp)
    8c0c:	e13ffc03 	ldbu	r4,-16(fp)
    8c10:	00800074 	movhi	r2,1
    8c14:	1082d544 	addi	r2,r2,2901
    8c18:	1105883a 	add	r2,r2,r4
    8c1c:	10800003 	ldbu	r2,0(r2)
    8c20:	1009883a 	mov	r4,r2
    8c24:	00800074 	movhi	r2,1
    8c28:	1082d804 	addi	r2,r2,2912
    8c2c:	10800017 	ldw	r2,0(r2)
    8c30:	10800d43 	ldbu	r2,53(r2)
    8c34:	0084303a 	nor	r2,zero,r2
    8c38:	2084703a 	and	r2,r4,r2
    8c3c:	1009883a 	mov	r4,r2
    8c40:	00800074 	movhi	r2,1
    8c44:	1082d544 	addi	r2,r2,2901
    8c48:	10c5883a 	add	r2,r2,r3
    8c4c:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
    8c50:	e0fffc03 	ldbu	r3,-16(fp)
    8c54:	00800074 	movhi	r2,1
    8c58:	1082d544 	addi	r2,r2,2901
    8c5c:	10c5883a 	add	r2,r2,r3
    8c60:	10800003 	ldbu	r2,0(r2)
    8c64:	10803fcc 	andi	r2,r2,255
    8c68:	10000e1e 	bne	r2,zero,8ca4 <OSTimeDly+0x10c>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    8c6c:	00800074 	movhi	r2,1
    8c70:	1082d804 	addi	r2,r2,2912
    8c74:	10800017 	ldw	r2,0(r2)
    8c78:	10800d83 	ldbu	r2,54(r2)
    8c7c:	0084303a 	nor	r2,zero,r2
    8c80:	1007883a 	mov	r3,r2
    8c84:	00800074 	movhi	r2,1
    8c88:	1082d504 	addi	r2,r2,2900
    8c8c:	10800003 	ldbu	r2,0(r2)
    8c90:	1884703a 	and	r2,r3,r2
    8c94:	1007883a 	mov	r3,r2
    8c98:	00800074 	movhi	r2,1
    8c9c:	1082d504 	addi	r2,r2,2900
    8ca0:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
    8ca4:	00800074 	movhi	r2,1
    8ca8:	1082d804 	addi	r2,r2,2912
    8cac:	10800017 	ldw	r2,0(r2)
    8cb0:	e0ffff0b 	ldhu	r3,-4(fp)
    8cb4:	10c00b8d 	sth	r3,46(r2)
    8cb8:	e0bffb17 	ldw	r2,-20(fp)
    8cbc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8cc0:	e0bffe17 	ldw	r2,-8(fp)
    8cc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    8cc8:	0002d880 	call	2d88 <OS_Sched>
    }
}
    8ccc:	e037883a 	mov	sp,fp
    8cd0:	dfc00117 	ldw	ra,4(sp)
    8cd4:	df000017 	ldw	fp,0(sp)
    8cd8:	dec00204 	addi	sp,sp,8
    8cdc:	f800283a 	ret

00008ce0 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
    8ce0:	defff804 	addi	sp,sp,-32
    8ce4:	dfc00715 	stw	ra,28(sp)
    8ce8:	df000615 	stw	fp,24(sp)
    8cec:	df000604 	addi	fp,sp,24
    8cf0:	2015883a 	mov	r10,r4
    8cf4:	2809883a 	mov	r4,r5
    8cf8:	3007883a 	mov	r3,r6
    8cfc:	3805883a 	mov	r2,r7
    8d00:	e2bffc05 	stb	r10,-16(fp)
    8d04:	e13ffd05 	stb	r4,-12(fp)
    8d08:	e0fffe05 	stb	r3,-8(fp)
    8d0c:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    8d10:	00800074 	movhi	r2,1
    8d14:	1082d704 	addi	r2,r2,2908
    8d18:	10800003 	ldbu	r2,0(r2)
    8d1c:	10803fcc 	andi	r2,r2,255
    8d20:	10000226 	beq	r2,zero,8d2c <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
    8d24:	00801544 	movi	r2,85
    8d28:	00004206 	br	8e34 <OSTimeDlyHMSM+0x154>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
    8d2c:	e0bffc03 	ldbu	r2,-16(fp)
    8d30:	1000081e 	bne	r2,zero,8d54 <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
    8d34:	e0bffd03 	ldbu	r2,-12(fp)
    8d38:	1000061e 	bne	r2,zero,8d54 <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
    8d3c:	e0bffe03 	ldbu	r2,-8(fp)
    8d40:	1000041e 	bne	r2,zero,8d54 <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
    8d44:	e0bfff0b 	ldhu	r2,-4(fp)
    8d48:	1000021e 	bne	r2,zero,8d54 <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
    8d4c:	00801504 	movi	r2,84
    8d50:	00003806 	br	8e34 <OSTimeDlyHMSM+0x154>
                }
            }
        }
    }
    if (minutes > 59) {
    8d54:	e0bffd03 	ldbu	r2,-12(fp)
    8d58:	10800f30 	cmpltui	r2,r2,60
    8d5c:	1000021e 	bne	r2,zero,8d68 <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
    8d60:	00801444 	movi	r2,81
    8d64:	00003306 	br	8e34 <OSTimeDlyHMSM+0x154>
    }
    if (seconds > 59) {
    8d68:	e0bffe03 	ldbu	r2,-8(fp)
    8d6c:	10800f30 	cmpltui	r2,r2,60
    8d70:	1000021e 	bne	r2,zero,8d7c <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
    8d74:	00801484 	movi	r2,82
    8d78:	00002e06 	br	8e34 <OSTimeDlyHMSM+0x154>
    }
    if (ms > 999) {
    8d7c:	e0bfff0b 	ldhu	r2,-4(fp)
    8d80:	1080fa30 	cmpltui	r2,r2,1000
    8d84:	1000021e 	bne	r2,zero,8d90 <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
    8d88:	008014c4 	movi	r2,83
    8d8c:	00002906 	br	8e34 <OSTimeDlyHMSM+0x154>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    8d90:	e0bffc03 	ldbu	r2,-16(fp)
    8d94:	10c38424 	muli	r3,r2,3600
    8d98:	e0bffd03 	ldbu	r2,-12(fp)
    8d9c:	10800f24 	muli	r2,r2,60
    8da0:	1887883a 	add	r3,r3,r2
    8da4:	e0bffe03 	ldbu	r2,-8(fp)
    8da8:	1885883a 	add	r2,r3,r2
    8dac:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    8db0:	e0bfff0b 	ldhu	r2,-4(fp)
    8db4:	10800f84 	addi	r2,r2,62
    8db8:	100690fa 	slli	r3,r2,3
    8dbc:	008418b4 	movhi	r2,4194
    8dc0:	109374c4 	addi	r2,r2,19923
    8dc4:	188a383a 	mulxuu	r5,r3,r2
    8dc8:	1885383a 	mul	r2,r3,r2
    8dcc:	1011883a 	mov	r8,r2
    8dd0:	2813883a 	mov	r9,r5
    8dd4:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    8dd8:	2085883a 	add	r2,r4,r2
    8ddc:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    8de0:	e0bffb17 	ldw	r2,-20(fp)
    8de4:	1004d43a 	srli	r2,r2,16
    8de8:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    8dec:	e0bffb17 	ldw	r2,-20(fp)
    8df0:	10bfffcc 	andi	r2,r2,65535
    8df4:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
    8df8:	e0bffb17 	ldw	r2,-20(fp)
    8dfc:	10bfffcc 	andi	r2,r2,65535
    8e00:	1009883a 	mov	r4,r2
    8e04:	0008b980 	call	8b98 <OSTimeDly>
    while (loops > 0) {
    8e08:	00000706 	br	8e28 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
    8e0c:	01200014 	movui	r4,32768
    8e10:	0008b980 	call	8b98 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
    8e14:	01200014 	movui	r4,32768
    8e18:	0008b980 	call	8b98 <OSTimeDly>
        loops--;
    8e1c:	e0bffa0b 	ldhu	r2,-24(fp)
    8e20:	10bfffc4 	addi	r2,r2,-1
    8e24:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
    8e28:	e0bffa0b 	ldhu	r2,-24(fp)
    8e2c:	103ff71e 	bne	r2,zero,8e0c <OSTimeDlyHMSM+0x12c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
    8e30:	0005883a 	mov	r2,zero
}
    8e34:	e037883a 	mov	sp,fp
    8e38:	dfc00117 	ldw	ra,4(sp)
    8e3c:	df000017 	ldw	fp,0(sp)
    8e40:	dec00204 	addi	sp,sp,8
    8e44:	f800283a 	ret

00008e48 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
    8e48:	defff504 	addi	sp,sp,-44
    8e4c:	dfc00a15 	stw	ra,40(sp)
    8e50:	df000915 	stw	fp,36(sp)
    8e54:	df000904 	addi	fp,sp,36
    8e58:	2005883a 	mov	r2,r4
    8e5c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    8e60:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
    8e64:	e0bfff03 	ldbu	r2,-4(fp)
    8e68:	10800530 	cmpltui	r2,r2,20
    8e6c:	1000021e 	bne	r2,zero,8e78 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    8e70:	00800a84 	movi	r2,42
    8e74:	00006b06 	br	9024 <OSTimeDlyResume+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8e78:	0005303a 	rdctl	r2,status
    8e7c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8e80:	e0fff917 	ldw	r3,-28(fp)
    8e84:	00bfff84 	movi	r2,-2
    8e88:	1884703a 	and	r2,r3,r2
    8e8c:	1001703a 	wrctl	status,r2
  
  return context;
    8e90:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    8e94:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
    8e98:	e0ffff03 	ldbu	r3,-4(fp)
    8e9c:	00800074 	movhi	r2,1
    8ea0:	109f5704 	addi	r2,r2,32092
    8ea4:	18c7883a 	add	r3,r3,r3
    8ea8:	18c7883a 	add	r3,r3,r3
    8eac:	10c5883a 	add	r2,r2,r3
    8eb0:	10800017 	ldw	r2,0(r2)
    8eb4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {
    8eb8:	e0bff817 	ldw	r2,-32(fp)
    8ebc:	1000061e 	bne	r2,zero,8ed8 <OSTimeDlyResume+0x90>
    8ec0:	e0bff717 	ldw	r2,-36(fp)
    8ec4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8ec8:	e0bffa17 	ldw	r2,-24(fp)
    8ecc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    8ed0:	008010c4 	movi	r2,67
    8ed4:	00005306 	br	9024 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb == OS_TCB_RESERVED) {
    8ed8:	e0bff817 	ldw	r2,-32(fp)
    8edc:	10800058 	cmpnei	r2,r2,1
    8ee0:	1000061e 	bne	r2,zero,8efc <OSTimeDlyResume+0xb4>
    8ee4:	e0bff717 	ldw	r2,-36(fp)
    8ee8:	e0bffb15 	stw	r2,-20(fp)
    8eec:	e0bffb17 	ldw	r2,-20(fp)
    8ef0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    8ef4:	008010c4 	movi	r2,67
    8ef8:	00004a06 	br	9024 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
    8efc:	e0bff817 	ldw	r2,-32(fp)
    8f00:	10800b8b 	ldhu	r2,46(r2)
    8f04:	10bfffcc 	andi	r2,r2,65535
    8f08:	1000061e 	bne	r2,zero,8f24 <OSTimeDlyResume+0xdc>
    8f0c:	e0bff717 	ldw	r2,-36(fp)
    8f10:	e0bffc15 	stw	r2,-16(fp)
    8f14:	e0bffc17 	ldw	r2,-16(fp)
    8f18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
    8f1c:	00801404 	movi	r2,80
    8f20:	00004006 	br	9024 <OSTimeDlyResume+0x1dc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
    8f24:	e0bff817 	ldw	r2,-32(fp)
    8f28:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    8f2c:	e0bff817 	ldw	r2,-32(fp)
    8f30:	10800c03 	ldbu	r2,48(r2)
    8f34:	10803fcc 	andi	r2,r2,255
    8f38:	10800dcc 	andi	r2,r2,55
    8f3c:	10000b26 	beq	r2,zero,8f6c <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
    8f40:	e0bff817 	ldw	r2,-32(fp)
    8f44:	10c00c03 	ldbu	r3,48(r2)
    8f48:	00bff204 	movi	r2,-56
    8f4c:	1884703a 	and	r2,r3,r2
    8f50:	1007883a 	mov	r3,r2
    8f54:	e0bff817 	ldw	r2,-32(fp)
    8f58:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
    8f5c:	e0bff817 	ldw	r2,-32(fp)
    8f60:	00c00044 	movi	r3,1
    8f64:	10c00c45 	stb	r3,49(r2)
    8f68:	00000206 	br	8f74 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
    8f6c:	e0bff817 	ldw	r2,-32(fp)
    8f70:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
    8f74:	e0bff817 	ldw	r2,-32(fp)
    8f78:	10800c03 	ldbu	r2,48(r2)
    8f7c:	10803fcc 	andi	r2,r2,255
    8f80:	1080020c 	andi	r2,r2,8
    8f84:	1000221e 	bne	r2,zero,9010 <OSTimeDlyResume+0x1c8>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
    8f88:	e0bff817 	ldw	r2,-32(fp)
    8f8c:	10c00d83 	ldbu	r3,54(r2)
    8f90:	00800074 	movhi	r2,1
    8f94:	1082d504 	addi	r2,r2,2900
    8f98:	10800003 	ldbu	r2,0(r2)
    8f9c:	1884b03a 	or	r2,r3,r2
    8fa0:	1007883a 	mov	r3,r2
    8fa4:	00800074 	movhi	r2,1
    8fa8:	1082d504 	addi	r2,r2,2900
    8fac:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    8fb0:	e0bff817 	ldw	r2,-32(fp)
    8fb4:	10800d03 	ldbu	r2,52(r2)
    8fb8:	10c03fcc 	andi	r3,r2,255
    8fbc:	e0bff817 	ldw	r2,-32(fp)
    8fc0:	10800d03 	ldbu	r2,52(r2)
    8fc4:	11003fcc 	andi	r4,r2,255
    8fc8:	00800074 	movhi	r2,1
    8fcc:	1082d544 	addi	r2,r2,2901
    8fd0:	1105883a 	add	r2,r2,r4
    8fd4:	11000003 	ldbu	r4,0(r2)
    8fd8:	e0bff817 	ldw	r2,-32(fp)
    8fdc:	10800d43 	ldbu	r2,53(r2)
    8fe0:	2084b03a 	or	r2,r4,r2
    8fe4:	1009883a 	mov	r4,r2
    8fe8:	00800074 	movhi	r2,1
    8fec:	1082d544 	addi	r2,r2,2901
    8ff0:	10c5883a 	add	r2,r2,r3
    8ff4:	11000005 	stb	r4,0(r2)
    8ff8:	e0bff717 	ldw	r2,-36(fp)
    8ffc:	e0bffd15 	stw	r2,-12(fp)
    9000:	e0bffd17 	ldw	r2,-12(fp)
    9004:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
    9008:	0002d880 	call	2d88 <OS_Sched>
    900c:	00000406 	br	9020 <OSTimeDlyResume+0x1d8>
    9010:	e0bff717 	ldw	r2,-36(fp)
    9014:	e0bffe15 	stw	r2,-8(fp)
    9018:	e0bffe17 	ldw	r2,-8(fp)
    901c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
    9020:	0005883a 	mov	r2,zero
}
    9024:	e037883a 	mov	sp,fp
    9028:	dfc00117 	ldw	ra,4(sp)
    902c:	df000017 	ldw	fp,0(sp)
    9030:	dec00204 	addi	sp,sp,8
    9034:	f800283a 	ret

00009038 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
    9038:	defffb04 	addi	sp,sp,-20
    903c:	df000415 	stw	fp,16(sp)
    9040:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    9044:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9048:	0005303a 	rdctl	r2,status
    904c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9050:	e0fffe17 	ldw	r3,-8(fp)
    9054:	00bfff84 	movi	r2,-2
    9058:	1884703a 	and	r2,r3,r2
    905c:	1001703a 	wrctl	status,r2
  
  return context;
    9060:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    9064:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
    9068:	00800074 	movhi	r2,1
    906c:	1082d904 	addi	r2,r2,2916
    9070:	10800017 	ldw	r2,0(r2)
    9074:	e0bffd15 	stw	r2,-12(fp)
    9078:	e0bffc17 	ldw	r2,-16(fp)
    907c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9080:	e0bfff17 	ldw	r2,-4(fp)
    9084:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
    9088:	e0bffd17 	ldw	r2,-12(fp)
}
    908c:	e037883a 	mov	sp,fp
    9090:	df000017 	ldw	fp,0(sp)
    9094:	dec00104 	addi	sp,sp,4
    9098:	f800283a 	ret

0000909c <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
    909c:	defffb04 	addi	sp,sp,-20
    90a0:	df000415 	stw	fp,16(sp)
    90a4:	df000404 	addi	fp,sp,16
    90a8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    90ac:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    90b0:	0005303a 	rdctl	r2,status
    90b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    90b8:	e0fffd17 	ldw	r3,-12(fp)
    90bc:	00bfff84 	movi	r2,-2
    90c0:	1884703a 	and	r2,r3,r2
    90c4:	1001703a 	wrctl	status,r2
  
  return context;
    90c8:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
    90cc:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
    90d0:	00800074 	movhi	r2,1
    90d4:	1082d904 	addi	r2,r2,2916
    90d8:	e0ffff17 	ldw	r3,-4(fp)
    90dc:	10c00015 	stw	r3,0(r2)
    90e0:	e0bffc17 	ldw	r2,-16(fp)
    90e4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    90e8:	e0bffe17 	ldw	r2,-8(fp)
    90ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    90f0:	e037883a 	mov	sp,fp
    90f4:	df000017 	ldw	fp,0(sp)
    90f8:	dec00104 	addi	sp,sp,4
    90fc:	f800283a 	ret

00009100 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    9100:	defffd04 	addi	sp,sp,-12
    9104:	dfc00215 	stw	ra,8(sp)
    9108:	df000115 	stw	fp,4(sp)
    910c:	df000104 	addi	fp,sp,4
    9110:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    9114:	e13fff17 	ldw	r4,-4(fp)
    9118:	01400074 	movhi	r5,1
    911c:	297c1c04 	addi	r5,r5,-3984
    9120:	000bbe00 	call	bbe0 <alt_dev_llist_insert>
}
    9124:	e037883a 	mov	sp,fp
    9128:	dfc00117 	ldw	ra,4(sp)
    912c:	df000017 	ldw	fp,0(sp)
    9130:	dec00204 	addi	sp,sp,8
    9134:	f800283a 	ret

00009138 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    9138:	defffd04 	addi	sp,sp,-12
    913c:	dfc00215 	stw	ra,8(sp)
    9140:	df000115 	stw	fp,4(sp)
    9144:	df000104 	addi	fp,sp,4
    9148:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
    914c:	000c5540 	call	c554 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    9150:	00800044 	movi	r2,1
    9154:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    9158:	e037883a 	mov	sp,fp
    915c:	dfc00117 	ldw	ra,4(sp)
    9160:	df000017 	ldw	fp,0(sp)
    9164:	dec00204 	addi	sp,sp,8
    9168:	f800283a 	ret

0000916c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    916c:	defffd04 	addi	sp,sp,-12
    9170:	dfc00215 	stw	ra,8(sp)
    9174:	df000115 	stw	fp,4(sp)
    9178:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    917c:	01040034 	movhi	r4,4096
    9180:	21080004 	addi	r4,r4,8192
    9184:	000b883a 	mov	r5,zero
    9188:	000d883a 	mov	r6,zero
    918c:	01c00204 	movi	r7,8
    9190:	000a2e00 	call	a2e0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    9194:	01000074 	movhi	r4,1
    9198:	21359204 	addi	r4,r4,-10680
    919c:	000b883a 	mov	r5,zero
    91a0:	01800204 	movi	r6,8
    91a4:	00096a80 	call	96a8 <altera_avalon_jtag_uart_init>
    91a8:	01000074 	movhi	r4,1
    91ac:	21358804 	addi	r4,r4,-10720
    91b0:	00091000 	call	9100 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
    91b4:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
    91b8:	01000074 	movhi	r4,1
    91bc:	2139a304 	addi	r4,r4,-6516
    91c0:	00091000 	call	9100 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
    91c4:	01000074 	movhi	r4,1
    91c8:	2139af04 	addi	r4,r4,-6468
    91cc:	00091000 	call	9100 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
    91d0:	01000074 	movhi	r4,1
    91d4:	2139bb04 	addi	r4,r4,-6420
    91d8:	000a4100 	call	a410 <alt_up_character_lcd_init>
    91dc:	01000074 	movhi	r4,1
    91e0:	2139bb04 	addi	r4,r4,-6420
    91e4:	00091000 	call	9100 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
    91e8:	01000074 	movhi	r4,1
    91ec:	2139c604 	addi	r4,r4,-6376
    91f0:	00091000 	call	9100 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
    91f4:	01000074 	movhi	r4,1
    91f8:	2139d104 	addi	r4,r4,-6332
    91fc:	00091000 	call	9100 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
    9200:	01000074 	movhi	r4,1
    9204:	2139dc04 	addi	r4,r4,-6288
    9208:	00091000 	call	9100 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    920c:	01000074 	movhi	r4,1
    9210:	2139e704 	addi	r4,r4,-6244
    9214:	00091000 	call	9100 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
    9218:	01000074 	movhi	r4,1
    921c:	2139f204 	addi	r4,r4,-6200
    9220:	00091000 	call	9100 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    9224:	01000074 	movhi	r4,1
    9228:	2139fd04 	addi	r4,r4,-6156
    922c:	00091000 	call	9100 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    9230:	01000074 	movhi	r4,1
    9234:	213a0804 	addi	r4,r4,-6112
    9238:	00091000 	call	9100 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    923c:	01000074 	movhi	r4,1
    9240:	213a1304 	addi	r4,r4,-6068
    9244:	00091000 	call	9100 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
    9248:	01000074 	movhi	r4,1
    924c:	213a1e04 	addi	r4,r4,-6024
    9250:	000ace80 	call	ace8 <alt_up_ps2_init>
    9254:	01000074 	movhi	r4,1
    9258:	213a1e04 	addi	r4,r4,-6024
    925c:	00091000 	call	9100 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
    9260:	01000074 	movhi	r4,1
    9264:	213a2c04 	addi	r4,r4,-5968
    9268:	000ace80 	call	ace8 <alt_up_ps2_init>
    926c:	01000074 	movhi	r4,1
    9270:	213a2c04 	addi	r4,r4,-5968
    9274:	00091000 	call	9100 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    9278:	01000074 	movhi	r4,1
    927c:	213a3a04 	addi	r4,r4,-5912
    9280:	00091000 	call	9100 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
    9284:	01000074 	movhi	r4,1
    9288:	213a4504 	addi	r4,r4,-5868
    928c:	00091000 	call	9100 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_SUBSYSTEM_VGA_CHAR_BUFFER, VGA_Subsystem_VGA_Char_Buffer);
    9290:	00800074 	movhi	r2,1
    9294:	10ba5204 	addi	r2,r2,-5816
    9298:	10800a17 	ldw	r2,40(r2)
    929c:	10800104 	addi	r2,r2,4
    92a0:	10800017 	ldw	r2,0(r2)
    92a4:	10ffffcc 	andi	r3,r2,65535
    92a8:	00800074 	movhi	r2,1
    92ac:	10ba5204 	addi	r2,r2,-5816
    92b0:	10c00c15 	stw	r3,48(r2)
    92b4:	00800074 	movhi	r2,1
    92b8:	10ba5204 	addi	r2,r2,-5816
    92bc:	10800a17 	ldw	r2,40(r2)
    92c0:	10800104 	addi	r2,r2,4
    92c4:	10800017 	ldw	r2,0(r2)
    92c8:	1006d43a 	srli	r3,r2,16
    92cc:	00800074 	movhi	r2,1
    92d0:	10ba5204 	addi	r2,r2,-5816
    92d4:	10c00d15 	stw	r3,52(r2)
    92d8:	00800074 	movhi	r2,1
    92dc:	10ba5204 	addi	r2,r2,-5816
    92e0:	10800c17 	ldw	r2,48(r2)
    92e4:	10801068 	cmpgeui	r2,r2,65
    92e8:	1000081e 	bne	r2,zero,930c <alt_sys_init+0x1a0>
    92ec:	00800074 	movhi	r2,1
    92f0:	10ba5204 	addi	r2,r2,-5816
    92f4:	00c00fc4 	movi	r3,63
    92f8:	10c00f15 	stw	r3,60(r2)
    92fc:	00800074 	movhi	r2,1
    9300:	10ba5204 	addi	r2,r2,-5816
    9304:	00c00184 	movi	r3,6
    9308:	10c01015 	stw	r3,64(r2)
    930c:	00800074 	movhi	r2,1
    9310:	10ba5204 	addi	r2,r2,-5816
    9314:	10800d17 	ldw	r2,52(r2)
    9318:	10800868 	cmpgeui	r2,r2,33
    931c:	1000041e 	bne	r2,zero,9330 <alt_sys_init+0x1c4>
    9320:	00800074 	movhi	r2,1
    9324:	10ba5204 	addi	r2,r2,-5816
    9328:	00c007c4 	movi	r3,31
    932c:	10c01115 	stw	r3,68(r2)
    9330:	01000074 	movhi	r4,1
    9334:	213a5204 	addi	r4,r4,-5816
    9338:	000b6000 	call	b600 <alt_up_char_buffer_init>
    933c:	01000074 	movhi	r4,1
    9340:	213a5204 	addi	r4,r4,-5816
    9344:	00091000 	call	9100 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
    9348:	00800074 	movhi	r2,1
    934c:	10ba6404 	addi	r2,r2,-5744
    9350:	10800a17 	ldw	r2,40(r2)
    9354:	10800017 	ldw	r2,0(r2)
    9358:	1007883a 	mov	r3,r2
    935c:	00800074 	movhi	r2,1
    9360:	10ba6404 	addi	r2,r2,-5744
    9364:	10c00b15 	stw	r3,44(r2)
    9368:	00800074 	movhi	r2,1
    936c:	10ba6404 	addi	r2,r2,-5744
    9370:	10800a17 	ldw	r2,40(r2)
    9374:	10800104 	addi	r2,r2,4
    9378:	10800017 	ldw	r2,0(r2)
    937c:	1007883a 	mov	r3,r2
    9380:	00800074 	movhi	r2,1
    9384:	10ba6404 	addi	r2,r2,-5744
    9388:	10c00c15 	stw	r3,48(r2)
    938c:	00800074 	movhi	r2,1
    9390:	10ba6404 	addi	r2,r2,-5744
    9394:	10800a17 	ldw	r2,40(r2)
    9398:	10800204 	addi	r2,r2,8
    939c:	10800017 	ldw	r2,0(r2)
    93a0:	10ffffcc 	andi	r3,r2,65535
    93a4:	00800074 	movhi	r2,1
    93a8:	10ba6404 	addi	r2,r2,-5744
    93ac:	10c00f15 	stw	r3,60(r2)
    93b0:	00800074 	movhi	r2,1
    93b4:	10ba6404 	addi	r2,r2,-5744
    93b8:	10800a17 	ldw	r2,40(r2)
    93bc:	10800204 	addi	r2,r2,8
    93c0:	10800017 	ldw	r2,0(r2)
    93c4:	1006d43a 	srli	r3,r2,16
    93c8:	00800074 	movhi	r2,1
    93cc:	10ba6404 	addi	r2,r2,-5744
    93d0:	10c01015 	stw	r3,64(r2)
    93d4:	00800074 	movhi	r2,1
    93d8:	10ba6404 	addi	r2,r2,-5744
    93dc:	10800a17 	ldw	r2,40(r2)
    93e0:	10800304 	addi	r2,r2,12
    93e4:	10800017 	ldw	r2,0(r2)
    93e8:	1005d07a 	srai	r2,r2,1
    93ec:	10c0004c 	andi	r3,r2,1
    93f0:	00800074 	movhi	r2,1
    93f4:	10ba6404 	addi	r2,r2,-5744
    93f8:	10c00d15 	stw	r3,52(r2)
    93fc:	00800074 	movhi	r2,1
    9400:	10ba6404 	addi	r2,r2,-5744
    9404:	10800a17 	ldw	r2,40(r2)
    9408:	10800304 	addi	r2,r2,12
    940c:	10800017 	ldw	r2,0(r2)
    9410:	1005d13a 	srai	r2,r2,4
    9414:	10c003cc 	andi	r3,r2,15
    9418:	00800074 	movhi	r2,1
    941c:	10ba6404 	addi	r2,r2,-5744
    9420:	10c00e15 	stw	r3,56(r2)
    9424:	00800074 	movhi	r2,1
    9428:	10ba6404 	addi	r2,r2,-5744
    942c:	10800a17 	ldw	r2,40(r2)
    9430:	10800304 	addi	r2,r2,12
    9434:	10800017 	ldw	r2,0(r2)
    9438:	1005d43a 	srai	r2,r2,16
    943c:	e0bfff05 	stb	r2,-4(fp)
    9440:	00800074 	movhi	r2,1
    9444:	10ba6404 	addi	r2,r2,-5744
    9448:	10800a17 	ldw	r2,40(r2)
    944c:	10800304 	addi	r2,r2,12
    9450:	10800017 	ldw	r2,0(r2)
    9454:	1004d63a 	srli	r2,r2,24
    9458:	e0bfff45 	stb	r2,-3(fp)
    945c:	00800074 	movhi	r2,1
    9460:	10ba6404 	addi	r2,r2,-5744
    9464:	10800e17 	ldw	r2,56(r2)
    9468:	10800058 	cmpnei	r2,r2,1
    946c:	1000041e 	bne	r2,zero,9480 <alt_sys_init+0x314>
    9470:	00800074 	movhi	r2,1
    9474:	10ba6404 	addi	r2,r2,-5744
    9478:	10001115 	stw	zero,68(r2)
    947c:	00000e06 	br	94b8 <alt_sys_init+0x34c>
    9480:	00800074 	movhi	r2,1
    9484:	10ba6404 	addi	r2,r2,-5744
    9488:	10800e17 	ldw	r2,56(r2)
    948c:	10800098 	cmpnei	r2,r2,2
    9490:	1000051e 	bne	r2,zero,94a8 <alt_sys_init+0x33c>
    9494:	00800074 	movhi	r2,1
    9498:	10ba6404 	addi	r2,r2,-5744
    949c:	00c00044 	movi	r3,1
    94a0:	10c01115 	stw	r3,68(r2)
    94a4:	00000406 	br	94b8 <alt_sys_init+0x34c>
    94a8:	00800074 	movhi	r2,1
    94ac:	10ba6404 	addi	r2,r2,-5744
    94b0:	00c00084 	movi	r3,2
    94b4:	10c01115 	stw	r3,68(r2)
    94b8:	e0bfff03 	ldbu	r2,-4(fp)
    94bc:	00c00804 	movi	r3,32
    94c0:	1885c83a 	sub	r2,r3,r2
    94c4:	00ffffc4 	movi	r3,-1
    94c8:	1886d83a 	srl	r3,r3,r2
    94cc:	00800074 	movhi	r2,1
    94d0:	10ba6404 	addi	r2,r2,-5744
    94d4:	10c01215 	stw	r3,72(r2)
    94d8:	e0ffff03 	ldbu	r3,-4(fp)
    94dc:	00800074 	movhi	r2,1
    94e0:	10ba6404 	addi	r2,r2,-5744
    94e4:	10801117 	ldw	r2,68(r2)
    94e8:	1887883a 	add	r3,r3,r2
    94ec:	00800074 	movhi	r2,1
    94f0:	10ba6404 	addi	r2,r2,-5744
    94f4:	10c01315 	stw	r3,76(r2)
    94f8:	e0bfff43 	ldbu	r2,-3(fp)
    94fc:	00c00804 	movi	r3,32
    9500:	1885c83a 	sub	r2,r3,r2
    9504:	00ffffc4 	movi	r3,-1
    9508:	1886d83a 	srl	r3,r3,r2
    950c:	00800074 	movhi	r2,1
    9510:	10ba6404 	addi	r2,r2,-5744
    9514:	10c01415 	stw	r3,80(r2)
    9518:	01000074 	movhi	r4,1
    951c:	213a6404 	addi	r4,r4,-5744
    9520:	00091000 	call	9100 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
    9524:	01000074 	movhi	r4,1
    9528:	213a7904 	addi	r4,r4,-5660
    952c:	00091000 	call	9100 <alt_dev_reg>
}
    9530:	e037883a 	mov	sp,fp
    9534:	dfc00117 	ldw	ra,4(sp)
    9538:	df000017 	ldw	fp,0(sp)
    953c:	dec00204 	addi	sp,sp,8
    9540:	f800283a 	ret

00009544 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    9544:	defffa04 	addi	sp,sp,-24
    9548:	dfc00515 	stw	ra,20(sp)
    954c:	df000415 	stw	fp,16(sp)
    9550:	df000404 	addi	fp,sp,16
    9554:	e13ffd15 	stw	r4,-12(fp)
    9558:	e17ffe15 	stw	r5,-8(fp)
    955c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9560:	e0bffd17 	ldw	r2,-12(fp)
    9564:	10800017 	ldw	r2,0(r2)
    9568:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    956c:	e0bffc17 	ldw	r2,-16(fp)
    9570:	10c00a04 	addi	r3,r2,40
    9574:	e0bffd17 	ldw	r2,-12(fp)
    9578:	10800217 	ldw	r2,8(r2)
    957c:	1809883a 	mov	r4,r3
    9580:	e17ffe17 	ldw	r5,-8(fp)
    9584:	e1bfff17 	ldw	r6,-4(fp)
    9588:	100f883a 	mov	r7,r2
    958c:	0009cf40 	call	9cf4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    9590:	e037883a 	mov	sp,fp
    9594:	dfc00117 	ldw	ra,4(sp)
    9598:	df000017 	ldw	fp,0(sp)
    959c:	dec00204 	addi	sp,sp,8
    95a0:	f800283a 	ret

000095a4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    95a4:	defffa04 	addi	sp,sp,-24
    95a8:	dfc00515 	stw	ra,20(sp)
    95ac:	df000415 	stw	fp,16(sp)
    95b0:	df000404 	addi	fp,sp,16
    95b4:	e13ffd15 	stw	r4,-12(fp)
    95b8:	e17ffe15 	stw	r5,-8(fp)
    95bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    95c0:	e0bffd17 	ldw	r2,-12(fp)
    95c4:	10800017 	ldw	r2,0(r2)
    95c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    95cc:	e0bffc17 	ldw	r2,-16(fp)
    95d0:	10c00a04 	addi	r3,r2,40
    95d4:	e0bffd17 	ldw	r2,-12(fp)
    95d8:	10800217 	ldw	r2,8(r2)
    95dc:	1809883a 	mov	r4,r3
    95e0:	e17ffe17 	ldw	r5,-8(fp)
    95e4:	e1bfff17 	ldw	r6,-4(fp)
    95e8:	100f883a 	mov	r7,r2
    95ec:	0009fa80 	call	9fa8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    95f0:	e037883a 	mov	sp,fp
    95f4:	dfc00117 	ldw	ra,4(sp)
    95f8:	df000017 	ldw	fp,0(sp)
    95fc:	dec00204 	addi	sp,sp,8
    9600:	f800283a 	ret

00009604 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    9604:	defffc04 	addi	sp,sp,-16
    9608:	dfc00315 	stw	ra,12(sp)
    960c:	df000215 	stw	fp,8(sp)
    9610:	df000204 	addi	fp,sp,8
    9614:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9618:	e0bfff17 	ldw	r2,-4(fp)
    961c:	10800017 	ldw	r2,0(r2)
    9620:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    9624:	e0bffe17 	ldw	r2,-8(fp)
    9628:	10c00a04 	addi	r3,r2,40
    962c:	e0bfff17 	ldw	r2,-4(fp)
    9630:	10800217 	ldw	r2,8(r2)
    9634:	1809883a 	mov	r4,r3
    9638:	100b883a 	mov	r5,r2
    963c:	0009ba00 	call	9ba0 <altera_avalon_jtag_uart_close>
}
    9640:	e037883a 	mov	sp,fp
    9644:	dfc00117 	ldw	ra,4(sp)
    9648:	df000017 	ldw	fp,0(sp)
    964c:	dec00204 	addi	sp,sp,8
    9650:	f800283a 	ret

00009654 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    9654:	defffa04 	addi	sp,sp,-24
    9658:	dfc00515 	stw	ra,20(sp)
    965c:	df000415 	stw	fp,16(sp)
    9660:	df000404 	addi	fp,sp,16
    9664:	e13ffd15 	stw	r4,-12(fp)
    9668:	e17ffe15 	stw	r5,-8(fp)
    966c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    9670:	e0bffd17 	ldw	r2,-12(fp)
    9674:	10800017 	ldw	r2,0(r2)
    9678:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    967c:	e0bffc17 	ldw	r2,-16(fp)
    9680:	10800a04 	addi	r2,r2,40
    9684:	1009883a 	mov	r4,r2
    9688:	e17ffe17 	ldw	r5,-8(fp)
    968c:	e1bfff17 	ldw	r6,-4(fp)
    9690:	0009c080 	call	9c08 <altera_avalon_jtag_uart_ioctl>
}
    9694:	e037883a 	mov	sp,fp
    9698:	dfc00117 	ldw	ra,4(sp)
    969c:	df000017 	ldw	fp,0(sp)
    96a0:	dec00204 	addi	sp,sp,8
    96a4:	f800283a 	ret

000096a8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    96a8:	defff104 	addi	sp,sp,-60
    96ac:	dfc00e15 	stw	ra,56(sp)
    96b0:	df000d15 	stw	fp,52(sp)
    96b4:	df000d04 	addi	fp,sp,52
    96b8:	e13ff915 	stw	r4,-28(fp)
    96bc:	e17ffa15 	stw	r5,-24(fp)
    96c0:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
    96c4:	e0bff917 	ldw	r2,-28(fp)
    96c8:	10800c04 	addi	r2,r2,48
    96cc:	e0bff315 	stw	r2,-52(fp)
    96d0:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
    96d4:	e0fff40b 	ldhu	r3,-48(fp)
    96d8:	e0bff884 	addi	r2,fp,-30
    96dc:	1809883a 	mov	r4,r3
    96e0:	100b883a 	mov	r5,r2
    96e4:	00038f40 	call	38f4 <OSFlagCreate>
    96e8:	1007883a 	mov	r3,r2
    96ec:	e0bff317 	ldw	r2,-52(fp)
    96f0:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
    96f4:	e0bff917 	ldw	r2,-28(fp)
    96f8:	10800a04 	addi	r2,r2,40
    96fc:	e0bff515 	stw	r2,-44(fp)
    9700:	00800044 	movi	r2,1
    9704:	e0bff60d 	sth	r2,-40(fp)
    9708:	e0bff60b 	ldhu	r2,-40(fp)
    970c:	1009883a 	mov	r4,r2
    9710:	000684c0 	call	684c <OSSemCreate>
    9714:	1007883a 	mov	r3,r2
    9718:	e0bff517 	ldw	r2,-44(fp)
    971c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
    9720:	e0bff917 	ldw	r2,-28(fp)
    9724:	10800b04 	addi	r2,r2,44
    9728:	e0bff715 	stw	r2,-36(fp)
    972c:	00800044 	movi	r2,1
    9730:	e0bff80d 	sth	r2,-32(fp)
    9734:	e0bff80b 	ldhu	r2,-32(fp)
    9738:	1009883a 	mov	r4,r2
    973c:	000684c0 	call	684c <OSSemCreate>
    9740:	1007883a 	mov	r3,r2
    9744:	e0bff717 	ldw	r2,-36(fp)
    9748:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    974c:	e0bff917 	ldw	r2,-28(fp)
    9750:	00c00044 	movi	r3,1
    9754:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    9758:	e0bff917 	ldw	r2,-28(fp)
    975c:	10800017 	ldw	r2,0(r2)
    9760:	10800104 	addi	r2,r2,4
    9764:	1007883a 	mov	r3,r2
    9768:	e0bff917 	ldw	r2,-28(fp)
    976c:	10800817 	ldw	r2,32(r2)
    9770:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    9774:	e0bffb17 	ldw	r2,-20(fp)
    9778:	1009883a 	mov	r4,r2
    977c:	e17ff917 	ldw	r5,-28(fp)
    9780:	01800074 	movhi	r6,1
    9784:	31a5fa04 	addi	r6,r6,-26648
    9788:	000bf340 	call	bf34 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    978c:	e0bff917 	ldw	r2,-28(fp)
    9790:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    9794:	e0bff917 	ldw	r2,-28(fp)
    9798:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    979c:	00800074 	movhi	r2,1
    97a0:	1082df04 	addi	r2,r2,2940
    97a4:	10800017 	ldw	r2,0(r2)
    97a8:	1809883a 	mov	r4,r3
    97ac:	100b883a 	mov	r5,r2
    97b0:	01800074 	movhi	r6,1
    97b4:	31a6a404 	addi	r6,r6,-25968
    97b8:	e1fff917 	ldw	r7,-28(fp)
    97bc:	000b8e80 	call	b8e8 <alt_alarm_start>
    97c0:	1000040e 	bge	r2,zero,97d4 <altera_avalon_jtag_uart_init+0x12c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    97c4:	e0fff917 	ldw	r3,-28(fp)
    97c8:	00a00034 	movhi	r2,32768
    97cc:	10bfffc4 	addi	r2,r2,-1
    97d0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    97d4:	e037883a 	mov	sp,fp
    97d8:	dfc00117 	ldw	ra,4(sp)
    97dc:	df000017 	ldw	fp,0(sp)
    97e0:	dec00204 	addi	sp,sp,8
    97e4:	f800283a 	ret

000097e8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    97e8:	defff104 	addi	sp,sp,-60
    97ec:	dfc00e15 	stw	ra,56(sp)
    97f0:	df000d15 	stw	fp,52(sp)
    97f4:	df000d04 	addi	fp,sp,52
    97f8:	e13ffe15 	stw	r4,-8(fp)
    97fc:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    9800:	e0bffe17 	ldw	r2,-8(fp)
    9804:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
    9808:	e0bff517 	ldw	r2,-44(fp)
    980c:	10800017 	ldw	r2,0(r2)
    9810:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    9814:	e0bff617 	ldw	r2,-40(fp)
    9818:	10800104 	addi	r2,r2,4
    981c:	10800037 	ldwio	r2,0(r2)
    9820:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    9824:	e0bff717 	ldw	r2,-36(fp)
    9828:	1080c00c 	andi	r2,r2,768
    982c:	1000011e 	bne	r2,zero,9834 <altera_avalon_jtag_uart_irq+0x4c>
      break;
    9830:	00009206 	br	9a7c <altera_avalon_jtag_uart_irq+0x294>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    9834:	e0bff717 	ldw	r2,-36(fp)
    9838:	1080400c 	andi	r2,r2,256
    983c:	10004726 	beq	r2,zero,995c <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    9840:	00800074 	movhi	r2,1
    9844:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    9848:	e0bff517 	ldw	r2,-44(fp)
    984c:	10800d17 	ldw	r2,52(r2)
    9850:	10800044 	addi	r2,r2,1
    9854:	1081ffcc 	andi	r2,r2,2047
    9858:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
    985c:	e0bff517 	ldw	r2,-44(fp)
    9860:	10c00e17 	ldw	r3,56(r2)
    9864:	e0bff817 	ldw	r2,-32(fp)
    9868:	1880011e 	bne	r3,r2,9870 <altera_avalon_jtag_uart_irq+0x88>
          break;
    986c:	00002906 	br	9914 <altera_avalon_jtag_uart_irq+0x12c>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    9870:	e0bff617 	ldw	r2,-40(fp)
    9874:	10800037 	ldwio	r2,0(r2)
    9878:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    987c:	e0bff317 	ldw	r2,-52(fp)
    9880:	10a0000c 	andi	r2,r2,32768
    9884:	1000011e 	bne	r2,zero,988c <altera_avalon_jtag_uart_irq+0xa4>
          break;
    9888:	00002206 	br	9914 <altera_avalon_jtag_uart_irq+0x12c>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    988c:	e0bff517 	ldw	r2,-44(fp)
    9890:	10800d17 	ldw	r2,52(r2)
    9894:	e0fff317 	ldw	r3,-52(fp)
    9898:	1809883a 	mov	r4,r3
    989c:	e0fff517 	ldw	r3,-44(fp)
    98a0:	1885883a 	add	r2,r3,r2
    98a4:	10801104 	addi	r2,r2,68
    98a8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    98ac:	e0bff517 	ldw	r2,-44(fp)
    98b0:	10800d17 	ldw	r2,52(r2)
    98b4:	10800044 	addi	r2,r2,1
    98b8:	10c1ffcc 	andi	r3,r2,2047
    98bc:	e0bff517 	ldw	r2,-44(fp)
    98c0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
    98c4:	e0bff517 	ldw	r2,-44(fp)
    98c8:	10800c17 	ldw	r2,48(r2)
    98cc:	e0bff915 	stw	r2,-28(fp)
    98d0:	00800044 	movi	r2,1
    98d4:	e0bffa0d 	sth	r2,-24(fp)
    98d8:	00800044 	movi	r2,1
    98dc:	e0bffa85 	stb	r2,-22(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    98e0:	00800074 	movhi	r2,1
    98e4:	1082c944 	addi	r2,r2,2853
    98e8:	10800003 	ldbu	r2,0(r2)
    98ec:	10803fcc 	andi	r2,r2,255
    98f0:	103fd526 	beq	r2,zero,9848 <altera_avalon_jtag_uart_irq+0x60>
  {
    OSFlagPost (group, flags, opt, &err);
    98f4:	e17ffa0b 	ldhu	r5,-24(fp)
    98f8:	e0fffa83 	ldbu	r3,-22(fp)
    98fc:	e0bffcc4 	addi	r2,fp,-13
    9900:	e13ff917 	ldw	r4,-28(fp)
    9904:	180d883a 	mov	r6,r3
    9908:	100f883a 	mov	r7,r2
    990c:	00045640 	call	4564 <OSFlagPost>
      }
    9910:	003fcd06 	br	9848 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    9914:	e0bff317 	ldw	r2,-52(fp)
    9918:	10bfffec 	andhi	r2,r2,65535
    991c:	10000f26 	beq	r2,zero,995c <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    9920:	e0bff517 	ldw	r2,-44(fp)
    9924:	10c00817 	ldw	r3,32(r2)
    9928:	00bfff84 	movi	r2,-2
    992c:	1886703a 	and	r3,r3,r2
    9930:	e0bff517 	ldw	r2,-44(fp)
    9934:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    9938:	e0bff617 	ldw	r2,-40(fp)
    993c:	10800104 	addi	r2,r2,4
    9940:	1007883a 	mov	r3,r2
    9944:	e0bff517 	ldw	r2,-44(fp)
    9948:	10800817 	ldw	r2,32(r2)
    994c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    9950:	e0bff617 	ldw	r2,-40(fp)
    9954:	10800104 	addi	r2,r2,4
    9958:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    995c:	e0bff717 	ldw	r2,-36(fp)
    9960:	1080800c 	andi	r2,r2,512
    9964:	10004426 	beq	r2,zero,9a78 <altera_avalon_jtag_uart_irq+0x290>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    9968:	e0bff717 	ldw	r2,-36(fp)
    996c:	1004d43a 	srli	r2,r2,16
    9970:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    9974:	00002706 	br	9a14 <altera_avalon_jtag_uart_irq+0x22c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    9978:	e0bff617 	ldw	r2,-40(fp)
    997c:	e0fff517 	ldw	r3,-44(fp)
    9980:	18c01017 	ldw	r3,64(r3)
    9984:	e13ff517 	ldw	r4,-44(fp)
    9988:	20c7883a 	add	r3,r4,r3
    998c:	18c21104 	addi	r3,r3,2116
    9990:	18c00003 	ldbu	r3,0(r3)
    9994:	18c03fcc 	andi	r3,r3,255
    9998:	18c0201c 	xori	r3,r3,128
    999c:	18ffe004 	addi	r3,r3,-128
    99a0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    99a4:	e0bff517 	ldw	r2,-44(fp)
    99a8:	10801017 	ldw	r2,64(r2)
    99ac:	10800044 	addi	r2,r2,1
    99b0:	10c1ffcc 	andi	r3,r2,2047
    99b4:	e0bff517 	ldw	r2,-44(fp)
    99b8:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
    99bc:	e0bff517 	ldw	r2,-44(fp)
    99c0:	10800c17 	ldw	r2,48(r2)
    99c4:	e0bffb15 	stw	r2,-20(fp)
    99c8:	00800084 	movi	r2,2
    99cc:	e0bffc0d 	sth	r2,-16(fp)
    99d0:	00800044 	movi	r2,1
    99d4:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    99d8:	00800074 	movhi	r2,1
    99dc:	1082c944 	addi	r2,r2,2853
    99e0:	10800003 	ldbu	r2,0(r2)
    99e4:	10803fcc 	andi	r2,r2,255
    99e8:	10000726 	beq	r2,zero,9a08 <altera_avalon_jtag_uart_irq+0x220>
  {
    OSFlagPost (group, flags, opt, &err);
    99ec:	e17ffc0b 	ldhu	r5,-16(fp)
    99f0:	e0fffc83 	ldbu	r3,-14(fp)
    99f4:	e0bffd04 	addi	r2,fp,-12
    99f8:	e13ffb17 	ldw	r4,-20(fp)
    99fc:	180d883a 	mov	r6,r3
    9a00:	100f883a 	mov	r7,r2
    9a04:	00045640 	call	4564 <OSFlagPost>

        space--;
    9a08:	e0bff417 	ldw	r2,-48(fp)
    9a0c:	10bfffc4 	addi	r2,r2,-1
    9a10:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    9a14:	e0bff417 	ldw	r2,-48(fp)
    9a18:	10000526 	beq	r2,zero,9a30 <altera_avalon_jtag_uart_irq+0x248>
    9a1c:	e0bff517 	ldw	r2,-44(fp)
    9a20:	10c01017 	ldw	r3,64(r2)
    9a24:	e0bff517 	ldw	r2,-44(fp)
    9a28:	10800f17 	ldw	r2,60(r2)
    9a2c:	18bfd21e 	bne	r3,r2,9978 <altera_avalon_jtag_uart_irq+0x190>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    9a30:	e0bff417 	ldw	r2,-48(fp)
    9a34:	10001026 	beq	r2,zero,9a78 <altera_avalon_jtag_uart_irq+0x290>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    9a38:	e0bff517 	ldw	r2,-44(fp)
    9a3c:	10c00817 	ldw	r3,32(r2)
    9a40:	00bfff44 	movi	r2,-3
    9a44:	1886703a 	and	r3,r3,r2
    9a48:	e0bff517 	ldw	r2,-44(fp)
    9a4c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    9a50:	e0bff517 	ldw	r2,-44(fp)
    9a54:	10800017 	ldw	r2,0(r2)
    9a58:	10800104 	addi	r2,r2,4
    9a5c:	1007883a 	mov	r3,r2
    9a60:	e0bff517 	ldw	r2,-44(fp)
    9a64:	10800817 	ldw	r2,32(r2)
    9a68:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    9a6c:	e0bff617 	ldw	r2,-40(fp)
    9a70:	10800104 	addi	r2,r2,4
    9a74:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    9a78:	003f6606 	br	9814 <altera_avalon_jtag_uart_irq+0x2c>
}
    9a7c:	e037883a 	mov	sp,fp
    9a80:	dfc00117 	ldw	ra,4(sp)
    9a84:	df000017 	ldw	fp,0(sp)
    9a88:	dec00204 	addi	sp,sp,8
    9a8c:	f800283a 	ret

00009a90 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    9a90:	defff904 	addi	sp,sp,-28
    9a94:	dfc00615 	stw	ra,24(sp)
    9a98:	df000515 	stw	fp,20(sp)
    9a9c:	df000504 	addi	fp,sp,20
    9aa0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    9aa4:	e0bfff17 	ldw	r2,-4(fp)
    9aa8:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    9aac:	e0bffb17 	ldw	r2,-20(fp)
    9ab0:	10800017 	ldw	r2,0(r2)
    9ab4:	10800104 	addi	r2,r2,4
    9ab8:	10800037 	ldwio	r2,0(r2)
    9abc:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    9ac0:	e0bffc17 	ldw	r2,-16(fp)
    9ac4:	1081000c 	andi	r2,r2,1024
    9ac8:	10000b26 	beq	r2,zero,9af8 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    9acc:	e0bffb17 	ldw	r2,-20(fp)
    9ad0:	10800017 	ldw	r2,0(r2)
    9ad4:	10800104 	addi	r2,r2,4
    9ad8:	1007883a 	mov	r3,r2
    9adc:	e0bffb17 	ldw	r2,-20(fp)
    9ae0:	10800817 	ldw	r2,32(r2)
    9ae4:	10810014 	ori	r2,r2,1024
    9ae8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    9aec:	e0bffb17 	ldw	r2,-20(fp)
    9af0:	10000915 	stw	zero,36(r2)
    9af4:	00002206 	br	9b80 <altera_avalon_jtag_uart_timeout+0xf0>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    9af8:	e0bffb17 	ldw	r2,-20(fp)
    9afc:	10c00917 	ldw	r3,36(r2)
    9b00:	00a00034 	movhi	r2,32768
    9b04:	10bfff04 	addi	r2,r2,-4
    9b08:	10c01d36 	bltu	r2,r3,9b80 <altera_avalon_jtag_uart_timeout+0xf0>
    sp->host_inactive++;
    9b0c:	e0bffb17 	ldw	r2,-20(fp)
    9b10:	10800917 	ldw	r2,36(r2)
    9b14:	10c00044 	addi	r3,r2,1
    9b18:	e0bffb17 	ldw	r2,-20(fp)
    9b1c:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
    9b20:	e0bffb17 	ldw	r2,-20(fp)
    9b24:	10c00917 	ldw	r3,36(r2)
    9b28:	e0bffb17 	ldw	r2,-20(fp)
    9b2c:	10800117 	ldw	r2,4(r2)
    9b30:	18801336 	bltu	r3,r2,9b80 <altera_avalon_jtag_uart_timeout+0xf0>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    9b34:	e0bffb17 	ldw	r2,-20(fp)
    9b38:	10800c17 	ldw	r2,48(r2)
    9b3c:	e0bffd15 	stw	r2,-12(fp)
    9b40:	00800104 	movi	r2,4
    9b44:	e0bffe0d 	sth	r2,-8(fp)
    9b48:	00800044 	movi	r2,1
    9b4c:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    9b50:	00800074 	movhi	r2,1
    9b54:	1082c944 	addi	r2,r2,2853
    9b58:	10800003 	ldbu	r2,0(r2)
    9b5c:	10803fcc 	andi	r2,r2,255
    9b60:	10000726 	beq	r2,zero,9b80 <altera_avalon_jtag_uart_timeout+0xf0>
  {
    OSFlagPost (group, flags, opt, &err);
    9b64:	e17ffe0b 	ldhu	r5,-8(fp)
    9b68:	e0fffe83 	ldbu	r3,-6(fp)
    9b6c:	e0bffec4 	addi	r2,fp,-5
    9b70:	e13ffd17 	ldw	r4,-12(fp)
    9b74:	180d883a 	mov	r6,r3
    9b78:	100f883a 	mov	r7,r2
    9b7c:	00045640 	call	4564 <OSFlagPost>
    9b80:	00800074 	movhi	r2,1
    9b84:	1082df04 	addi	r2,r2,2940
    9b88:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
    9b8c:	e037883a 	mov	sp,fp
    9b90:	dfc00117 	ldw	ra,4(sp)
    9b94:	df000017 	ldw	fp,0(sp)
    9b98:	dec00204 	addi	sp,sp,8
    9b9c:	f800283a 	ret

00009ba0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    9ba0:	defffd04 	addi	sp,sp,-12
    9ba4:	df000215 	stw	fp,8(sp)
    9ba8:	df000204 	addi	fp,sp,8
    9bac:	e13ffe15 	stw	r4,-8(fp)
    9bb0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    9bb4:	00000506 	br	9bcc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    9bb8:	e0bfff17 	ldw	r2,-4(fp)
    9bbc:	1090000c 	andi	r2,r2,16384
    9bc0:	10000226 	beq	r2,zero,9bcc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    9bc4:	00bffd44 	movi	r2,-11
    9bc8:	00000b06 	br	9bf8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    9bcc:	e0bffe17 	ldw	r2,-8(fp)
    9bd0:	10c01017 	ldw	r3,64(r2)
    9bd4:	e0bffe17 	ldw	r2,-8(fp)
    9bd8:	10800f17 	ldw	r2,60(r2)
    9bdc:	18800526 	beq	r3,r2,9bf4 <altera_avalon_jtag_uart_close+0x54>
    9be0:	e0bffe17 	ldw	r2,-8(fp)
    9be4:	10c00917 	ldw	r3,36(r2)
    9be8:	e0bffe17 	ldw	r2,-8(fp)
    9bec:	10800117 	ldw	r2,4(r2)
    9bf0:	18bff136 	bltu	r3,r2,9bb8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    9bf4:	0005883a 	mov	r2,zero
}
    9bf8:	e037883a 	mov	sp,fp
    9bfc:	df000017 	ldw	fp,0(sp)
    9c00:	dec00104 	addi	sp,sp,4
    9c04:	f800283a 	ret

00009c08 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    9c08:	defffa04 	addi	sp,sp,-24
    9c0c:	df000515 	stw	fp,20(sp)
    9c10:	df000504 	addi	fp,sp,20
    9c14:	e13ffd15 	stw	r4,-12(fp)
    9c18:	e17ffe15 	stw	r5,-8(fp)
    9c1c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    9c20:	00bff9c4 	movi	r2,-25
    9c24:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    9c28:	e0bffe17 	ldw	r2,-8(fp)
    9c2c:	10da8060 	cmpeqi	r3,r2,27137
    9c30:	1800031e 	bne	r3,zero,9c40 <altera_avalon_jtag_uart_ioctl+0x38>
    9c34:	109a80a0 	cmpeqi	r2,r2,27138
    9c38:	1000191e 	bne	r2,zero,9ca0 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
    9c3c:	00002806 	br	9ce0 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    9c40:	e0bffd17 	ldw	r2,-12(fp)
    9c44:	10c00117 	ldw	r3,4(r2)
    9c48:	00a00034 	movhi	r2,32768
    9c4c:	10bfffc4 	addi	r2,r2,-1
    9c50:	18801226 	beq	r3,r2,9c9c <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
    9c54:	e0bfff17 	ldw	r2,-4(fp)
    9c58:	10800017 	ldw	r2,0(r2)
    9c5c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    9c60:	e0bffc17 	ldw	r2,-16(fp)
    9c64:	10800090 	cmplti	r2,r2,2
    9c68:	1000061e 	bne	r2,zero,9c84 <altera_avalon_jtag_uart_ioctl+0x7c>
    9c6c:	e0fffc17 	ldw	r3,-16(fp)
    9c70:	00a00034 	movhi	r2,32768
    9c74:	10bfffc4 	addi	r2,r2,-1
    9c78:	18800226 	beq	r3,r2,9c84 <altera_avalon_jtag_uart_ioctl+0x7c>
    9c7c:	e0bffc17 	ldw	r2,-16(fp)
    9c80:	00000206 	br	9c8c <altera_avalon_jtag_uart_ioctl+0x84>
    9c84:	00a00034 	movhi	r2,32768
    9c88:	10bfff84 	addi	r2,r2,-2
    9c8c:	e0fffd17 	ldw	r3,-12(fp)
    9c90:	18800115 	stw	r2,4(r3)
      rc = 0;
    9c94:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    9c98:	00001106 	br	9ce0 <altera_avalon_jtag_uart_ioctl+0xd8>
    9c9c:	00001006 	br	9ce0 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    9ca0:	e0bffd17 	ldw	r2,-12(fp)
    9ca4:	10c00117 	ldw	r3,4(r2)
    9ca8:	00a00034 	movhi	r2,32768
    9cac:	10bfffc4 	addi	r2,r2,-1
    9cb0:	18800a26 	beq	r3,r2,9cdc <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    9cb4:	e0bffd17 	ldw	r2,-12(fp)
    9cb8:	10c00917 	ldw	r3,36(r2)
    9cbc:	e0bffd17 	ldw	r2,-12(fp)
    9cc0:	10800117 	ldw	r2,4(r2)
    9cc4:	1885803a 	cmpltu	r2,r3,r2
    9cc8:	10c03fcc 	andi	r3,r2,255
    9ccc:	e0bfff17 	ldw	r2,-4(fp)
    9cd0:	10c00015 	stw	r3,0(r2)
      rc = 0;
    9cd4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    9cd8:	00000006 	br	9cdc <altera_avalon_jtag_uart_ioctl+0xd4>
    9cdc:	0001883a 	nop

  default:
    break;
  }

  return rc;
    9ce0:	e0bffb17 	ldw	r2,-20(fp)
}
    9ce4:	e037883a 	mov	sp,fp
    9ce8:	df000017 	ldw	fp,0(sp)
    9cec:	dec00104 	addi	sp,sp,4
    9cf0:	f800283a 	ret

00009cf4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    9cf4:	deffec04 	addi	sp,sp,-80
    9cf8:	dfc01315 	stw	ra,76(sp)
    9cfc:	df001215 	stw	fp,72(sp)
    9d00:	df001204 	addi	fp,sp,72
    9d04:	e13ffc15 	stw	r4,-16(fp)
    9d08:	e17ffd15 	stw	r5,-12(fp)
    9d0c:	e1bffe15 	stw	r6,-8(fp)
    9d10:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    9d14:	e0bffd17 	ldw	r2,-12(fp)
    9d18:	e0bfef15 	stw	r2,-68(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
    9d1c:	e0bffc17 	ldw	r2,-16(fp)
    9d20:	10800a17 	ldw	r2,40(r2)
    9d24:	e0bff415 	stw	r2,-48(fp)
    9d28:	e03ff50d 	sth	zero,-44(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
    9d2c:	e0fff50b 	ldhu	r3,-44(fp)
    9d30:	e0bffb04 	addi	r2,fp,-20
    9d34:	e13ff417 	ldw	r4,-48(fp)
    9d38:	180b883a 	mov	r5,r3
    9d3c:	100d883a 	mov	r6,r2
    9d40:	0006bb40 	call	6bb4 <OSSemPend>

  while (space > 0)
    9d44:	00006506 	br	9edc <altera_avalon_jtag_uart_read+0x1e8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    9d48:	e0bffc17 	ldw	r2,-16(fp)
    9d4c:	10800d17 	ldw	r2,52(r2)
    9d50:	e0bff115 	stw	r2,-60(fp)
      out = sp->rx_out;
    9d54:	e0bffc17 	ldw	r2,-16(fp)
    9d58:	10800e17 	ldw	r2,56(r2)
    9d5c:	e0bff215 	stw	r2,-56(fp)

      if (in >= out)
    9d60:	e0fff117 	ldw	r3,-60(fp)
    9d64:	e0bff217 	ldw	r2,-56(fp)
    9d68:	18800536 	bltu	r3,r2,9d80 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
    9d6c:	e0fff117 	ldw	r3,-60(fp)
    9d70:	e0bff217 	ldw	r2,-56(fp)
    9d74:	1885c83a 	sub	r2,r3,r2
    9d78:	e0bff015 	stw	r2,-64(fp)
    9d7c:	00000406 	br	9d90 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    9d80:	00c20004 	movi	r3,2048
    9d84:	e0bff217 	ldw	r2,-56(fp)
    9d88:	1885c83a 	sub	r2,r3,r2
    9d8c:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
    9d90:	e0bff017 	ldw	r2,-64(fp)
    9d94:	1000011e 	bne	r2,zero,9d9c <altera_avalon_jtag_uart_read+0xa8>
        break; /* No more data available */
    9d98:	00001d06 	br	9e10 <altera_avalon_jtag_uart_read+0x11c>

      if (n > space)
    9d9c:	e0fffe17 	ldw	r3,-8(fp)
    9da0:	e0bff017 	ldw	r2,-64(fp)
    9da4:	1880022e 	bgeu	r3,r2,9db0 <altera_avalon_jtag_uart_read+0xbc>
        n = space;
    9da8:	e0bffe17 	ldw	r2,-8(fp)
    9dac:	e0bff015 	stw	r2,-64(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    9db0:	e0bff217 	ldw	r2,-56(fp)
    9db4:	10801104 	addi	r2,r2,68
    9db8:	e0fffc17 	ldw	r3,-16(fp)
    9dbc:	1885883a 	add	r2,r3,r2
    9dc0:	e13fef17 	ldw	r4,-68(fp)
    9dc4:	100b883a 	mov	r5,r2
    9dc8:	e1bff017 	ldw	r6,-64(fp)
    9dcc:	000cca80 	call	cca8 <memcpy>
      ptr   += n;
    9dd0:	e0ffef17 	ldw	r3,-68(fp)
    9dd4:	e0bff017 	ldw	r2,-64(fp)
    9dd8:	1885883a 	add	r2,r3,r2
    9ddc:	e0bfef15 	stw	r2,-68(fp)
      space -= n;
    9de0:	e0fffe17 	ldw	r3,-8(fp)
    9de4:	e0bff017 	ldw	r2,-64(fp)
    9de8:	1885c83a 	sub	r2,r3,r2
    9dec:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    9df0:	e0fff217 	ldw	r3,-56(fp)
    9df4:	e0bff017 	ldw	r2,-64(fp)
    9df8:	1885883a 	add	r2,r3,r2
    9dfc:	10c1ffcc 	andi	r3,r2,2047
    9e00:	e0bffc17 	ldw	r2,-16(fp)
    9e04:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
    9e08:	e0bffe17 	ldw	r2,-8(fp)
    9e0c:	00bfce16 	blt	zero,r2,9d48 <altera_avalon_jtag_uart_read+0x54>

    /* If we read any data then return it */
    if (ptr != buffer)
    9e10:	e0ffef17 	ldw	r3,-68(fp)
    9e14:	e0bffd17 	ldw	r2,-12(fp)
    9e18:	18800126 	beq	r3,r2,9e20 <altera_avalon_jtag_uart_read+0x12c>
      break;
    9e1c:	00003106 	br	9ee4 <altera_avalon_jtag_uart_read+0x1f0>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    9e20:	e0bfff17 	ldw	r2,-4(fp)
    9e24:	1090000c 	andi	r2,r2,16384
    9e28:	10000126 	beq	r2,zero,9e30 <altera_avalon_jtag_uart_read+0x13c>
      break;
    9e2c:	00002d06 	br	9ee4 <altera_avalon_jtag_uart_read+0x1f0>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
    9e30:	00800074 	movhi	r2,1
    9e34:	1082c944 	addi	r2,r2,2853
    9e38:	10800003 	ldbu	r2,0(r2)
    9e3c:	10803fcc 	andi	r2,r2,255
    9e40:	10800058 	cmpnei	r2,r2,1
    9e44:	1000161e 	bne	r2,zero,9ea0 <altera_avalon_jtag_uart_read+0x1ac>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
    9e48:	e0bffc17 	ldw	r2,-16(fp)
    9e4c:	10800c17 	ldw	r2,48(r2)
    9e50:	e0bff615 	stw	r2,-40(fp)
    9e54:	00800144 	movi	r2,5
    9e58:	e0bff70d 	sth	r2,-36(fp)
    9e5c:	00bfe0c4 	movi	r2,-125
    9e60:	e0bff785 	stb	r2,-34(fp)
    9e64:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    9e68:	00800074 	movhi	r2,1
    9e6c:	1082c944 	addi	r2,r2,2853
    9e70:	10800003 	ldbu	r2,0(r2)
    9e74:	10803fcc 	andi	r2,r2,255
    9e78:	10001326 	beq	r2,zero,9ec8 <altera_avalon_jtag_uart_read+0x1d4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    9e7c:	e17ff70b 	ldhu	r5,-36(fp)
    9e80:	e1bff783 	ldbu	r6,-34(fp)
    9e84:	e0fff80b 	ldhu	r3,-32(fp)
    9e88:	e0bffb44 	addi	r2,fp,-19
    9e8c:	d8800015 	stw	r2,0(sp)
    9e90:	e13ff617 	ldw	r4,-40(fp)
    9e94:	180f883a 	mov	r7,r3
    9e98:	0003f0c0 	call	3f0c <OSFlagPend>
    9e9c:	00000a06 	br	9ec8 <altera_avalon_jtag_uart_read+0x1d4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    9ea0:	0001883a 	nop
    9ea4:	e0bffc17 	ldw	r2,-16(fp)
    9ea8:	10c00d17 	ldw	r3,52(r2)
    9eac:	e0bff117 	ldw	r2,-60(fp)
    9eb0:	1880051e 	bne	r3,r2,9ec8 <altera_avalon_jtag_uart_read+0x1d4>
    9eb4:	e0bffc17 	ldw	r2,-16(fp)
    9eb8:	10c00917 	ldw	r3,36(r2)
    9ebc:	e0bffc17 	ldw	r2,-16(fp)
    9ec0:	10800117 	ldw	r2,4(r2)
    9ec4:	18bff736 	bltu	r3,r2,9ea4 <altera_avalon_jtag_uart_read+0x1b0>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    9ec8:	e0bffc17 	ldw	r2,-16(fp)
    9ecc:	10c00d17 	ldw	r3,52(r2)
    9ed0:	e0bff117 	ldw	r2,-60(fp)
    9ed4:	1880011e 	bne	r3,r2,9edc <altera_avalon_jtag_uart_read+0x1e8>
      break;
    9ed8:	00000206 	br	9ee4 <altera_avalon_jtag_uart_read+0x1f0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    9edc:	e0bffe17 	ldw	r2,-8(fp)
    9ee0:	00bf9916 	blt	zero,r2,9d48 <altera_avalon_jtag_uart_read+0x54>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
    9ee4:	e0bffc17 	ldw	r2,-16(fp)
    9ee8:	10800a17 	ldw	r2,40(r2)
    9eec:	1009883a 	mov	r4,r2
    9ef0:	0006f880 	call	6f88 <OSSemPost>

  if (ptr != buffer)
    9ef4:	e0ffef17 	ldw	r3,-68(fp)
    9ef8:	e0bffd17 	ldw	r2,-12(fp)
    9efc:	18801826 	beq	r3,r2,9f60 <altera_avalon_jtag_uart_read+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9f00:	0005303a 	rdctl	r2,status
    9f04:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9f08:	e0fff917 	ldw	r3,-28(fp)
    9f0c:	00bfff84 	movi	r2,-2
    9f10:	1884703a 	and	r2,r3,r2
    9f14:	1001703a 	wrctl	status,r2
  
  return context;
    9f18:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    9f1c:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    9f20:	e0bffc17 	ldw	r2,-16(fp)
    9f24:	10800817 	ldw	r2,32(r2)
    9f28:	10c00054 	ori	r3,r2,1
    9f2c:	e0bffc17 	ldw	r2,-16(fp)
    9f30:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    9f34:	e0bffc17 	ldw	r2,-16(fp)
    9f38:	10800017 	ldw	r2,0(r2)
    9f3c:	10800104 	addi	r2,r2,4
    9f40:	1007883a 	mov	r3,r2
    9f44:	e0bffc17 	ldw	r2,-16(fp)
    9f48:	10800817 	ldw	r2,32(r2)
    9f4c:	18800035 	stwio	r2,0(r3)
    9f50:	e0bff317 	ldw	r2,-52(fp)
    9f54:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9f58:	e0bffa17 	ldw	r2,-24(fp)
    9f5c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    9f60:	e0ffef17 	ldw	r3,-68(fp)
    9f64:	e0bffd17 	ldw	r2,-12(fp)
    9f68:	18800426 	beq	r3,r2,9f7c <altera_avalon_jtag_uart_read+0x288>
    return ptr - buffer;
    9f6c:	e0ffef17 	ldw	r3,-68(fp)
    9f70:	e0bffd17 	ldw	r2,-12(fp)
    9f74:	1885c83a 	sub	r2,r3,r2
    9f78:	00000606 	br	9f94 <altera_avalon_jtag_uart_read+0x2a0>
  else if (flags & O_NONBLOCK)
    9f7c:	e0bfff17 	ldw	r2,-4(fp)
    9f80:	1090000c 	andi	r2,r2,16384
    9f84:	10000226 	beq	r2,zero,9f90 <altera_avalon_jtag_uart_read+0x29c>
    return -EWOULDBLOCK;
    9f88:	00bffd44 	movi	r2,-11
    9f8c:	00000106 	br	9f94 <altera_avalon_jtag_uart_read+0x2a0>
  else
    return -EIO;
    9f90:	00bffec4 	movi	r2,-5
}
    9f94:	e037883a 	mov	sp,fp
    9f98:	dfc00117 	ldw	ra,4(sp)
    9f9c:	df000017 	ldw	fp,0(sp)
    9fa0:	dec00204 	addi	sp,sp,8
    9fa4:	f800283a 	ret

00009fa8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    9fa8:	deffed04 	addi	sp,sp,-76
    9fac:	dfc01215 	stw	ra,72(sp)
    9fb0:	df001115 	stw	fp,68(sp)
    9fb4:	df001104 	addi	fp,sp,68
    9fb8:	e13ffc15 	stw	r4,-16(fp)
    9fbc:	e17ffd15 	stw	r5,-12(fp)
    9fc0:	e1bffe15 	stw	r6,-8(fp)
    9fc4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    9fc8:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    9fcc:	e0bffd17 	ldw	r2,-12(fp)
    9fd0:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
    9fd4:	e0bffc17 	ldw	r2,-16(fp)
    9fd8:	10800b17 	ldw	r2,44(r2)
    9fdc:	e0bff515 	stw	r2,-44(fp)
    9fe0:	e03ff60d 	sth	zero,-40(fp)
    9fe4:	e0fff60b 	ldhu	r3,-40(fp)
    9fe8:	e0bffbc4 	addi	r2,fp,-17
    9fec:	e13ff517 	ldw	r4,-44(fp)
    9ff0:	180b883a 	mov	r5,r3
    9ff4:	100d883a 	mov	r6,r2
    9ff8:	0006bb40 	call	6bb4 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    9ffc:	00003806 	br	a0e0 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    a000:	e0bffc17 	ldw	r2,-16(fp)
    a004:	10800f17 	ldw	r2,60(r2)
    a008:	e0bff315 	stw	r2,-52(fp)
      out = sp->tx_out;
    a00c:	e0bffc17 	ldw	r2,-16(fp)
    a010:	10801017 	ldw	r2,64(r2)
    a014:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
    a018:	e0fff317 	ldw	r3,-52(fp)
    a01c:	e0bff017 	ldw	r2,-64(fp)
    a020:	1880062e 	bgeu	r3,r2,a03c <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
    a024:	e0fff017 	ldw	r3,-64(fp)
    a028:	e0bff317 	ldw	r2,-52(fp)
    a02c:	1885c83a 	sub	r2,r3,r2
    a030:	10bfffc4 	addi	r2,r2,-1
    a034:	e0bff115 	stw	r2,-60(fp)
    a038:	00000b06 	br	a068 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
    a03c:	e0bff017 	ldw	r2,-64(fp)
    a040:	10000526 	beq	r2,zero,a058 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    a044:	00c20004 	movi	r3,2048
    a048:	e0bff317 	ldw	r2,-52(fp)
    a04c:	1885c83a 	sub	r2,r3,r2
    a050:	e0bff115 	stw	r2,-60(fp)
    a054:	00000406 	br	a068 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    a058:	00c1ffc4 	movi	r3,2047
    a05c:	e0bff317 	ldw	r2,-52(fp)
    a060:	1885c83a 	sub	r2,r3,r2
    a064:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
    a068:	e0bff117 	ldw	r2,-60(fp)
    a06c:	1000011e 	bne	r2,zero,a074 <altera_avalon_jtag_uart_write+0xcc>
        break;
    a070:	00001d06 	br	a0e8 <altera_avalon_jtag_uart_write+0x140>

      if (n > count)
    a074:	e0fffe17 	ldw	r3,-8(fp)
    a078:	e0bff117 	ldw	r2,-60(fp)
    a07c:	1880022e 	bgeu	r3,r2,a088 <altera_avalon_jtag_uart_write+0xe0>
        n = count;
    a080:	e0bffe17 	ldw	r2,-8(fp)
    a084:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    a088:	e0bff317 	ldw	r2,-52(fp)
    a08c:	10821104 	addi	r2,r2,2116
    a090:	e0fffc17 	ldw	r3,-16(fp)
    a094:	1885883a 	add	r2,r3,r2
    a098:	1009883a 	mov	r4,r2
    a09c:	e17ffd17 	ldw	r5,-12(fp)
    a0a0:	e1bff117 	ldw	r6,-60(fp)
    a0a4:	000cca80 	call	cca8 <memcpy>
      ptr   += n;
    a0a8:	e0fffd17 	ldw	r3,-12(fp)
    a0ac:	e0bff117 	ldw	r2,-60(fp)
    a0b0:	1885883a 	add	r2,r3,r2
    a0b4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    a0b8:	e0fffe17 	ldw	r3,-8(fp)
    a0bc:	e0bff117 	ldw	r2,-60(fp)
    a0c0:	1885c83a 	sub	r2,r3,r2
    a0c4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    a0c8:	e0fff317 	ldw	r3,-52(fp)
    a0cc:	e0bff117 	ldw	r2,-60(fp)
    a0d0:	1885883a 	add	r2,r3,r2
    a0d4:	10c1ffcc 	andi	r3,r2,2047
    a0d8:	e0bffc17 	ldw	r2,-16(fp)
    a0dc:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    a0e0:	e0bffe17 	ldw	r2,-8(fp)
    a0e4:	00bfc616 	blt	zero,r2,a000 <altera_avalon_jtag_uart_write+0x58>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a0e8:	0005303a 	rdctl	r2,status
    a0ec:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a0f0:	e0fff717 	ldw	r3,-36(fp)
    a0f4:	00bfff84 	movi	r2,-2
    a0f8:	1884703a 	and	r2,r3,r2
    a0fc:	1001703a 	wrctl	status,r2
  
  return context;
    a100:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    a104:	e0bff415 	stw	r2,-48(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    a108:	e0bffc17 	ldw	r2,-16(fp)
    a10c:	10800817 	ldw	r2,32(r2)
    a110:	10c00094 	ori	r3,r2,2
    a114:	e0bffc17 	ldw	r2,-16(fp)
    a118:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    a11c:	e0bffc17 	ldw	r2,-16(fp)
    a120:	10800017 	ldw	r2,0(r2)
    a124:	10800104 	addi	r2,r2,4
    a128:	1007883a 	mov	r3,r2
    a12c:	e0bffc17 	ldw	r2,-16(fp)
    a130:	10800817 	ldw	r2,32(r2)
    a134:	18800035 	stwio	r2,0(r3)
    a138:	e0bff417 	ldw	r2,-48(fp)
    a13c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a140:	e0bff817 	ldw	r2,-32(fp)
    a144:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    a148:	e0bffe17 	ldw	r2,-8(fp)
    a14c:	00802e0e 	bge	zero,r2,a208 <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
    a150:	e0bfff17 	ldw	r2,-4(fp)
    a154:	1090000c 	andi	r2,r2,16384
    a158:	10000126 	beq	r2,zero,a160 <altera_avalon_jtag_uart_write+0x1b8>
        break;
    a15c:	00002c06 	br	a210 <altera_avalon_jtag_uart_write+0x268>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
    a160:	00800074 	movhi	r2,1
    a164:	1082c944 	addi	r2,r2,2853
    a168:	10800003 	ldbu	r2,0(r2)
    a16c:	10803fcc 	andi	r2,r2,255
    a170:	10800058 	cmpnei	r2,r2,1
    a174:	1000161e 	bne	r2,zero,a1d0 <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
    a178:	e0bffc17 	ldw	r2,-16(fp)
    a17c:	10800c17 	ldw	r2,48(r2)
    a180:	e0bff915 	stw	r2,-28(fp)
    a184:	00800184 	movi	r2,6
    a188:	e0bffa0d 	sth	r2,-24(fp)
    a18c:	00bfe0c4 	movi	r2,-125
    a190:	e0bffa85 	stb	r2,-22(fp)
    a194:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    a198:	00800074 	movhi	r2,1
    a19c:	1082c944 	addi	r2,r2,2853
    a1a0:	10800003 	ldbu	r2,0(r2)
    a1a4:	10803fcc 	andi	r2,r2,255
    a1a8:	10001326 	beq	r2,zero,a1f8 <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    a1ac:	e17ffa0b 	ldhu	r5,-24(fp)
    a1b0:	e1bffa83 	ldbu	r6,-22(fp)
    a1b4:	e0fffb0b 	ldhu	r3,-20(fp)
    a1b8:	e0bffb84 	addi	r2,fp,-18
    a1bc:	d8800015 	stw	r2,0(sp)
    a1c0:	e13ff917 	ldw	r4,-28(fp)
    a1c4:	180f883a 	mov	r7,r3
    a1c8:	0003f0c0 	call	3f0c <OSFlagPend>
    a1cc:	00000a06 	br	a1f8 <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    a1d0:	0001883a 	nop
    a1d4:	e0bffc17 	ldw	r2,-16(fp)
    a1d8:	10c01017 	ldw	r3,64(r2)
    a1dc:	e0bff017 	ldw	r2,-64(fp)
    a1e0:	1880051e 	bne	r3,r2,a1f8 <altera_avalon_jtag_uart_write+0x250>
    a1e4:	e0bffc17 	ldw	r2,-16(fp)
    a1e8:	10c00917 	ldw	r3,36(r2)
    a1ec:	e0bffc17 	ldw	r2,-16(fp)
    a1f0:	10800117 	ldw	r2,4(r2)
    a1f4:	18bff736 	bltu	r3,r2,a1d4 <altera_avalon_jtag_uart_write+0x22c>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    a1f8:	e0bffc17 	ldw	r2,-16(fp)
    a1fc:	10800917 	ldw	r2,36(r2)
    a200:	10000126 	beq	r2,zero,a208 <altera_avalon_jtag_uart_write+0x260>
         break;
    a204:	00000206 	br	a210 <altera_avalon_jtag_uart_write+0x268>
    }
  }
  while (count > 0);
    a208:	e0bffe17 	ldw	r2,-8(fp)
    a20c:	00bf7b16 	blt	zero,r2,9ffc <altera_avalon_jtag_uart_write+0x54>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
    a210:	e0bffc17 	ldw	r2,-16(fp)
    a214:	10800b17 	ldw	r2,44(r2)
    a218:	1009883a 	mov	r4,r2
    a21c:	0006f880 	call	6f88 <OSSemPost>

  if (ptr != start)
    a220:	e0fffd17 	ldw	r3,-12(fp)
    a224:	e0bff217 	ldw	r2,-56(fp)
    a228:	18800426 	beq	r3,r2,a23c <altera_avalon_jtag_uart_write+0x294>
    return ptr - start;
    a22c:	e0fffd17 	ldw	r3,-12(fp)
    a230:	e0bff217 	ldw	r2,-56(fp)
    a234:	1885c83a 	sub	r2,r3,r2
    a238:	00000606 	br	a254 <altera_avalon_jtag_uart_write+0x2ac>
  else if (flags & O_NONBLOCK)
    a23c:	e0bfff17 	ldw	r2,-4(fp)
    a240:	1090000c 	andi	r2,r2,16384
    a244:	10000226 	beq	r2,zero,a250 <altera_avalon_jtag_uart_write+0x2a8>
    return -EWOULDBLOCK;
    a248:	00bffd44 	movi	r2,-11
    a24c:	00000106 	br	a254 <altera_avalon_jtag_uart_write+0x2ac>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    a250:	00bffec4 	movi	r2,-5
}
    a254:	e037883a 	mov	sp,fp
    a258:	dfc00117 	ldw	ra,4(sp)
    a25c:	df000017 	ldw	fp,0(sp)
    a260:	dec00204 	addi	sp,sp,8
    a264:	f800283a 	ret

0000a268 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    a268:	defff904 	addi	sp,sp,-28
    a26c:	dfc00615 	stw	ra,24(sp)
    a270:	df000515 	stw	fp,20(sp)
    a274:	df000504 	addi	fp,sp,20
    a278:	e13ffe15 	stw	r4,-8(fp)
    a27c:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    a280:	0007883a 	mov	r3,zero
    a284:	e0bffe17 	ldw	r2,-8(fp)
    a288:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    a28c:	e0bffe17 	ldw	r2,-8(fp)
    a290:	10800104 	addi	r2,r2,4
    a294:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a298:	0005303a 	rdctl	r2,status
    a29c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a2a0:	e0fffc17 	ldw	r3,-16(fp)
    a2a4:	00bfff84 	movi	r2,-2
    a2a8:	1884703a 	and	r2,r3,r2
    a2ac:	1001703a 	wrctl	status,r2
  
  return context;
    a2b0:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    a2b4:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
    a2b8:	000c4500 	call	c450 <alt_tick>
    a2bc:	e0bffb17 	ldw	r2,-20(fp)
    a2c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a2c4:	e0bffd17 	ldw	r2,-12(fp)
    a2c8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    a2cc:	e037883a 	mov	sp,fp
    a2d0:	dfc00117 	ldw	ra,4(sp)
    a2d4:	df000017 	ldw	fp,0(sp)
    a2d8:	dec00204 	addi	sp,sp,8
    a2dc:	f800283a 	ret

0000a2e0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    a2e0:	defff904 	addi	sp,sp,-28
    a2e4:	dfc00615 	stw	ra,24(sp)
    a2e8:	df000515 	stw	fp,20(sp)
    a2ec:	df000504 	addi	fp,sp,20
    a2f0:	e13ffc15 	stw	r4,-16(fp)
    a2f4:	e17ffd15 	stw	r5,-12(fp)
    a2f8:	e1bffe15 	stw	r6,-8(fp)
    a2fc:	e1ffff15 	stw	r7,-4(fp)
    a300:	e0bfff17 	ldw	r2,-4(fp)
    a304:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    a308:	00800074 	movhi	r2,1
    a30c:	1082df04 	addi	r2,r2,2940
    a310:	10800017 	ldw	r2,0(r2)
    a314:	1000041e 	bne	r2,zero,a328 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    a318:	00800074 	movhi	r2,1
    a31c:	1082df04 	addi	r2,r2,2940
    a320:	e0fffb17 	ldw	r3,-20(fp)
    a324:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    a328:	e0bffc17 	ldw	r2,-16(fp)
    a32c:	10800104 	addi	r2,r2,4
    a330:	00c001c4 	movi	r3,7
    a334:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    a338:	e13ffe17 	ldw	r4,-8(fp)
    a33c:	e17ffc17 	ldw	r5,-16(fp)
    a340:	01800074 	movhi	r6,1
    a344:	31a89a04 	addi	r6,r6,-23960
    a348:	000bf340 	call	bf34 <alt_irq_register>
#endif  
}
    a34c:	e037883a 	mov	sp,fp
    a350:	dfc00117 	ldw	ra,4(sp)
    a354:	df000017 	ldw	fp,0(sp)
    a358:	dec00204 	addi	sp,sp,8
    a35c:	f800283a 	ret

0000a360 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
    a360:	defffc04 	addi	sp,sp,-16
    a364:	df000315 	stw	fp,12(sp)
    a368:	df000304 	addi	fp,sp,12
    a36c:	e13ffe15 	stw	r4,-8(fp)
    a370:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
    a374:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
    a378:	e0bfff17 	ldw	r2,-4(fp)
    a37c:	1000061e 	bne	r2,zero,a398 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
    a380:	e0bffe17 	ldw	r2,-8(fp)
    a384:	1007883a 	mov	r3,r2
    a388:	e0bffd03 	ldbu	r2,-12(fp)
    a38c:	1884b03a 	or	r2,r3,r2
    a390:	e0bffd05 	stb	r2,-12(fp)
    a394:	00000806 	br	a3b8 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
    a398:	e0bffe17 	ldw	r2,-8(fp)
    a39c:	1007883a 	mov	r3,r2
    a3a0:	e0bffd03 	ldbu	r2,-12(fp)
    a3a4:	1884b03a 	or	r2,r3,r2
    a3a8:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
    a3ac:	e0bffd03 	ldbu	r2,-12(fp)
    a3b0:	10801014 	ori	r2,r2,64
    a3b4:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    a3b8:	e0fffd03 	ldbu	r3,-12(fp)
    a3bc:	00bfe004 	movi	r2,-128
    a3c0:	1884b03a 	or	r2,r3,r2
}
    a3c4:	e037883a 	mov	sp,fp
    a3c8:	df000017 	ldw	fp,0(sp)
    a3cc:	dec00104 	addi	sp,sp,4
    a3d0:	f800283a 	ret

0000a3d4 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
    a3d4:	defffd04 	addi	sp,sp,-12
    a3d8:	df000215 	stw	fp,8(sp)
    a3dc:	df000204 	addi	fp,sp,8
    a3e0:	e13ffe15 	stw	r4,-8(fp)
    a3e4:	2805883a 	mov	r2,r5
    a3e8:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    a3ec:	e0bffe17 	ldw	r2,-8(fp)
    a3f0:	10800a17 	ldw	r2,40(r2)
    a3f4:	1007883a 	mov	r3,r2
    a3f8:	e0bfff03 	ldbu	r2,-4(fp)
    a3fc:	18800025 	stbio	r2,0(r3)
}
    a400:	e037883a 	mov	sp,fp
    a404:	df000017 	ldw	fp,0(sp)
    a408:	dec00104 	addi	sp,sp,4
    a40c:	f800283a 	ret

0000a410 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
    a410:	defffe04 	addi	sp,sp,-8
    a414:	df000115 	stw	fp,4(sp)
    a418:	df000104 	addi	fp,sp,4
    a41c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    a420:	e0bfff17 	ldw	r2,-4(fp)
    a424:	10800a17 	ldw	r2,40(r2)
    a428:	1007883a 	mov	r3,r2
    a42c:	00800044 	movi	r2,1
    a430:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    a434:	e037883a 	mov	sp,fp
    a438:	df000017 	ldw	fp,0(sp)
    a43c:	dec00104 	addi	sp,sp,4
    a440:	f800283a 	ret

0000a444 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    a444:	defffc04 	addi	sp,sp,-16
    a448:	dfc00315 	stw	ra,12(sp)
    a44c:	df000215 	stw	fp,8(sp)
    a450:	df000204 	addi	fp,sp,8
    a454:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    a458:	e13fff17 	ldw	r4,-4(fp)
    a45c:	01400074 	movhi	r5,1
    a460:	297c1c04 	addi	r5,r5,-3984
    a464:	000bd3c0 	call	bd3c <alt_find_dev>
    a468:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    a46c:	e0bffe17 	ldw	r2,-8(fp)
}
    a470:	e037883a 	mov	sp,fp
    a474:	dfc00117 	ldw	ra,4(sp)
    a478:	df000017 	ldw	fp,0(sp)
    a47c:	dec00204 	addi	sp,sp,8
    a480:	f800283a 	ret

0000a484 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    a484:	defffb04 	addi	sp,sp,-20
    a488:	df000415 	stw	fp,16(sp)
    a48c:	df000404 	addi	fp,sp,16
    a490:	e13ffd15 	stw	r4,-12(fp)
    a494:	e17ffe15 	stw	r5,-8(fp)
    a498:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
    a49c:	e03ffc15 	stw	zero,-16(fp)
    a4a0:	00000f06 	br	a4e0 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    a4a4:	e0bffd17 	ldw	r2,-12(fp)
    a4a8:	10800a17 	ldw	r2,40(r2)
    a4ac:	10800044 	addi	r2,r2,1
    a4b0:	1009883a 	mov	r4,r2
    a4b4:	e0fffe17 	ldw	r3,-8(fp)
    a4b8:	e0bffc17 	ldw	r2,-16(fp)
    a4bc:	1885883a 	add	r2,r3,r2
    a4c0:	10800003 	ldbu	r2,0(r2)
    a4c4:	10803fcc 	andi	r2,r2,255
    a4c8:	1080201c 	xori	r2,r2,128
    a4cc:	10bfe004 	addi	r2,r2,-128
    a4d0:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    a4d4:	e0bffc17 	ldw	r2,-16(fp)
    a4d8:	10800044 	addi	r2,r2,1
    a4dc:	e0bffc15 	stw	r2,-16(fp)
    a4e0:	e0fffc17 	ldw	r3,-16(fp)
    a4e4:	e0bfff17 	ldw	r2,-4(fp)
    a4e8:	18bfee36 	bltu	r3,r2,a4a4 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
    a4ec:	e037883a 	mov	sp,fp
    a4f0:	df000017 	ldw	fp,0(sp)
    a4f4:	dec00104 	addi	sp,sp,4
    a4f8:	f800283a 	ret

0000a4fc <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    a4fc:	defffd04 	addi	sp,sp,-12
    a500:	df000215 	stw	fp,8(sp)
    a504:	df000204 	addi	fp,sp,8
    a508:	e13ffe15 	stw	r4,-8(fp)
    a50c:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
    a510:	00000d06 	br	a548 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    a514:	e0bffe17 	ldw	r2,-8(fp)
    a518:	10800a17 	ldw	r2,40(r2)
    a51c:	10800044 	addi	r2,r2,1
    a520:	1007883a 	mov	r3,r2
    a524:	e0bfff17 	ldw	r2,-4(fp)
    a528:	10800003 	ldbu	r2,0(r2)
    a52c:	10803fcc 	andi	r2,r2,255
    a530:	1080201c 	xori	r2,r2,128
    a534:	10bfe004 	addi	r2,r2,-128
    a538:	18800025 	stbio	r2,0(r3)
		++ptr;
    a53c:	e0bfff17 	ldw	r2,-4(fp)
    a540:	10800044 	addi	r2,r2,1
    a544:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    a548:	e0bfff17 	ldw	r2,-4(fp)
    a54c:	10800003 	ldbu	r2,0(r2)
    a550:	10803fcc 	andi	r2,r2,255
    a554:	1080201c 	xori	r2,r2,128
    a558:	10bfe004 	addi	r2,r2,-128
    a55c:	103fed1e 	bne	r2,zero,a514 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
    a560:	e037883a 	mov	sp,fp
    a564:	df000017 	ldw	fp,0(sp)
    a568:	dec00104 	addi	sp,sp,4
    a56c:	f800283a 	ret

0000a570 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    a570:	defffb04 	addi	sp,sp,-20
    a574:	dfc00415 	stw	ra,16(sp)
    a578:	df000315 	stw	fp,12(sp)
    a57c:	df000304 	addi	fp,sp,12
    a580:	e13ffd15 	stw	r4,-12(fp)
    a584:	e17ffe15 	stw	r5,-8(fp)
    a588:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    a58c:	e0bffd17 	ldw	r2,-12(fp)
    a590:	10c00017 	ldw	r3,0(r2)
    a594:	e0bfff17 	ldw	r2,-4(fp)
    a598:	1809883a 	mov	r4,r3
    a59c:	e17ffe17 	ldw	r5,-8(fp)
    a5a0:	100d883a 	mov	r6,r2
    a5a4:	000a4840 	call	a484 <alt_up_character_lcd_write>
	return 0;
    a5a8:	0005883a 	mov	r2,zero
}
    a5ac:	e037883a 	mov	sp,fp
    a5b0:	dfc00117 	ldw	ra,4(sp)
    a5b4:	df000017 	ldw	fp,0(sp)
    a5b8:	dec00204 	addi	sp,sp,8
    a5bc:	f800283a 	ret

0000a5c0 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    a5c0:	defffa04 	addi	sp,sp,-24
    a5c4:	dfc00515 	stw	ra,20(sp)
    a5c8:	df000415 	stw	fp,16(sp)
    a5cc:	df000404 	addi	fp,sp,16
    a5d0:	e13ffd15 	stw	r4,-12(fp)
    a5d4:	e17ffe15 	stw	r5,-8(fp)
    a5d8:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    a5dc:	e0bffe17 	ldw	r2,-8(fp)
    a5e0:	10800a28 	cmpgeui	r2,r2,40
    a5e4:	1000031e 	bne	r2,zero,a5f4 <alt_up_character_lcd_set_cursor_pos+0x34>
    a5e8:	e0bfff17 	ldw	r2,-4(fp)
    a5ec:	108000b0 	cmpltui	r2,r2,2
    a5f0:	1000021e 	bne	r2,zero,a5fc <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
    a5f4:	00bfffc4 	movi	r2,-1
    a5f8:	00000906 	br	a620 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    a5fc:	e13ffe17 	ldw	r4,-8(fp)
    a600:	e17fff17 	ldw	r5,-4(fp)
    a604:	000a3600 	call	a360 <get_DDRAM_addr>
    a608:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
    a60c:	e0bffc03 	ldbu	r2,-16(fp)
    a610:	e13ffd17 	ldw	r4,-12(fp)
    a614:	100b883a 	mov	r5,r2
    a618:	000a3d40 	call	a3d4 <alt_up_character_lcd_send_cmd>
	return 0;
    a61c:	0005883a 	mov	r2,zero
}
    a620:	e037883a 	mov	sp,fp
    a624:	dfc00117 	ldw	ra,4(sp)
    a628:	df000017 	ldw	fp,0(sp)
    a62c:	dec00204 	addi	sp,sp,8
    a630:	f800283a 	ret

0000a634 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    a634:	defffb04 	addi	sp,sp,-20
    a638:	dfc00415 	stw	ra,16(sp)
    a63c:	df000315 	stw	fp,12(sp)
    a640:	df000304 	addi	fp,sp,12
    a644:	e13ffe15 	stw	r4,-8(fp)
    a648:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
    a64c:	e0bfff17 	ldw	r2,-4(fp)
    a650:	1000011e 	bne	r2,zero,a658 <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
    a654:	00001406 	br	a6a8 <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    a658:	e0bfff17 	ldw	r2,-4(fp)
    a65c:	0080020e 	bge	zero,r2,a668 <alt_up_character_lcd_shift_cursor+0x34>
    a660:	00800504 	movi	r2,20
    a664:	00000106 	br	a66c <alt_up_character_lcd_shift_cursor+0x38>
    a668:	00800404 	movi	r2,16
    a66c:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    a670:	e0bfff17 	ldw	r2,-4(fp)
    a674:	1000010e 	bge	r2,zero,a67c <alt_up_character_lcd_shift_cursor+0x48>
    a678:	0085c83a 	sub	r2,zero,r2
    a67c:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    a680:	00000406 	br	a694 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    a684:	e0bffd43 	ldbu	r2,-11(fp)
    a688:	e13ffe17 	ldw	r4,-8(fp)
    a68c:	100b883a 	mov	r5,r2
    a690:	000a3d40 	call	a3d4 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    a694:	e0bffd03 	ldbu	r2,-12(fp)
    a698:	10ffffc4 	addi	r3,r2,-1
    a69c:	e0fffd05 	stb	r3,-12(fp)
    a6a0:	10803fcc 	andi	r2,r2,255
    a6a4:	103ff71e 	bne	r2,zero,a684 <alt_up_character_lcd_shift_cursor+0x50>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    a6a8:	e037883a 	mov	sp,fp
    a6ac:	dfc00117 	ldw	ra,4(sp)
    a6b0:	df000017 	ldw	fp,0(sp)
    a6b4:	dec00204 	addi	sp,sp,8
    a6b8:	f800283a 	ret

0000a6bc <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    a6bc:	defffb04 	addi	sp,sp,-20
    a6c0:	dfc00415 	stw	ra,16(sp)
    a6c4:	df000315 	stw	fp,12(sp)
    a6c8:	df000304 	addi	fp,sp,12
    a6cc:	e13ffe15 	stw	r4,-8(fp)
    a6d0:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
    a6d4:	e0bfff17 	ldw	r2,-4(fp)
    a6d8:	1000011e 	bne	r2,zero,a6e0 <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
    a6dc:	00001406 	br	a730 <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    a6e0:	e0bfff17 	ldw	r2,-4(fp)
    a6e4:	0080020e 	bge	zero,r2,a6f0 <alt_up_character_lcd_shift_display+0x34>
    a6e8:	00800704 	movi	r2,28
    a6ec:	00000106 	br	a6f4 <alt_up_character_lcd_shift_display+0x38>
    a6f0:	00800604 	movi	r2,24
    a6f4:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    a6f8:	e0bfff17 	ldw	r2,-4(fp)
    a6fc:	1000010e 	bge	r2,zero,a704 <alt_up_character_lcd_shift_display+0x48>
    a700:	0085c83a 	sub	r2,zero,r2
    a704:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    a708:	00000406 	br	a71c <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    a70c:	e0bffd43 	ldbu	r2,-11(fp)
    a710:	e13ffe17 	ldw	r4,-8(fp)
    a714:	100b883a 	mov	r5,r2
    a718:	000a3d40 	call	a3d4 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    a71c:	e0bffd03 	ldbu	r2,-12(fp)
    a720:	10ffffc4 	addi	r3,r2,-1
    a724:	e0fffd05 	stb	r3,-12(fp)
    a728:	10803fcc 	andi	r2,r2,255
    a72c:	103ff71e 	bne	r2,zero,a70c <alt_up_character_lcd_shift_display+0x50>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    a730:	e037883a 	mov	sp,fp
    a734:	dfc00117 	ldw	ra,4(sp)
    a738:	df000017 	ldw	fp,0(sp)
    a73c:	dec00204 	addi	sp,sp,8
    a740:	f800283a 	ret

0000a744 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    a744:	defffa04 	addi	sp,sp,-24
    a748:	dfc00515 	stw	ra,20(sp)
    a74c:	df000415 	stw	fp,16(sp)
    a750:	df000404 	addi	fp,sp,16
    a754:	e13ffd15 	stw	r4,-12(fp)
    a758:	e17ffe15 	stw	r5,-8(fp)
    a75c:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    a760:	e0bffe17 	ldw	r2,-8(fp)
    a764:	10800a28 	cmpgeui	r2,r2,40
    a768:	1000031e 	bne	r2,zero,a778 <alt_up_character_lcd_erase_pos+0x34>
    a76c:	e0bfff17 	ldw	r2,-4(fp)
    a770:	108000b0 	cmpltui	r2,r2,2
    a774:	1000021e 	bne	r2,zero,a780 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
    a778:	00bfffc4 	movi	r2,-1
    a77c:	00000f06 	br	a7bc <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    a780:	e13ffe17 	ldw	r4,-8(fp)
    a784:	e17fff17 	ldw	r5,-4(fp)
    a788:	000a3600 	call	a360 <get_DDRAM_addr>
    a78c:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
    a790:	e0bffc03 	ldbu	r2,-16(fp)
    a794:	e13ffd17 	ldw	r4,-12(fp)
    a798:	100b883a 	mov	r5,r2
    a79c:	000a3d40 	call	a3d4 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    a7a0:	e0bffd17 	ldw	r2,-12(fp)
    a7a4:	10800a17 	ldw	r2,40(r2)
    a7a8:	10800044 	addi	r2,r2,1
    a7ac:	1007883a 	mov	r3,r2
    a7b0:	00800084 	movi	r2,2
    a7b4:	18800025 	stbio	r2,0(r3)
	return 0;
    a7b8:	0005883a 	mov	r2,zero
}
    a7bc:	e037883a 	mov	sp,fp
    a7c0:	dfc00117 	ldw	ra,4(sp)
    a7c4:	df000017 	ldw	fp,0(sp)
    a7c8:	dec00204 	addi	sp,sp,8
    a7cc:	f800283a 	ret

0000a7d0 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    a7d0:	defffd04 	addi	sp,sp,-12
    a7d4:	dfc00215 	stw	ra,8(sp)
    a7d8:	df000115 	stw	fp,4(sp)
    a7dc:	df000104 	addi	fp,sp,4
    a7e0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    a7e4:	e13fff17 	ldw	r4,-4(fp)
    a7e8:	01400304 	movi	r5,12
    a7ec:	000a3d40 	call	a3d4 <alt_up_character_lcd_send_cmd>
}
    a7f0:	e037883a 	mov	sp,fp
    a7f4:	dfc00117 	ldw	ra,4(sp)
    a7f8:	df000017 	ldw	fp,0(sp)
    a7fc:	dec00204 	addi	sp,sp,8
    a800:	f800283a 	ret

0000a804 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    a804:	defffd04 	addi	sp,sp,-12
    a808:	dfc00215 	stw	ra,8(sp)
    a80c:	df000115 	stw	fp,4(sp)
    a810:	df000104 	addi	fp,sp,4
    a814:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    a818:	e13fff17 	ldw	r4,-4(fp)
    a81c:	014003c4 	movi	r5,15
    a820:	000a3d40 	call	a3d4 <alt_up_character_lcd_send_cmd>
}
    a824:	e037883a 	mov	sp,fp
    a828:	dfc00117 	ldw	ra,4(sp)
    a82c:	df000017 	ldw	fp,0(sp)
    a830:	dec00204 	addi	sp,sp,8
    a834:	f800283a 	ret

0000a838 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
    a838:	defffd04 	addi	sp,sp,-12
    a83c:	df000215 	stw	fp,8(sp)
    a840:	df000204 	addi	fp,sp,8
    a844:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    a848:	e0bfff17 	ldw	r2,-4(fp)
    a84c:	10800a17 	ldw	r2,40(r2)
    a850:	10800104 	addi	r2,r2,4
    a854:	10800037 	ldwio	r2,0(r2)
    a858:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
    a85c:	e0bffe17 	ldw	r2,-8(fp)
    a860:	10800054 	ori	r2,r2,1
    a864:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    a868:	e0bfff17 	ldw	r2,-4(fp)
    a86c:	10800a17 	ldw	r2,40(r2)
    a870:	10800104 	addi	r2,r2,4
    a874:	1007883a 	mov	r3,r2
    a878:	e0bffe17 	ldw	r2,-8(fp)
    a87c:	18800035 	stwio	r2,0(r3)
}
    a880:	e037883a 	mov	sp,fp
    a884:	df000017 	ldw	fp,0(sp)
    a888:	dec00104 	addi	sp,sp,4
    a88c:	f800283a 	ret

0000a890 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
    a890:	defffd04 	addi	sp,sp,-12
    a894:	df000215 	stw	fp,8(sp)
    a898:	df000204 	addi	fp,sp,8
    a89c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    a8a0:	e0bfff17 	ldw	r2,-4(fp)
    a8a4:	10800a17 	ldw	r2,40(r2)
    a8a8:	10800104 	addi	r2,r2,4
    a8ac:	10800037 	ldwio	r2,0(r2)
    a8b0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
    a8b4:	e0fffe17 	ldw	r3,-8(fp)
    a8b8:	00bfff84 	movi	r2,-2
    a8bc:	1884703a 	and	r2,r3,r2
    a8c0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    a8c4:	e0bfff17 	ldw	r2,-4(fp)
    a8c8:	10800a17 	ldw	r2,40(r2)
    a8cc:	10800104 	addi	r2,r2,4
    a8d0:	1007883a 	mov	r3,r2
    a8d4:	e0bffe17 	ldw	r2,-8(fp)
    a8d8:	18800035 	stwio	r2,0(r3)
}
    a8dc:	e037883a 	mov	sp,fp
    a8e0:	df000017 	ldw	fp,0(sp)
    a8e4:	dec00104 	addi	sp,sp,4
    a8e8:	f800283a 	ret

0000a8ec <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
    a8ec:	defffd04 	addi	sp,sp,-12
    a8f0:	df000215 	stw	fp,8(sp)
    a8f4:	df000204 	addi	fp,sp,8
    a8f8:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    a8fc:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
    a900:	e0bfff17 	ldw	r2,-4(fp)
    a904:	10800a17 	ldw	r2,40(r2)
    a908:	10800084 	addi	r2,r2,2
    a90c:	1080002b 	ldhuio	r2,0(r2)
    a910:	10bfffcc 	andi	r2,r2,65535
    a914:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
    a918:	e0bffe0b 	ldhu	r2,-8(fp)
}
    a91c:	e037883a 	mov	sp,fp
    a920:	df000017 	ldw	fp,0(sp)
    a924:	dec00104 	addi	sp,sp,4
    a928:	f800283a 	ret

0000a92c <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
    a92c:	defffd04 	addi	sp,sp,-12
    a930:	df000215 	stw	fp,8(sp)
    a934:	df000204 	addi	fp,sp,8
    a938:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    a93c:	e0bfff17 	ldw	r2,-4(fp)
    a940:	10800a17 	ldw	r2,40(r2)
    a944:	10800104 	addi	r2,r2,4
    a948:	10800037 	ldwio	r2,0(r2)
    a94c:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
    a950:	e0bffe17 	ldw	r2,-8(fp)
    a954:	1004d43a 	srli	r2,r2,16
}
    a958:	e037883a 	mov	sp,fp
    a95c:	df000017 	ldw	fp,0(sp)
    a960:	dec00104 	addi	sp,sp,4
    a964:	f800283a 	ret

0000a968 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
    a968:	defffd04 	addi	sp,sp,-12
    a96c:	df000215 	stw	fp,8(sp)
    a970:	df000204 	addi	fp,sp,8
    a974:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
    a978:	e0bfff17 	ldw	r2,-4(fp)
    a97c:	1080800c 	andi	r2,r2,512
    a980:	1004d27a 	srli	r2,r2,9
    a984:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
    a988:	e0bffe17 	ldw	r2,-8(fp)
    a98c:	10000226 	beq	r2,zero,a998 <alt_up_irda_check_parity+0x30>
    a990:	00bfffc4 	movi	r2,-1
    a994:	00000106 	br	a99c <alt_up_irda_check_parity+0x34>
    a998:	0005883a 	mov	r2,zero
}
    a99c:	e037883a 	mov	sp,fp
    a9a0:	df000017 	ldw	fp,0(sp)
    a9a4:	dec00104 	addi	sp,sp,4
    a9a8:	f800283a 	ret

0000a9ac <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
    a9ac:	defffd04 	addi	sp,sp,-12
    a9b0:	df000215 	stw	fp,8(sp)
    a9b4:	df000204 	addi	fp,sp,8
    a9b8:	e13ffe15 	stw	r4,-8(fp)
    a9bc:	2805883a 	mov	r2,r5
    a9c0:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
    a9c4:	e0bffe17 	ldw	r2,-8(fp)
    a9c8:	10800a17 	ldw	r2,40(r2)
    a9cc:	1007883a 	mov	r3,r2
    a9d0:	e0bfff03 	ldbu	r2,-4(fp)
    a9d4:	18800035 	stwio	r2,0(r3)
	return 0;
    a9d8:	0005883a 	mov	r2,zero
}
    a9dc:	e037883a 	mov	sp,fp
    a9e0:	df000017 	ldw	fp,0(sp)
    a9e4:	dec00104 	addi	sp,sp,4
    a9e8:	f800283a 	ret

0000a9ec <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
    a9ec:	defffa04 	addi	sp,sp,-24
    a9f0:	dfc00515 	stw	ra,20(sp)
    a9f4:	df000415 	stw	fp,16(sp)
    a9f8:	df000404 	addi	fp,sp,16
    a9fc:	e13ffd15 	stw	r4,-12(fp)
    aa00:	e17ffe15 	stw	r5,-8(fp)
    aa04:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    aa08:	e0bffd17 	ldw	r2,-12(fp)
    aa0c:	10800a17 	ldw	r2,40(r2)
    aa10:	10800037 	ldwio	r2,0(r2)
    aa14:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
    aa18:	e0bffc17 	ldw	r2,-16(fp)
    aa1c:	1007883a 	mov	r3,r2
    aa20:	e0bffe17 	ldw	r2,-8(fp)
    aa24:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
    aa28:	e13ffc17 	ldw	r4,-16(fp)
    aa2c:	000a9680 	call	a968 <alt_up_irda_check_parity>
    aa30:	1007883a 	mov	r3,r2
    aa34:	e0bfff17 	ldw	r2,-4(fp)
    aa38:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
    aa3c:	e0bffc17 	ldw	r2,-16(fp)
    aa40:	10a0000c 	andi	r2,r2,32768
    aa44:	1004d3fa 	srli	r2,r2,15
    aa48:	10bfffc4 	addi	r2,r2,-1
}
    aa4c:	e037883a 	mov	sp,fp
    aa50:	dfc00117 	ldw	ra,4(sp)
    aa54:	df000017 	ldw	fp,0(sp)
    aa58:	dec00204 	addi	sp,sp,8
    aa5c:	f800283a 	ret

0000aa60 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
    aa60:	defff804 	addi	sp,sp,-32
    aa64:	dfc00715 	stw	ra,28(sp)
    aa68:	df000615 	stw	fp,24(sp)
    aa6c:	df000604 	addi	fp,sp,24
    aa70:	e13ffd15 	stw	r4,-12(fp)
    aa74:	e17ffe15 	stw	r5,-8(fp)
    aa78:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    aa7c:	e0bffd17 	ldw	r2,-12(fp)
    aa80:	10800017 	ldw	r2,0(r2)
    aa84:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    aa88:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    aa8c:	00000e06 	br	aac8 <alt_up_irda_read_fd+0x68>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
    aa90:	e0bffe17 	ldw	r2,-8(fp)
    aa94:	10c00044 	addi	r3,r2,1
    aa98:	e0fffe15 	stw	r3,-8(fp)
    aa9c:	e0fffc04 	addi	r3,fp,-16
    aaa0:	e13ffb17 	ldw	r4,-20(fp)
    aaa4:	100b883a 	mov	r5,r2
    aaa8:	180d883a 	mov	r6,r3
    aaac:	000a9ec0 	call	a9ec <alt_up_irda_read_data>
    aab0:	1000041e 	bne	r2,zero,aac4 <alt_up_irda_read_fd+0x64>
			count++;
    aab4:	e0bffa17 	ldw	r2,-24(fp)
    aab8:	10800044 	addi	r2,r2,1
    aabc:	e0bffa15 	stw	r2,-24(fp)
    aac0:	00000106 	br	aac8 <alt_up_irda_read_fd+0x68>
		else
			break;
    aac4:	00000406 	br	aad8 <alt_up_irda_read_fd+0x78>
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    aac8:	e0bfff17 	ldw	r2,-4(fp)
    aacc:	10ffffc4 	addi	r3,r2,-1
    aad0:	e0ffff15 	stw	r3,-4(fp)
    aad4:	103fee1e 	bne	r2,zero,aa90 <alt_up_irda_read_fd+0x30>
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
    aad8:	e0bffa17 	ldw	r2,-24(fp)
}
    aadc:	e037883a 	mov	sp,fp
    aae0:	dfc00117 	ldw	ra,4(sp)
    aae4:	df000017 	ldw	fp,0(sp)
    aae8:	dec00204 	addi	sp,sp,8
    aaec:	f800283a 	ret

0000aaf0 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
    aaf0:	defff904 	addi	sp,sp,-28
    aaf4:	dfc00615 	stw	ra,24(sp)
    aaf8:	df000515 	stw	fp,20(sp)
    aafc:	df000504 	addi	fp,sp,20
    ab00:	e13ffd15 	stw	r4,-12(fp)
    ab04:	e17ffe15 	stw	r5,-8(fp)
    ab08:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    ab0c:	e0bffd17 	ldw	r2,-12(fp)
    ab10:	10800017 	ldw	r2,0(r2)
    ab14:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    ab18:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    ab1c:	00000e06 	br	ab58 <alt_up_irda_write_fd+0x68>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
    ab20:	e0bffe17 	ldw	r2,-8(fp)
    ab24:	10c00044 	addi	r3,r2,1
    ab28:	e0fffe15 	stw	r3,-8(fp)
    ab2c:	10800003 	ldbu	r2,0(r2)
    ab30:	10803fcc 	andi	r2,r2,255
    ab34:	e13ffc17 	ldw	r4,-16(fp)
    ab38:	100b883a 	mov	r5,r2
    ab3c:	000a9ac0 	call	a9ac <alt_up_irda_write_data>
    ab40:	1000041e 	bne	r2,zero,ab54 <alt_up_irda_write_fd+0x64>
			count++;
    ab44:	e0bffb17 	ldw	r2,-20(fp)
    ab48:	10800044 	addi	r2,r2,1
    ab4c:	e0bffb15 	stw	r2,-20(fp)
    ab50:	00000106 	br	ab58 <alt_up_irda_write_fd+0x68>
		else
			break;
    ab54:	00000406 	br	ab68 <alt_up_irda_write_fd+0x78>

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
    ab58:	e0bfff17 	ldw	r2,-4(fp)
    ab5c:	10ffffc4 	addi	r3,r2,-1
    ab60:	e0ffff15 	stw	r3,-4(fp)
    ab64:	103fee1e 	bne	r2,zero,ab20 <alt_up_irda_write_fd+0x30>
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
	}
	return count;
    ab68:	e0bffb17 	ldw	r2,-20(fp)
}
    ab6c:	e037883a 	mov	sp,fp
    ab70:	dfc00117 	ldw	ra,4(sp)
    ab74:	df000017 	ldw	fp,0(sp)
    ab78:	dec00204 	addi	sp,sp,8
    ab7c:	f800283a 	ret

0000ab80 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
    ab80:	defffc04 	addi	sp,sp,-16
    ab84:	dfc00315 	stw	ra,12(sp)
    ab88:	df000215 	stw	fp,8(sp)
    ab8c:	df000204 	addi	fp,sp,8
    ab90:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
    ab94:	e13fff17 	ldw	r4,-4(fp)
    ab98:	01400074 	movhi	r5,1
    ab9c:	297c1c04 	addi	r5,r5,-3984
    aba0:	000bd3c0 	call	bd3c <alt_find_dev>
    aba4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    aba8:	e0bffe17 	ldw	r2,-8(fp)
}
    abac:	e037883a 	mov	sp,fp
    abb0:	dfc00117 	ldw	ra,4(sp)
    abb4:	df000017 	ldw	fp,0(sp)
    abb8:	dec00204 	addi	sp,sp,8
    abbc:	f800283a 	ret

0000abc0 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    abc0:	defffd04 	addi	sp,sp,-12
    abc4:	df000215 	stw	fp,8(sp)
    abc8:	df000204 	addi	fp,sp,8
    abcc:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
    abd0:	e0bfff17 	ldw	r2,-4(fp)
    abd4:	1080400c 	andi	r2,r2,256
    abd8:	1004d23a 	srli	r2,r2,8
    abdc:	e0bffe05 	stb	r2,-8(fp)
	return ri;
    abe0:	e0bffe03 	ldbu	r2,-8(fp)
}
    abe4:	e037883a 	mov	sp,fp
    abe8:	df000017 	ldw	fp,0(sp)
    abec:	dec00104 	addi	sp,sp,4
    abf0:	f800283a 	ret

0000abf4 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
    abf4:	defffd04 	addi	sp,sp,-12
    abf8:	df000215 	stw	fp,8(sp)
    abfc:	df000204 	addi	fp,sp,8
    ac00:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
    ac04:	e0bfff17 	ldw	r2,-4(fp)
    ac08:	1080004c 	andi	r2,r2,1
    ac0c:	e0bffe05 	stb	r2,-8(fp)
	return re;
    ac10:	e0bffe03 	ldbu	r2,-8(fp)
}
    ac14:	e037883a 	mov	sp,fp
    ac18:	df000017 	ldw	fp,0(sp)
    ac1c:	dec00104 	addi	sp,sp,4
    ac20:	f800283a 	ret

0000ac24 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    ac24:	defffd04 	addi	sp,sp,-12
    ac28:	df000215 	stw	fp,8(sp)
    ac2c:	df000204 	addi	fp,sp,8
    ac30:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
    ac34:	e0bfff17 	ldw	r2,-4(fp)
    ac38:	1081000c 	andi	r2,r2,1024
    ac3c:	1004d2ba 	srli	r2,r2,10
    ac40:	e0bffe05 	stb	r2,-8(fp)
	return re;
    ac44:	e0bffe03 	ldbu	r2,-8(fp)
}
    ac48:	e037883a 	mov	sp,fp
    ac4c:	df000017 	ldw	fp,0(sp)
    ac50:	dec00104 	addi	sp,sp,4
    ac54:	f800283a 	ret

0000ac58 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
    ac58:	defffd04 	addi	sp,sp,-12
    ac5c:	df000215 	stw	fp,8(sp)
    ac60:	df000204 	addi	fp,sp,8
    ac64:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
    ac68:	e0bfff17 	ldw	r2,-4(fp)
    ac6c:	1004d43a 	srli	r2,r2,16
    ac70:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
    ac74:	e0bffe0b 	ldhu	r2,-8(fp)
}
    ac78:	e037883a 	mov	sp,fp
    ac7c:	df000017 	ldw	fp,0(sp)
    ac80:	dec00104 	addi	sp,sp,4
    ac84:	f800283a 	ret

0000ac88 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    ac88:	defffd04 	addi	sp,sp,-12
    ac8c:	df000215 	stw	fp,8(sp)
    ac90:	df000204 	addi	fp,sp,8
    ac94:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
    ac98:	e0bfff17 	ldw	r2,-4(fp)
    ac9c:	10a0000c 	andi	r2,r2,32768
    aca0:	1004d3fa 	srli	r2,r2,15
    aca4:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
    aca8:	e0bffe03 	ldbu	r2,-8(fp)
}
    acac:	e037883a 	mov	sp,fp
    acb0:	df000017 	ldw	fp,0(sp)
    acb4:	dec00104 	addi	sp,sp,4
    acb8:	f800283a 	ret

0000acbc <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
    acbc:	defffd04 	addi	sp,sp,-12
    acc0:	df000215 	stw	fp,8(sp)
    acc4:	df000204 	addi	fp,sp,8
    acc8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
    accc:	e0bfff17 	ldw	r2,-4(fp)
    acd0:	e0bffe05 	stb	r2,-8(fp)
	return data;
    acd4:	e0bffe03 	ldbu	r2,-8(fp)
}
    acd8:	e037883a 	mov	sp,fp
    acdc:	df000017 	ldw	fp,0(sp)
    ace0:	dec00104 	addi	sp,sp,4
    ace4:	f800283a 	ret

0000ace8 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    ace8:	defffb04 	addi	sp,sp,-20
    acec:	dfc00415 	stw	ra,16(sp)
    acf0:	df000315 	stw	fp,12(sp)
    acf4:	df000304 	addi	fp,sp,12
    acf8:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    acfc:	e13fff17 	ldw	r4,-4(fp)
    ad00:	01403fc4 	movi	r5,255
    ad04:	000af440 	call	af44 <alt_up_ps2_write_data_byte_with_ack>
    ad08:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
    ad0c:	e0bffd17 	ldw	r2,-12(fp)
    ad10:	1000211e 	bne	r2,zero,ad98 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    ad14:	e0bffe04 	addi	r2,fp,-8
    ad18:	e13fff17 	ldw	r4,-4(fp)
    ad1c:	100b883a 	mov	r5,r2
    ad20:	000afa80 	call	afa8 <alt_up_ps2_read_data_byte_timeout>
    ad24:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
    ad28:	e0bffd17 	ldw	r2,-12(fp)
    ad2c:	10001a1e 	bne	r2,zero,ad98 <alt_up_ps2_init+0xb0>
    ad30:	e0bffe03 	ldbu	r2,-8(fp)
    ad34:	10803fcc 	andi	r2,r2,255
    ad38:	10802a98 	cmpnei	r2,r2,170
    ad3c:	1000161e 	bne	r2,zero,ad98 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    ad40:	e0bffe04 	addi	r2,fp,-8
    ad44:	e13fff17 	ldw	r4,-4(fp)
    ad48:	100b883a 	mov	r5,r2
    ad4c:	000afa80 	call	afa8 <alt_up_ps2_read_data_byte_timeout>
    ad50:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
    ad54:	e0bffd17 	ldw	r2,-12(fp)
    ad58:	10bfe318 	cmpnei	r2,r2,-116
    ad5c:	1000041e 	bne	r2,zero,ad70 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    ad60:	e0bfff17 	ldw	r2,-4(fp)
    ad64:	00c00044 	movi	r3,1
    ad68:	10c00d15 	stw	r3,52(r2)
    ad6c:	00000a06 	br	ad98 <alt_up_ps2_init+0xb0>
			}
			else if (status == 0 && byte == 0x00)
    ad70:	e0bffd17 	ldw	r2,-12(fp)
    ad74:	1000081e 	bne	r2,zero,ad98 <alt_up_ps2_init+0xb0>
    ad78:	e0bffe03 	ldbu	r2,-8(fp)
    ad7c:	10803fcc 	andi	r2,r2,255
    ad80:	1000051e 	bne	r2,zero,ad98 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    ad84:	e0bfff17 	ldw	r2,-4(fp)
    ad88:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    ad8c:	e13fff17 	ldw	r4,-4(fp)
    ad90:	01403d04 	movi	r5,244
    ad94:	000ae600 	call	ae60 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    ad98:	e037883a 	mov	sp,fp
    ad9c:	dfc00117 	ldw	ra,4(sp)
    ada0:	df000017 	ldw	fp,0(sp)
    ada4:	dec00204 	addi	sp,sp,8
    ada8:	f800283a 	ret

0000adac <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
    adac:	defffd04 	addi	sp,sp,-12
    adb0:	df000215 	stw	fp,8(sp)
    adb4:	df000204 	addi	fp,sp,8
    adb8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    adbc:	e0bfff17 	ldw	r2,-4(fp)
    adc0:	10800a17 	ldw	r2,40(r2)
    adc4:	10800104 	addi	r2,r2,4
    adc8:	10800037 	ldwio	r2,0(r2)
    adcc:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    add0:	e0bffe17 	ldw	r2,-8(fp)
    add4:	10800054 	ori	r2,r2,1
    add8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    addc:	e0bfff17 	ldw	r2,-4(fp)
    ade0:	10800a17 	ldw	r2,40(r2)
    ade4:	10800104 	addi	r2,r2,4
    ade8:	1007883a 	mov	r3,r2
    adec:	e0bffe17 	ldw	r2,-8(fp)
    adf0:	18800035 	stwio	r2,0(r3)
}
    adf4:	e037883a 	mov	sp,fp
    adf8:	df000017 	ldw	fp,0(sp)
    adfc:	dec00104 	addi	sp,sp,4
    ae00:	f800283a 	ret

0000ae04 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
    ae04:	defffd04 	addi	sp,sp,-12
    ae08:	df000215 	stw	fp,8(sp)
    ae0c:	df000204 	addi	fp,sp,8
    ae10:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    ae14:	e0bfff17 	ldw	r2,-4(fp)
    ae18:	10800a17 	ldw	r2,40(r2)
    ae1c:	10800104 	addi	r2,r2,4
    ae20:	10800037 	ldwio	r2,0(r2)
    ae24:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    ae28:	e0fffe17 	ldw	r3,-8(fp)
    ae2c:	00bfff84 	movi	r2,-2
    ae30:	1884703a 	and	r2,r3,r2
    ae34:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    ae38:	e0bfff17 	ldw	r2,-4(fp)
    ae3c:	10800a17 	ldw	r2,40(r2)
    ae40:	10800104 	addi	r2,r2,4
    ae44:	1007883a 	mov	r3,r2
    ae48:	e0bffe17 	ldw	r2,-8(fp)
    ae4c:	18800035 	stwio	r2,0(r3)
}
    ae50:	e037883a 	mov	sp,fp
    ae54:	df000017 	ldw	fp,0(sp)
    ae58:	dec00104 	addi	sp,sp,4
    ae5c:	f800283a 	ret

0000ae60 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    ae60:	defffb04 	addi	sp,sp,-20
    ae64:	dfc00415 	stw	ra,16(sp)
    ae68:	df000315 	stw	fp,12(sp)
    ae6c:	df000304 	addi	fp,sp,12
    ae70:	e13ffe15 	stw	r4,-8(fp)
    ae74:	2805883a 	mov	r2,r5
    ae78:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    ae7c:	e0bffe17 	ldw	r2,-8(fp)
    ae80:	10800a17 	ldw	r2,40(r2)
    ae84:	1007883a 	mov	r3,r2
    ae88:	e0bfff03 	ldbu	r2,-4(fp)
    ae8c:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    ae90:	e0bffe17 	ldw	r2,-8(fp)
    ae94:	10800a17 	ldw	r2,40(r2)
    ae98:	10800104 	addi	r2,r2,4
    ae9c:	10800037 	ldwio	r2,0(r2)
    aea0:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
    aea4:	e13ffd17 	ldw	r4,-12(fp)
    aea8:	000ac240 	call	ac24 <read_CE_bit>
    aeac:	10803fcc 	andi	r2,r2,255
    aeb0:	10000226 	beq	r2,zero,aebc <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
    aeb4:	00bffec4 	movi	r2,-5
    aeb8:	00000106 	br	aec0 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
    aebc:	0005883a 	mov	r2,zero
}
    aec0:	e037883a 	mov	sp,fp
    aec4:	dfc00117 	ldw	ra,4(sp)
    aec8:	df000017 	ldw	fp,0(sp)
    aecc:	dec00204 	addi	sp,sp,8
    aed0:	f800283a 	ret

0000aed4 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    aed4:	defffc04 	addi	sp,sp,-16
    aed8:	dfc00315 	stw	ra,12(sp)
    aedc:	df000215 	stw	fp,8(sp)
    aee0:	df000204 	addi	fp,sp,8
    aee4:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
    aee8:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
    aeec:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    aef0:	e0bffe44 	addi	r2,fp,-7
    aef4:	e13fff17 	ldw	r4,-4(fp)
    aef8:	100b883a 	mov	r5,r2
    aefc:	000afa80 	call	afa8 <alt_up_ps2_read_data_byte_timeout>
    af00:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
    af04:	e0bffe03 	ldbu	r2,-8(fp)
    af08:	1000061e 	bne	r2,zero,af24 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
    af0c:	e0bffe43 	ldbu	r2,-7(fp)
    af10:	10803fcc 	andi	r2,r2,255
    af14:	10803e98 	cmpnei	r2,r2,250
    af18:	1000041e 	bne	r2,zero,af2c <alt_up_ps2_wait_for_ack+0x58>
				return 0;
    af1c:	0005883a 	mov	r2,zero
    af20:	00000306 	br	af30 <alt_up_ps2_wait_for_ack+0x5c>
		}
		else 
		{
			return status;
    af24:	e0bffe03 	ldbu	r2,-8(fp)
    af28:	00000106 	br	af30 <alt_up_ps2_wait_for_ack+0x5c>
		}
	} while(1);
    af2c:	003ff006 	br	aef0 <alt_up_ps2_wait_for_ack+0x1c>
	return -ETIMEDOUT;
}
    af30:	e037883a 	mov	sp,fp
    af34:	dfc00117 	ldw	ra,4(sp)
    af38:	df000017 	ldw	fp,0(sp)
    af3c:	dec00204 	addi	sp,sp,8
    af40:	f800283a 	ret

0000af44 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    af44:	defffa04 	addi	sp,sp,-24
    af48:	dfc00515 	stw	ra,20(sp)
    af4c:	df000415 	stw	fp,16(sp)
    af50:	df000404 	addi	fp,sp,16
    af54:	e13ffe15 	stw	r4,-8(fp)
    af58:	2805883a 	mov	r2,r5
    af5c:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    af60:	e0bfff03 	ldbu	r2,-4(fp)
    af64:	e13ffe17 	ldw	r4,-8(fp)
    af68:	100b883a 	mov	r5,r2
    af6c:	000ae600 	call	ae60 <alt_up_ps2_write_data_byte>
    af70:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
    af74:	e0bffc17 	ldw	r2,-16(fp)
    af78:	10000226 	beq	r2,zero,af84 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
    af7c:	e0bffc17 	ldw	r2,-16(fp)
    af80:	00000406 	br	af94 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    af84:	e13ffe17 	ldw	r4,-8(fp)
    af88:	000aed40 	call	aed4 <alt_up_ps2_wait_for_ack>
    af8c:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
    af90:	e0bffd17 	ldw	r2,-12(fp)
}
    af94:	e037883a 	mov	sp,fp
    af98:	dfc00117 	ldw	ra,4(sp)
    af9c:	df000017 	ldw	fp,0(sp)
    afa0:	dec00204 	addi	sp,sp,8
    afa4:	f800283a 	ret

0000afa8 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    afa8:	defffa04 	addi	sp,sp,-24
    afac:	dfc00515 	stw	ra,20(sp)
    afb0:	df000415 	stw	fp,16(sp)
    afb4:	df000404 	addi	fp,sp,16
    afb8:	e13ffe15 	stw	r4,-8(fp)
    afbc:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
    afc0:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
    afc4:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
    afc8:	e0bffc17 	ldw	r2,-16(fp)
    afcc:	10800044 	addi	r2,r2,1
    afd0:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    afd4:	e0bffe17 	ldw	r2,-8(fp)
    afd8:	10800a17 	ldw	r2,40(r2)
    afdc:	10800037 	ldwio	r2,0(r2)
    afe0:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
    afe4:	e13ffd17 	ldw	r4,-12(fp)
    afe8:	000ac880 	call	ac88 <read_data_valid>
    afec:	10803fcc 	andi	r2,r2,255
    aff0:	10000726 	beq	r2,zero,b010 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
    aff4:	e13ffd17 	ldw	r4,-12(fp)
    aff8:	000acbc0 	call	acbc <read_data_byte>
    affc:	1007883a 	mov	r3,r2
    b000:	e0bfff17 	ldw	r2,-4(fp)
    b004:	10c00005 	stb	r3,0(r2)
			return 0;
    b008:	0005883a 	mov	r2,zero
    b00c:	00000a06 	br	b038 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    b010:	e0bffe17 	ldw	r2,-8(fp)
    b014:	10800c17 	ldw	r2,48(r2)
    b018:	10000626 	beq	r2,zero,b034 <alt_up_ps2_read_data_byte_timeout+0x8c>
    b01c:	e0bffe17 	ldw	r2,-8(fp)
    b020:	10c00c17 	ldw	r3,48(r2)
    b024:	e0bffc17 	ldw	r2,-16(fp)
    b028:	1880022e 	bgeu	r3,r2,b034 <alt_up_ps2_read_data_byte_timeout+0x8c>
		{
			return -ETIMEDOUT;
    b02c:	00bfe304 	movi	r2,-116
    b030:	00000106 	br	b038 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
	} while (1);
    b034:	003fe406 	br	afc8 <alt_up_ps2_read_data_byte_timeout+0x20>
}
    b038:	e037883a 	mov	sp,fp
    b03c:	dfc00117 	ldw	ra,4(sp)
    b040:	df000017 	ldw	fp,0(sp)
    b044:	dec00204 	addi	sp,sp,8
    b048:	f800283a 	ret

0000b04c <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    b04c:	defffb04 	addi	sp,sp,-20
    b050:	dfc00415 	stw	ra,16(sp)
    b054:	df000315 	stw	fp,12(sp)
    b058:	df000304 	addi	fp,sp,12
    b05c:	e13ffe15 	stw	r4,-8(fp)
    b060:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
    b064:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    b068:	e0bffe17 	ldw	r2,-8(fp)
    b06c:	10800a17 	ldw	r2,40(r2)
    b070:	10800037 	ldwio	r2,0(r2)
    b074:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
    b078:	e13ffd17 	ldw	r4,-12(fp)
    b07c:	000ac880 	call	ac88 <read_data_valid>
    b080:	10803fcc 	andi	r2,r2,255
    b084:	10000726 	beq	r2,zero,b0a4 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
    b088:	e13ffd17 	ldw	r4,-12(fp)
    b08c:	000acbc0 	call	acbc <read_data_byte>
    b090:	1007883a 	mov	r3,r2
    b094:	e0bfff17 	ldw	r2,-4(fp)
    b098:	10c00005 	stb	r3,0(r2)
		return 0;
    b09c:	0005883a 	mov	r2,zero
    b0a0:	00000106 	br	b0a8 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
    b0a4:	00bfffc4 	movi	r2,-1
}
    b0a8:	e037883a 	mov	sp,fp
    b0ac:	dfc00117 	ldw	ra,4(sp)
    b0b0:	df000017 	ldw	fp,0(sp)
    b0b4:	dec00204 	addi	sp,sp,8
    b0b8:	f800283a 	ret

0000b0bc <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    b0bc:	defffb04 	addi	sp,sp,-20
    b0c0:	dfc00415 	stw	ra,16(sp)
    b0c4:	df000315 	stw	fp,12(sp)
    b0c8:	df000304 	addi	fp,sp,12
    b0cc:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
    b0d0:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
    b0d4:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    b0d8:	e0bfff17 	ldw	r2,-4(fp)
    b0dc:	10800a17 	ldw	r2,40(r2)
    b0e0:	10800037 	ldwio	r2,0(r2)
    b0e4:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    b0e8:	e13ffe17 	ldw	r4,-8(fp)
    b0ec:	000ac580 	call	ac58 <read_num_bytes_available>
    b0f0:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
    b0f4:	e0bffd0b 	ldhu	r2,-12(fp)
    b0f8:	103ff71e 	bne	r2,zero,b0d8 <alt_up_ps2_clear_fifo+0x1c>
}
    b0fc:	e037883a 	mov	sp,fp
    b100:	dfc00117 	ldw	ra,4(sp)
    b104:	df000017 	ldw	fp,0(sp)
    b108:	dec00204 	addi	sp,sp,8
    b10c:	f800283a 	ret

0000b110 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    b110:	defff804 	addi	sp,sp,-32
    b114:	dfc00715 	stw	ra,28(sp)
    b118:	df000615 	stw	fp,24(sp)
    b11c:	df000604 	addi	fp,sp,24
    b120:	e13ffd15 	stw	r4,-12(fp)
    b124:	e17ffe15 	stw	r5,-8(fp)
    b128:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    b12c:	e0bffd17 	ldw	r2,-12(fp)
    b130:	10800017 	ldw	r2,0(r2)
    b134:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
    b138:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
    b13c:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
    b140:	e0fffc17 	ldw	r3,-16(fp)
    b144:	e0bfff17 	ldw	r2,-4(fp)
    b148:	18bffd16 	blt	r3,r2,b140 <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
    b14c:	e0bffe17 	ldw	r2,-8(fp)
    b150:	10c00044 	addi	r3,r2,1
    b154:	e0fffe15 	stw	r3,-8(fp)
    b158:	e13ffa17 	ldw	r4,-24(fp)
    b15c:	100b883a 	mov	r5,r2
    b160:	000afa80 	call	afa8 <alt_up_ps2_read_data_byte_timeout>
    b164:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
    b168:	e0bffb17 	ldw	r2,-20(fp)
    b16c:	10000226 	beq	r2,zero,b178 <alt_up_ps2_read_fd+0x68>
			return count;
    b170:	e0bffc17 	ldw	r2,-16(fp)
    b174:	00000406 	br	b188 <alt_up_ps2_read_fd+0x78>
		count++;
    b178:	e0bffc17 	ldw	r2,-16(fp)
    b17c:	10800044 	addi	r2,r2,1
    b180:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
    b184:	e0bffc17 	ldw	r2,-16(fp)
}
    b188:	e037883a 	mov	sp,fp
    b18c:	dfc00117 	ldw	ra,4(sp)
    b190:	df000017 	ldw	fp,0(sp)
    b194:	dec00204 	addi	sp,sp,8
    b198:	f800283a 	ret

0000b19c <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    b19c:	defff804 	addi	sp,sp,-32
    b1a0:	dfc00715 	stw	ra,28(sp)
    b1a4:	df000615 	stw	fp,24(sp)
    b1a8:	df000604 	addi	fp,sp,24
    b1ac:	e13ffd15 	stw	r4,-12(fp)
    b1b0:	e17ffe15 	stw	r5,-8(fp)
    b1b4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    b1b8:	e0bffd17 	ldw	r2,-12(fp)
    b1bc:	10800017 	ldw	r2,0(r2)
    b1c0:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    b1c4:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
    b1c8:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
    b1cc:	00001006 	br	b210 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    b1d0:	e0bffe17 	ldw	r2,-8(fp)
    b1d4:	10c00044 	addi	r3,r2,1
    b1d8:	e0fffe15 	stw	r3,-8(fp)
    b1dc:	10800003 	ldbu	r2,0(r2)
    b1e0:	10803fcc 	andi	r2,r2,255
    b1e4:	e13ffb17 	ldw	r4,-20(fp)
    b1e8:	100b883a 	mov	r5,r2
    b1ec:	000ae600 	call	ae60 <alt_up_ps2_write_data_byte>
    b1f0:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
    b1f4:	e0bffc17 	ldw	r2,-16(fp)
    b1f8:	10000226 	beq	r2,zero,b204 <alt_up_ps2_write_fd+0x68>
			return count;
    b1fc:	e0bffa17 	ldw	r2,-24(fp)
    b200:	00000706 	br	b220 <alt_up_ps2_write_fd+0x84>
		count++;
    b204:	e0bffa17 	ldw	r2,-24(fp)
    b208:	10800044 	addi	r2,r2,1
    b20c:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    b210:	e0fffa17 	ldw	r3,-24(fp)
    b214:	e0bfff17 	ldw	r2,-4(fp)
    b218:	18bfed16 	blt	r3,r2,b1d0 <alt_up_ps2_write_fd+0x34>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
    b21c:	e0bffa17 	ldw	r2,-24(fp)
}
    b220:	e037883a 	mov	sp,fp
    b224:	dfc00117 	ldw	ra,4(sp)
    b228:	df000017 	ldw	fp,0(sp)
    b22c:	dec00204 	addi	sp,sp,8
    b230:	f800283a 	ret

0000b234 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    b234:	defffc04 	addi	sp,sp,-16
    b238:	dfc00315 	stw	ra,12(sp)
    b23c:	df000215 	stw	fp,8(sp)
    b240:	df000204 	addi	fp,sp,8
    b244:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    b248:	e13fff17 	ldw	r4,-4(fp)
    b24c:	01400074 	movhi	r5,1
    b250:	297c1c04 	addi	r5,r5,-3984
    b254:	000bd3c0 	call	bd3c <alt_find_dev>
    b258:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    b25c:	e0bffe17 	ldw	r2,-8(fp)
}
    b260:	e037883a 	mov	sp,fp
    b264:	dfc00117 	ldw	ra,4(sp)
    b268:	df000017 	ldw	fp,0(sp)
    b26c:	dec00204 	addi	sp,sp,8
    b270:	f800283a 	ret

0000b274 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
    b274:	defffd04 	addi	sp,sp,-12
    b278:	df000215 	stw	fp,8(sp)
    b27c:	df000204 	addi	fp,sp,8
    b280:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    b284:	e0bfff17 	ldw	r2,-4(fp)
    b288:	10800a17 	ldw	r2,40(r2)
    b28c:	10800104 	addi	r2,r2,4
    b290:	10800037 	ldwio	r2,0(r2)
    b294:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
    b298:	e0bffe17 	ldw	r2,-8(fp)
    b29c:	10800054 	ori	r2,r2,1
    b2a0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    b2a4:	e0bfff17 	ldw	r2,-4(fp)
    b2a8:	10800a17 	ldw	r2,40(r2)
    b2ac:	10800104 	addi	r2,r2,4
    b2b0:	1007883a 	mov	r3,r2
    b2b4:	e0bffe17 	ldw	r2,-8(fp)
    b2b8:	18800035 	stwio	r2,0(r3)
}
    b2bc:	e037883a 	mov	sp,fp
    b2c0:	df000017 	ldw	fp,0(sp)
    b2c4:	dec00104 	addi	sp,sp,4
    b2c8:	f800283a 	ret

0000b2cc <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
    b2cc:	defffd04 	addi	sp,sp,-12
    b2d0:	df000215 	stw	fp,8(sp)
    b2d4:	df000204 	addi	fp,sp,8
    b2d8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    b2dc:	e0bfff17 	ldw	r2,-4(fp)
    b2e0:	10800a17 	ldw	r2,40(r2)
    b2e4:	10800104 	addi	r2,r2,4
    b2e8:	10800037 	ldwio	r2,0(r2)
    b2ec:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
    b2f0:	e0fffe17 	ldw	r3,-8(fp)
    b2f4:	00bfff84 	movi	r2,-2
    b2f8:	1884703a 	and	r2,r3,r2
    b2fc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    b300:	e0bfff17 	ldw	r2,-4(fp)
    b304:	10800a17 	ldw	r2,40(r2)
    b308:	10800104 	addi	r2,r2,4
    b30c:	1007883a 	mov	r3,r2
    b310:	e0bffe17 	ldw	r2,-8(fp)
    b314:	18800035 	stwio	r2,0(r3)
}
    b318:	e037883a 	mov	sp,fp
    b31c:	df000017 	ldw	fp,0(sp)
    b320:	dec00104 	addi	sp,sp,4
    b324:	f800283a 	ret

0000b328 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
    b328:	defffd04 	addi	sp,sp,-12
    b32c:	df000215 	stw	fp,8(sp)
    b330:	df000204 	addi	fp,sp,8
    b334:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    b338:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    b33c:	e0bfff17 	ldw	r2,-4(fp)
    b340:	10800a17 	ldw	r2,40(r2)
    b344:	10800084 	addi	r2,r2,2
    b348:	1080002b 	ldhuio	r2,0(r2)
    b34c:	10bfffcc 	andi	r2,r2,65535
    b350:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
    b354:	e0bffe0b 	ldhu	r2,-8(fp)
}
    b358:	e037883a 	mov	sp,fp
    b35c:	df000017 	ldw	fp,0(sp)
    b360:	dec00104 	addi	sp,sp,4
    b364:	f800283a 	ret

0000b368 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
    b368:	defffd04 	addi	sp,sp,-12
    b36c:	df000215 	stw	fp,8(sp)
    b370:	df000204 	addi	fp,sp,8
    b374:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    b378:	e0bfff17 	ldw	r2,-4(fp)
    b37c:	10800a17 	ldw	r2,40(r2)
    b380:	10800104 	addi	r2,r2,4
    b384:	10800037 	ldwio	r2,0(r2)
    b388:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
    b38c:	e0bffe17 	ldw	r2,-8(fp)
    b390:	1004d43a 	srli	r2,r2,16
}
    b394:	e037883a 	mov	sp,fp
    b398:	df000017 	ldw	fp,0(sp)
    b39c:	dec00104 	addi	sp,sp,4
    b3a0:	f800283a 	ret

0000b3a4 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
    b3a4:	defffd04 	addi	sp,sp,-12
    b3a8:	df000215 	stw	fp,8(sp)
    b3ac:	df000204 	addi	fp,sp,8
    b3b0:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
    b3b4:	e0bfff17 	ldw	r2,-4(fp)
    b3b8:	1080800c 	andi	r2,r2,512
    b3bc:	1004d27a 	srli	r2,r2,9
    b3c0:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
    b3c4:	e0bffe17 	ldw	r2,-8(fp)
    b3c8:	10000226 	beq	r2,zero,b3d4 <alt_up_rs232_check_parity+0x30>
    b3cc:	00bfffc4 	movi	r2,-1
    b3d0:	00000106 	br	b3d8 <alt_up_rs232_check_parity+0x34>
    b3d4:	0005883a 	mov	r2,zero
}
    b3d8:	e037883a 	mov	sp,fp
    b3dc:	df000017 	ldw	fp,0(sp)
    b3e0:	dec00104 	addi	sp,sp,4
    b3e4:	f800283a 	ret

0000b3e8 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
    b3e8:	defffd04 	addi	sp,sp,-12
    b3ec:	df000215 	stw	fp,8(sp)
    b3f0:	df000204 	addi	fp,sp,8
    b3f4:	e13ffe15 	stw	r4,-8(fp)
    b3f8:	2805883a 	mov	r2,r5
    b3fc:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    b400:	e0bffe17 	ldw	r2,-8(fp)
    b404:	10800a17 	ldw	r2,40(r2)
    b408:	1007883a 	mov	r3,r2
    b40c:	e0bfff03 	ldbu	r2,-4(fp)
    b410:	18800035 	stwio	r2,0(r3)
	return 0;
    b414:	0005883a 	mov	r2,zero
}
    b418:	e037883a 	mov	sp,fp
    b41c:	df000017 	ldw	fp,0(sp)
    b420:	dec00104 	addi	sp,sp,4
    b424:	f800283a 	ret

0000b428 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    b428:	defffa04 	addi	sp,sp,-24
    b42c:	dfc00515 	stw	ra,20(sp)
    b430:	df000415 	stw	fp,16(sp)
    b434:	df000404 	addi	fp,sp,16
    b438:	e13ffd15 	stw	r4,-12(fp)
    b43c:	e17ffe15 	stw	r5,-8(fp)
    b440:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    b444:	e0bffd17 	ldw	r2,-12(fp)
    b448:	10800a17 	ldw	r2,40(r2)
    b44c:	10800037 	ldwio	r2,0(r2)
    b450:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    b454:	e0bffc17 	ldw	r2,-16(fp)
    b458:	1007883a 	mov	r3,r2
    b45c:	e0bffe17 	ldw	r2,-8(fp)
    b460:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    b464:	e13ffc17 	ldw	r4,-16(fp)
    b468:	000b3a40 	call	b3a4 <alt_up_rs232_check_parity>
    b46c:	1007883a 	mov	r3,r2
    b470:	e0bfff17 	ldw	r2,-4(fp)
    b474:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    b478:	e0bffc17 	ldw	r2,-16(fp)
    b47c:	10a0000c 	andi	r2,r2,32768
    b480:	1004d3fa 	srli	r2,r2,15
    b484:	10bfffc4 	addi	r2,r2,-1
}
    b488:	e037883a 	mov	sp,fp
    b48c:	dfc00117 	ldw	ra,4(sp)
    b490:	df000017 	ldw	fp,0(sp)
    b494:	dec00204 	addi	sp,sp,8
    b498:	f800283a 	ret

0000b49c <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    b49c:	defff804 	addi	sp,sp,-32
    b4a0:	dfc00715 	stw	ra,28(sp)
    b4a4:	df000615 	stw	fp,24(sp)
    b4a8:	df000604 	addi	fp,sp,24
    b4ac:	e13ffd15 	stw	r4,-12(fp)
    b4b0:	e17ffe15 	stw	r5,-8(fp)
    b4b4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    b4b8:	e0bffd17 	ldw	r2,-12(fp)
    b4bc:	10800017 	ldw	r2,0(r2)
    b4c0:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    b4c4:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    b4c8:	00000e06 	br	b504 <alt_up_rs232_read_fd+0x68>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
    b4cc:	e0bffe17 	ldw	r2,-8(fp)
    b4d0:	10c00044 	addi	r3,r2,1
    b4d4:	e0fffe15 	stw	r3,-8(fp)
    b4d8:	e0fffc04 	addi	r3,fp,-16
    b4dc:	e13ffb17 	ldw	r4,-20(fp)
    b4e0:	100b883a 	mov	r5,r2
    b4e4:	180d883a 	mov	r6,r3
    b4e8:	000b4280 	call	b428 <alt_up_rs232_read_data>
    b4ec:	1000041e 	bne	r2,zero,b500 <alt_up_rs232_read_fd+0x64>
			count++;
    b4f0:	e0bffa17 	ldw	r2,-24(fp)
    b4f4:	10800044 	addi	r2,r2,1
    b4f8:	e0bffa15 	stw	r2,-24(fp)
    b4fc:	00000106 	br	b504 <alt_up_rs232_read_fd+0x68>
		else
			break;
    b500:	00000406 	br	b514 <alt_up_rs232_read_fd+0x78>
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    b504:	e0bfff17 	ldw	r2,-4(fp)
    b508:	10ffffc4 	addi	r3,r2,-1
    b50c:	e0ffff15 	stw	r3,-4(fp)
    b510:	103fee1e 	bne	r2,zero,b4cc <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
    b514:	e0bffa17 	ldw	r2,-24(fp)
}
    b518:	e037883a 	mov	sp,fp
    b51c:	dfc00117 	ldw	ra,4(sp)
    b520:	df000017 	ldw	fp,0(sp)
    b524:	dec00204 	addi	sp,sp,8
    b528:	f800283a 	ret

0000b52c <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    b52c:	defff904 	addi	sp,sp,-28
    b530:	dfc00615 	stw	ra,24(sp)
    b534:	df000515 	stw	fp,20(sp)
    b538:	df000504 	addi	fp,sp,20
    b53c:	e13ffd15 	stw	r4,-12(fp)
    b540:	e17ffe15 	stw	r5,-8(fp)
    b544:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    b548:	e0bffd17 	ldw	r2,-12(fp)
    b54c:	10800017 	ldw	r2,0(r2)
    b550:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    b554:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    b558:	00000f06 	br	b598 <alt_up_rs232_write_fd+0x6c>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    b55c:	e0bffe17 	ldw	r2,-8(fp)
    b560:	10800003 	ldbu	r2,0(r2)
    b564:	10803fcc 	andi	r2,r2,255
    b568:	e13ffc17 	ldw	r4,-16(fp)
    b56c:	100b883a 	mov	r5,r2
    b570:	000b3e80 	call	b3e8 <alt_up_rs232_write_data>
    b574:	1000071e 	bne	r2,zero,b594 <alt_up_rs232_write_fd+0x68>
		{
			count++;
    b578:	e0bffb17 	ldw	r2,-20(fp)
    b57c:	10800044 	addi	r2,r2,1
    b580:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
    b584:	e0bffe17 	ldw	r2,-8(fp)
    b588:	10800044 	addi	r2,r2,1
    b58c:	e0bffe15 	stw	r2,-8(fp)
    b590:	00000106 	br	b598 <alt_up_rs232_write_fd+0x6c>
		}
		else
			break;
    b594:	00000406 	br	b5a8 <alt_up_rs232_write_fd+0x7c>

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    b598:	e0bfff17 	ldw	r2,-4(fp)
    b59c:	10ffffc4 	addi	r3,r2,-1
    b5a0:	e0ffff15 	stw	r3,-4(fp)
    b5a4:	103fed1e 	bne	r2,zero,b55c <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
    b5a8:	e0bffb17 	ldw	r2,-20(fp)
}
    b5ac:	e037883a 	mov	sp,fp
    b5b0:	dfc00117 	ldw	ra,4(sp)
    b5b4:	df000017 	ldw	fp,0(sp)
    b5b8:	dec00204 	addi	sp,sp,8
    b5bc:	f800283a 	ret

0000b5c0 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    b5c0:	defffc04 	addi	sp,sp,-16
    b5c4:	dfc00315 	stw	ra,12(sp)
    b5c8:	df000215 	stw	fp,8(sp)
    b5cc:	df000204 	addi	fp,sp,8
    b5d0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    b5d4:	e13fff17 	ldw	r4,-4(fp)
    b5d8:	01400074 	movhi	r5,1
    b5dc:	297c1c04 	addi	r5,r5,-3984
    b5e0:	000bd3c0 	call	bd3c <alt_find_dev>
    b5e4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    b5e8:	e0bffe17 	ldw	r2,-8(fp)
}
    b5ec:	e037883a 	mov	sp,fp
    b5f0:	dfc00117 	ldw	ra,4(sp)
    b5f4:	df000017 	ldw	fp,0(sp)
    b5f8:	dec00204 	addi	sp,sp,8
    b5fc:	f800283a 	ret

0000b600 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
    b600:	defffc04 	addi	sp,sp,-16
    b604:	dfc00315 	stw	ra,12(sp)
    b608:	df000215 	stw	fp,8(sp)
    b60c:	df000204 	addi	fp,sp,8
    b610:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
    b614:	e0bfff17 	ldw	r2,-4(fp)
    b618:	10800217 	ldw	r2,8(r2)
    b61c:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
    b620:	00000b06 	br	b650 <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
    b624:	e13ffe17 	ldw	r4,-8(fp)
    b628:	01400074 	movhi	r5,1
    b62c:	29757c04 	addi	r5,r5,-10768
    b630:	000cf040 	call	cf04 <strcmp>
    b634:	1000031e 	bne	r2,zero,b644 <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
    b638:	e0bffe17 	ldw	r2,-8(fp)
    b63c:	10000005 	stb	zero,0(r2)
			break;
    b640:	00000906 	br	b668 <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
    b644:	e0bffe17 	ldw	r2,-8(fp)
    b648:	10800044 	addi	r2,r2,1
    b64c:	e0bffe15 	stw	r2,-8(fp)
    b650:	e0bffe17 	ldw	r2,-8(fp)
    b654:	10800003 	ldbu	r2,0(r2)
    b658:	10803fcc 	andi	r2,r2,255
    b65c:	1080201c 	xori	r2,r2,128
    b660:	10bfe004 	addi	r2,r2,-128
    b664:	103fef1e 	bne	r2,zero,b624 <alt_up_char_buffer_init+0x24>
			(*name) = '\0';
			break;
		}
	}
	
	return;
    b668:	0001883a 	nop
}
    b66c:	e037883a 	mov	sp,fp
    b670:	dfc00117 	ldw	ra,4(sp)
    b674:	df000017 	ldw	fp,0(sp)
    b678:	dec00204 	addi	sp,sp,8
    b67c:	f800283a 	ret

0000b680 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
    b680:	defffc04 	addi	sp,sp,-16
    b684:	dfc00315 	stw	ra,12(sp)
    b688:	df000215 	stw	fp,8(sp)
    b68c:	df000204 	addi	fp,sp,8
    b690:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
    b694:	e13fff17 	ldw	r4,-4(fp)
    b698:	01400074 	movhi	r5,1
    b69c:	297c1c04 	addi	r5,r5,-3984
    b6a0:	000bd3c0 	call	bd3c <alt_find_dev>
    b6a4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    b6a8:	e0bffe17 	ldw	r2,-8(fp)
}
    b6ac:	e037883a 	mov	sp,fp
    b6b0:	dfc00117 	ldw	ra,4(sp)
    b6b4:	df000017 	ldw	fp,0(sp)
    b6b8:	dec00204 	addi	sp,sp,8
    b6bc:	f800283a 	ret

0000b6c0 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
    b6c0:	defffa04 	addi	sp,sp,-24
    b6c4:	df000515 	stw	fp,20(sp)
    b6c8:	df000504 	addi	fp,sp,20
    b6cc:	e13ffc15 	stw	r4,-16(fp)
    b6d0:	2805883a 	mov	r2,r5
    b6d4:	e1bffe15 	stw	r6,-8(fp)
    b6d8:	e1ffff15 	stw	r7,-4(fp)
    b6dc:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    b6e0:	e0bffc17 	ldw	r2,-16(fp)
    b6e4:	10800c17 	ldw	r2,48(r2)
    b6e8:	e0fffe17 	ldw	r3,-8(fp)
    b6ec:	1880042e 	bgeu	r3,r2,b700 <alt_up_char_buffer_draw+0x40>
    b6f0:	e0bffc17 	ldw	r2,-16(fp)
    b6f4:	10800d17 	ldw	r2,52(r2)
    b6f8:	e0ffff17 	ldw	r3,-4(fp)
    b6fc:	18800236 	bltu	r3,r2,b708 <alt_up_char_buffer_draw+0x48>
		return -1;
    b700:	00bfffc4 	movi	r2,-1
    b704:	00001d06 	br	b77c <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
    b708:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
    b70c:	e0bffc17 	ldw	r2,-16(fp)
    b710:	10c00f17 	ldw	r3,60(r2)
    b714:	e0bffe17 	ldw	r2,-8(fp)
    b718:	1884703a 	and	r2,r3,r2
    b71c:	e0fffc17 	ldw	r3,-16(fp)
    b720:	18c00e17 	ldw	r3,56(r3)
    b724:	10c4983a 	sll	r2,r2,r3
    b728:	e0fffb17 	ldw	r3,-20(fp)
    b72c:	1884b03a 	or	r2,r3,r2
    b730:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
    b734:	e0bffc17 	ldw	r2,-16(fp)
    b738:	10c01117 	ldw	r3,68(r2)
    b73c:	e0bfff17 	ldw	r2,-4(fp)
    b740:	1884703a 	and	r2,r3,r2
    b744:	e0fffc17 	ldw	r3,-16(fp)
    b748:	18c01017 	ldw	r3,64(r3)
    b74c:	10c4983a 	sll	r2,r2,r3
    b750:	e0fffb17 	ldw	r3,-20(fp)
    b754:	1884b03a 	or	r2,r3,r2
    b758:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
    b75c:	e0bffc17 	ldw	r2,-16(fp)
    b760:	10c00b17 	ldw	r3,44(r2)
    b764:	e0bffb17 	ldw	r2,-20(fp)
    b768:	1885883a 	add	r2,r3,r2
    b76c:	1007883a 	mov	r3,r2
    b770:	e0bffd03 	ldbu	r2,-12(fp)
    b774:	18800025 	stbio	r2,0(r3)

	return 0;
    b778:	0005883a 	mov	r2,zero
}
    b77c:	e037883a 	mov	sp,fp
    b780:	df000017 	ldw	fp,0(sp)
    b784:	dec00104 	addi	sp,sp,4
    b788:	f800283a 	ret

0000b78c <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
    b78c:	defffa04 	addi	sp,sp,-24
    b790:	df000515 	stw	fp,20(sp)
    b794:	df000504 	addi	fp,sp,20
    b798:	e13ffc15 	stw	r4,-16(fp)
    b79c:	e17ffd15 	stw	r5,-12(fp)
    b7a0:	e1bffe15 	stw	r6,-8(fp)
    b7a4:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    b7a8:	e0bffc17 	ldw	r2,-16(fp)
    b7ac:	10800c17 	ldw	r2,48(r2)
    b7b0:	e0fffe17 	ldw	r3,-8(fp)
    b7b4:	1880042e 	bgeu	r3,r2,b7c8 <alt_up_char_buffer_string+0x3c>
    b7b8:	e0bffc17 	ldw	r2,-16(fp)
    b7bc:	10800d17 	ldw	r2,52(r2)
    b7c0:	e0ffff17 	ldw	r3,-4(fp)
    b7c4:	18800236 	bltu	r3,r2,b7d0 <alt_up_char_buffer_string+0x44>
		return -1;
    b7c8:	00bfffc4 	movi	r2,-1
    b7cc:	00002b06 	br	b87c <alt_up_char_buffer_string+0xf0>
	
	unsigned int offset = 0;
    b7d0:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
    b7d4:	e0bffc17 	ldw	r2,-16(fp)
    b7d8:	10801017 	ldw	r2,64(r2)
    b7dc:	1007883a 	mov	r3,r2
    b7e0:	e0bfff17 	ldw	r2,-4(fp)
    b7e4:	10c6983a 	sll	r3,r2,r3
    b7e8:	e0bffe17 	ldw	r2,-8(fp)
    b7ec:	1885883a 	add	r2,r3,r2
    b7f0:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
    b7f4:	00001a06 	br	b860 <alt_up_char_buffer_string+0xd4>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
    b7f8:	e0bffc17 	ldw	r2,-16(fp)
    b7fc:	10c00b17 	ldw	r3,44(r2)
    b800:	e0bffb17 	ldw	r2,-20(fp)
    b804:	1885883a 	add	r2,r3,r2
    b808:	1007883a 	mov	r3,r2
    b80c:	e0bffd17 	ldw	r2,-12(fp)
    b810:	10800003 	ldbu	r2,0(r2)
    b814:	10803fcc 	andi	r2,r2,255
    b818:	1080201c 	xori	r2,r2,128
    b81c:	10bfe004 	addi	r2,r2,-128
    b820:	18800025 	stbio	r2,0(r3)
		++ptr;
    b824:	e0bffd17 	ldw	r2,-12(fp)
    b828:	10800044 	addi	r2,r2,1
    b82c:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
    b830:	e0bffe17 	ldw	r2,-8(fp)
    b834:	10800044 	addi	r2,r2,1
    b838:	e0bffe15 	stw	r2,-8(fp)
    b83c:	e0bffc17 	ldw	r2,-16(fp)
    b840:	10800c17 	ldw	r2,48(r2)
    b844:	e0fffe17 	ldw	r3,-8(fp)
    b848:	18800236 	bltu	r3,r2,b854 <alt_up_char_buffer_string+0xc8>
			return -1;
    b84c:	00bfffc4 	movi	r2,-1
    b850:	00000a06 	br	b87c <alt_up_char_buffer_string+0xf0>
		++offset;
    b854:	e0bffb17 	ldw	r2,-20(fp)
    b858:	10800044 	addi	r2,r2,1
    b85c:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
    b860:	e0bffd17 	ldw	r2,-12(fp)
    b864:	10800003 	ldbu	r2,0(r2)
    b868:	10803fcc 	andi	r2,r2,255
    b86c:	1080201c 	xori	r2,r2,128
    b870:	10bfe004 	addi	r2,r2,-128
    b874:	103fe01e 	bne	r2,zero,b7f8 <alt_up_char_buffer_string+0x6c>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
    b878:	0005883a 	mov	r2,zero
}
    b87c:	e037883a 	mov	sp,fp
    b880:	df000017 	ldw	fp,0(sp)
    b884:	dec00104 	addi	sp,sp,4
    b888:	f800283a 	ret

0000b88c <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
    b88c:	defffe04 	addi	sp,sp,-8
    b890:	df000115 	stw	fp,4(sp)
    b894:	df000104 	addi	fp,sp,4
    b898:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
    b89c:	e0bfff17 	ldw	r2,-4(fp)
    b8a0:	10800a17 	ldw	r2,40(r2)
    b8a4:	10800084 	addi	r2,r2,2
    b8a8:	1007883a 	mov	r3,r2
    b8ac:	00800044 	movi	r2,1
    b8b0:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
    b8b4:	0001883a 	nop
    b8b8:	e0bfff17 	ldw	r2,-4(fp)
    b8bc:	10800a17 	ldw	r2,40(r2)
    b8c0:	10800084 	addi	r2,r2,2
    b8c4:	10800023 	ldbuio	r2,0(r2)
    b8c8:	10803fcc 	andi	r2,r2,255
    b8cc:	1080004c 	andi	r2,r2,1
    b8d0:	103ff91e 	bne	r2,zero,b8b8 <alt_up_char_buffer_clear+0x2c>
	return 0;
    b8d4:	0005883a 	mov	r2,zero
}
    b8d8:	e037883a 	mov	sp,fp
    b8dc:	df000017 	ldw	fp,0(sp)
    b8e0:	dec00104 	addi	sp,sp,4
    b8e4:	f800283a 	ret

0000b8e8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    b8e8:	defff504 	addi	sp,sp,-44
    b8ec:	df000a15 	stw	fp,40(sp)
    b8f0:	df000a04 	addi	fp,sp,40
    b8f4:	e13ffc15 	stw	r4,-16(fp)
    b8f8:	e17ffd15 	stw	r5,-12(fp)
    b8fc:	e1bffe15 	stw	r6,-8(fp)
    b900:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    b904:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    b908:	00800074 	movhi	r2,1
    b90c:	1082df04 	addi	r2,r2,2940
    b910:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    b914:	10003f26 	beq	r2,zero,ba14 <alt_alarm_start+0x12c>
  {
    if (alarm)
    b918:	e0bffc17 	ldw	r2,-16(fp)
    b91c:	10003b26 	beq	r2,zero,ba0c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    b920:	e0bffc17 	ldw	r2,-16(fp)
    b924:	e0fffe17 	ldw	r3,-8(fp)
    b928:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    b92c:	e0bffc17 	ldw	r2,-16(fp)
    b930:	e0ffff17 	ldw	r3,-4(fp)
    b934:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b938:	0005303a 	rdctl	r2,status
    b93c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b940:	e0fff817 	ldw	r3,-32(fp)
    b944:	00bfff84 	movi	r2,-2
    b948:	1884703a 	and	r2,r3,r2
    b94c:	1001703a 	wrctl	status,r2
  
  return context;
    b950:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    b954:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    b958:	00800074 	movhi	r2,1
    b95c:	1082e004 	addi	r2,r2,2944
    b960:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    b964:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    b968:	e0fffd17 	ldw	r3,-12(fp)
    b96c:	e0bff617 	ldw	r2,-40(fp)
    b970:	1885883a 	add	r2,r3,r2
    b974:	10c00044 	addi	r3,r2,1
    b978:	e0bffc17 	ldw	r2,-16(fp)
    b97c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    b980:	e0bffc17 	ldw	r2,-16(fp)
    b984:	10c00217 	ldw	r3,8(r2)
    b988:	e0bff617 	ldw	r2,-40(fp)
    b98c:	1880042e 	bgeu	r3,r2,b9a0 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    b990:	e0bffc17 	ldw	r2,-16(fp)
    b994:	00c00044 	movi	r3,1
    b998:	10c00405 	stb	r3,16(r2)
    b99c:	00000206 	br	b9a8 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    b9a0:	e0bffc17 	ldw	r2,-16(fp)
    b9a4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    b9a8:	e0fffc17 	ldw	r3,-16(fp)
    b9ac:	00800074 	movhi	r2,1
    b9b0:	10bc2104 	addi	r2,r2,-3964
    b9b4:	e0bff915 	stw	r2,-28(fp)
    b9b8:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    b9bc:	e0bffa17 	ldw	r2,-24(fp)
    b9c0:	e0fff917 	ldw	r3,-28(fp)
    b9c4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    b9c8:	e0bff917 	ldw	r2,-28(fp)
    b9cc:	10c00017 	ldw	r3,0(r2)
    b9d0:	e0bffa17 	ldw	r2,-24(fp)
    b9d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    b9d8:	e0bff917 	ldw	r2,-28(fp)
    b9dc:	10800017 	ldw	r2,0(r2)
    b9e0:	e0fffa17 	ldw	r3,-24(fp)
    b9e4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    b9e8:	e0bff917 	ldw	r2,-28(fp)
    b9ec:	e0fffa17 	ldw	r3,-24(fp)
    b9f0:	10c00015 	stw	r3,0(r2)
    b9f4:	e0bff717 	ldw	r2,-36(fp)
    b9f8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b9fc:	e0bffb17 	ldw	r2,-20(fp)
    ba00:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    ba04:	0005883a 	mov	r2,zero
    ba08:	00000306 	br	ba18 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    ba0c:	00bffa84 	movi	r2,-22
    ba10:	00000106 	br	ba18 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    ba14:	00bfde84 	movi	r2,-134
  }
}
    ba18:	e037883a 	mov	sp,fp
    ba1c:	df000017 	ldw	fp,0(sp)
    ba20:	dec00104 	addi	sp,sp,4
    ba24:	f800283a 	ret

0000ba28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ba28:	defffe04 	addi	sp,sp,-8
    ba2c:	dfc00115 	stw	ra,4(sp)
    ba30:	df000015 	stw	fp,0(sp)
    ba34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ba38:	00800074 	movhi	r2,1
    ba3c:	10bc1f04 	addi	r2,r2,-3972
    ba40:	10800017 	ldw	r2,0(r2)
    ba44:	10000526 	beq	r2,zero,ba5c <alt_get_errno+0x34>
    ba48:	00800074 	movhi	r2,1
    ba4c:	10bc1f04 	addi	r2,r2,-3972
    ba50:	10800017 	ldw	r2,0(r2)
    ba54:	103ee83a 	callr	r2
    ba58:	00000206 	br	ba64 <alt_get_errno+0x3c>
    ba5c:	00800074 	movhi	r2,1
    ba60:	1082e204 	addi	r2,r2,2952
}
    ba64:	e037883a 	mov	sp,fp
    ba68:	dfc00117 	ldw	ra,4(sp)
    ba6c:	df000017 	ldw	fp,0(sp)
    ba70:	dec00204 	addi	sp,sp,8
    ba74:	f800283a 	ret

0000ba78 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    ba78:	defffb04 	addi	sp,sp,-20
    ba7c:	dfc00415 	stw	ra,16(sp)
    ba80:	df000315 	stw	fp,12(sp)
    ba84:	df000304 	addi	fp,sp,12
    ba88:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    ba8c:	e0bfff17 	ldw	r2,-4(fp)
    ba90:	10000616 	blt	r2,zero,baac <close+0x34>
    ba94:	e0bfff17 	ldw	r2,-4(fp)
    ba98:	10c00324 	muli	r3,r2,12
    ba9c:	00800074 	movhi	r2,1
    baa0:	10ba8e04 	addi	r2,r2,-5576
    baa4:	1885883a 	add	r2,r3,r2
    baa8:	00000106 	br	bab0 <close+0x38>
    baac:	0005883a 	mov	r2,zero
    bab0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    bab4:	e0bffd17 	ldw	r2,-12(fp)
    bab8:	10001926 	beq	r2,zero,bb20 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    babc:	e0bffd17 	ldw	r2,-12(fp)
    bac0:	10800017 	ldw	r2,0(r2)
    bac4:	10800417 	ldw	r2,16(r2)
    bac8:	10000626 	beq	r2,zero,bae4 <close+0x6c>
    bacc:	e0bffd17 	ldw	r2,-12(fp)
    bad0:	10800017 	ldw	r2,0(r2)
    bad4:	10800417 	ldw	r2,16(r2)
    bad8:	e13ffd17 	ldw	r4,-12(fp)
    badc:	103ee83a 	callr	r2
    bae0:	00000106 	br	bae8 <close+0x70>
    bae4:	0005883a 	mov	r2,zero
    bae8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    baec:	e13fff17 	ldw	r4,-4(fp)
    baf0:	000c3580 	call	c358 <alt_release_fd>
    if (rval < 0)
    baf4:	e0bffe17 	ldw	r2,-8(fp)
    baf8:	1000070e 	bge	r2,zero,bb18 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    bafc:	000ba280 	call	ba28 <alt_get_errno>
    bb00:	1007883a 	mov	r3,r2
    bb04:	e0bffe17 	ldw	r2,-8(fp)
    bb08:	0085c83a 	sub	r2,zero,r2
    bb0c:	18800015 	stw	r2,0(r3)
      return -1;
    bb10:	00bfffc4 	movi	r2,-1
    bb14:	00000706 	br	bb34 <close+0xbc>
    }
    return 0;
    bb18:	0005883a 	mov	r2,zero
    bb1c:	00000506 	br	bb34 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    bb20:	000ba280 	call	ba28 <alt_get_errno>
    bb24:	1007883a 	mov	r3,r2
    bb28:	00801444 	movi	r2,81
    bb2c:	18800015 	stw	r2,0(r3)
    return -1;
    bb30:	00bfffc4 	movi	r2,-1
  }
}
    bb34:	e037883a 	mov	sp,fp
    bb38:	dfc00117 	ldw	ra,4(sp)
    bb3c:	df000017 	ldw	fp,0(sp)
    bb40:	dec00204 	addi	sp,sp,8
    bb44:	f800283a 	ret

0000bb48 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    bb48:	deffff04 	addi	sp,sp,-4
    bb4c:	df000015 	stw	fp,0(sp)
    bb50:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    bb54:	e037883a 	mov	sp,fp
    bb58:	df000017 	ldw	fp,0(sp)
    bb5c:	dec00104 	addi	sp,sp,4
    bb60:	f800283a 	ret

0000bb64 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    bb64:	defffc04 	addi	sp,sp,-16
    bb68:	df000315 	stw	fp,12(sp)
    bb6c:	df000304 	addi	fp,sp,12
    bb70:	e13ffd15 	stw	r4,-12(fp)
    bb74:	e17ffe15 	stw	r5,-8(fp)
    bb78:	e1bfff15 	stw	r6,-4(fp)
  return len;
    bb7c:	e0bfff17 	ldw	r2,-4(fp)
}
    bb80:	e037883a 	mov	sp,fp
    bb84:	df000017 	ldw	fp,0(sp)
    bb88:	dec00104 	addi	sp,sp,4
    bb8c:	f800283a 	ret

0000bb90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bb90:	defffe04 	addi	sp,sp,-8
    bb94:	dfc00115 	stw	ra,4(sp)
    bb98:	df000015 	stw	fp,0(sp)
    bb9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    bba0:	00800074 	movhi	r2,1
    bba4:	10bc1f04 	addi	r2,r2,-3972
    bba8:	10800017 	ldw	r2,0(r2)
    bbac:	10000526 	beq	r2,zero,bbc4 <alt_get_errno+0x34>
    bbb0:	00800074 	movhi	r2,1
    bbb4:	10bc1f04 	addi	r2,r2,-3972
    bbb8:	10800017 	ldw	r2,0(r2)
    bbbc:	103ee83a 	callr	r2
    bbc0:	00000206 	br	bbcc <alt_get_errno+0x3c>
    bbc4:	00800074 	movhi	r2,1
    bbc8:	1082e204 	addi	r2,r2,2952
}
    bbcc:	e037883a 	mov	sp,fp
    bbd0:	dfc00117 	ldw	ra,4(sp)
    bbd4:	df000017 	ldw	fp,0(sp)
    bbd8:	dec00204 	addi	sp,sp,8
    bbdc:	f800283a 	ret

0000bbe0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    bbe0:	defffa04 	addi	sp,sp,-24
    bbe4:	dfc00515 	stw	ra,20(sp)
    bbe8:	df000415 	stw	fp,16(sp)
    bbec:	df000404 	addi	fp,sp,16
    bbf0:	e13ffe15 	stw	r4,-8(fp)
    bbf4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    bbf8:	e0bffe17 	ldw	r2,-8(fp)
    bbfc:	10000326 	beq	r2,zero,bc0c <alt_dev_llist_insert+0x2c>
    bc00:	e0bffe17 	ldw	r2,-8(fp)
    bc04:	10800217 	ldw	r2,8(r2)
    bc08:	1000061e 	bne	r2,zero,bc24 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    bc0c:	000bb900 	call	bb90 <alt_get_errno>
    bc10:	1007883a 	mov	r3,r2
    bc14:	00800584 	movi	r2,22
    bc18:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    bc1c:	00bffa84 	movi	r2,-22
    bc20:	00001306 	br	bc70 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    bc24:	e0bffe17 	ldw	r2,-8(fp)
    bc28:	e0ffff17 	ldw	r3,-4(fp)
    bc2c:	e0fffc15 	stw	r3,-16(fp)
    bc30:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    bc34:	e0bffd17 	ldw	r2,-12(fp)
    bc38:	e0fffc17 	ldw	r3,-16(fp)
    bc3c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    bc40:	e0bffc17 	ldw	r2,-16(fp)
    bc44:	10c00017 	ldw	r3,0(r2)
    bc48:	e0bffd17 	ldw	r2,-12(fp)
    bc4c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    bc50:	e0bffc17 	ldw	r2,-16(fp)
    bc54:	10800017 	ldw	r2,0(r2)
    bc58:	e0fffd17 	ldw	r3,-12(fp)
    bc5c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    bc60:	e0bffc17 	ldw	r2,-16(fp)
    bc64:	e0fffd17 	ldw	r3,-12(fp)
    bc68:	10c00015 	stw	r3,0(r2)

  return 0;  
    bc6c:	0005883a 	mov	r2,zero
}
    bc70:	e037883a 	mov	sp,fp
    bc74:	dfc00117 	ldw	ra,4(sp)
    bc78:	df000017 	ldw	fp,0(sp)
    bc7c:	dec00204 	addi	sp,sp,8
    bc80:	f800283a 	ret

0000bc84 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    bc84:	defffd04 	addi	sp,sp,-12
    bc88:	dfc00215 	stw	ra,8(sp)
    bc8c:	df000115 	stw	fp,4(sp)
    bc90:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    bc94:	00800074 	movhi	r2,1
    bc98:	10b4c804 	addi	r2,r2,-11488
    bc9c:	e0bfff15 	stw	r2,-4(fp)
    bca0:	00000606 	br	bcbc <_do_ctors+0x38>
        (*ctor) (); 
    bca4:	e0bfff17 	ldw	r2,-4(fp)
    bca8:	10800017 	ldw	r2,0(r2)
    bcac:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    bcb0:	e0bfff17 	ldw	r2,-4(fp)
    bcb4:	10bfff04 	addi	r2,r2,-4
    bcb8:	e0bfff15 	stw	r2,-4(fp)
    bcbc:	e0ffff17 	ldw	r3,-4(fp)
    bcc0:	00800074 	movhi	r2,1
    bcc4:	10b4c904 	addi	r2,r2,-11484
    bcc8:	18bff62e 	bgeu	r3,r2,bca4 <_do_ctors+0x20>
        (*ctor) (); 
}
    bccc:	e037883a 	mov	sp,fp
    bcd0:	dfc00117 	ldw	ra,4(sp)
    bcd4:	df000017 	ldw	fp,0(sp)
    bcd8:	dec00204 	addi	sp,sp,8
    bcdc:	f800283a 	ret

0000bce0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    bce0:	defffd04 	addi	sp,sp,-12
    bce4:	dfc00215 	stw	ra,8(sp)
    bce8:	df000115 	stw	fp,4(sp)
    bcec:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    bcf0:	00800074 	movhi	r2,1
    bcf4:	10b4c804 	addi	r2,r2,-11488
    bcf8:	e0bfff15 	stw	r2,-4(fp)
    bcfc:	00000606 	br	bd18 <_do_dtors+0x38>
        (*dtor) (); 
    bd00:	e0bfff17 	ldw	r2,-4(fp)
    bd04:	10800017 	ldw	r2,0(r2)
    bd08:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    bd0c:	e0bfff17 	ldw	r2,-4(fp)
    bd10:	10bfff04 	addi	r2,r2,-4
    bd14:	e0bfff15 	stw	r2,-4(fp)
    bd18:	e0ffff17 	ldw	r3,-4(fp)
    bd1c:	00800074 	movhi	r2,1
    bd20:	10b4c904 	addi	r2,r2,-11484
    bd24:	18bff62e 	bgeu	r3,r2,bd00 <_do_dtors+0x20>
        (*dtor) (); 
}
    bd28:	e037883a 	mov	sp,fp
    bd2c:	dfc00117 	ldw	ra,4(sp)
    bd30:	df000017 	ldw	fp,0(sp)
    bd34:	dec00204 	addi	sp,sp,8
    bd38:	f800283a 	ret

0000bd3c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    bd3c:	defffa04 	addi	sp,sp,-24
    bd40:	dfc00515 	stw	ra,20(sp)
    bd44:	df000415 	stw	fp,16(sp)
    bd48:	df000404 	addi	fp,sp,16
    bd4c:	e13ffe15 	stw	r4,-8(fp)
    bd50:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    bd54:	e0bfff17 	ldw	r2,-4(fp)
    bd58:	10800017 	ldw	r2,0(r2)
    bd5c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    bd60:	e13ffe17 	ldw	r4,-8(fp)
    bd64:	000cfa80 	call	cfa8 <strlen>
    bd68:	10800044 	addi	r2,r2,1
    bd6c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    bd70:	00000d06 	br	bda8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    bd74:	e0bffc17 	ldw	r2,-16(fp)
    bd78:	10c00217 	ldw	r3,8(r2)
    bd7c:	e0bffd17 	ldw	r2,-12(fp)
    bd80:	1809883a 	mov	r4,r3
    bd84:	e17ffe17 	ldw	r5,-8(fp)
    bd88:	100d883a 	mov	r6,r2
    bd8c:	000cc2c0 	call	cc2c <memcmp>
    bd90:	1000021e 	bne	r2,zero,bd9c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    bd94:	e0bffc17 	ldw	r2,-16(fp)
    bd98:	00000706 	br	bdb8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    bd9c:	e0bffc17 	ldw	r2,-16(fp)
    bda0:	10800017 	ldw	r2,0(r2)
    bda4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    bda8:	e0fffc17 	ldw	r3,-16(fp)
    bdac:	e0bfff17 	ldw	r2,-4(fp)
    bdb0:	18bff01e 	bne	r3,r2,bd74 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    bdb4:	0005883a 	mov	r2,zero
}
    bdb8:	e037883a 	mov	sp,fp
    bdbc:	dfc00117 	ldw	ra,4(sp)
    bdc0:	df000017 	ldw	fp,0(sp)
    bdc4:	dec00204 	addi	sp,sp,8
    bdc8:	f800283a 	ret

0000bdcc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    bdcc:	defffe04 	addi	sp,sp,-8
    bdd0:	dfc00115 	stw	ra,4(sp)
    bdd4:	df000015 	stw	fp,0(sp)
    bdd8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    bddc:	0009883a 	mov	r4,zero
    bde0:	01440004 	movi	r5,4096
    bde4:	000cab80 	call	cab8 <alt_icache_flush>
#endif
}
    bde8:	e037883a 	mov	sp,fp
    bdec:	dfc00117 	ldw	ra,4(sp)
    bdf0:	df000017 	ldw	fp,0(sp)
    bdf4:	dec00204 	addi	sp,sp,8
    bdf8:	f800283a 	ret

0000bdfc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    bdfc:	defff904 	addi	sp,sp,-28
    be00:	dfc00615 	stw	ra,24(sp)
    be04:	df000515 	stw	fp,20(sp)
    be08:	df000504 	addi	fp,sp,20
    be0c:	e13ffc15 	stw	r4,-16(fp)
    be10:	e17ffd15 	stw	r5,-12(fp)
    be14:	e1bffe15 	stw	r6,-8(fp)
    be18:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    be1c:	e13ffd17 	ldw	r4,-12(fp)
    be20:	e17ffe17 	ldw	r5,-8(fp)
    be24:	e1bfff17 	ldw	r6,-4(fp)
    be28:	000c2000 	call	c200 <open>
    be2c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    be30:	e0bffb17 	ldw	r2,-20(fp)
    be34:	10001c16 	blt	r2,zero,bea8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    be38:	00800074 	movhi	r2,1
    be3c:	10ba8e04 	addi	r2,r2,-5576
    be40:	e0fffb17 	ldw	r3,-20(fp)
    be44:	18c00324 	muli	r3,r3,12
    be48:	10c5883a 	add	r2,r2,r3
    be4c:	10c00017 	ldw	r3,0(r2)
    be50:	e0bffc17 	ldw	r2,-16(fp)
    be54:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    be58:	00800074 	movhi	r2,1
    be5c:	10ba8e04 	addi	r2,r2,-5576
    be60:	e0fffb17 	ldw	r3,-20(fp)
    be64:	18c00324 	muli	r3,r3,12
    be68:	18c00104 	addi	r3,r3,4
    be6c:	10c5883a 	add	r2,r2,r3
    be70:	10c00017 	ldw	r3,0(r2)
    be74:	e0bffc17 	ldw	r2,-16(fp)
    be78:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    be7c:	00800074 	movhi	r2,1
    be80:	10ba8e04 	addi	r2,r2,-5576
    be84:	e0fffb17 	ldw	r3,-20(fp)
    be88:	18c00324 	muli	r3,r3,12
    be8c:	18c00204 	addi	r3,r3,8
    be90:	10c5883a 	add	r2,r2,r3
    be94:	10c00017 	ldw	r3,0(r2)
    be98:	e0bffc17 	ldw	r2,-16(fp)
    be9c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    bea0:	e13ffb17 	ldw	r4,-20(fp)
    bea4:	000c3580 	call	c358 <alt_release_fd>
  }
} 
    bea8:	e037883a 	mov	sp,fp
    beac:	dfc00117 	ldw	ra,4(sp)
    beb0:	df000017 	ldw	fp,0(sp)
    beb4:	dec00204 	addi	sp,sp,8
    beb8:	f800283a 	ret

0000bebc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    bebc:	defffb04 	addi	sp,sp,-20
    bec0:	dfc00415 	stw	ra,16(sp)
    bec4:	df000315 	stw	fp,12(sp)
    bec8:	df000304 	addi	fp,sp,12
    becc:	e13ffd15 	stw	r4,-12(fp)
    bed0:	e17ffe15 	stw	r5,-8(fp)
    bed4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    bed8:	01000074 	movhi	r4,1
    bedc:	213a9104 	addi	r4,r4,-5564
    bee0:	e17ffd17 	ldw	r5,-12(fp)
    bee4:	01800044 	movi	r6,1
    bee8:	01c07fc4 	movi	r7,511
    beec:	000bdfc0 	call	bdfc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    bef0:	01000074 	movhi	r4,1
    bef4:	213a8e04 	addi	r4,r4,-5576
    bef8:	e17ffe17 	ldw	r5,-8(fp)
    befc:	000d883a 	mov	r6,zero
    bf00:	01c07fc4 	movi	r7,511
    bf04:	000bdfc0 	call	bdfc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    bf08:	01000074 	movhi	r4,1
    bf0c:	213a9404 	addi	r4,r4,-5552
    bf10:	e17fff17 	ldw	r5,-4(fp)
    bf14:	01800044 	movi	r6,1
    bf18:	01c07fc4 	movi	r7,511
    bf1c:	000bdfc0 	call	bdfc <alt_open_fd>
}  
    bf20:	e037883a 	mov	sp,fp
    bf24:	dfc00117 	ldw	ra,4(sp)
    bf28:	df000017 	ldw	fp,0(sp)
    bf2c:	dec00204 	addi	sp,sp,8
    bf30:	f800283a 	ret

0000bf34 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    bf34:	defff004 	addi	sp,sp,-64
    bf38:	df000f15 	stw	fp,60(sp)
    bf3c:	df000f04 	addi	fp,sp,60
    bf40:	e13ffd15 	stw	r4,-12(fp)
    bf44:	e17ffe15 	stw	r5,-8(fp)
    bf48:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
    bf4c:	00bffa84 	movi	r2,-22
    bf50:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    bf54:	e0bffd17 	ldw	r2,-12(fp)
    bf58:	10800828 	cmpgeui	r2,r2,32
    bf5c:	10005c1e 	bne	r2,zero,c0d0 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bf60:	0005303a 	rdctl	r2,status
    bf64:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bf68:	e0fff317 	ldw	r3,-52(fp)
    bf6c:	00bfff84 	movi	r2,-2
    bf70:	1884703a 	and	r2,r3,r2
    bf74:	1001703a 	wrctl	status,r2
  
  return context;
    bf78:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    bf7c:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
    bf80:	00800074 	movhi	r2,1
    bf84:	109f6c04 	addi	r2,r2,32176
    bf88:	e0fffd17 	ldw	r3,-12(fp)
    bf8c:	180690fa 	slli	r3,r3,3
    bf90:	10c5883a 	add	r2,r2,r3
    bf94:	e0ffff17 	ldw	r3,-4(fp)
    bf98:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
    bf9c:	00800074 	movhi	r2,1
    bfa0:	109f6c04 	addi	r2,r2,32176
    bfa4:	e0fffd17 	ldw	r3,-12(fp)
    bfa8:	180690fa 	slli	r3,r3,3
    bfac:	18c00104 	addi	r3,r3,4
    bfb0:	10c5883a 	add	r2,r2,r3
    bfb4:	e0fffe17 	ldw	r3,-8(fp)
    bfb8:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    bfbc:	e0bfff17 	ldw	r2,-4(fp)
    bfc0:	10001f26 	beq	r2,zero,c040 <alt_irq_register+0x10c>
    bfc4:	e0bffd17 	ldw	r2,-12(fp)
    bfc8:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bfcc:	0005303a 	rdctl	r2,status
    bfd0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bfd4:	e0fff517 	ldw	r3,-44(fp)
    bfd8:	00bfff84 	movi	r2,-2
    bfdc:	1884703a 	and	r2,r3,r2
    bfe0:	1001703a 	wrctl	status,r2
  
  return context;
    bfe4:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    bfe8:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
    bfec:	e0bff417 	ldw	r2,-48(fp)
    bff0:	00c00044 	movi	r3,1
    bff4:	1884983a 	sll	r2,r3,r2
    bff8:	1007883a 	mov	r3,r2
    bffc:	00800074 	movhi	r2,1
    c000:	1082de04 	addi	r2,r2,2936
    c004:	10800017 	ldw	r2,0(r2)
    c008:	1886b03a 	or	r3,r3,r2
    c00c:	00800074 	movhi	r2,1
    c010:	1082de04 	addi	r2,r2,2936
    c014:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c018:	00800074 	movhi	r2,1
    c01c:	1082de04 	addi	r2,r2,2936
    c020:	10800017 	ldw	r2,0(r2)
    c024:	100170fa 	wrctl	ienable,r2
    c028:	e0bff617 	ldw	r2,-40(fp)
    c02c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c030:	e0bff717 	ldw	r2,-36(fp)
    c034:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c038:	0005883a 	mov	r2,zero
    c03c:	00001f06 	br	c0bc <alt_irq_register+0x188>
    c040:	e0bffd17 	ldw	r2,-12(fp)
    c044:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c048:	0005303a 	rdctl	r2,status
    c04c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c050:	e0fff917 	ldw	r3,-28(fp)
    c054:	00bfff84 	movi	r2,-2
    c058:	1884703a 	and	r2,r3,r2
    c05c:	1001703a 	wrctl	status,r2
  
  return context;
    c060:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    c064:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
    c068:	e0bff817 	ldw	r2,-32(fp)
    c06c:	00c00044 	movi	r3,1
    c070:	1884983a 	sll	r2,r3,r2
    c074:	0084303a 	nor	r2,zero,r2
    c078:	1007883a 	mov	r3,r2
    c07c:	00800074 	movhi	r2,1
    c080:	1082de04 	addi	r2,r2,2936
    c084:	10800017 	ldw	r2,0(r2)
    c088:	1886703a 	and	r3,r3,r2
    c08c:	00800074 	movhi	r2,1
    c090:	1082de04 	addi	r2,r2,2936
    c094:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c098:	00800074 	movhi	r2,1
    c09c:	1082de04 	addi	r2,r2,2936
    c0a0:	10800017 	ldw	r2,0(r2)
    c0a4:	100170fa 	wrctl	ienable,r2
    c0a8:	e0bffa17 	ldw	r2,-24(fp)
    c0ac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c0b0:	e0bffb17 	ldw	r2,-20(fp)
    c0b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c0b8:	0005883a 	mov	r2,zero
    c0bc:	e0bff115 	stw	r2,-60(fp)
    c0c0:	e0bff217 	ldw	r2,-56(fp)
    c0c4:	e0bffc15 	stw	r2,-16(fp)
    c0c8:	e0bffc17 	ldw	r2,-16(fp)
    c0cc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    c0d0:	e0bff117 	ldw	r2,-60(fp)
}
    c0d4:	e037883a 	mov	sp,fp
    c0d8:	df000017 	ldw	fp,0(sp)
    c0dc:	dec00104 	addi	sp,sp,4
    c0e0:	f800283a 	ret

0000c0e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c0e4:	defffe04 	addi	sp,sp,-8
    c0e8:	dfc00115 	stw	ra,4(sp)
    c0ec:	df000015 	stw	fp,0(sp)
    c0f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c0f4:	00800074 	movhi	r2,1
    c0f8:	10bc1f04 	addi	r2,r2,-3972
    c0fc:	10800017 	ldw	r2,0(r2)
    c100:	10000526 	beq	r2,zero,c118 <alt_get_errno+0x34>
    c104:	00800074 	movhi	r2,1
    c108:	10bc1f04 	addi	r2,r2,-3972
    c10c:	10800017 	ldw	r2,0(r2)
    c110:	103ee83a 	callr	r2
    c114:	00000206 	br	c120 <alt_get_errno+0x3c>
    c118:	00800074 	movhi	r2,1
    c11c:	1082e204 	addi	r2,r2,2952
}
    c120:	e037883a 	mov	sp,fp
    c124:	dfc00117 	ldw	ra,4(sp)
    c128:	df000017 	ldw	fp,0(sp)
    c12c:	dec00204 	addi	sp,sp,8
    c130:	f800283a 	ret

0000c134 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    c134:	defffd04 	addi	sp,sp,-12
    c138:	df000215 	stw	fp,8(sp)
    c13c:	df000204 	addi	fp,sp,8
    c140:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    c144:	e0bfff17 	ldw	r2,-4(fp)
    c148:	10800217 	ldw	r2,8(r2)
    c14c:	10d00034 	orhi	r3,r2,16384
    c150:	e0bfff17 	ldw	r2,-4(fp)
    c154:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c158:	e03ffe15 	stw	zero,-8(fp)
    c15c:	00001d06 	br	c1d4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    c160:	00800074 	movhi	r2,1
    c164:	10ba8e04 	addi	r2,r2,-5576
    c168:	e0fffe17 	ldw	r3,-8(fp)
    c16c:	18c00324 	muli	r3,r3,12
    c170:	10c5883a 	add	r2,r2,r3
    c174:	10c00017 	ldw	r3,0(r2)
    c178:	e0bfff17 	ldw	r2,-4(fp)
    c17c:	10800017 	ldw	r2,0(r2)
    c180:	1880111e 	bne	r3,r2,c1c8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    c184:	00800074 	movhi	r2,1
    c188:	10ba8e04 	addi	r2,r2,-5576
    c18c:	e0fffe17 	ldw	r3,-8(fp)
    c190:	18c00324 	muli	r3,r3,12
    c194:	18c00204 	addi	r3,r3,8
    c198:	10c5883a 	add	r2,r2,r3
    c19c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    c1a0:	1000090e 	bge	r2,zero,c1c8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    c1a4:	e0bffe17 	ldw	r2,-8(fp)
    c1a8:	10c00324 	muli	r3,r2,12
    c1ac:	00800074 	movhi	r2,1
    c1b0:	10ba8e04 	addi	r2,r2,-5576
    c1b4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    c1b8:	e0bfff17 	ldw	r2,-4(fp)
    c1bc:	18800226 	beq	r3,r2,c1c8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    c1c0:	00bffcc4 	movi	r2,-13
    c1c4:	00000a06 	br	c1f0 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c1c8:	e0bffe17 	ldw	r2,-8(fp)
    c1cc:	10800044 	addi	r2,r2,1
    c1d0:	e0bffe15 	stw	r2,-8(fp)
    c1d4:	00800074 	movhi	r2,1
    c1d8:	10bc1e04 	addi	r2,r2,-3976
    c1dc:	10800017 	ldw	r2,0(r2)
    c1e0:	1007883a 	mov	r3,r2
    c1e4:	e0bffe17 	ldw	r2,-8(fp)
    c1e8:	18bfdd2e 	bgeu	r3,r2,c160 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    c1ec:	0005883a 	mov	r2,zero
}
    c1f0:	e037883a 	mov	sp,fp
    c1f4:	df000017 	ldw	fp,0(sp)
    c1f8:	dec00104 	addi	sp,sp,4
    c1fc:	f800283a 	ret

0000c200 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    c200:	defff604 	addi	sp,sp,-40
    c204:	dfc00915 	stw	ra,36(sp)
    c208:	df000815 	stw	fp,32(sp)
    c20c:	df000804 	addi	fp,sp,32
    c210:	e13ffd15 	stw	r4,-12(fp)
    c214:	e17ffe15 	stw	r5,-8(fp)
    c218:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    c21c:	00bfffc4 	movi	r2,-1
    c220:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    c224:	00bffb44 	movi	r2,-19
    c228:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    c22c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    c230:	e13ffd17 	ldw	r4,-12(fp)
    c234:	01400074 	movhi	r5,1
    c238:	297c1c04 	addi	r5,r5,-3984
    c23c:	000bd3c0 	call	bd3c <alt_find_dev>
    c240:	e0bff815 	stw	r2,-32(fp)
    c244:	e0bff817 	ldw	r2,-32(fp)
    c248:	1000051e 	bne	r2,zero,c260 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    c24c:	e13ffd17 	ldw	r4,-12(fp)
    c250:	000c8a80 	call	c8a8 <alt_find_file>
    c254:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    c258:	00800044 	movi	r2,1
    c25c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    c260:	e0bff817 	ldw	r2,-32(fp)
    c264:	10002926 	beq	r2,zero,c30c <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    c268:	e13ff817 	ldw	r4,-32(fp)
    c26c:	000c9bc0 	call	c9bc <alt_get_fd>
    c270:	e0bff915 	stw	r2,-28(fp)
    c274:	e0bff917 	ldw	r2,-28(fp)
    c278:	1000030e 	bge	r2,zero,c288 <open+0x88>
    {
      status = index;
    c27c:	e0bff917 	ldw	r2,-28(fp)
    c280:	e0bffa15 	stw	r2,-24(fp)
    c284:	00002306 	br	c314 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
    c288:	e0bff917 	ldw	r2,-28(fp)
    c28c:	10c00324 	muli	r3,r2,12
    c290:	00800074 	movhi	r2,1
    c294:	10ba8e04 	addi	r2,r2,-5576
    c298:	1885883a 	add	r2,r3,r2
    c29c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    c2a0:	e0fffe17 	ldw	r3,-8(fp)
    c2a4:	00900034 	movhi	r2,16384
    c2a8:	10bfffc4 	addi	r2,r2,-1
    c2ac:	1886703a 	and	r3,r3,r2
    c2b0:	e0bffc17 	ldw	r2,-16(fp)
    c2b4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    c2b8:	e0bffb17 	ldw	r2,-20(fp)
    c2bc:	1000051e 	bne	r2,zero,c2d4 <open+0xd4>
    c2c0:	e13ffc17 	ldw	r4,-16(fp)
    c2c4:	000c1340 	call	c134 <alt_file_locked>
    c2c8:	e0bffa15 	stw	r2,-24(fp)
    c2cc:	e0bffa17 	ldw	r2,-24(fp)
    c2d0:	10001016 	blt	r2,zero,c314 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    c2d4:	e0bff817 	ldw	r2,-32(fp)
    c2d8:	10800317 	ldw	r2,12(r2)
    c2dc:	10000826 	beq	r2,zero,c300 <open+0x100>
    c2e0:	e0bff817 	ldw	r2,-32(fp)
    c2e4:	10800317 	ldw	r2,12(r2)
    c2e8:	e13ffc17 	ldw	r4,-16(fp)
    c2ec:	e17ffd17 	ldw	r5,-12(fp)
    c2f0:	e1bffe17 	ldw	r6,-8(fp)
    c2f4:	e1ffff17 	ldw	r7,-4(fp)
    c2f8:	103ee83a 	callr	r2
    c2fc:	00000106 	br	c304 <open+0x104>
    c300:	0005883a 	mov	r2,zero
    c304:	e0bffa15 	stw	r2,-24(fp)
    c308:	00000206 	br	c314 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
    c30c:	00bffb44 	movi	r2,-19
    c310:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    c314:	e0bffa17 	ldw	r2,-24(fp)
    c318:	1000090e 	bge	r2,zero,c340 <open+0x140>
  {
    alt_release_fd (index);  
    c31c:	e13ff917 	ldw	r4,-28(fp)
    c320:	000c3580 	call	c358 <alt_release_fd>
    ALT_ERRNO = -status;
    c324:	000c0e40 	call	c0e4 <alt_get_errno>
    c328:	1007883a 	mov	r3,r2
    c32c:	e0bffa17 	ldw	r2,-24(fp)
    c330:	0085c83a 	sub	r2,zero,r2
    c334:	18800015 	stw	r2,0(r3)
    return -1;
    c338:	00bfffc4 	movi	r2,-1
    c33c:	00000106 	br	c344 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    c340:	e0bff917 	ldw	r2,-28(fp)
}
    c344:	e037883a 	mov	sp,fp
    c348:	dfc00117 	ldw	ra,4(sp)
    c34c:	df000017 	ldw	fp,0(sp)
    c350:	dec00204 	addi	sp,sp,8
    c354:	f800283a 	ret

0000c358 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    c358:	defffe04 	addi	sp,sp,-8
    c35c:	df000115 	stw	fp,4(sp)
    c360:	df000104 	addi	fp,sp,4
    c364:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    c368:	e0bfff17 	ldw	r2,-4(fp)
    c36c:	108000d0 	cmplti	r2,r2,3
    c370:	10000d1e 	bne	r2,zero,c3a8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    c374:	00800074 	movhi	r2,1
    c378:	10ba8e04 	addi	r2,r2,-5576
    c37c:	e0ffff17 	ldw	r3,-4(fp)
    c380:	18c00324 	muli	r3,r3,12
    c384:	18c00204 	addi	r3,r3,8
    c388:	10c5883a 	add	r2,r2,r3
    c38c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    c390:	00800074 	movhi	r2,1
    c394:	10ba8e04 	addi	r2,r2,-5576
    c398:	e0ffff17 	ldw	r3,-4(fp)
    c39c:	18c00324 	muli	r3,r3,12
    c3a0:	10c5883a 	add	r2,r2,r3
    c3a4:	10000015 	stw	zero,0(r2)
  }
}
    c3a8:	e037883a 	mov	sp,fp
    c3ac:	df000017 	ldw	fp,0(sp)
    c3b0:	dec00104 	addi	sp,sp,4
    c3b4:	f800283a 	ret

0000c3b8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    c3b8:	defffa04 	addi	sp,sp,-24
    c3bc:	df000515 	stw	fp,20(sp)
    c3c0:	df000504 	addi	fp,sp,20
    c3c4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c3c8:	0005303a 	rdctl	r2,status
    c3cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c3d0:	e0fffc17 	ldw	r3,-16(fp)
    c3d4:	00bfff84 	movi	r2,-2
    c3d8:	1884703a 	and	r2,r3,r2
    c3dc:	1001703a 	wrctl	status,r2
  
  return context;
    c3e0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    c3e4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    c3e8:	e0bfff17 	ldw	r2,-4(fp)
    c3ec:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    c3f0:	e0bffd17 	ldw	r2,-12(fp)
    c3f4:	10800017 	ldw	r2,0(r2)
    c3f8:	e0fffd17 	ldw	r3,-12(fp)
    c3fc:	18c00117 	ldw	r3,4(r3)
    c400:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    c404:	e0bffd17 	ldw	r2,-12(fp)
    c408:	10800117 	ldw	r2,4(r2)
    c40c:	e0fffd17 	ldw	r3,-12(fp)
    c410:	18c00017 	ldw	r3,0(r3)
    c414:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    c418:	e0bffd17 	ldw	r2,-12(fp)
    c41c:	e0fffd17 	ldw	r3,-12(fp)
    c420:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    c424:	e0bffd17 	ldw	r2,-12(fp)
    c428:	e0fffd17 	ldw	r3,-12(fp)
    c42c:	10c00015 	stw	r3,0(r2)
    c430:	e0bffb17 	ldw	r2,-20(fp)
    c434:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c438:	e0bffe17 	ldw	r2,-8(fp)
    c43c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    c440:	e037883a 	mov	sp,fp
    c444:	df000017 	ldw	fp,0(sp)
    c448:	dec00104 	addi	sp,sp,4
    c44c:	f800283a 	ret

0000c450 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    c450:	defffb04 	addi	sp,sp,-20
    c454:	dfc00415 	stw	ra,16(sp)
    c458:	df000315 	stw	fp,12(sp)
    c45c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    c460:	d0a02a17 	ldw	r2,-32600(gp)
    c464:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    c468:	d0a6e917 	ldw	r2,-25692(gp)
    c46c:	10800044 	addi	r2,r2,1
    c470:	d0a6e915 	stw	r2,-25692(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    c474:	00002e06 	br	c530 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    c478:	e0bffd17 	ldw	r2,-12(fp)
    c47c:	10800017 	ldw	r2,0(r2)
    c480:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    c484:	e0bffd17 	ldw	r2,-12(fp)
    c488:	10800403 	ldbu	r2,16(r2)
    c48c:	10803fcc 	andi	r2,r2,255
    c490:	10000426 	beq	r2,zero,c4a4 <alt_tick+0x54>
    c494:	d0a6e917 	ldw	r2,-25692(gp)
    c498:	1000021e 	bne	r2,zero,c4a4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    c49c:	e0bffd17 	ldw	r2,-12(fp)
    c4a0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    c4a4:	e0bffd17 	ldw	r2,-12(fp)
    c4a8:	10800217 	ldw	r2,8(r2)
    c4ac:	d0e6e917 	ldw	r3,-25692(gp)
    c4b0:	18801d36 	bltu	r3,r2,c528 <alt_tick+0xd8>
    c4b4:	e0bffd17 	ldw	r2,-12(fp)
    c4b8:	10800403 	ldbu	r2,16(r2)
    c4bc:	10803fcc 	andi	r2,r2,255
    c4c0:	1000191e 	bne	r2,zero,c528 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    c4c4:	e0bffd17 	ldw	r2,-12(fp)
    c4c8:	10800317 	ldw	r2,12(r2)
    c4cc:	e0fffd17 	ldw	r3,-12(fp)
    c4d0:	18c00517 	ldw	r3,20(r3)
    c4d4:	1809883a 	mov	r4,r3
    c4d8:	103ee83a 	callr	r2
    c4dc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    c4e0:	e0bfff17 	ldw	r2,-4(fp)
    c4e4:	1000031e 	bne	r2,zero,c4f4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    c4e8:	e13ffd17 	ldw	r4,-12(fp)
    c4ec:	000c3b80 	call	c3b8 <alt_alarm_stop>
    c4f0:	00000d06 	br	c528 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    c4f4:	e0bffd17 	ldw	r2,-12(fp)
    c4f8:	10c00217 	ldw	r3,8(r2)
    c4fc:	e0bfff17 	ldw	r2,-4(fp)
    c500:	1887883a 	add	r3,r3,r2
    c504:	e0bffd17 	ldw	r2,-12(fp)
    c508:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    c50c:	e0bffd17 	ldw	r2,-12(fp)
    c510:	10c00217 	ldw	r3,8(r2)
    c514:	d0a6e917 	ldw	r2,-25692(gp)
    c518:	1880032e 	bgeu	r3,r2,c528 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    c51c:	e0bffd17 	ldw	r2,-12(fp)
    c520:	00c00044 	movi	r3,1
    c524:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    c528:	e0bffe17 	ldw	r2,-8(fp)
    c52c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    c530:	e0fffd17 	ldw	r3,-12(fp)
    c534:	d0a02a04 	addi	r2,gp,-32600
    c538:	18bfcf1e 	bne	r3,r2,c478 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    c53c:	00021180 	call	2118 <OSTimeTick>
}
    c540:	e037883a 	mov	sp,fp
    c544:	dfc00117 	ldw	ra,4(sp)
    c548:	df000017 	ldw	fp,0(sp)
    c54c:	dec00204 	addi	sp,sp,8
    c550:	f800283a 	ret

0000c554 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    c554:	deffff04 	addi	sp,sp,-4
    c558:	df000015 	stw	fp,0(sp)
    c55c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    c560:	000170fa 	wrctl	ienable,zero
}
    c564:	e037883a 	mov	sp,fp
    c568:	df000017 	ldw	fp,0(sp)
    c56c:	dec00104 	addi	sp,sp,4
    c570:	f800283a 	ret

0000c574 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
    c574:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
    c578:	d0e02d17 	ldw	r3,-32588(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
    c57c:	d126e117 	ldw	r4,-25724(gp)

      stw ra,  0(sp)
    c580:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
    c584:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
    c588:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
    c58c:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
    c590:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
    c594:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
    c598:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
    c59c:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
    c5a0:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
    c5a4:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
    c5a8:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
    c5ac:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
    c5b0:	000c7e00 	call	c7e0 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
    c5b4:	d126dc17 	ldw	r4,-25744(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
    c5b8:	d166d407 	ldb	r5,-25776(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
    c5bc:	d126e115 	stw	r4,-25724(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
    c5c0:	d166d445 	stb	r5,-25775(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
    c5c4:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
    c5c8:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
    c5cc:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
    c5d0:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
    c5d4:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
    c5d8:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
    c5dc:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
    c5e0:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
    c5e4:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
    c5e8:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
    c5ec:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
    c5f0:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
    c5f4:	d0e02d15 	stw	r3,-32588(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
    c5f8:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
    c5fc:	f800283a 	ret

0000c600 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
    c600:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
    c604:	047fff84 	movi	r17,-2
      and   r18, r18, r17
    c608:	9464703a 	and	r18,r18,r17
      wrctl status, r18
    c60c:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
    c610:	000c7e00 	call	c7e0 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
    c614:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
    c618:	d4a6d245 	stb	r18,-25783(gp)

      /*
       * start execution of the new task.
       */

      br 9b
    c61c:	003fe506 	br	c5b4 <OSCtxSw+0x40>

0000c620 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
    c620:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
    c624:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
    c628:	10800054 	ori	r2,r2,1
      wrctl status, r2
    c62c:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
    c630:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
    c634:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
    c638:	dec00204 	addi	sp,sp,8

      callr r2
    c63c:	103ee83a 	callr	r2

      nop
    c640:	0001883a 	nop

0000c644 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
    c644:	defff704 	addi	sp,sp,-36
    c648:	dfc00815 	stw	ra,32(sp)
    c64c:	df000715 	stw	fp,28(sp)
    c650:	df000704 	addi	fp,sp,28
    c654:	e13ffc15 	stw	r4,-16(fp)
    c658:	e17ffd15 	stw	r5,-12(fp)
    c65c:	e1bffe15 	stw	r6,-8(fp)
    c660:	3805883a 	mov	r2,r7
    c664:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
    c668:	e0fffe17 	ldw	r3,-8(fp)
    c66c:	00bfff04 	movi	r2,-4
    c670:	1884703a 	and	r2,r3,r2
    c674:	10bef704 	addi	r2,r2,-1060
    c678:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
    c67c:	e13ff917 	ldw	r4,-28(fp)
    c680:	000b883a 	mov	r5,zero
    c684:	01810904 	movi	r6,1060
    c688:	000cde00 	call	cde0 <memset>
    c68c:	e0bff917 	ldw	r2,-28(fp)
    c690:	10c0bb04 	addi	r3,r2,748
    c694:	e0bff917 	ldw	r2,-28(fp)
    c698:	10c00115 	stw	r3,4(r2)
    c69c:	e0bff917 	ldw	r2,-28(fp)
    c6a0:	10c0d504 	addi	r3,r2,852
    c6a4:	e0bff917 	ldw	r2,-28(fp)
    c6a8:	10c00215 	stw	r3,8(r2)
    c6ac:	e0bff917 	ldw	r2,-28(fp)
    c6b0:	10c0ef04 	addi	r3,r2,956
    c6b4:	e0bff917 	ldw	r2,-28(fp)
    c6b8:	10c00315 	stw	r3,12(r2)
    c6bc:	e0fff917 	ldw	r3,-28(fp)
    c6c0:	00800074 	movhi	r2,1
    c6c4:	10b58604 	addi	r2,r2,-10728
    c6c8:	18800d15 	stw	r2,52(r3)
    c6cc:	e0bff917 	ldw	r2,-28(fp)
    c6d0:	00c00044 	movi	r3,1
    c6d4:	10c02915 	stw	r3,164(r2)
    c6d8:	10002a15 	stw	zero,168(r2)
    c6dc:	e0bff917 	ldw	r2,-28(fp)
    c6e0:	00ccc384 	movi	r3,13070
    c6e4:	10c02b0d 	sth	r3,172(r2)
    c6e8:	e0bff917 	ldw	r2,-28(fp)
    c6ec:	00eaf344 	movi	r3,-21555
    c6f0:	10c02b8d 	sth	r3,174(r2)
    c6f4:	e0bff917 	ldw	r2,-28(fp)
    c6f8:	00c48d04 	movi	r3,4660
    c6fc:	10c02c0d 	sth	r3,176(r2)
    c700:	e0bff917 	ldw	r2,-28(fp)
    c704:	00f99b44 	movi	r3,-6547
    c708:	10c02c8d 	sth	r3,178(r2)
    c70c:	e0bff917 	ldw	r2,-28(fp)
    c710:	00f7bb04 	movi	r3,-8468
    c714:	10c02d0d 	sth	r3,180(r2)
    c718:	e0bff917 	ldw	r2,-28(fp)
    c71c:	00c00144 	movi	r3,5
    c720:	10c02d8d 	sth	r3,182(r2)
    c724:	e0bff917 	ldw	r2,-28(fp)
    c728:	00c002c4 	movi	r3,11
    c72c:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
    c730:	e0bff917 	ldw	r2,-28(fp)
    c734:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
    c738:	e0bffa17 	ldw	r2,-24(fp)
    c73c:	10bff304 	addi	r2,r2,-52
    c740:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
    c744:	e0bffb17 	ldw	r2,-20(fp)
    c748:	10800c04 	addi	r2,r2,48
    c74c:	e0fffc17 	ldw	r3,-16(fp)
    c750:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
    c754:	e0bffb17 	ldw	r2,-20(fp)
    c758:	10800b04 	addi	r2,r2,44
    c75c:	e0fffd17 	ldw	r3,-12(fp)
    c760:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
    c764:	e0bffb17 	ldw	r2,-20(fp)
    c768:	10800a04 	addi	r2,r2,40
    c76c:	e0fff917 	ldw	r3,-28(fp)
    c770:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
    c774:	00800074 	movhi	r2,1
    c778:	10b18804 	addi	r2,r2,-14816
    c77c:	10c00104 	addi	r3,r2,4
    c780:	e0bffb17 	ldw	r2,-20(fp)
    c784:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
    c788:	e0bffb17 	ldw	r2,-20(fp)
}
    c78c:	e037883a 	mov	sp,fp
    c790:	dfc00117 	ldw	ra,4(sp)
    c794:	df000017 	ldw	fp,0(sp)
    c798:	dec00204 	addi	sp,sp,8
    c79c:	f800283a 	ret

0000c7a0 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
    c7a0:	defffe04 	addi	sp,sp,-8
    c7a4:	df000115 	stw	fp,4(sp)
    c7a8:	df000104 	addi	fp,sp,4
    c7ac:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
    c7b0:	e037883a 	mov	sp,fp
    c7b4:	df000017 	ldw	fp,0(sp)
    c7b8:	dec00104 	addi	sp,sp,4
    c7bc:	f800283a 	ret

0000c7c0 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
    c7c0:	defffe04 	addi	sp,sp,-8
    c7c4:	df000115 	stw	fp,4(sp)
    c7c8:	df000104 	addi	fp,sp,4
    c7cc:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
    c7d0:	e037883a 	mov	sp,fp
    c7d4:	df000017 	ldw	fp,0(sp)
    c7d8:	dec00104 	addi	sp,sp,4
    c7dc:	f800283a 	ret

0000c7e0 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
    c7e0:	deffff04 	addi	sp,sp,-4
    c7e4:	df000015 	stw	fp,0(sp)
    c7e8:	d839883a 	mov	fp,sp
}
    c7ec:	e037883a 	mov	sp,fp
    c7f0:	df000017 	ldw	fp,0(sp)
    c7f4:	dec00104 	addi	sp,sp,4
    c7f8:	f800283a 	ret

0000c7fc <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
    c7fc:	deffff04 	addi	sp,sp,-4
    c800:	df000015 	stw	fp,0(sp)
    c804:	d839883a 	mov	fp,sp
}
    c808:	e037883a 	mov	sp,fp
    c80c:	df000017 	ldw	fp,0(sp)
    c810:	dec00104 	addi	sp,sp,4
    c814:	f800283a 	ret

0000c818 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
    c818:	deffff04 	addi	sp,sp,-4
    c81c:	df000015 	stw	fp,0(sp)
    c820:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
    c824:	e037883a 	mov	sp,fp
    c828:	df000017 	ldw	fp,0(sp)
    c82c:	dec00104 	addi	sp,sp,4
    c830:	f800283a 	ret

0000c834 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
    c834:	deffff04 	addi	sp,sp,-4
    c838:	df000015 	stw	fp,0(sp)
    c83c:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
    c840:	e037883a 	mov	sp,fp
    c844:	df000017 	ldw	fp,0(sp)
    c848:	dec00104 	addi	sp,sp,4
    c84c:	f800283a 	ret

0000c850 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
    c850:	deffff04 	addi	sp,sp,-4
    c854:	df000015 	stw	fp,0(sp)
    c858:	d839883a 	mov	fp,sp
}
    c85c:	e037883a 	mov	sp,fp
    c860:	df000017 	ldw	fp,0(sp)
    c864:	dec00104 	addi	sp,sp,4
    c868:	f800283a 	ret

0000c86c <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
    c86c:	deffff04 	addi	sp,sp,-4
    c870:	df000015 	stw	fp,0(sp)
    c874:	d839883a 	mov	fp,sp
}
    c878:	e037883a 	mov	sp,fp
    c87c:	df000017 	ldw	fp,0(sp)
    c880:	dec00104 	addi	sp,sp,4
    c884:	f800283a 	ret

0000c888 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
    c888:	defffe04 	addi	sp,sp,-8
    c88c:	df000115 	stw	fp,4(sp)
    c890:	df000104 	addi	fp,sp,4
    c894:	e13fff15 	stw	r4,-4(fp)
}
    c898:	e037883a 	mov	sp,fp
    c89c:	df000017 	ldw	fp,0(sp)
    c8a0:	dec00104 	addi	sp,sp,4
    c8a4:	f800283a 	ret

0000c8a8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    c8a8:	defffb04 	addi	sp,sp,-20
    c8ac:	dfc00415 	stw	ra,16(sp)
    c8b0:	df000315 	stw	fp,12(sp)
    c8b4:	df000304 	addi	fp,sp,12
    c8b8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    c8bc:	00800074 	movhi	r2,1
    c8c0:	10bc1a04 	addi	r2,r2,-3992
    c8c4:	10800017 	ldw	r2,0(r2)
    c8c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c8cc:	00003106 	br	c994 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    c8d0:	e0bffd17 	ldw	r2,-12(fp)
    c8d4:	10800217 	ldw	r2,8(r2)
    c8d8:	1009883a 	mov	r4,r2
    c8dc:	000cfa80 	call	cfa8 <strlen>
    c8e0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    c8e4:	e0bffd17 	ldw	r2,-12(fp)
    c8e8:	10c00217 	ldw	r3,8(r2)
    c8ec:	e0bffe17 	ldw	r2,-8(fp)
    c8f0:	10bfffc4 	addi	r2,r2,-1
    c8f4:	1885883a 	add	r2,r3,r2
    c8f8:	10800003 	ldbu	r2,0(r2)
    c8fc:	10803fcc 	andi	r2,r2,255
    c900:	1080201c 	xori	r2,r2,128
    c904:	10bfe004 	addi	r2,r2,-128
    c908:	10800bd8 	cmpnei	r2,r2,47
    c90c:	1000031e 	bne	r2,zero,c91c <alt_find_file+0x74>
    {
      len -= 1;
    c910:	e0bffe17 	ldw	r2,-8(fp)
    c914:	10bfffc4 	addi	r2,r2,-1
    c918:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c91c:	e0bffe17 	ldw	r2,-8(fp)
    c920:	e0ffff17 	ldw	r3,-4(fp)
    c924:	1885883a 	add	r2,r3,r2
    c928:	10800003 	ldbu	r2,0(r2)
    c92c:	10803fcc 	andi	r2,r2,255
    c930:	1080201c 	xori	r2,r2,128
    c934:	10bfe004 	addi	r2,r2,-128
    c938:	10800be0 	cmpeqi	r2,r2,47
    c93c:	1000081e 	bne	r2,zero,c960 <alt_find_file+0xb8>
    c940:	e0bffe17 	ldw	r2,-8(fp)
    c944:	e0ffff17 	ldw	r3,-4(fp)
    c948:	1885883a 	add	r2,r3,r2
    c94c:	10800003 	ldbu	r2,0(r2)
    c950:	10803fcc 	andi	r2,r2,255
    c954:	1080201c 	xori	r2,r2,128
    c958:	10bfe004 	addi	r2,r2,-128
    c95c:	10000a1e 	bne	r2,zero,c988 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    c960:	e0bffd17 	ldw	r2,-12(fp)
    c964:	10c00217 	ldw	r3,8(r2)
    c968:	e0bffe17 	ldw	r2,-8(fp)
    c96c:	1809883a 	mov	r4,r3
    c970:	e17fff17 	ldw	r5,-4(fp)
    c974:	100d883a 	mov	r6,r2
    c978:	000cc2c0 	call	cc2c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c97c:	1000021e 	bne	r2,zero,c988 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    c980:	e0bffd17 	ldw	r2,-12(fp)
    c984:	00000806 	br	c9a8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    c988:	e0bffd17 	ldw	r2,-12(fp)
    c98c:	10800017 	ldw	r2,0(r2)
    c990:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c994:	e0fffd17 	ldw	r3,-12(fp)
    c998:	00800074 	movhi	r2,1
    c99c:	10bc1a04 	addi	r2,r2,-3992
    c9a0:	18bfcb1e 	bne	r3,r2,c8d0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    c9a4:	0005883a 	mov	r2,zero
}
    c9a8:	e037883a 	mov	sp,fp
    c9ac:	dfc00117 	ldw	ra,4(sp)
    c9b0:	df000017 	ldw	fp,0(sp)
    c9b4:	dec00204 	addi	sp,sp,8
    c9b8:	f800283a 	ret

0000c9bc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    c9bc:	defff904 	addi	sp,sp,-28
    c9c0:	dfc00615 	stw	ra,24(sp)
    c9c4:	df000515 	stw	fp,20(sp)
    c9c8:	df000504 	addi	fp,sp,20
    c9cc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    c9d0:	00bffa04 	movi	r2,-24
    c9d4:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
    c9d8:	00800074 	movhi	r2,1
    c9dc:	1082dd04 	addi	r2,r2,2932
    c9e0:	10800017 	ldw	r2,0(r2)
    c9e4:	e0bffd15 	stw	r2,-12(fp)
    c9e8:	e03ffe0d 	sth	zero,-8(fp)
    c9ec:	e0fffe0b 	ldhu	r3,-8(fp)
    c9f0:	e0bffe84 	addi	r2,fp,-6
    c9f4:	e13ffd17 	ldw	r4,-12(fp)
    c9f8:	180b883a 	mov	r5,r3
    c9fc:	100d883a 	mov	r6,r2
    ca00:	0006bb40 	call	6bb4 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    ca04:	e03ffb15 	stw	zero,-20(fp)
    ca08:	00001d06 	br	ca80 <alt_get_fd+0xc4>
  {
    if (!alt_fd_list[i].dev)
    ca0c:	00800074 	movhi	r2,1
    ca10:	10ba8e04 	addi	r2,r2,-5576
    ca14:	e0fffb17 	ldw	r3,-20(fp)
    ca18:	18c00324 	muli	r3,r3,12
    ca1c:	10c5883a 	add	r2,r2,r3
    ca20:	10800017 	ldw	r2,0(r2)
    ca24:	1000131e 	bne	r2,zero,ca74 <alt_get_fd+0xb8>
    {
      alt_fd_list[i].dev = dev;
    ca28:	00800074 	movhi	r2,1
    ca2c:	10ba8e04 	addi	r2,r2,-5576
    ca30:	e0fffb17 	ldw	r3,-20(fp)
    ca34:	18c00324 	muli	r3,r3,12
    ca38:	10c5883a 	add	r2,r2,r3
    ca3c:	e0ffff17 	ldw	r3,-4(fp)
    ca40:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    ca44:	00800074 	movhi	r2,1
    ca48:	10bc1e04 	addi	r2,r2,-3976
    ca4c:	10c00017 	ldw	r3,0(r2)
    ca50:	e0bffb17 	ldw	r2,-20(fp)
    ca54:	1880040e 	bge	r3,r2,ca68 <alt_get_fd+0xac>
      {
        alt_max_fd = i;
    ca58:	00800074 	movhi	r2,1
    ca5c:	10bc1e04 	addi	r2,r2,-3976
    ca60:	e0fffb17 	ldw	r3,-20(fp)
    ca64:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    ca68:	e0bffb17 	ldw	r2,-20(fp)
    ca6c:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
    ca70:	00000606 	br	ca8c <alt_get_fd+0xd0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    ca74:	e0bffb17 	ldw	r2,-20(fp)
    ca78:	10800044 	addi	r2,r2,1
    ca7c:	e0bffb15 	stw	r2,-20(fp)
    ca80:	e0bffb17 	ldw	r2,-20(fp)
    ca84:	10800810 	cmplti	r2,r2,32
    ca88:	103fe01e 	bne	r2,zero,ca0c <alt_get_fd+0x50>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
    ca8c:	00800074 	movhi	r2,1
    ca90:	1082dd04 	addi	r2,r2,2932
    ca94:	10800017 	ldw	r2,0(r2)
    ca98:	1009883a 	mov	r4,r2
    ca9c:	0006f880 	call	6f88 <OSSemPost>

  return rc;
    caa0:	e0bffc17 	ldw	r2,-16(fp)
}
    caa4:	e037883a 	mov	sp,fp
    caa8:	dfc00117 	ldw	ra,4(sp)
    caac:	df000017 	ldw	fp,0(sp)
    cab0:	dec00204 	addi	sp,sp,8
    cab4:	f800283a 	ret

0000cab8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    cab8:	defffb04 	addi	sp,sp,-20
    cabc:	df000415 	stw	fp,16(sp)
    cac0:	df000404 	addi	fp,sp,16
    cac4:	e13ffe15 	stw	r4,-8(fp)
    cac8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    cacc:	e0bfff17 	ldw	r2,-4(fp)
    cad0:	10840070 	cmpltui	r2,r2,4097
    cad4:	1000021e 	bne	r2,zero,cae0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    cad8:	00840004 	movi	r2,4096
    cadc:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    cae0:	e0fffe17 	ldw	r3,-8(fp)
    cae4:	e0bfff17 	ldw	r2,-4(fp)
    cae8:	1885883a 	add	r2,r3,r2
    caec:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    caf0:	e0bffe17 	ldw	r2,-8(fp)
    caf4:	e0bffc15 	stw	r2,-16(fp)
    caf8:	00000506 	br	cb10 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    cafc:	e0bffc17 	ldw	r2,-16(fp)
    cb00:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    cb04:	e0bffc17 	ldw	r2,-16(fp)
    cb08:	10800804 	addi	r2,r2,32
    cb0c:	e0bffc15 	stw	r2,-16(fp)
    cb10:	e0fffc17 	ldw	r3,-16(fp)
    cb14:	e0bffd17 	ldw	r2,-12(fp)
    cb18:	18bff836 	bltu	r3,r2,cafc <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    cb1c:	e0bffe17 	ldw	r2,-8(fp)
    cb20:	108007cc 	andi	r2,r2,31
    cb24:	10000226 	beq	r2,zero,cb30 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    cb28:	e0bffc17 	ldw	r2,-16(fp)
    cb2c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    cb30:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    cb34:	e037883a 	mov	sp,fp
    cb38:	df000017 	ldw	fp,0(sp)
    cb3c:	dec00104 	addi	sp,sp,4
    cb40:	f800283a 	ret

0000cb44 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    cb44:	defffe04 	addi	sp,sp,-8
    cb48:	df000115 	stw	fp,4(sp)
    cb4c:	df000104 	addi	fp,sp,4
    cb50:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    cb54:	e0bfff17 	ldw	r2,-4(fp)
    cb58:	10bffe84 	addi	r2,r2,-6
    cb5c:	10c00428 	cmpgeui	r3,r2,16
    cb60:	18001a1e 	bne	r3,zero,cbcc <alt_exception_cause_generated_bad_addr+0x88>
    cb64:	100690ba 	slli	r3,r2,2
    cb68:	00800074 	movhi	r2,1
    cb6c:	10b2df04 	addi	r2,r2,-13444
    cb70:	1885883a 	add	r2,r3,r2
    cb74:	10800017 	ldw	r2,0(r2)
    cb78:	1000683a 	jmp	r2
    cb7c:	0000cbbc 	xorhi	zero,zero,814
    cb80:	0000cbbc 	xorhi	zero,zero,814
    cb84:	0000cbcc 	andi	zero,zero,815
    cb88:	0000cbcc 	andi	zero,zero,815
    cb8c:	0000cbcc 	andi	zero,zero,815
    cb90:	0000cbbc 	xorhi	zero,zero,814
    cb94:	0000cbc4 	movi	zero,815
    cb98:	0000cbcc 	andi	zero,zero,815
    cb9c:	0000cbbc 	xorhi	zero,zero,814
    cba0:	0000cbbc 	xorhi	zero,zero,814
    cba4:	0000cbcc 	andi	zero,zero,815
    cba8:	0000cbbc 	xorhi	zero,zero,814
    cbac:	0000cbc4 	movi	zero,815
    cbb0:	0000cbcc 	andi	zero,zero,815
    cbb4:	0000cbcc 	andi	zero,zero,815
    cbb8:	0000cbbc 	xorhi	zero,zero,814
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    cbbc:	00800044 	movi	r2,1
    cbc0:	00000306 	br	cbd0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    cbc4:	0005883a 	mov	r2,zero
    cbc8:	00000106 	br	cbd0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    cbcc:	0005883a 	mov	r2,zero
  }
}
    cbd0:	e037883a 	mov	sp,fp
    cbd4:	df000017 	ldw	fp,0(sp)
    cbd8:	dec00104 	addi	sp,sp,4
    cbdc:	f800283a 	ret

0000cbe0 <atexit>:
    cbe0:	200b883a 	mov	r5,r4
    cbe4:	000d883a 	mov	r6,zero
    cbe8:	0009883a 	mov	r4,zero
    cbec:	000f883a 	mov	r7,zero
    cbf0:	000d0401 	jmpi	d040 <__register_exitproc>

0000cbf4 <exit>:
    cbf4:	defffe04 	addi	sp,sp,-8
    cbf8:	000b883a 	mov	r5,zero
    cbfc:	dc000015 	stw	r16,0(sp)
    cc00:	dfc00115 	stw	ra,4(sp)
    cc04:	2021883a 	mov	r16,r4
    cc08:	000d1540 	call	d154 <__call_exitprocs>
    cc0c:	00800074 	movhi	r2,1
    cc10:	10bc2304 	addi	r2,r2,-3956
    cc14:	11000017 	ldw	r4,0(r2)
    cc18:	20800f17 	ldw	r2,60(r4)
    cc1c:	10000126 	beq	r2,zero,cc24 <exit+0x30>
    cc20:	103ee83a 	callr	r2
    cc24:	8009883a 	mov	r4,r16
    cc28:	000d2e80 	call	d2e8 <_exit>

0000cc2c <memcmp>:
    cc2c:	01c000c4 	movi	r7,3
    cc30:	3980192e 	bgeu	r7,r6,cc98 <memcmp+0x6c>
    cc34:	2144b03a 	or	r2,r4,r5
    cc38:	11c4703a 	and	r2,r2,r7
    cc3c:	10000f26 	beq	r2,zero,cc7c <memcmp+0x50>
    cc40:	20800003 	ldbu	r2,0(r4)
    cc44:	28c00003 	ldbu	r3,0(r5)
    cc48:	10c0151e 	bne	r2,r3,cca0 <memcmp+0x74>
    cc4c:	31bfff84 	addi	r6,r6,-2
    cc50:	01ffffc4 	movi	r7,-1
    cc54:	00000406 	br	cc68 <memcmp+0x3c>
    cc58:	20800003 	ldbu	r2,0(r4)
    cc5c:	28c00003 	ldbu	r3,0(r5)
    cc60:	31bfffc4 	addi	r6,r6,-1
    cc64:	10c00e1e 	bne	r2,r3,cca0 <memcmp+0x74>
    cc68:	21000044 	addi	r4,r4,1
    cc6c:	29400044 	addi	r5,r5,1
    cc70:	31fff91e 	bne	r6,r7,cc58 <memcmp+0x2c>
    cc74:	0005883a 	mov	r2,zero
    cc78:	f800283a 	ret
    cc7c:	20c00017 	ldw	r3,0(r4)
    cc80:	28800017 	ldw	r2,0(r5)
    cc84:	1880041e 	bne	r3,r2,cc98 <memcmp+0x6c>
    cc88:	31bfff04 	addi	r6,r6,-4
    cc8c:	21000104 	addi	r4,r4,4
    cc90:	29400104 	addi	r5,r5,4
    cc94:	39bff936 	bltu	r7,r6,cc7c <memcmp+0x50>
    cc98:	303fe91e 	bne	r6,zero,cc40 <memcmp+0x14>
    cc9c:	003ff506 	br	cc74 <memcmp+0x48>
    cca0:	10c5c83a 	sub	r2,r2,r3
    cca4:	f800283a 	ret

0000cca8 <memcpy>:
    cca8:	deffff04 	addi	sp,sp,-4
    ccac:	dc000015 	stw	r16,0(sp)
    ccb0:	00c003c4 	movi	r3,15
    ccb4:	2005883a 	mov	r2,r4
    ccb8:	1980432e 	bgeu	r3,r6,cdc8 <memcpy+0x120>
    ccbc:	2146b03a 	or	r3,r4,r5
    ccc0:	18c000cc 	andi	r3,r3,3
    ccc4:	1800421e 	bne	r3,zero,cdd0 <memcpy+0x128>
    ccc8:	343ffc04 	addi	r16,r6,-16
    cccc:	8020d13a 	srli	r16,r16,4
    ccd0:	28c00104 	addi	r3,r5,4
    ccd4:	23400104 	addi	r13,r4,4
    ccd8:	801e913a 	slli	r15,r16,4
    ccdc:	2b000204 	addi	r12,r5,8
    cce0:	22c00204 	addi	r11,r4,8
    cce4:	7bc00504 	addi	r15,r15,20
    cce8:	2a800304 	addi	r10,r5,12
    ccec:	22400304 	addi	r9,r4,12
    ccf0:	2bdf883a 	add	r15,r5,r15
    ccf4:	2811883a 	mov	r8,r5
    ccf8:	200f883a 	mov	r7,r4
    ccfc:	41000017 	ldw	r4,0(r8)
    cd00:	39c00404 	addi	r7,r7,16
    cd04:	18c00404 	addi	r3,r3,16
    cd08:	393ffc15 	stw	r4,-16(r7)
    cd0c:	1bbffc17 	ldw	r14,-16(r3)
    cd10:	6b400404 	addi	r13,r13,16
    cd14:	5ac00404 	addi	r11,r11,16
    cd18:	6bbffc15 	stw	r14,-16(r13)
    cd1c:	63800017 	ldw	r14,0(r12)
    cd20:	4a400404 	addi	r9,r9,16
    cd24:	42000404 	addi	r8,r8,16
    cd28:	5bbffc15 	stw	r14,-16(r11)
    cd2c:	53800017 	ldw	r14,0(r10)
    cd30:	63000404 	addi	r12,r12,16
    cd34:	52800404 	addi	r10,r10,16
    cd38:	4bbffc15 	stw	r14,-16(r9)
    cd3c:	1bffef1e 	bne	r3,r15,ccfc <memcpy+0x54>
    cd40:	81c00044 	addi	r7,r16,1
    cd44:	380e913a 	slli	r7,r7,4
    cd48:	310003cc 	andi	r4,r6,15
    cd4c:	02c000c4 	movi	r11,3
    cd50:	11c7883a 	add	r3,r2,r7
    cd54:	29cb883a 	add	r5,r5,r7
    cd58:	59001f2e 	bgeu	r11,r4,cdd8 <memcpy+0x130>
    cd5c:	1813883a 	mov	r9,r3
    cd60:	2811883a 	mov	r8,r5
    cd64:	200f883a 	mov	r7,r4
    cd68:	42800017 	ldw	r10,0(r8)
    cd6c:	4a400104 	addi	r9,r9,4
    cd70:	39ffff04 	addi	r7,r7,-4
    cd74:	4abfff15 	stw	r10,-4(r9)
    cd78:	42000104 	addi	r8,r8,4
    cd7c:	59fffa36 	bltu	r11,r7,cd68 <memcpy+0xc0>
    cd80:	213fff04 	addi	r4,r4,-4
    cd84:	2008d0ba 	srli	r4,r4,2
    cd88:	318000cc 	andi	r6,r6,3
    cd8c:	21000044 	addi	r4,r4,1
    cd90:	2109883a 	add	r4,r4,r4
    cd94:	2109883a 	add	r4,r4,r4
    cd98:	1907883a 	add	r3,r3,r4
    cd9c:	290b883a 	add	r5,r5,r4
    cda0:	30000626 	beq	r6,zero,cdbc <memcpy+0x114>
    cda4:	198d883a 	add	r6,r3,r6
    cda8:	29c00003 	ldbu	r7,0(r5)
    cdac:	18c00044 	addi	r3,r3,1
    cdb0:	29400044 	addi	r5,r5,1
    cdb4:	19ffffc5 	stb	r7,-1(r3)
    cdb8:	19bffb1e 	bne	r3,r6,cda8 <memcpy+0x100>
    cdbc:	dc000017 	ldw	r16,0(sp)
    cdc0:	dec00104 	addi	sp,sp,4
    cdc4:	f800283a 	ret
    cdc8:	2007883a 	mov	r3,r4
    cdcc:	003ff406 	br	cda0 <memcpy+0xf8>
    cdd0:	2007883a 	mov	r3,r4
    cdd4:	003ff306 	br	cda4 <memcpy+0xfc>
    cdd8:	200d883a 	mov	r6,r4
    cddc:	003ff006 	br	cda0 <memcpy+0xf8>

0000cde0 <memset>:
    cde0:	20c000cc 	andi	r3,r4,3
    cde4:	2005883a 	mov	r2,r4
    cde8:	18004326 	beq	r3,zero,cef8 <memset+0x118>
    cdec:	31ffffc4 	addi	r7,r6,-1
    cdf0:	30004026 	beq	r6,zero,cef4 <memset+0x114>
    cdf4:	2813883a 	mov	r9,r5
    cdf8:	200d883a 	mov	r6,r4
    cdfc:	2007883a 	mov	r3,r4
    ce00:	00000406 	br	ce14 <memset+0x34>
    ce04:	3a3fffc4 	addi	r8,r7,-1
    ce08:	31800044 	addi	r6,r6,1
    ce0c:	38003926 	beq	r7,zero,cef4 <memset+0x114>
    ce10:	400f883a 	mov	r7,r8
    ce14:	18c00044 	addi	r3,r3,1
    ce18:	32400005 	stb	r9,0(r6)
    ce1c:	1a0000cc 	andi	r8,r3,3
    ce20:	403ff81e 	bne	r8,zero,ce04 <memset+0x24>
    ce24:	010000c4 	movi	r4,3
    ce28:	21c02d2e 	bgeu	r4,r7,cee0 <memset+0x100>
    ce2c:	29803fcc 	andi	r6,r5,255
    ce30:	3008923a 	slli	r4,r6,8
    ce34:	218cb03a 	or	r6,r4,r6
    ce38:	3008943a 	slli	r4,r6,16
    ce3c:	218cb03a 	or	r6,r4,r6
    ce40:	010003c4 	movi	r4,15
    ce44:	21c0182e 	bgeu	r4,r7,cea8 <memset+0xc8>
    ce48:	3b3ffc04 	addi	r12,r7,-16
    ce4c:	6018d13a 	srli	r12,r12,4
    ce50:	1a000104 	addi	r8,r3,4
    ce54:	1ac00204 	addi	r11,r3,8
    ce58:	6008913a 	slli	r4,r12,4
    ce5c:	1a800304 	addi	r10,r3,12
    ce60:	1813883a 	mov	r9,r3
    ce64:	21000504 	addi	r4,r4,20
    ce68:	1909883a 	add	r4,r3,r4
    ce6c:	49800015 	stw	r6,0(r9)
    ce70:	41800015 	stw	r6,0(r8)
    ce74:	59800015 	stw	r6,0(r11)
    ce78:	51800015 	stw	r6,0(r10)
    ce7c:	42000404 	addi	r8,r8,16
    ce80:	4a400404 	addi	r9,r9,16
    ce84:	5ac00404 	addi	r11,r11,16
    ce88:	52800404 	addi	r10,r10,16
    ce8c:	413ff71e 	bne	r8,r4,ce6c <memset+0x8c>
    ce90:	63000044 	addi	r12,r12,1
    ce94:	6018913a 	slli	r12,r12,4
    ce98:	39c003cc 	andi	r7,r7,15
    ce9c:	010000c4 	movi	r4,3
    cea0:	1b07883a 	add	r3,r3,r12
    cea4:	21c00e2e 	bgeu	r4,r7,cee0 <memset+0x100>
    cea8:	1813883a 	mov	r9,r3
    ceac:	3811883a 	mov	r8,r7
    ceb0:	010000c4 	movi	r4,3
    ceb4:	49800015 	stw	r6,0(r9)
    ceb8:	423fff04 	addi	r8,r8,-4
    cebc:	4a400104 	addi	r9,r9,4
    cec0:	223ffc36 	bltu	r4,r8,ceb4 <memset+0xd4>
    cec4:	393fff04 	addi	r4,r7,-4
    cec8:	2008d0ba 	srli	r4,r4,2
    cecc:	39c000cc 	andi	r7,r7,3
    ced0:	21000044 	addi	r4,r4,1
    ced4:	2109883a 	add	r4,r4,r4
    ced8:	2109883a 	add	r4,r4,r4
    cedc:	1907883a 	add	r3,r3,r4
    cee0:	38000426 	beq	r7,zero,cef4 <memset+0x114>
    cee4:	19cf883a 	add	r7,r3,r7
    cee8:	19400005 	stb	r5,0(r3)
    ceec:	18c00044 	addi	r3,r3,1
    cef0:	19fffd1e 	bne	r3,r7,cee8 <memset+0x108>
    cef4:	f800283a 	ret
    cef8:	2007883a 	mov	r3,r4
    cefc:	300f883a 	mov	r7,r6
    cf00:	003fc806 	br	ce24 <memset+0x44>

0000cf04 <strcmp>:
    cf04:	2144b03a 	or	r2,r4,r5
    cf08:	108000cc 	andi	r2,r2,3
    cf0c:	1000171e 	bne	r2,zero,cf6c <strcmp+0x68>
    cf10:	20800017 	ldw	r2,0(r4)
    cf14:	28c00017 	ldw	r3,0(r5)
    cf18:	10c0141e 	bne	r2,r3,cf6c <strcmp+0x68>
    cf1c:	027fbff4 	movhi	r9,65279
    cf20:	4a7fbfc4 	addi	r9,r9,-257
    cf24:	0086303a 	nor	r3,zero,r2
    cf28:	02202074 	movhi	r8,32897
    cf2c:	1245883a 	add	r2,r2,r9
    cf30:	42202004 	addi	r8,r8,-32640
    cf34:	10c4703a 	and	r2,r2,r3
    cf38:	1204703a 	and	r2,r2,r8
    cf3c:	10000226 	beq	r2,zero,cf48 <strcmp+0x44>
    cf40:	00001706 	br	cfa0 <strcmp+0x9c>
    cf44:	1000161e 	bne	r2,zero,cfa0 <strcmp+0x9c>
    cf48:	21000104 	addi	r4,r4,4
    cf4c:	20c00017 	ldw	r3,0(r4)
    cf50:	29400104 	addi	r5,r5,4
    cf54:	29800017 	ldw	r6,0(r5)
    cf58:	1a4f883a 	add	r7,r3,r9
    cf5c:	00c4303a 	nor	r2,zero,r3
    cf60:	3884703a 	and	r2,r7,r2
    cf64:	1204703a 	and	r2,r2,r8
    cf68:	19bff626 	beq	r3,r6,cf44 <strcmp+0x40>
    cf6c:	20800007 	ldb	r2,0(r4)
    cf70:	1000051e 	bne	r2,zero,cf88 <strcmp+0x84>
    cf74:	00000606 	br	cf90 <strcmp+0x8c>
    cf78:	21000044 	addi	r4,r4,1
    cf7c:	20800007 	ldb	r2,0(r4)
    cf80:	29400044 	addi	r5,r5,1
    cf84:	10000226 	beq	r2,zero,cf90 <strcmp+0x8c>
    cf88:	28c00007 	ldb	r3,0(r5)
    cf8c:	10fffa26 	beq	r2,r3,cf78 <strcmp+0x74>
    cf90:	20800003 	ldbu	r2,0(r4)
    cf94:	28c00003 	ldbu	r3,0(r5)
    cf98:	10c5c83a 	sub	r2,r2,r3
    cf9c:	f800283a 	ret
    cfa0:	0005883a 	mov	r2,zero
    cfa4:	f800283a 	ret

0000cfa8 <strlen>:
    cfa8:	208000cc 	andi	r2,r4,3
    cfac:	10002026 	beq	r2,zero,d030 <strlen+0x88>
    cfb0:	20800007 	ldb	r2,0(r4)
    cfb4:	10002026 	beq	r2,zero,d038 <strlen+0x90>
    cfb8:	2005883a 	mov	r2,r4
    cfbc:	00000206 	br	cfc8 <strlen+0x20>
    cfc0:	10c00007 	ldb	r3,0(r2)
    cfc4:	18001826 	beq	r3,zero,d028 <strlen+0x80>
    cfc8:	10800044 	addi	r2,r2,1
    cfcc:	10c000cc 	andi	r3,r2,3
    cfd0:	183ffb1e 	bne	r3,zero,cfc0 <strlen+0x18>
    cfd4:	10c00017 	ldw	r3,0(r2)
    cfd8:	01ffbff4 	movhi	r7,65279
    cfdc:	39ffbfc4 	addi	r7,r7,-257
    cfe0:	00ca303a 	nor	r5,zero,r3
    cfe4:	01a02074 	movhi	r6,32897
    cfe8:	19c7883a 	add	r3,r3,r7
    cfec:	31a02004 	addi	r6,r6,-32640
    cff0:	1946703a 	and	r3,r3,r5
    cff4:	1986703a 	and	r3,r3,r6
    cff8:	1800091e 	bne	r3,zero,d020 <strlen+0x78>
    cffc:	10800104 	addi	r2,r2,4
    d000:	10c00017 	ldw	r3,0(r2)
    d004:	19cb883a 	add	r5,r3,r7
    d008:	00c6303a 	nor	r3,zero,r3
    d00c:	28c6703a 	and	r3,r5,r3
    d010:	1986703a 	and	r3,r3,r6
    d014:	183ff926 	beq	r3,zero,cffc <strlen+0x54>
    d018:	00000106 	br	d020 <strlen+0x78>
    d01c:	10800044 	addi	r2,r2,1
    d020:	10c00007 	ldb	r3,0(r2)
    d024:	183ffd1e 	bne	r3,zero,d01c <strlen+0x74>
    d028:	1105c83a 	sub	r2,r2,r4
    d02c:	f800283a 	ret
    d030:	2005883a 	mov	r2,r4
    d034:	003fe706 	br	cfd4 <strlen+0x2c>
    d038:	0005883a 	mov	r2,zero
    d03c:	f800283a 	ret

0000d040 <__register_exitproc>:
    d040:	00800074 	movhi	r2,1
    d044:	defffa04 	addi	sp,sp,-24
    d048:	10bc2304 	addi	r2,r2,-3956
    d04c:	dc000315 	stw	r16,12(sp)
    d050:	14000017 	ldw	r16,0(r2)
    d054:	dc400415 	stw	r17,16(sp)
    d058:	dfc00515 	stw	ra,20(sp)
    d05c:	80805217 	ldw	r2,328(r16)
    d060:	2023883a 	mov	r17,r4
    d064:	10003626 	beq	r2,zero,d140 <__register_exitproc+0x100>
    d068:	10c00117 	ldw	r3,4(r2)
    d06c:	010007c4 	movi	r4,31
    d070:	20c00e16 	blt	r4,r3,d0ac <__register_exitproc+0x6c>
    d074:	1a400044 	addi	r9,r3,1
    d078:	8800211e 	bne	r17,zero,d100 <__register_exitproc+0xc0>
    d07c:	18c00084 	addi	r3,r3,2
    d080:	18c7883a 	add	r3,r3,r3
    d084:	18c7883a 	add	r3,r3,r3
    d088:	12400115 	stw	r9,4(r2)
    d08c:	10c7883a 	add	r3,r2,r3
    d090:	19400015 	stw	r5,0(r3)
    d094:	0005883a 	mov	r2,zero
    d098:	dfc00517 	ldw	ra,20(sp)
    d09c:	dc400417 	ldw	r17,16(sp)
    d0a0:	dc000317 	ldw	r16,12(sp)
    d0a4:	dec00604 	addi	sp,sp,24
    d0a8:	f800283a 	ret
    d0ac:	00800034 	movhi	r2,0
    d0b0:	10800004 	addi	r2,r2,0
    d0b4:	10002526 	beq	r2,zero,d14c <__register_exitproc+0x10c>
    d0b8:	01006404 	movi	r4,400
    d0bc:	d9400015 	stw	r5,0(sp)
    d0c0:	d9800115 	stw	r6,4(sp)
    d0c4:	d9c00215 	stw	r7,8(sp)
    d0c8:	00000000 	call	0 <__alt_mem_SDRAM>
    d0cc:	d9400017 	ldw	r5,0(sp)
    d0d0:	d9800117 	ldw	r6,4(sp)
    d0d4:	d9c00217 	ldw	r7,8(sp)
    d0d8:	10001c26 	beq	r2,zero,d14c <__register_exitproc+0x10c>
    d0dc:	80c05217 	ldw	r3,328(r16)
    d0e0:	10000115 	stw	zero,4(r2)
    d0e4:	02400044 	movi	r9,1
    d0e8:	10c00015 	stw	r3,0(r2)
    d0ec:	80805215 	stw	r2,328(r16)
    d0f0:	10006215 	stw	zero,392(r2)
    d0f4:	10006315 	stw	zero,396(r2)
    d0f8:	0007883a 	mov	r3,zero
    d0fc:	883fdf26 	beq	r17,zero,d07c <__register_exitproc+0x3c>
    d100:	18d1883a 	add	r8,r3,r3
    d104:	4211883a 	add	r8,r8,r8
    d108:	1211883a 	add	r8,r2,r8
    d10c:	41802215 	stw	r6,136(r8)
    d110:	01000044 	movi	r4,1
    d114:	11806217 	ldw	r6,392(r2)
    d118:	20c8983a 	sll	r4,r4,r3
    d11c:	310cb03a 	or	r6,r6,r4
    d120:	11806215 	stw	r6,392(r2)
    d124:	41c04215 	stw	r7,264(r8)
    d128:	01800084 	movi	r6,2
    d12c:	89bfd31e 	bne	r17,r6,d07c <__register_exitproc+0x3c>
    d130:	11806317 	ldw	r6,396(r2)
    d134:	3108b03a 	or	r4,r6,r4
    d138:	11006315 	stw	r4,396(r2)
    d13c:	003fcf06 	br	d07c <__register_exitproc+0x3c>
    d140:	80805304 	addi	r2,r16,332
    d144:	80805215 	stw	r2,328(r16)
    d148:	003fc706 	br	d068 <__register_exitproc+0x28>
    d14c:	00bfffc4 	movi	r2,-1
    d150:	003fd106 	br	d098 <__register_exitproc+0x58>

0000d154 <__call_exitprocs>:
    d154:	00800074 	movhi	r2,1
    d158:	10bc2304 	addi	r2,r2,-3956
    d15c:	10800017 	ldw	r2,0(r2)
    d160:	defff404 	addi	sp,sp,-48
    d164:	dd800815 	stw	r22,32(sp)
    d168:	d8800015 	stw	r2,0(sp)
    d16c:	10805204 	addi	r2,r2,328
    d170:	dd000615 	stw	r20,24(sp)
    d174:	dc800415 	stw	r18,16(sp)
    d178:	dfc00b15 	stw	ra,44(sp)
    d17c:	df000a15 	stw	fp,40(sp)
    d180:	ddc00915 	stw	r23,36(sp)
    d184:	dd400715 	stw	r21,28(sp)
    d188:	dcc00515 	stw	r19,20(sp)
    d18c:	dc400315 	stw	r17,12(sp)
    d190:	dc000215 	stw	r16,8(sp)
    d194:	2025883a 	mov	r18,r4
    d198:	2829883a 	mov	r20,r5
    d19c:	d8800115 	stw	r2,4(sp)
    d1a0:	05bfffc4 	movi	r22,-1
    d1a4:	d8800017 	ldw	r2,0(sp)
    d1a8:	14c05217 	ldw	r19,328(r2)
    d1ac:	98001d26 	beq	r19,zero,d224 <__call_exitprocs+0xd0>
    d1b0:	dd400117 	ldw	r21,4(sp)
    d1b4:	98800117 	ldw	r2,4(r19)
    d1b8:	173fffc4 	addi	fp,r2,-1
    d1bc:	e0000d16 	blt	fp,zero,d1f4 <__call_exitprocs+0xa0>
    d1c0:	14000044 	addi	r16,r2,1
    d1c4:	8421883a 	add	r16,r16,r16
    d1c8:	8421883a 	add	r16,r16,r16
    d1cc:	84402004 	addi	r17,r16,128
    d1d0:	9c63883a 	add	r17,r19,r17
    d1d4:	9c21883a 	add	r16,r19,r16
    d1d8:	a0001e26 	beq	r20,zero,d254 <__call_exitprocs+0x100>
    d1dc:	80804017 	ldw	r2,256(r16)
    d1e0:	15001c26 	beq	r2,r20,d254 <__call_exitprocs+0x100>
    d1e4:	e73fffc4 	addi	fp,fp,-1
    d1e8:	843fff04 	addi	r16,r16,-4
    d1ec:	8c7fff04 	addi	r17,r17,-4
    d1f0:	e5bff91e 	bne	fp,r22,d1d8 <__call_exitprocs+0x84>
    d1f4:	00800034 	movhi	r2,0
    d1f8:	10800004 	addi	r2,r2,0
    d1fc:	10000926 	beq	r2,zero,d224 <__call_exitprocs+0xd0>
    d200:	98800117 	ldw	r2,4(r19)
    d204:	1000311e 	bne	r2,zero,d2cc <__call_exitprocs+0x178>
    d208:	98800017 	ldw	r2,0(r19)
    d20c:	10003426 	beq	r2,zero,d2e0 <__call_exitprocs+0x18c>
    d210:	9809883a 	mov	r4,r19
    d214:	a8800015 	stw	r2,0(r21)
    d218:	00000000 	call	0 <__alt_mem_SDRAM>
    d21c:	acc00017 	ldw	r19,0(r21)
    d220:	983fe41e 	bne	r19,zero,d1b4 <__call_exitprocs+0x60>
    d224:	dfc00b17 	ldw	ra,44(sp)
    d228:	df000a17 	ldw	fp,40(sp)
    d22c:	ddc00917 	ldw	r23,36(sp)
    d230:	dd800817 	ldw	r22,32(sp)
    d234:	dd400717 	ldw	r21,28(sp)
    d238:	dd000617 	ldw	r20,24(sp)
    d23c:	dcc00517 	ldw	r19,20(sp)
    d240:	dc800417 	ldw	r18,16(sp)
    d244:	dc400317 	ldw	r17,12(sp)
    d248:	dc000217 	ldw	r16,8(sp)
    d24c:	dec00c04 	addi	sp,sp,48
    d250:	f800283a 	ret
    d254:	98800117 	ldw	r2,4(r19)
    d258:	80c00017 	ldw	r3,0(r16)
    d25c:	10bfffc4 	addi	r2,r2,-1
    d260:	17001526 	beq	r2,fp,d2b8 <__call_exitprocs+0x164>
    d264:	80000015 	stw	zero,0(r16)
    d268:	183fde26 	beq	r3,zero,d1e4 <__call_exitprocs+0x90>
    d26c:	00800044 	movi	r2,1
    d270:	1708983a 	sll	r4,r2,fp
    d274:	98806217 	ldw	r2,392(r19)
    d278:	9dc00117 	ldw	r23,4(r19)
    d27c:	2084703a 	and	r2,r4,r2
    d280:	1000061e 	bne	r2,zero,d29c <__call_exitprocs+0x148>
    d284:	183ee83a 	callr	r3
    d288:	98800117 	ldw	r2,4(r19)
    d28c:	15ffc51e 	bne	r2,r23,d1a4 <__call_exitprocs+0x50>
    d290:	a8800017 	ldw	r2,0(r21)
    d294:	14ffd326 	beq	r2,r19,d1e4 <__call_exitprocs+0x90>
    d298:	003fc206 	br	d1a4 <__call_exitprocs+0x50>
    d29c:	98806317 	ldw	r2,396(r19)
    d2a0:	2084703a 	and	r2,r4,r2
    d2a4:	1000061e 	bne	r2,zero,d2c0 <__call_exitprocs+0x16c>
    d2a8:	89400017 	ldw	r5,0(r17)
    d2ac:	9009883a 	mov	r4,r18
    d2b0:	183ee83a 	callr	r3
    d2b4:	003ff406 	br	d288 <__call_exitprocs+0x134>
    d2b8:	9f000115 	stw	fp,4(r19)
    d2bc:	003fea06 	br	d268 <__call_exitprocs+0x114>
    d2c0:	89000017 	ldw	r4,0(r17)
    d2c4:	183ee83a 	callr	r3
    d2c8:	003fef06 	br	d288 <__call_exitprocs+0x134>
    d2cc:	98800017 	ldw	r2,0(r19)
    d2d0:	982b883a 	mov	r21,r19
    d2d4:	1027883a 	mov	r19,r2
    d2d8:	983fb61e 	bne	r19,zero,d1b4 <__call_exitprocs+0x60>
    d2dc:	003fd106 	br	d224 <__call_exitprocs+0xd0>
    d2e0:	0005883a 	mov	r2,zero
    d2e4:	003ffa06 	br	d2d0 <__call_exitprocs+0x17c>

0000d2e8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    d2e8:	defffd04 	addi	sp,sp,-12
    d2ec:	df000215 	stw	fp,8(sp)
    d2f0:	df000204 	addi	fp,sp,8
    d2f4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    d2f8:	00800074 	movhi	r2,1
    d2fc:	1082c944 	addi	r2,r2,2853
    d300:	10000005 	stb	zero,0(r2)
    d304:	e0bfff17 	ldw	r2,-4(fp)
    d308:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    d30c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    d310:	10000226 	beq	r2,zero,d31c <_exit+0x34>
    ALT_SIM_FAIL();
    d314:	002af070 	cmpltui	zero,zero,43969
    d318:	00000106 	br	d320 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
    d31c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    d320:	003fff06 	br	d320 <_exit+0x38>
