
ucoshello.elf:     file format elf32-littlenios2
ucoshello.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001003c memsz 0x0001003c flags r-x
    LOAD off    0x0001105c vaddr 0x0001005c paddr 0x00011ed4 align 2**12
         filesz 0x00001e78 memsz 0x00001e78 flags rw-
    LOAD off    0x00013d4c vaddr 0x00013d4c paddr 0x00013d4c align 2**12
         filesz 0x00000000 memsz 0x000453e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000faa8  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000370  0000fcec  0000fcec  00010cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001e78  0001005c  00011ed4  0001105c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000456ba  00013d4c  00013d4c  00013d4c  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  0005912c  0005912c  00012ed4  2**0
                  CONTENTS
  7 .Flash_flash_data 00000000  0c000000  0c000000  00012ed4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00012ed4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000c38  00000000  00000000  00012ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002255b  00000000  00000000  00013b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008180  00000000  00000000  0003608b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009ea6  00000000  00000000  0003e20b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002fd8  00000000  00000000  000480b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000431d  00000000  00000000  0004b08c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00003034  00000000  00000000  0004f3a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  000523e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000510  00000000  00000000  00052400  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  00057647  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0005764d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00057652  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00057653  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00057654  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00057658  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0005765c  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00057660  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00057669  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00057672  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0005767b  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000006d  00000000  00000000  00057686  2**0
                  CONTENTS, READONLY
 30 .jdi          0000abc5  00000000  00000000  000576f3  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00195378  00000000  00000000  000622b8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
0000fcec l    d  .rodata	00000000 .rodata
0001005c l    d  .rwdata	00000000 .rwdata
00013d4c l    d  .bss	00000000 .bss
0005912c l    d  .SDRAM	00000000 .SDRAM
0c000000 l    d  .Flash_flash_data	00000000 .Flash_flash_data
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /home/codedwrench/Dropbox/school/nios/ucoshello_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 alt_load.c
000003f0 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_env_lock.c
00011e20 l     O .rwdata	00000004 lockid
00013d5c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00011e24 l     O .rwdata	00000004 lockid
00013d64 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00002100 l     F .text	00000044 OS_InitMisc
00002144 l     F .text	00000068 OS_InitRdyList
000022a4 l     F .text	000000e0 OS_InitTCBList
00002024 l     F .text	000000dc OS_InitEventList
000021ac l     F .text	0000007c OS_InitTaskIdle
00002228 l     F .text	0000007c OS_InitTaskStat
00002504 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00004308 l     F .text	00000110 OS_FlagTaskRdy
00004060 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000087b0 l     F .text	00000038 alt_dev_reg
0001005c l     O .rwdata	0000106c JTAG_UART
000110c8 l     O .rwdata	00000030 AV_Config
000110f8 l     O .rwdata	00000030 Audio_Subsystem_Audio
00011128 l     O .rwdata	0000002c Char_LCD_16x2
00011154 l     O .rwdata	0000002c IrDA
00011180 l     O .rwdata	0000002c Expansion_JP5
000111ac l     O .rwdata	0000002c Green_LEDs
000111d8 l     O .rwdata	0000002c HEX3_HEX0
00011204 l     O .rwdata	0000002c HEX7_HEX4
00011230 l     O .rwdata	0000002c Pushbuttons
0001125c l     O .rwdata	0000002c Red_LEDs
00011288 l     O .rwdata	0000002c Slider_Switches
000112b4 l     O .rwdata	00000038 PS2_Port
000112ec l     O .rwdata	00000038 PS2_Port_Dual
00011324 l     O .rwdata	0000002c Serial_Port
00011350 l     O .rwdata	00000034 USB
00011384 l     O .rwdata	00000048 VGA_Subsystem_VGA_Char_Buffer
000113cc l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
00011420 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00008e98 l     F .text	000002a8 altera_avalon_jtag_uart_irq
00009140 l     F .text	00000110 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00009918 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0000bfa8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000c0e4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000c110 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000c37c l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000c664 l     F .text	00000050 alt_get_errno
0000c6b4 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
000115f4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000df10 l     F .text	00000008 __fp_lock
0000df18 l     F .text	00000008 __fp_unlock
0000df2c l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000f690 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000f790 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0000f884 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
0000f9a8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
00011ed0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000fba4 l     F .text	00000050 alt_get_errno
00013dcc g     O .bss	00000004 alt_instruction_exception_handler
00011e72 g     O .rwdata	00000002 OSTaskNameSize
0000f548 g     F .text	00000054 _isatty_r
000004d4 g     F .text	000000d4 alt_main
0000b880 g     F .text	00000258 alt_up_pixel_buffer_dma_draw_vline
0005902c g     O .bss	00000100 alt_irq
0000a4b4 g     F .text	0000005c alt_up_ps2_disable_read_interrupt
0000f59c g     F .text	0000005c _lseek_r
00004b6c g     F .text	000000d0 OS_MemInit
00011ed4 g       *ABS*	00000000 __flash_rwdata_start
0000874c g     F .text	00000064 OSTimeSet
00009a84 g     F .text	0000003c alt_up_character_lcd_send_cmd
00000d7c g     F .text	00000610 OSEventPendMulti
0005912c g       *ABS*	00000000 __alt_heap_start
0000cd20 g     F .text	00000020 OSTaskCreateHook
00013e08 g     O .bss	00002000 task1_stk
00011e4a g     O .rwdata	00000002 OSMboxEn
000013e0 g     F .text	0000007c OSIntEnter
0000f2d8 g     F .text	0000005c __sseek
0000e260 g     F .text	00000010 __sinit
0000d72c g     F .text	00000138 __swbuf_r
0000ae3c g     F .text	00000100 alt_up_char_buffer_string
0000a2d4 g     F .text	00000034 read_CE_bit
00011e5a g     O .rwdata	00000002 OSQEn
0000e0c8 g     F .text	00000068 __sfmoreglue
00000a50 g     F .text	000000d0 __malloc_unlock
0000cd7c g     F .text	0000001c OSTaskStatHook
0000a658 g     F .text	000000a4 alt_up_ps2_read_data_byte_timeout
0000ab4c g     F .text	00000090 alt_up_rs232_read_fd
00013d6c g     O .bss	00000001 OSLockNesting
00011e98 g     O .rwdata	00000002 OSDataSize
00013d6d g     O .bss	00000001 OSRunning
0000ad70 g     F .text	000000cc alt_up_char_buffer_draw
0000cdb4 g     F .text	0000001c OSInitHookBegin
00011e90 g     O .rwdata	00000002 OSTmrSize
0000e248 g     F .text	00000018 _cleanup
00013d70 g     O .bss	00000004 OSIdleCtr
0000afd8 g     F .text	00000194 alt_up_pixel_buffer_dma_draw
0000cad4 g     F .text	00000020 altera_nios2_gen2_irq_init
0000cba0 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
00009a10 g     F .text	00000074 get_DDRAM_addr
0000283c g     F .text	000002d4 OS_TCBInit
0000af98 g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
00000000 g     F .entry	0000001c __reset
00011e96 g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
00011e36 g     O .rwdata	00000002 OSEventSize
0000f4f0 g     F .text	00000058 _fstat_r
00013d74 g     O .bss	00000001 OSPrioHighRdy
0000cd40 g     F .text	00000020 OSTaskDelHook
00013dd0 g     O .bss	00000004 errno
0000f254 g     F .text	00000008 __seofread
0000cb80 g       .text	00000000 OSStartHighRdy
00007050 g     F .text	000001ec OSTaskCreateExt
00003bac g     F .text	00000068 OSFlagPendGetFlagsRdy
00011e76 g     O .rwdata	00000002 OSTaskStatStkSize
00002c9c g     F .text	00000308 OSFlagAccept
00005240 g     F .text	000000b8 OSQFlush
00004c3c g     F .text	00000140 OSQAccept
00013d54 g     O .bss	00000004 alt_argv
00019e20 g       *ABS*	00000000 _gp
00006e94 g     F .text	000001bc OSTaskCreate
0000b16c g     F .text	0000005c alt_up_pixel_buffer_dma_change_back_buffer_address
00006954 g     F .text	00000540 OSTaskChangePrio
00013d68 g     O .bss	00000004 alt_heapsem
00002b10 g     F .text	0000018c OSDebugInit
0000723c g     F .text	000003e0 OSTaskDel
00011474 g     O .rwdata	00000180 alt_fd_list
00055e08 g     O .bss	00000370 OSFlagTbl
00001e10 g     F .text	000000b4 OS_EventTaskRemove
0000c2bc g     F .text	00000090 alt_find_dev
0000d228 g     F .text	00000138 memcpy
00011e60 g     O .rwdata	00000002 OSRdyTblSize
00009c20 g     F .text	00000050 alt_up_character_lcd_write_fd
0000af3c g     F .text	0000005c alt_up_char_buffer_clear
0000df20 g     F .text	0000000c _cleanup_r
0000c43c g     F .text	00000078 alt_io_redirect
0000fcec g       *ABS*	00000000 __DTOR_END__
0000a1a0 g     F .text	00000090 alt_up_irda_write_fd
0000aad8 g     F .text	00000074 alt_up_rs232_read_data
0000d0c4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00000b20 g     F .text	00000120 OSEventNameGet
00011e44 g     O .rwdata	00000002 OSFlagMax
0000145c g     F .text	000000f4 OSIntExit
00011e7e g     O .rwdata	00000002 OSTCBSize
0000b228 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
00013d75 g     O .bss	00000001 OSPrioCur
00009f9c g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
000093a4 g     F .text	000002b4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0000f7e0 g     F .text	000000a4 isatty
00011e64 g     O .rwdata	00000002 OSStkWidth
00011e58 g     O .rwdata	00000002 OSPtrSize
0000b66c g     F .text	00000214 alt_up_pixel_buffer_dma_draw_hline
00011e38 g     O .rwdata	00000002 OSEventTblSize
00009f40 g     F .text	0000005c alt_up_irda_disable_read_interrupt
0000caf4 g       .text	00000000 OSCtxSw
0000d038 g     F .text	0000008c alt_icache_flush
00013ddc g     O .bss	00000004 __malloc_top_pad
00013d78 g     O .bss	00000004 OSTCBList
00013dbc g     O .bss	00000004 alt_fd_list_lock
00056178 g     O .bss	00000c30 OSMemTbl
00013d7c g     O .bss	00000001 OSTickStepState
0000f1ac g     F .text	00000054 _sbrk_r
0000bb9c g     F .text	00000080 helper_plot_pixel
00011e5c g     O .rwdata	00000002 OSQMax
00056da8 g     O .bss	00000800 OSTaskStatStk
0000479c g     F .text	000000f8 OSMemNameGet
00011e3c g     O .rwdata	00000002 OSFlagEn
0000f5f8 g     F .text	0000005c _read_r
00011e82 g     O .rwdata	00000002 OSTimeTickHookEn
00005760 g     F .text	00000168 OSQPost
00004418 g     F .text	000000a0 OS_FlagUnlink
00011eac g     O .rwdata	00000004 alt_max_fd
0000aa54 g     F .text	00000044 alt_up_rs232_check_parity
000023d4 g     F .text	00000064 OS_MemCopy
00002438 g     F .text	000000cc OS_Sched
0000f3ec g     F .text	000000f0 _fclose_r
000046ac g     F .text	000000f0 OSMemGet
0000791c g     F .text	000001c0 OSTaskNameSet
0000a308 g     F .text	00000030 read_num_bytes_available
0000dee0 g     F .text	00000030 fflush
00013dd8 g     O .bss	00000004 __malloc_max_sbrked_mem
00013d80 g     O .bss	00000004 OSCtxSwCtr
0000cd98 g     F .text	0000001c OSTimeTickHook
0000c4b4 g     F .text	000001b0 alt_irq_register
00011e46 g     O .rwdata	00000002 OSFlagNameSize
0000a270 g     F .text	00000034 read_RI_bit
00001ec4 g     F .text	000000fc OS_EventTaskRemoveMulti
00001cc4 g     F .text	0000014c OS_EventTaskWaitMulti
00011e5e g     O .rwdata	00000002 OSQSize
0000b25c g     F .text	00000128 alt_up_pixel_buffer_dma_clear_screen
0000f8d4 g     F .text	000000d4 lseek
00006264 g     F .text	00000268 OSSemPend
00011ec0 g     O .rwdata	00000004 _global_impure_ptr
00011e48 g     O .rwdata	00000002 OSLowestPrio
0005912c g       *ABS*	00000000 __bss_end
0000ce08 g     F .text	00000020 OSTCBInitHook
00011e8e g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0000b384 g     F .text	000002e8 alt_up_pixel_buffer_dma_draw_box
0000c9d0 g     F .text	00000104 alt_tick
00011e30 g     O .rwdata	00000002 OSEventEn
00011e8a g     O .rwdata	00000002 OSTmrCfgNameSize
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
0000a36c g     F .text	0000002c read_data_byte
0000e280 g     F .text	00000018 __fp_lock_all
00004224 g     F .text	000000e4 OS_FlagInit
0000c938 g     F .text	00000098 alt_alarm_stop
0000a2a4 g     F .text	00000030 read_RE_bit
00011e6c g     O .rwdata	00000002 OSTaskIdleStkSize
00013dc0 g     O .bss	00000004 alt_irq_active
00005e4c g     F .text	000000b0 OSSemAccept
000049ac g     F .text	000000d8 OSMemPut
000044b8 g     F .text	000001f4 OSMemCreate
00013d84 g     O .bss	00000004 OSIdleCtrMax
00009fdc g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d4 alt_irq_handler
0001144c g     O .rwdata	00000028 alt_dev_null
00011e80 g     O .rwdata	00000002 OSTicksPerSec
00009eb4 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0000caf4 g       .text	00000000 OSIntCtxSw
0000a510 g     F .text	00000074 alt_up_ps2_write_data_byte
0000c0c8 g     F .text	0000001c alt_dcache_flush_all
0000bad8 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
00013d88 g     O .bss	00000004 OSTCBFreeList
00011ed4 g       *ABS*	00000000 __ram_rwdata_end
000064cc g     F .text	0000016c OSSemPendAbort
00011ea4 g     O .rwdata	00000008 alt_dev_list
0000fbf4 g     F .text	000000f8 write
0000d484 g     F .text	000000a0 _putc_r
00011e84 g     O .rwdata	00000002 OSVersionNbr
0000bc1c g     F .text	0000024c alt_up_pixel_buffer_dma_draw_line
0001005c g       *ABS*	00000000 __ram_rodata_end
0000f6e0 g     F .text	000000b0 fstat
0000abdc g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00011e2c g     O .rwdata	00000004 OSEndiannessTest
00011e3e g     O .rwdata	00000002 OSFlagGrpSize
0005912c g       *ABS*	00000000 end
0000a84c g     F .text	00000098 alt_up_ps2_write_fd
0000a018 g     F .text	00000044 alt_up_irda_check_parity
0000acb0 g     F .text	00000080 alt_up_char_buffer_init
00008d58 g     F .text	00000140 altera_avalon_jtag_uart_init
00002698 g     F .text	000000dc OS_TaskStat
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0000fcec g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00009990 g     F .text	00000080 alt_avalon_timer_sc_init
00009658 g     F .text	000002c0 altera_avalon_jtag_uart_write
0000e270 g     F .text	00000004 __sfp_lock_acquire
00002384 g     F .text	00000050 OS_MemClr
00009b34 g     F .text	00000078 alt_up_character_lcd_write
0000cbc4 g     F .text	0000015c OSTaskStkInit
00000280 g     F .text	00000070 task1
0000e3d4 g     F .text	000002f0 _free_r
000005a8 g     F .text	00000228 alt_printf
00001a20 g     F .text	00000198 OS_EventTaskRdy
0000dae8 g     F .text	00000194 __call_exitprocs
00013d8c g     O .bss	00000001 OSCPUUsage
00011ec8 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
00013dc4 g     O .bss	00000004 _alt_tick_rate
000052f8 g     F .text	000002fc OSQPend
00008248 g     F .text	00000148 OSTimeDly
00013dc8 g     O .bss	00000004 _alt_nticks
0000f9f8 g     F .text	000000fc read
0000881c g     F .text	000003d8 alt_sys_init
00009d6c g     F .text	00000088 alt_up_character_lcd_shift_display
0000d9d4 g     F .text	00000114 __register_exitproc
00013d8d g     O .bss	00000001 OSTaskCtr
00015e08 g     O .bss	00040000 buffer
0000a76c g     F .text	00000054 alt_up_ps2_clear_fifo
0000aa18 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00008390 g     F .text	00000168 OSTimeDlyHMSM
00009df4 g     F .text	0000008c alt_up_character_lcd_erase_pos
00009250 g     F .text	00000068 altera_avalon_jtag_uart_close
0001005c g       *ABS*	00000000 __ram_rwdata_start
0000fcec g       *ABS*	00000000 __ram_rodata_start
00013de0 g     O .bss	00000028 __malloc_current_mallinfo
00011e32 g     O .rwdata	00000002 OSEventMax
00006638 g     F .text	00000110 OSSemPost
000015d8 g     F .text	000000d8 OSSchedUnlock
00008bf4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000cf3c g     F .text	000000fc alt_get_fd
00013d90 g     O .bss	00000004 OSMemFreeList
0000171c g     F .text	000000ac OSStatInit
00003f9c g     F .text	000000c4 OSFlagQuery
00011e68 g     O .rwdata	00000002 OSTaskCreateExtEn
0000f398 g     F .text	00000054 _close_r
0000d1ac g     F .text	0000007c memcmp
00001a04 g     F .text	0000001c OS_Dummy
00008cb4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0005912c g       *ABS*	00000000 __alt_stack_base
00008d04 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00009ee8 g     F .text	00000058 alt_up_irda_enable_read_interrupt
0000d880 g     F .text	00000154 __swsetup_r
000575a8 g     O .bss	000001e0 OSQTbl
0000e130 g     F .text	00000118 __sfp
00011a18 g     O .rwdata	00000408 __malloc_av_
0000e27c g     F .text	00000004 __sinit_lock_release
00013d94 g     O .bss	00000004 OSTCBHighRdy
0000f200 g     F .text	00000054 __sread
00013d98 g     O .bss	00000004 OSQFreeList
0000a97c g     F .text	0000005c alt_up_rs232_disable_read_interrupt
0000ce28 g     F .text	00000114 alt_find_file
0000c160 g     F .text	000000a4 alt_dev_llist_insert
00000930 g     F .text	00000120 __malloc_lock
0000faf4 g     F .text	000000b0 sbrk
00000c40 g     F .text	0000013c OSEventNameSet
0000de84 g     F .text	0000005c _fflush_r
00013d9c g     O .bss	00000001 OSRdyGrp
00013d4c g       *ABS*	00000000 __bss_start
0000d360 g     F .text	00000124 memset
000002f0 g     F .text	00000100 main
00013d58 g     O .bss	00000004 alt_envp
00013dd4 g     O .bss	00000004 __malloc_max_total_mem
0000b1c8 g     F .text	00000060 alt_up_pixel_buffer_dma_swap_buffers
0000ad30 g     F .text	00000040 alt_up_char_buffer_open_dev
00008c54 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000d864 g     F .text	0000001c __swbuf
0000fd7c g     O .rodata	00000100 OSUnMapTbl
00011e62 g     O .rwdata	00000002 OSSemEn
00009ce4 g     F .text	00000088 alt_up_character_lcd_shift_cursor
00003c14 g     F .text	00000388 OSFlagPost
0000f334 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0000f4dc g     F .text	00000014 fclose
00001bb8 g     F .text	0000010c OS_EventTaskWait
0000a6fc g     F .text	00000070 alt_up_ps2_read_data_byte
00002774 g     F .text	000000c8 OS_TaskStatStkChk
0000761c g     F .text	00000158 OSTaskDelReq
0000ea04 g     F .text	000007a8 _malloc_r
00011eb0 g     O .rwdata	00000004 alt_errno
000016b0 g     F .text	0000006c OSStart
000008d4 g     F .text	0000005c __env_unlock
0000e6c4 g     F .text	000000c4 _fwalk
00007adc g     F .text	000001f8 OSTaskResume
00004a84 g     F .text	000000e8 OSMemQuery
00011e74 g     O .rwdata	00000002 OSTaskStatEn
0000a05c g     F .text	00000040 alt_up_irda_write_data
00011e4e g     O .rwdata	00000002 OSMemMax
000058c8 g     F .text	00000170 OSQPostFront
0000a8e4 g     F .text	00000040 alt_up_ps2_open_dev
0000d524 g     F .text	000000cc putc
00013d9d g     O .bss	00000003 OSRdyTbl
00011e28 g     O .rwdata	00000002 OSDebugEn
00009af4 g     F .text	00000040 alt_up_character_lcd_open_dev
0000e2b0 g     F .text	00000124 _malloc_trim_r
0000a45c g     F .text	00000058 alt_up_ps2_enable_read_interrupt
0000fcec g       *ABS*	00000000 __CTOR_END__
00011e40 g     O .rwdata	00000002 OSFlagNodeSize
00011e88 g     O .rwdata	00000002 OSTmrCfgMax
00009ac0 g     F .text	00000034 alt_up_character_lcd_init
0000d5f0 g     F .text	000000a4 strcmp
00004d7c g     F .text	000001fc OSQCreate
00007774 g     F .text	000001a8 OSTaskNameGet
0000fcec g       *ABS*	00000000 __flash_rodata_start
00005a38 g     F .text	0000020c OSQPostOpt
000017c8 g     F .text	0000021c OSTimeTick
00011e70 g     O .rwdata	00000002 OSTaskMax
0000fcec g       *ABS*	00000000 __DTOR_LIST__
00005efc g     F .text	00000100 OSSemCreate
00011e94 g     O .rwdata	00000002 OSTmrWheelSize
0000ac70 g     F .text	00000040 alt_up_rs232_open_dev
00011e6a g     O .rwdata	00000002 OSTaskDelEn
00006748 g     F .text	00000110 OSSemQuery
00004f78 g     F .text	000002c8 OSQDel
000055f4 g     F .text	0000016c OSQPendAbort
000087e8 g     F .text	00000034 alt_irq_init
0000c8d8 g     F .text	00000060 alt_release_fd
0000a338 g     F .text	00000034 read_data_valid
00009e80 g     F .text	00000034 alt_up_character_lcd_cursor_off
0000a5f4 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
0000d160 g     F .text	00000014 atexit
0000f33c g     F .text	0000005c _write_r
00001550 g     F .text	00000088 OSSchedLock
00002fa4 g     F .text	00000128 OSFlagCreate
00011ec4 g     O .rwdata	00000004 _impure_ptr
00013d50 g     O .bss	00000004 alt_argc
0000dc7c g     F .text	00000208 __sflush_r
0000c260 g     F .text	0000005c _do_dtors
00011e3a g     O .rwdata	00000002 OSEventMultiEn
000030cc g     F .text	00000270 OSFlagDel
00013da0 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
000035bc g     F .text	000005f0 OSFlagPend
00011e86 g     O .rwdata	00000002 OSTmrEn
0000e298 g     F .text	00000018 __fp_unlock_all
00011e9c g     O .rwdata	00000008 alt_fs_list
00013d4c g     O .bss	00000004 pixel_buffer_dev
00002574 g     F .text	00000074 OS_StrCopy
0000a924 g     F .text	00000058 alt_up_rs232_enable_read_interrupt
0000aa98 g     F .text	00000040 alt_up_rs232_write_data
00011e50 g     O .rwdata	00000002 OSMemNameSize
0000cdd0 g     F .text	0000001c OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
00011e7c g     O .rwdata	00000002 OSTCBPrioTblMax
00011e78 g     O .rwdata	00000002 OSTaskStatStkChkEn
00011e4c g     O .rwdata	00000002 OSMemEn
00011e56 g     O .rwdata	00000002 OSMutexEn
00011ed4 g       *ABS*	00000000 _edata
0005912c g       *ABS*	00000000 _end
00013da4 g     O .bss	00000001 OSIntNesting
00000244 g       *ABS*	00000000 __ram_exceptions_end
000092b8 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
000084f8 g     F .text	000001f0 OSTimeDlyResume
0000346c g     F .text	00000150 OSFlagNameSet
00007cd4 g     F .text	000001c8 OSTaskStkChk
00011e52 g     O .rwdata	00000002 OSMemSize
0000f25c g     F .text	0000007c __swrite
00011ecc g     O .rwdata	00000004 __malloc_trim_threshold
00013da8 g     O .bss	00000004 OSTCBCur
0000d174 g     F .text	00000038 exit
0000a09c g     F .text	00000074 alt_up_irda_read_data
0000e788 g     F .text	000000c4 _fwalk_reent
00011e54 g     O .rwdata	00000002 OSMemTblSize
0000a398 g     F .text	000000c4 alt_up_ps2_init
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000e274 g     F .text	00000004 __sfp_lock_release
0000138c g     F .text	00000054 OSInit
000080b0 g     F .text	0000012c OSTaskQuery
00009bac g     F .text	00000074 alt_up_character_lcd_string
00005da0 g     F .text	000000ac OS_QInit
000025e8 g     F .text	00000054 OS_StrLen
0000a230 g     F .text	00000040 alt_up_irda_open_dev
00004894 g     F .text	00000118 OSMemNameSet
00011e6e g     O .rwdata	00000002 OSTaskProfileEn
00013dac g     O .bss	00000004 OSTime
00057788 g     O .bss	00000800 OSTaskIdleStk
0000f654 g     F .text	0000003c _exit
0000be68 g     F .text	00000140 alt_alarm_start
0000333c g     F .text	00000130 OSFlagNameGet
000086e8 g     F .text	00000064 OSTimeGet
0000e84c g     F .text	000001b8 __smakebuf_r
0000a584 g     F .text	00000070 alt_up_ps2_wait_for_ack
0000d694 g     F .text	00000098 strlen
0000cd60 g     F .text	0000001c OSTaskSwHook
0000c780 g     F .text	00000158 open
00057f88 g     O .bss	00000b40 OSEventTbl
000007d0 g     F .text	00000044 alt_putchar
00058ac8 g     O .bss	00000510 OSTCBTbl
00006858 g     F .text	000000fc OSSemSet
0000c34c g     F .text	00000030 alt_icache_flush_all
00009c70 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
00011eb4 g     O .rwdata	00000004 alt_priority_mask
00005ffc g     F .text	00000268 OSSemDel
00013db0 g     O .bss	00000004 OSFlagFreeList
00011e34 g     O .rwdata	00000002 OSEventNameSize
00013db4 g     O .bss	00000001 OSStatRdy
00058fd8 g     O .bss	00000054 OSTCBPrioTbl
00000814 g     F .text	000000c0 __env_lock
0000a7c0 g     F .text	0000008c alt_up_ps2_read_fd
00011e7a g     O .rwdata	00000002 OSTaskSwHookEn
0000a110 g     F .text	00000090 alt_up_irda_read_fd
00011eb8 g     O .rwdata	00000008 alt_alarm_list
00011e42 g     O .rwdata	00000002 OSFlagWidth
0000c204 g     F .text	0000005c _do_ctors
0000a9d8 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0000bff8 g     F .text	000000d0 close
00013d60 g     O .bss	00000004 alt_envsem
00013db8 g     O .bss	00000004 OSIdleCtrRun
000019e4 g     F .text	00000020 OSVersion
00011e8c g     O .rwdata	00000002 OSTmrCfgWheelSize
00000454 g     F .text	00000080 alt_load
000081dc g     F .text	0000006c OS_TaskStkClr
00011e66 g     O .rwdata	00000002 OSTaskCreateEn
00001fc0 g     F .text	00000064 OS_EventWaitListInit
0000cdec g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
0000e278 g     F .text	00000004 __sinit_lock_acquire
00007e9c g     F .text	00000214 OSTaskSuspend
0000263c g     F .text	0000005c OS_TaskIdle
00011e92 g     O .rwdata	00000002 OSTmrTblSize
00005c44 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	00013e00 	call	13e0 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008001b4 	movhi	r2,6
 140:	10a40b04 	addi	r2,r2,-28628
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008001b4 	movhi	r2,6
 158:	10a40b04 	addi	r2,r2,-28628
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	21000104 	addi	r4,r4,4
 168:	1105883a 	add	r2,r2,r4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	e17ffd17 	ldw	r5,-12(fp)
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	000145c0 	call	145c <OSIntExit>
}
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a7eb17 	ldw	r2,-24660(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a7eb17 	ldw	r2,-24660(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	1809883a 	mov	r4,r3
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	e1bffe17 	ldw	r6,-8(fp)
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     250:	d6a78814 	ori	gp,gp,40480
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     258:	108f5314 	ori	r2,r2,15692

    movhi r3, %hi(__bss_end)
     25c:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
     260:	18e44b14 	ori	r3,r3,37164

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	00004540 	call	454 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	00004d40 	call	4d4 <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <alt_after_alt_main>

00000280 <task1>:

#define TASK1_PRIORITY      1

/* Prints "Hello World" and sleeps for three seconds */
void task1(void* pdata)
{
     280:	defffa04 	addi	sp,sp,-24
     284:	dfc00515 	stw	ra,20(sp)
     288:	df000415 	stw	fp,16(sp)
     28c:	df000404 	addi	fp,sp,16
     290:	e13fff15 	stw	r4,-4(fp)
	OSTimeDlyHMSM(0,0,5,0);
     294:	0009883a 	mov	r4,zero
     298:	000b883a 	mov	r5,zero
     29c:	01800144 	movi	r6,5
     2a0:	000f883a 	mov	r7,zero
     2a4:	00083900 	call	8390 <OSTimeDlyHMSM>
    alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, 34*4, 28*4, 50*4, 32*4, 0xFE99, 0);
     2a8:	d0e7cb17 	ldw	r3,-24788(gp)
     2ac:	00802004 	movi	r2,128
     2b0:	d8800015 	stw	r2,0(sp)
     2b4:	00bfa654 	movui	r2,65177
     2b8:	d8800115 	stw	r2,4(sp)
     2bc:	d8000215 	stw	zero,8(sp)
     2c0:	1809883a 	mov	r4,r3
     2c4:	01402204 	movi	r5,136
     2c8:	01801c04 	movi	r6,112
     2cc:	01c03204 	movi	r7,200
     2d0:	000b3840 	call	b384 <alt_up_pixel_buffer_dma_draw_box>
    OSTaskDel(OS_PRIO_SELF);
     2d4:	01003fc4 	movi	r4,255
     2d8:	000723c0 	call	723c <OSTaskDel>
}
     2dc:	e037883a 	mov	sp,fp
     2e0:	dfc00117 	ldw	ra,4(sp)
     2e4:	df000017 	ldw	fp,0(sp)
     2e8:	dec00204 	addi	sp,sp,8
     2ec:	f800283a 	ret

000002f0 <main>:
/* Prints "Hello World" and sleeps for three seconds */
/* The main function creates two task and starts multi-tasking */
int main(void)
{
     2f0:	defff904 	addi	sp,sp,-28
     2f4:	dfc00615 	stw	ra,24(sp)
     2f8:	df000515 	stw	fp,20(sp)
     2fc:	df000504 	addi	fp,sp,20
	/* initialize the pixel buffer HAL */
	pixel_buffer_dev = alt_up_pixel_buffer_dma_open_dev ("/dev/VGA_Subsystem_VGA_Pixel_DMA");
     300:	01000074 	movhi	r4,1
     304:	213f3b04 	addi	r4,r4,-788
     308:	000af980 	call	af98 <alt_up_pixel_buffer_dma_open_dev>
     30c:	d0a7cb15 	stw	r2,-24788(gp)
	if ( pixel_buffer_dev == NULL)
     310:	d0a7cb17 	ldw	r2,-24788(gp)
     314:	1000041e 	bne	r2,zero,328 <main+0x38>
		alt_printf ("Error: could not open VGA pixel buffer device\n");
     318:	01000074 	movhi	r4,1
     31c:	213f4404 	addi	r4,r4,-752
     320:	00005a80 	call	5a8 <alt_printf>
     324:	00000306 	br	334 <main+0x44>
	else
		alt_printf ("Opened character VGA pixel buffer device\n");
     328:	01000074 	movhi	r4,1
     32c:	213f5004 	addi	r4,r4,-704
     330:	00005a80 	call	5a8 <alt_printf>

	/* set both the main buffer and back buffer to the allocated space */
	alt_up_pixel_buffer_dma_change_back_buffer_address(pixel_buffer_dev, (unsigned int) buffer);
     334:	d0e7cb17 	ldw	r3,-24788(gp)
     338:	00800074 	movhi	r2,1
     33c:	10978204 	addi	r2,r2,24072
     340:	1809883a 	mov	r4,r3
     344:	100b883a 	mov	r5,r2
     348:	000b16c0 	call	b16c <alt_up_pixel_buffer_dma_change_back_buffer_address>
	alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer_dev);
     34c:	d0a7cb17 	ldw	r2,-24788(gp)
     350:	1009883a 	mov	r4,r2
     354:	000b1c80 	call	b1c8 <alt_up_pixel_buffer_dma_swap_buffers>
	while (alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer_dev));
     358:	0001883a 	nop
     35c:	d0a7cb17 	ldw	r2,-24788(gp)
     360:	1009883a 	mov	r4,r2
     364:	000b2280 	call	b228 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
     368:	103ffc1e 	bne	r2,zero,35c <main+0x6c>
	alt_up_pixel_buffer_dma_change_back_buffer_address(pixel_buffer_dev, (unsigned int) buffer);
     36c:	d0e7cb17 	ldw	r3,-24788(gp)
     370:	00800074 	movhi	r2,1
     374:	10978204 	addi	r2,r2,24072
     378:	1809883a 	mov	r4,r3
     37c:	100b883a 	mov	r5,r2
     380:	000b16c0 	call	b16c <alt_up_pixel_buffer_dma_change_back_buffer_address>

	/* clear the graphics screen */
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer_dev, 0);
     384:	d0a7cb17 	ldw	r2,-24788(gp)
     388:	1009883a 	mov	r4,r2
     38c:	000b883a 	mov	r5,zero
     390:	000b25c0 	call	b25c <alt_up_pixel_buffer_dma_clear_screen>


  
  OSTaskCreateExt(task1,
     394:	00800044 	movi	r2,1
     398:	d8800015 	stw	r2,0(sp)
     39c:	00800074 	movhi	r2,1
     3a0:	108f8204 	addi	r2,r2,15880
     3a4:	d8800115 	stw	r2,4(sp)
     3a8:	00820004 	movi	r2,2048
     3ac:	d8800215 	stw	r2,8(sp)
     3b0:	d8000315 	stw	zero,12(sp)
     3b4:	d8000415 	stw	zero,16(sp)
     3b8:	01000034 	movhi	r4,0
     3bc:	2100a004 	addi	r4,r4,640
     3c0:	000b883a 	mov	r5,zero
     3c4:	01800074 	movhi	r6,1
     3c8:	31978104 	addi	r6,r6,24068
     3cc:	01c00044 	movi	r7,1
     3d0:	00070500 	call	7050 <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);
              

  OSStart();
     3d4:	00016b00 	call	16b0 <OSStart>
  return 0;
     3d8:	0005883a 	mov	r2,zero
}
     3dc:	e037883a 	mov	sp,fp
     3e0:	dfc00117 	ldw	ra,4(sp)
     3e4:	df000017 	ldw	fp,0(sp)
     3e8:	dec00204 	addi	sp,sp,8
     3ec:	f800283a 	ret

000003f0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
     3f0:	defffc04 	addi	sp,sp,-16
     3f4:	df000315 	stw	fp,12(sp)
     3f8:	df000304 	addi	fp,sp,12
     3fc:	e13ffd15 	stw	r4,-12(fp)
     400:	e17ffe15 	stw	r5,-8(fp)
     404:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
     408:	e0fffe17 	ldw	r3,-8(fp)
     40c:	e0bffd17 	ldw	r2,-12(fp)
     410:	18800c26 	beq	r3,r2,444 <alt_load_section+0x54>
  {
    while( to != end )
     414:	00000806 	br	438 <alt_load_section+0x48>
    {
      *to++ = *from++;
     418:	e0bffe17 	ldw	r2,-8(fp)
     41c:	10c00104 	addi	r3,r2,4
     420:	e0fffe15 	stw	r3,-8(fp)
     424:	e0fffd17 	ldw	r3,-12(fp)
     428:	19000104 	addi	r4,r3,4
     42c:	e13ffd15 	stw	r4,-12(fp)
     430:	18c00017 	ldw	r3,0(r3)
     434:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     438:	e0fffe17 	ldw	r3,-8(fp)
     43c:	e0bfff17 	ldw	r2,-4(fp)
     440:	18bff51e 	bne	r3,r2,418 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
     444:	e037883a 	mov	sp,fp
     448:	df000017 	ldw	fp,0(sp)
     44c:	dec00104 	addi	sp,sp,4
     450:	f800283a 	ret

00000454 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     454:	defffe04 	addi	sp,sp,-8
     458:	dfc00115 	stw	ra,4(sp)
     45c:	df000015 	stw	fp,0(sp)
     460:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     464:	01000074 	movhi	r4,1
     468:	2107b504 	addi	r4,r4,7892
     46c:	01400074 	movhi	r5,1
     470:	29401704 	addi	r5,r5,92
     474:	01800074 	movhi	r6,1
     478:	3187b504 	addi	r6,r6,7892
     47c:	00003f00 	call	3f0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     480:	01000034 	movhi	r4,0
     484:	21000804 	addi	r4,r4,32
     488:	01400034 	movhi	r5,0
     48c:	29400804 	addi	r5,r5,32
     490:	01800034 	movhi	r6,0
     494:	31809104 	addi	r6,r6,580
     498:	00003f00 	call	3f0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     49c:	01000074 	movhi	r4,1
     4a0:	213f3b04 	addi	r4,r4,-788
     4a4:	01400074 	movhi	r5,1
     4a8:	297f3b04 	addi	r5,r5,-788
     4ac:	01800074 	movhi	r6,1
     4b0:	31801704 	addi	r6,r6,92
     4b4:	00003f00 	call	3f0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     4b8:	000c0c80 	call	c0c8 <alt_dcache_flush_all>
  alt_icache_flush_all();
     4bc:	000c34c0 	call	c34c <alt_icache_flush_all>
}
     4c0:	e037883a 	mov	sp,fp
     4c4:	dfc00117 	ldw	ra,4(sp)
     4c8:	df000017 	ldw	fp,0(sp)
     4cc:	dec00204 	addi	sp,sp,8
     4d0:	f800283a 	ret

000004d4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     4d4:	defff904 	addi	sp,sp,-28
     4d8:	dfc00615 	stw	ra,24(sp)
     4dc:	df000515 	stw	fp,20(sp)
     4e0:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     4e4:	0009883a 	mov	r4,zero
     4e8:	00087e80 	call	87e8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
     4ec:	000138c0 	call	138c <OSInit>
     4f0:	01000044 	movi	r4,1
     4f4:	0005efc0 	call	5efc <OSSemCreate>
     4f8:	1007883a 	mov	r3,r2
     4fc:	00800074 	movhi	r2,1
     500:	108f5804 	addi	r2,r2,15712
     504:	10c00015 	stw	r3,0(r2)
     508:	01000044 	movi	r4,1
     50c:	0005efc0 	call	5efc <OSSemCreate>
     510:	1007883a 	mov	r3,r2
     514:	00800074 	movhi	r2,1
     518:	108f5a04 	addi	r2,r2,15720
     51c:	10c00015 	stw	r3,0(r2)
     520:	00800074 	movhi	r2,1
     524:	108f6f04 	addi	r2,r2,15804
     528:	e0bffc15 	stw	r2,-16(fp)
     52c:	00800044 	movi	r2,1
     530:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
     534:	e0bffd0b 	ldhu	r2,-12(fp)
     538:	1009883a 	mov	r4,r2
     53c:	0005efc0 	call	5efc <OSSemCreate>
     540:	1007883a 	mov	r3,r2
     544:	e0bffc17 	ldw	r2,-16(fp)
     548:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     54c:	000881c0 	call	881c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     550:	01000074 	movhi	r4,1
     554:	213f5b04 	addi	r4,r4,-660
     558:	01400074 	movhi	r5,1
     55c:	297f5b04 	addi	r5,r5,-660
     560:	01800074 	movhi	r6,1
     564:	31bf5b04 	addi	r6,r6,-660
     568:	000c43c0 	call	c43c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
     56c:	000c2040 	call	c204 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
     570:	01000074 	movhi	r4,1
     574:	21309804 	addi	r4,r4,-15776
     578:	000d1600 	call	d160 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     57c:	d127cc17 	ldw	r4,-24784(gp)
     580:	d0e7cd17 	ldw	r3,-24780(gp)
     584:	d0a7ce17 	ldw	r2,-24776(gp)
     588:	180b883a 	mov	r5,r3
     58c:	100d883a 	mov	r6,r2
     590:	00002f00 	call	2f0 <main>
     594:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
     598:	01000044 	movi	r4,1
     59c:	000bff80 	call	bff8 <close>
  exit (result);
     5a0:	e13ffb17 	ldw	r4,-20(fp)
     5a4:	000d1740 	call	d174 <exit>

000005a8 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
     5a8:	defff204 	addi	sp,sp,-56
     5ac:	dfc00a15 	stw	ra,40(sp)
     5b0:	df000915 	stw	fp,36(sp)
     5b4:	df000904 	addi	fp,sp,36
     5b8:	e1400215 	stw	r5,8(fp)
     5bc:	e1800315 	stw	r6,12(fp)
     5c0:	e1c00415 	stw	r7,16(fp)
     5c4:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
     5c8:	e0800204 	addi	r2,fp,8
     5cc:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
     5d0:	e0bfff17 	ldw	r2,-4(fp)
     5d4:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
     5d8:	00007106 	br	7a0 <alt_printf+0x1f8>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
     5dc:	e0bff807 	ldb	r2,-32(fp)
     5e0:	10800960 	cmpeqi	r2,r2,37
     5e4:	1000041e 	bne	r2,zero,5f8 <alt_printf+0x50>
        {
            alt_putchar(c);
     5e8:	e0bff807 	ldb	r2,-32(fp)
     5ec:	1009883a 	mov	r4,r2
     5f0:	00007d00 	call	7d0 <alt_putchar>
     5f4:	00006a06 	br	7a0 <alt_printf+0x1f8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
     5f8:	e0bff717 	ldw	r2,-36(fp)
     5fc:	10c00044 	addi	r3,r2,1
     600:	e0fff715 	stw	r3,-36(fp)
     604:	10800003 	ldbu	r2,0(r2)
     608:	e0bff805 	stb	r2,-32(fp)
     60c:	e0bff807 	ldb	r2,-32(fp)
     610:	10006226 	beq	r2,zero,79c <alt_printf+0x1f4>
            {
                if (c == '%')
     614:	e0bff807 	ldb	r2,-32(fp)
     618:	10800958 	cmpnei	r2,r2,37
     61c:	1000041e 	bne	r2,zero,630 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
     620:	e0bff807 	ldb	r2,-32(fp)
     624:	1009883a 	mov	r4,r2
     628:	00007d00 	call	7d0 <alt_putchar>
     62c:	00005c06 	br	7a0 <alt_printf+0x1f8>
                } 
                else if (c == 'c')
     630:	e0bff807 	ldb	r2,-32(fp)
     634:	108018d8 	cmpnei	r2,r2,99
     638:	1000081e 	bne	r2,zero,65c <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
     63c:	e0bffe17 	ldw	r2,-8(fp)
     640:	10c00104 	addi	r3,r2,4
     644:	e0fffe15 	stw	r3,-8(fp)
     648:	10800017 	ldw	r2,0(r2)
     64c:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
     650:	e13ffd17 	ldw	r4,-12(fp)
     654:	00007d00 	call	7d0 <alt_putchar>
     658:	00005106 	br	7a0 <alt_printf+0x1f8>
                }
                else if (c == 'x')
     65c:	e0bff807 	ldb	r2,-32(fp)
     660:	10801e18 	cmpnei	r2,r2,120
     664:	1000341e 	bne	r2,zero,738 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
     668:	e0bffe17 	ldw	r2,-8(fp)
     66c:	10c00104 	addi	r3,r2,4
     670:	e0fffe15 	stw	r3,-8(fp)
     674:	10800017 	ldw	r2,0(r2)
     678:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
     67c:	e0bffb17 	ldw	r2,-20(fp)
     680:	1000031e 	bne	r2,zero,690 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
     684:	01000c04 	movi	r4,48
     688:	00007d00 	call	7d0 <alt_putchar>
                        continue;
     68c:	00004406 	br	7a0 <alt_printf+0x1f8>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
     690:	00800704 	movi	r2,28
     694:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
     698:	00000306 	br	6a8 <alt_printf+0x100>
                        digit_shift -= 4;
     69c:	e0bff917 	ldw	r2,-28(fp)
     6a0:	10bfff04 	addi	r2,r2,-4
     6a4:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
     6a8:	00c003c4 	movi	r3,15
     6ac:	e0bff917 	ldw	r2,-28(fp)
     6b0:	1884983a 	sll	r2,r3,r2
     6b4:	1007883a 	mov	r3,r2
     6b8:	e0bffb17 	ldw	r2,-20(fp)
     6bc:	1884703a 	and	r2,r3,r2
     6c0:	103ff626 	beq	r2,zero,69c <alt_printf+0xf4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
     6c4:	00001906 	br	72c <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
     6c8:	00c003c4 	movi	r3,15
     6cc:	e0bff917 	ldw	r2,-28(fp)
     6d0:	1884983a 	sll	r2,r3,r2
     6d4:	1007883a 	mov	r3,r2
     6d8:	e0bffb17 	ldw	r2,-20(fp)
     6dc:	1886703a 	and	r3,r3,r2
     6e0:	e0bff917 	ldw	r2,-28(fp)
     6e4:	1884d83a 	srl	r2,r3,r2
     6e8:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
     6ec:	e0bffc17 	ldw	r2,-16(fp)
     6f0:	108002a8 	cmpgeui	r2,r2,10
     6f4:	1000041e 	bne	r2,zero,708 <alt_printf+0x160>
                            c = '0' + digit;
     6f8:	e0bffc17 	ldw	r2,-16(fp)
     6fc:	10800c04 	addi	r2,r2,48
     700:	e0bff805 	stb	r2,-32(fp)
     704:	00000306 	br	714 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
     708:	e0bffc17 	ldw	r2,-16(fp)
     70c:	108015c4 	addi	r2,r2,87
     710:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
     714:	e0bff807 	ldb	r2,-32(fp)
     718:	1009883a 	mov	r4,r2
     71c:	00007d00 	call	7d0 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
     720:	e0bff917 	ldw	r2,-28(fp)
     724:	10bfff04 	addi	r2,r2,-4
     728:	e0bff915 	stw	r2,-28(fp)
     72c:	e0bff917 	ldw	r2,-28(fp)
     730:	103fe50e 	bge	r2,zero,6c8 <alt_printf+0x120>
     734:	00001a06 	br	7a0 <alt_printf+0x1f8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
     738:	e0bff807 	ldb	r2,-32(fp)
     73c:	10801cd8 	cmpnei	r2,r2,115
     740:	1000151e 	bne	r2,zero,798 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
     744:	e0bffe17 	ldw	r2,-8(fp)
     748:	10c00104 	addi	r3,r2,4
     74c:	e0fffe15 	stw	r3,-8(fp)
     750:	10800017 	ldw	r2,0(r2)
     754:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
     758:	00000906 	br	780 <alt_printf+0x1d8>
                      alt_putchar(*s++);
     75c:	e0bffa17 	ldw	r2,-24(fp)
     760:	10c00044 	addi	r3,r2,1
     764:	e0fffa15 	stw	r3,-24(fp)
     768:	10800003 	ldbu	r2,0(r2)
     76c:	10803fcc 	andi	r2,r2,255
     770:	1080201c 	xori	r2,r2,128
     774:	10bfe004 	addi	r2,r2,-128
     778:	1009883a 	mov	r4,r2
     77c:	00007d00 	call	7d0 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
     780:	e0bffa17 	ldw	r2,-24(fp)
     784:	10800003 	ldbu	r2,0(r2)
     788:	10803fcc 	andi	r2,r2,255
     78c:	1080201c 	xori	r2,r2,128
     790:	10bfe004 	addi	r2,r2,-128
     794:	103ff11e 	bne	r2,zero,75c <alt_printf+0x1b4>
     798:	00000106 	br	7a0 <alt_printf+0x1f8>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
     79c:	00000706 	br	7bc <alt_printf+0x214>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
     7a0:	e0bff717 	ldw	r2,-36(fp)
     7a4:	10c00044 	addi	r3,r2,1
     7a8:	e0fff715 	stw	r3,-36(fp)
     7ac:	10800003 	ldbu	r2,0(r2)
     7b0:	e0bff805 	stb	r2,-32(fp)
     7b4:	e0bff807 	ldb	r2,-32(fp)
     7b8:	103f881e 	bne	r2,zero,5dc <alt_printf+0x34>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
     7bc:	e037883a 	mov	sp,fp
     7c0:	dfc00117 	ldw	ra,4(sp)
     7c4:	df000017 	ldw	fp,0(sp)
     7c8:	dec00504 	addi	sp,sp,20
     7cc:	f800283a 	ret

000007d0 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
     7d0:	defffd04 	addi	sp,sp,-12
     7d4:	dfc00215 	stw	ra,8(sp)
     7d8:	df000115 	stw	fp,4(sp)
     7dc:	df000104 	addi	fp,sp,4
     7e0:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
     7e4:	00800074 	movhi	r2,1
     7e8:	1087b104 	addi	r2,r2,7876
     7ec:	10800017 	ldw	r2,0(r2)
     7f0:	10800217 	ldw	r2,8(r2)
     7f4:	e13fff17 	ldw	r4,-4(fp)
     7f8:	100b883a 	mov	r5,r2
     7fc:	000d5240 	call	d524 <putc>
#endif
#endif
}
     800:	e037883a 	mov	sp,fp
     804:	dfc00117 	ldw	ra,4(sp)
     808:	df000017 	ldw	fp,0(sp)
     80c:	dec00204 	addi	sp,sp,8
     810:	f800283a 	ret

00000814 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
     814:	deffdf04 	addi	sp,sp,-132
     818:	dfc02015 	stw	ra,128(sp)
     81c:	df001f15 	stw	fp,124(sp)
     820:	df001f04 	addi	fp,sp,124
     824:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
     828:	e0bfe204 	addi	r2,fp,-120
     82c:	01003fc4 	movi	r4,255
     830:	100b883a 	mov	r5,r2
     834:	00080b00 	call	80b0 <OSTaskQuery>
     838:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
     83c:	e0bffe83 	ldbu	r2,-6(fp)
     840:	10803fcc 	andi	r2,r2,255
     844:	10000126 	beq	r2,zero,84c <__env_lock+0x38>
    return;
     848:	00001d06 	br	8c0 <__env_lock+0xac>

  id = tcb.OSTCBPrio;
     84c:	e0bfee83 	ldbu	r2,-70(fp)
     850:	10803fcc 	andi	r2,r2,255
     854:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
     858:	d0e7d017 	ldw	r3,-24768(gp)
     85c:	e0bffd04 	addi	r2,fp,-12
     860:	1809883a 	mov	r4,r3
     864:	100b883a 	mov	r5,r2
     868:	00067480 	call	6748 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
     86c:	e0bffe43 	ldbu	r2,-7(fp)
     870:	10803fcc 	andi	r2,r2,255
     874:	10000726 	beq	r2,zero,894 <__env_lock+0x80>
     878:	d0a00017 	ldw	r2,-32768(gp)
     87c:	e0ffe117 	ldw	r3,-124(fp)
     880:	1880041e 	bne	r3,r2,894 <__env_lock+0x80>
  {
    /* we do; just count the recursion */

    locks++;
     884:	d0a7cf17 	ldw	r2,-24772(gp)
     888:	10800044 	addi	r2,r2,1
     88c:	d0a7cf15 	stw	r2,-24772(gp)
     890:	00000a06 	br	8bc <__env_lock+0xa8>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
     894:	d0e7d017 	ldw	r3,-24768(gp)
     898:	e0bffe84 	addi	r2,fp,-6
     89c:	1809883a 	mov	r4,r3
     8a0:	000b883a 	mov	r5,zero
     8a4:	100d883a 	mov	r6,r2
     8a8:	00062640 	call	6264 <OSSemPend>
    locks  = 1;
     8ac:	00800044 	movi	r2,1
     8b0:	d0a7cf15 	stw	r2,-24772(gp)
    lockid = id;
     8b4:	e0bfe117 	ldw	r2,-124(fp)
     8b8:	d0a00015 	stw	r2,-32768(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
     8bc:	0001883a 	nop
}
     8c0:	e037883a 	mov	sp,fp
     8c4:	dfc00117 	ldw	ra,4(sp)
     8c8:	df000017 	ldw	fp,0(sp)
     8cc:	dec00204 	addi	sp,sp,8
     8d0:	f800283a 	ret

000008d4 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
     8d4:	defffd04 	addi	sp,sp,-12
     8d8:	dfc00215 	stw	ra,8(sp)
     8dc:	df000115 	stw	fp,4(sp)
     8e0:	df000104 	addi	fp,sp,4
     8e4:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
     8e8:	d0a7cf17 	ldw	r2,-24772(gp)
     8ec:	1000011e 	bne	r2,zero,8f4 <__env_unlock+0x20>
    return;
     8f0:	00000a06 	br	91c <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
     8f4:	d0a7cf17 	ldw	r2,-24772(gp)
     8f8:	10bfffc4 	addi	r2,r2,-1
     8fc:	d0a7cf15 	stw	r2,-24772(gp)
     900:	d0a7cf17 	ldw	r2,-24772(gp)
     904:	1000051e 	bne	r2,zero,91c <__env_unlock+0x48>
  {
    lockid = -1;
     908:	00bfffc4 	movi	r2,-1
     90c:	d0a00015 	stw	r2,-32768(gp)
    OSSemPost( alt_envsem );
     910:	d0a7d017 	ldw	r2,-24768(gp)
     914:	1009883a 	mov	r4,r2
     918:	00066380 	call	6638 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
     91c:	e037883a 	mov	sp,fp
     920:	dfc00117 	ldw	ra,4(sp)
     924:	df000017 	ldw	fp,0(sp)
     928:	dec00204 	addi	sp,sp,8
     92c:	f800283a 	ret

00000930 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
     930:	deffdb04 	addi	sp,sp,-148
     934:	dfc02415 	stw	ra,144(sp)
     938:	df002315 	stw	fp,140(sp)
     93c:	df002304 	addi	fp,sp,140
     940:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
     944:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
     948:	00800074 	movhi	r2,1
     94c:	108f5b44 	addi	r2,r2,15725
     950:	10800003 	ldbu	r2,0(r2)
     954:	10803fcc 	andi	r2,r2,255
     958:	10800060 	cmpeqi	r2,r2,1
     95c:	1000011e 	bne	r2,zero,964 <__malloc_lock+0x34>
      return;
     960:	00003606 	br	a3c <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
     964:	e0bfe204 	addi	r2,fp,-120
     968:	01003fc4 	movi	r4,255
     96c:	100b883a 	mov	r5,r2
     970:	00080b00 	call	80b0 <OSTaskQuery>
     974:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
     978:	e0bffe83 	ldbu	r2,-6(fp)
     97c:	10803fcc 	andi	r2,r2,255
     980:	10000126 	beq	r2,zero,988 <__malloc_lock+0x58>
    return;
     984:	00002d06 	br	a3c <__malloc_lock+0x10c>

  id = tcb.OSTCBPrio;
     988:	e0bfee83 	ldbu	r2,-70(fp)
     98c:	10803fcc 	andi	r2,r2,255
     990:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
     994:	d0e7d217 	ldw	r3,-24760(gp)
     998:	e0bffd04 	addi	r2,fp,-12
     99c:	1809883a 	mov	r4,r3
     9a0:	100b883a 	mov	r5,r2
     9a4:	00067480 	call	6748 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     9a8:	0005303a 	rdctl	r2,status
     9ac:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     9b0:	e0ffdf17 	ldw	r3,-132(fp)
     9b4:	00bfff84 	movi	r2,-2
     9b8:	1884703a 	and	r2,r3,r2
     9bc:	1001703a 	wrctl	status,r2
  
  return context;
     9c0:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
     9c4:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
     9c8:	e0bffd0b 	ldhu	r2,-12(fp)
     9cc:	10bfffcc 	andi	r2,r2,65535
     9d0:	10000b1e 	bne	r2,zero,a00 <__malloc_lock+0xd0>
     9d4:	d0a00117 	ldw	r2,-32764(gp)
     9d8:	e0ffde17 	ldw	r3,-136(fp)
     9dc:	1880081e 	bne	r3,r2,a00 <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
     9e0:	d0a7d117 	ldw	r2,-24764(gp)
     9e4:	10800044 	addi	r2,r2,1
     9e8:	d0a7d115 	stw	r2,-24764(gp)
     9ec:	e0bfdd17 	ldw	r2,-140(fp)
     9f0:	e0bfe015 	stw	r2,-128(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     9f4:	e0bfe017 	ldw	r2,-128(fp)
     9f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
     9fc:	00000e06 	br	a38 <__malloc_lock+0x108>
     a00:	e0bfdd17 	ldw	r2,-140(fp)
     a04:	e0bfe115 	stw	r2,-124(fp)
     a08:	e0bfe117 	ldw	r2,-124(fp)
     a0c:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
     a10:	d0e7d217 	ldw	r3,-24760(gp)
     a14:	e0bffe84 	addi	r2,fp,-6
     a18:	1809883a 	mov	r4,r3
     a1c:	000b883a 	mov	r5,zero
     a20:	100d883a 	mov	r6,r2
     a24:	00062640 	call	6264 <OSSemPend>
    locks  = 1;
     a28:	00800044 	movi	r2,1
     a2c:	d0a7d115 	stw	r2,-24764(gp)
    lockid = id;
     a30:	e0bfde17 	ldw	r2,-136(fp)
     a34:	d0a00115 	stw	r2,-32764(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
     a38:	0001883a 	nop
}
     a3c:	e037883a 	mov	sp,fp
     a40:	dfc00117 	ldw	ra,4(sp)
     a44:	df000017 	ldw	fp,0(sp)
     a48:	dec00204 	addi	sp,sp,8
     a4c:	f800283a 	ret

00000a50 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
     a50:	defff804 	addi	sp,sp,-32
     a54:	dfc00715 	stw	ra,28(sp)
     a58:	df000615 	stw	fp,24(sp)
     a5c:	df000604 	addi	fp,sp,24
     a60:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
     a64:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
     a68:	00800074 	movhi	r2,1
     a6c:	108f5b44 	addi	r2,r2,15725
     a70:	10800003 	ldbu	r2,0(r2)
     a74:	10803fcc 	andi	r2,r2,255
     a78:	10800060 	cmpeqi	r2,r2,1
     a7c:	1000011e 	bne	r2,zero,a84 <__malloc_unlock+0x34>
      return;
     a80:	00002206 	br	b0c <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     a84:	0005303a 	rdctl	r2,status
     a88:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     a8c:	e0fffb17 	ldw	r3,-20(fp)
     a90:	00bfff84 	movi	r2,-2
     a94:	1884703a 	and	r2,r3,r2
     a98:	1001703a 	wrctl	status,r2
  
  return context;
     a9c:	e0bffb17 	ldw	r2,-20(fp)

  OS_ENTER_CRITICAL();
     aa0:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
     aa4:	d0a7d117 	ldw	r2,-24764(gp)
     aa8:	1000051e 	bne	r2,zero,ac0 <__malloc_unlock+0x70>
     aac:	e0bffa17 	ldw	r2,-24(fp)
     ab0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     ab4:	e0bffc17 	ldw	r2,-16(fp)
     ab8:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
     abc:	00001306 	br	b0c <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
     ac0:	d0a7d117 	ldw	r2,-24764(gp)
     ac4:	10bfffc4 	addi	r2,r2,-1
     ac8:	d0a7d115 	stw	r2,-24764(gp)
     acc:	d0a7d117 	ldw	r2,-24764(gp)
     ad0:	10000a1e 	bne	r2,zero,afc <__malloc_unlock+0xac>
  {
    lockid = -1;
     ad4:	00bfffc4 	movi	r2,-1
     ad8:	d0a00115 	stw	r2,-32764(gp)
     adc:	e0bffa17 	ldw	r2,-24(fp)
     ae0:	e0bffd15 	stw	r2,-12(fp)
     ae4:	e0bffd17 	ldw	r2,-12(fp)
     ae8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
     aec:	d0a7d217 	ldw	r2,-24760(gp)
     af0:	1009883a 	mov	r4,r2
     af4:	00066380 	call	6638 <OSSemPost>
     af8:	00000406 	br	b0c <__malloc_unlock+0xbc>
     afc:	e0bffa17 	ldw	r2,-24(fp)
     b00:	e0bffe15 	stw	r2,-8(fp)
     b04:	e0bffe17 	ldw	r2,-8(fp)
     b08:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
     b0c:	e037883a 	mov	sp,fp
     b10:	dfc00117 	ldw	ra,4(sp)
     b14:	df000017 	ldw	fp,0(sp)
     b18:	dec00204 	addi	sp,sp,8
     b1c:	f800283a 	ret

00000b20 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
     b20:	defff704 	addi	sp,sp,-36
     b24:	dfc00815 	stw	ra,32(sp)
     b28:	df000715 	stw	fp,28(sp)
     b2c:	df000704 	addi	fp,sp,28
     b30:	e13ffd15 	stw	r4,-12(fp)
     b34:	e17ffe15 	stw	r5,-8(fp)
     b38:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
     b3c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
     b40:	e0bfff17 	ldw	r2,-4(fp)
     b44:	1000021e 	bne	r2,zero,b50 <OSEventNameGet+0x30>
        return (0);
     b48:	0005883a 	mov	r2,zero
     b4c:	00003706 	br	c2c <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
     b50:	e0bffd17 	ldw	r2,-12(fp)
     b54:	1000051e 	bne	r2,zero,b6c <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
     b58:	e0bfff17 	ldw	r2,-4(fp)
     b5c:	00c00104 	movi	r3,4
     b60:	10c00005 	stb	r3,0(r2)
        return (0);
     b64:	0005883a 	mov	r2,zero
     b68:	00003006 	br	c2c <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
     b6c:	e0bffe17 	ldw	r2,-8(fp)
     b70:	1000051e 	bne	r2,zero,b88 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
     b74:	e0bfff17 	ldw	r2,-4(fp)
     b78:	00c00304 	movi	r3,12
     b7c:	10c00005 	stb	r3,0(r2)
        return (0);
     b80:	0005883a 	mov	r2,zero
     b84:	00002906 	br	c2c <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
     b88:	d0a7e103 	ldbu	r2,-24700(gp)
     b8c:	10803fcc 	andi	r2,r2,255
     b90:	10000526 	beq	r2,zero,ba8 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
     b94:	e0bfff17 	ldw	r2,-4(fp)
     b98:	00c00444 	movi	r3,17
     b9c:	10c00005 	stb	r3,0(r2)
        return (0);
     ba0:	0005883a 	mov	r2,zero
     ba4:	00002106 	br	c2c <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
     ba8:	e0bffd17 	ldw	r2,-12(fp)
     bac:	10800003 	ldbu	r2,0(r2)
     bb0:	10803fcc 	andi	r2,r2,255
     bb4:	10bfffc4 	addi	r2,r2,-1
     bb8:	10800128 	cmpgeui	r2,r2,4
     bbc:	10000526 	beq	r2,zero,bd4 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
     bc0:	e0bfff17 	ldw	r2,-4(fp)
     bc4:	00c00044 	movi	r3,1
     bc8:	10c00005 	stb	r3,0(r2)
             return (0);
     bcc:	0005883a 	mov	r2,zero
     bd0:	00001606 	br	c2c <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
     bd4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     bd8:	0005303a 	rdctl	r2,status
     bdc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     be0:	e0fffb17 	ldw	r3,-20(fp)
     be4:	00bfff84 	movi	r2,-2
     be8:	1884703a 	and	r2,r3,r2
     bec:	1001703a 	wrctl	status,r2
  
  return context;
     bf0:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
     bf4:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
     bf8:	e0bffd17 	ldw	r2,-12(fp)
     bfc:	10800384 	addi	r2,r2,14
     c00:	e13ffe17 	ldw	r4,-8(fp)
     c04:	100b883a 	mov	r5,r2
     c08:	00025740 	call	2574 <OS_StrCopy>
     c0c:	e0bffa05 	stb	r2,-24(fp)
     c10:	e0bff917 	ldw	r2,-28(fp)
     c14:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     c18:	e0bffc17 	ldw	r2,-16(fp)
     c1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
     c20:	e0bfff17 	ldw	r2,-4(fp)
     c24:	10000005 	stb	zero,0(r2)
    return (len);
     c28:	e0bffa03 	ldbu	r2,-24(fp)
}
     c2c:	e037883a 	mov	sp,fp
     c30:	dfc00117 	ldw	ra,4(sp)
     c34:	df000017 	ldw	fp,0(sp)
     c38:	dec00204 	addi	sp,sp,8
     c3c:	f800283a 	ret

00000c40 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
     c40:	defff604 	addi	sp,sp,-40
     c44:	dfc00915 	stw	ra,36(sp)
     c48:	df000815 	stw	fp,32(sp)
     c4c:	df000804 	addi	fp,sp,32
     c50:	e13ffd15 	stw	r4,-12(fp)
     c54:	e17ffe15 	stw	r5,-8(fp)
     c58:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
     c5c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
     c60:	e0bfff17 	ldw	r2,-4(fp)
     c64:	1000011e 	bne	r2,zero,c6c <OSEventNameSet+0x2c>
        return;
     c68:	00003f06 	br	d68 <OSEventNameSet+0x128>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
     c6c:	e0bffd17 	ldw	r2,-12(fp)
     c70:	1000041e 	bne	r2,zero,c84 <OSEventNameSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
     c74:	e0bfff17 	ldw	r2,-4(fp)
     c78:	00c00104 	movi	r3,4
     c7c:	10c00005 	stb	r3,0(r2)
        return;
     c80:	00003906 	br	d68 <OSEventNameSet+0x128>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
     c84:	e0bffe17 	ldw	r2,-8(fp)
     c88:	1000041e 	bne	r2,zero,c9c <OSEventNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
     c8c:	e0bfff17 	ldw	r2,-4(fp)
     c90:	00c00304 	movi	r3,12
     c94:	10c00005 	stb	r3,0(r2)
        return;
     c98:	00003306 	br	d68 <OSEventNameSet+0x128>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
     c9c:	d0a7e103 	ldbu	r2,-24700(gp)
     ca0:	10803fcc 	andi	r2,r2,255
     ca4:	10000426 	beq	r2,zero,cb8 <OSEventNameSet+0x78>
        *perr = OS_ERR_NAME_SET_ISR;
     ca8:	e0bfff17 	ldw	r2,-4(fp)
     cac:	00c00484 	movi	r3,18
     cb0:	10c00005 	stb	r3,0(r2)
        return;
     cb4:	00002c06 	br	d68 <OSEventNameSet+0x128>
    }
    switch (pevent->OSEventType) {
     cb8:	e0bffd17 	ldw	r2,-12(fp)
     cbc:	10800003 	ldbu	r2,0(r2)
     cc0:	10803fcc 	andi	r2,r2,255
     cc4:	10bfffc4 	addi	r2,r2,-1
     cc8:	10800128 	cmpgeui	r2,r2,4
     ccc:	10000426 	beq	r2,zero,ce0 <OSEventNameSet+0xa0>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
     cd0:	e0bfff17 	ldw	r2,-4(fp)
     cd4:	00c00044 	movi	r3,1
     cd8:	10c00005 	stb	r3,0(r2)
             return;
     cdc:	00002206 	br	d68 <OSEventNameSet+0x128>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
     ce0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     ce4:	0005303a 	rdctl	r2,status
     ce8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     cec:	e0fffa17 	ldw	r3,-24(fp)
     cf0:	00bfff84 	movi	r2,-2
     cf4:	1884703a 	and	r2,r3,r2
     cf8:	1001703a 	wrctl	status,r2
  
  return context;
     cfc:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
     d00:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
     d04:	e13ffe17 	ldw	r4,-8(fp)
     d08:	00025e80 	call	25e8 <OS_StrLen>
     d0c:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
     d10:	e0bff903 	ldbu	r2,-28(fp)
     d14:	10800830 	cmpltui	r2,r2,32
     d18:	1000081e 	bne	r2,zero,d3c <OSEventNameSet+0xfc>
     d1c:	e0bff817 	ldw	r2,-32(fp)
     d20:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     d24:	e0bffb17 	ldw	r2,-20(fp)
     d28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
     d2c:	e0bfff17 	ldw	r2,-4(fp)
     d30:	00c002c4 	movi	r3,11
     d34:	10c00005 	stb	r3,0(r2)
        return;
     d38:	00000b06 	br	d68 <OSEventNameSet+0x128>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
     d3c:	e0bffd17 	ldw	r2,-12(fp)
     d40:	10800384 	addi	r2,r2,14
     d44:	1009883a 	mov	r4,r2
     d48:	e17ffe17 	ldw	r5,-8(fp)
     d4c:	00025740 	call	2574 <OS_StrCopy>
     d50:	e0bff817 	ldw	r2,-32(fp)
     d54:	e0bffc15 	stw	r2,-16(fp)
     d58:	e0bffc17 	ldw	r2,-16(fp)
     d5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
     d60:	e0bfff17 	ldw	r2,-4(fp)
     d64:	10000005 	stb	zero,0(r2)
}
     d68:	e037883a 	mov	sp,fp
     d6c:	dfc00117 	ldw	ra,4(sp)
     d70:	df000017 	ldw	fp,0(sp)
     d74:	dec00204 	addi	sp,sp,8
     d78:	f800283a 	ret

00000d7c <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
     d7c:	deffed04 	addi	sp,sp,-76
     d80:	dfc01215 	stw	ra,72(sp)
     d84:	df001115 	stw	fp,68(sp)
     d88:	df001104 	addi	fp,sp,68
     d8c:	e13ffc15 	stw	r4,-16(fp)
     d90:	e17ffd15 	stw	r5,-12(fp)
     d94:	e1bffe15 	stw	r6,-8(fp)
     d98:	3805883a 	mov	r2,r7
     d9c:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
     da0:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
     da4:	e0800217 	ldw	r2,8(fp)
     da8:	1000021e 	bne	r2,zero,db4 <OSEventPendMulti+0x38>
        return (0);
     dac:	0005883a 	mov	r2,zero
     db0:	00017106 	br	1378 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
     db4:	e0bffc17 	ldw	r2,-16(fp)
     db8:	1000051e 	bne	r2,zero,dd0 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
     dbc:	e0800217 	ldw	r2,8(fp)
     dc0:	00c00104 	movi	r3,4
     dc4:	10c00005 	stb	r3,0(r2)
        return (0);
     dc8:	0005883a 	mov	r2,zero
     dcc:	00016a06 	br	1378 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
     dd0:	e0bffd17 	ldw	r2,-12(fp)
     dd4:	1000051e 	bne	r2,zero,dec <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
     dd8:	e0800217 	ldw	r2,8(fp)
     ddc:	00c00104 	movi	r3,4
     de0:	10c00005 	stb	r3,0(r2)
        return (0);
     de4:	0005883a 	mov	r2,zero
     de8:	00016306 	br	1378 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
     dec:	e0bffe17 	ldw	r2,-8(fp)
     df0:	1000051e 	bne	r2,zero,e08 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
     df4:	e0800217 	ldw	r2,8(fp)
     df8:	00c00104 	movi	r3,4
     dfc:	10c00005 	stb	r3,0(r2)
        return (0);
     e00:	0005883a 	mov	r2,zero
     e04:	00015c06 	br	1378 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
     e08:	e0bffd17 	ldw	r2,-12(fp)
     e0c:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
     e10:	e0bffc17 	ldw	r2,-16(fp)
     e14:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
     e18:	e0bfef17 	ldw	r2,-68(fp)
     e1c:	10800017 	ldw	r2,0(r2)
     e20:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
     e24:	00001906 	br	e8c <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
     e28:	e0bff017 	ldw	r2,-64(fp)
     e2c:	10800003 	ldbu	r2,0(r2)
     e30:	10803fcc 	andi	r2,r2,255
     e34:	10c000a0 	cmpeqi	r3,r2,2
     e38:	1800091e 	bne	r3,zero,e60 <OSEventPendMulti+0xe4>
     e3c:	10c000e0 	cmpeqi	r3,r2,3
     e40:	1800091e 	bne	r3,zero,e68 <OSEventPendMulti+0xec>
     e44:	10800060 	cmpeqi	r2,r2,1
     e48:	1000091e 	bne	r2,zero,e70 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
     e4c:	e0800217 	ldw	r2,8(fp)
     e50:	00c00044 	movi	r3,1
     e54:	10c00005 	stb	r3,0(r2)
                 return (0);
     e58:	0005883a 	mov	r2,zero
     e5c:	00014606 	br	1378 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
     e60:	0001883a 	nop
     e64:	00000306 	br	e74 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
     e68:	0001883a 	nop
     e6c:	00000106 	br	e74 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
     e70:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
     e74:	e0bfef17 	ldw	r2,-68(fp)
     e78:	10800104 	addi	r2,r2,4
     e7c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
     e80:	e0bfef17 	ldw	r2,-68(fp)
     e84:	10800017 	ldw	r2,0(r2)
     e88:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
     e8c:	e0bff017 	ldw	r2,-64(fp)
     e90:	103fe51e 	bne	r2,zero,e28 <OSEventPendMulti+0xac>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
     e94:	d0a7e103 	ldbu	r2,-24700(gp)
     e98:	10803fcc 	andi	r2,r2,255
     e9c:	10000526 	beq	r2,zero,eb4 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
     ea0:	e0800217 	ldw	r2,8(fp)
     ea4:	00c00084 	movi	r3,2
     ea8:	10c00005 	stb	r3,0(r2)
        return (0);
     eac:	0005883a 	mov	r2,zero
     eb0:	00013106 	br	1378 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
     eb4:	d0a7d303 	ldbu	r2,-24756(gp)
     eb8:	10803fcc 	andi	r2,r2,255
     ebc:	10000526 	beq	r2,zero,ed4 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
     ec0:	e0800217 	ldw	r2,8(fp)
     ec4:	00c00344 	movi	r3,13
     ec8:	10c00005 	stb	r3,0(r2)
        return (0);
     ecc:	0005883a 	mov	r2,zero
     ed0:	00012906 	br	1378 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     ed4:	0005303a 	rdctl	r2,status
     ed8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     edc:	e0fff517 	ldw	r3,-44(fp)
     ee0:	00bfff84 	movi	r2,-2
     ee4:	1884703a 	and	r2,r3,r2
     ee8:	1001703a 	wrctl	status,r2
  
  return context;
     eec:	e0bff517 	ldw	r2,-44(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
     ef0:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
     ef4:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
     ef8:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
     efc:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
     f00:	e0bffc17 	ldw	r2,-16(fp)
     f04:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
     f08:	e0bfef17 	ldw	r2,-68(fp)
     f0c:	10800017 	ldw	r2,0(r2)
     f10:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
     f14:	00008106 	br	111c <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
     f18:	e0bff017 	ldw	r2,-64(fp)
     f1c:	10800003 	ldbu	r2,0(r2)
     f20:	10803fcc 	andi	r2,r2,255
     f24:	10c000a0 	cmpeqi	r3,r2,2
     f28:	18003c1e 	bne	r3,zero,101c <OSEventPendMulti+0x2a0>
     f2c:	10c000e0 	cmpeqi	r3,r2,3
     f30:	1800031e 	bne	r3,zero,f40 <OSEventPendMulti+0x1c4>
     f34:	10800060 	cmpeqi	r2,r2,1
     f38:	10001e1e 	bne	r2,zero,fb4 <OSEventPendMulti+0x238>
     f3c:	00006606 	br	10d8 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
     f40:	e0bff017 	ldw	r2,-64(fp)
     f44:	1080020b 	ldhu	r2,8(r2)
     f48:	10bfffcc 	andi	r2,r2,65535
     f4c:	10001526 	beq	r2,zero,fa4 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
     f50:	e0bff017 	ldw	r2,-64(fp)
     f54:	1080020b 	ldhu	r2,8(r2)
     f58:	10bfffc4 	addi	r2,r2,-1
     f5c:	1007883a 	mov	r3,r2
     f60:	e0bff017 	ldw	r2,-64(fp)
     f64:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
     f68:	e0bffd17 	ldw	r2,-12(fp)
     f6c:	10c00104 	addi	r3,r2,4
     f70:	e0fffd15 	stw	r3,-12(fp)
     f74:	e0fff017 	ldw	r3,-64(fp)
     f78:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
     f7c:	00800044 	movi	r2,1
     f80:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
     f84:	e0bffe17 	ldw	r2,-8(fp)
     f88:	10c00104 	addi	r3,r2,4
     f8c:	e0fffe15 	stw	r3,-8(fp)
     f90:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
     f94:	e0bff18b 	ldhu	r2,-58(fp)
     f98:	10800044 	addi	r2,r2,1
     f9c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
     fa0:	00005806 	br	1104 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
     fa4:	e0bff203 	ldbu	r2,-56(fp)
     fa8:	10800054 	ori	r2,r2,1
     fac:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
     fb0:	00005406 	br	1104 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
     fb4:	e0bff017 	ldw	r2,-64(fp)
     fb8:	10800117 	ldw	r2,4(r2)
     fbc:	10001326 	beq	r2,zero,100c <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
     fc0:	e0bffe17 	ldw	r2,-8(fp)
     fc4:	10c00104 	addi	r3,r2,4
     fc8:	e0fffe15 	stw	r3,-8(fp)
     fcc:	e0fff017 	ldw	r3,-64(fp)
     fd0:	18c00117 	ldw	r3,4(r3)
     fd4:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
     fd8:	e0bff017 	ldw	r2,-64(fp)
     fdc:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
     fe0:	e0bffd17 	ldw	r2,-12(fp)
     fe4:	10c00104 	addi	r3,r2,4
     fe8:	e0fffd15 	stw	r3,-12(fp)
     fec:	e0fff017 	ldw	r3,-64(fp)
     ff0:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
     ff4:	00800044 	movi	r2,1
     ff8:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
     ffc:	e0bff18b 	ldhu	r2,-58(fp)
    1000:	10800044 	addi	r2,r2,1
    1004:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    1008:	00003e06 	br	1104 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    100c:	e0bff203 	ldbu	r2,-56(fp)
    1010:	10800094 	ori	r2,r2,2
    1014:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    1018:	00003a06 	br	1104 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    101c:	e0bff017 	ldw	r2,-64(fp)
    1020:	10800117 	ldw	r2,4(r2)
    1024:	e0bff415 	stw	r2,-48(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    1028:	e0bff417 	ldw	r2,-48(fp)
    102c:	1080058b 	ldhu	r2,22(r2)
    1030:	10bfffcc 	andi	r2,r2,65535
    1034:	10002426 	beq	r2,zero,10c8 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    1038:	e0bffe17 	ldw	r2,-8(fp)
    103c:	10c00104 	addi	r3,r2,4
    1040:	e0fffe15 	stw	r3,-8(fp)
    1044:	e0fff417 	ldw	r3,-48(fp)
    1048:	18c00417 	ldw	r3,16(r3)
    104c:	19400104 	addi	r5,r3,4
    1050:	e13ff417 	ldw	r4,-48(fp)
    1054:	21400415 	stw	r5,16(r4)
    1058:	18c00017 	ldw	r3,0(r3)
    105c:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    1060:	e0bff417 	ldw	r2,-48(fp)
    1064:	10c00417 	ldw	r3,16(r2)
    1068:	e0bff417 	ldw	r2,-48(fp)
    106c:	10800217 	ldw	r2,8(r2)
    1070:	1880041e 	bne	r3,r2,1084 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    1074:	e0bff417 	ldw	r2,-48(fp)
    1078:	10c00117 	ldw	r3,4(r2)
    107c:	e0bff417 	ldw	r2,-48(fp)
    1080:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    1084:	e0bff417 	ldw	r2,-48(fp)
    1088:	1080058b 	ldhu	r2,22(r2)
    108c:	10bfffc4 	addi	r2,r2,-1
    1090:	1007883a 	mov	r3,r2
    1094:	e0bff417 	ldw	r2,-48(fp)
    1098:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    109c:	e0bffd17 	ldw	r2,-12(fp)
    10a0:	10c00104 	addi	r3,r2,4
    10a4:	e0fffd15 	stw	r3,-12(fp)
    10a8:	e0fff017 	ldw	r3,-64(fp)
    10ac:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
    10b0:	00800044 	movi	r2,1
    10b4:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    10b8:	e0bff18b 	ldhu	r2,-58(fp)
    10bc:	10800044 	addi	r2,r2,1
    10c0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    10c4:	00000f06 	br	1104 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    10c8:	e0bff203 	ldbu	r2,-56(fp)
    10cc:	10800114 	ori	r2,r2,4
    10d0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    10d4:	00000b06 	br	1104 <OSEventPendMulti+0x388>
    10d8:	e0bff317 	ldw	r2,-52(fp)
    10dc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    10e0:	e0bff617 	ldw	r2,-40(fp)
    10e4:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    10e8:	e0bffd17 	ldw	r2,-12(fp)
    10ec:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    10f0:	e0800217 	ldw	r2,8(fp)
    10f4:	00c00044 	movi	r3,1
    10f8:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
    10fc:	e0bff18b 	ldhu	r2,-58(fp)
    1100:	00009d06 	br	1378 <OSEventPendMulti+0x5fc>
        }
        pevents++;
    1104:	e0bfef17 	ldw	r2,-68(fp)
    1108:	10800104 	addi	r2,r2,4
    110c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    1110:	e0bfef17 	ldw	r2,-68(fp)
    1114:	10800017 	ldw	r2,0(r2)
    1118:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    111c:	e0bff017 	ldw	r2,-64(fp)
    1120:	103f7d1e 	bne	r2,zero,f18 <OSEventPendMulti+0x19c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    1124:	e0bff103 	ldbu	r2,-60(fp)
    1128:	10800058 	cmpnei	r2,r2,1
    112c:	10000a1e 	bne	r2,zero,1158 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    1130:	e0bffd17 	ldw	r2,-12(fp)
    1134:	10000015 	stw	zero,0(r2)
    1138:	e0bff317 	ldw	r2,-52(fp)
    113c:	e0bff715 	stw	r2,-36(fp)
    1140:	e0bff717 	ldw	r2,-36(fp)
    1144:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    1148:	e0800217 	ldw	r2,8(fp)
    114c:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    1150:	e0bff18b 	ldhu	r2,-58(fp)
    1154:	00008806 	br	1378 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    1158:	d0a7e217 	ldw	r2,-24696(gp)
    115c:	d0e7e217 	ldw	r3,-24696(gp)
    1160:	19000c03 	ldbu	r4,48(r3)
    1164:	e0fff203 	ldbu	r3,-56(fp)
    1168:	20c6b03a 	or	r3,r4,r3
    116c:	1809883a 	mov	r4,r3
    1170:	00ffe004 	movi	r3,-128
    1174:	20c6b03a 	or	r3,r4,r3
    1178:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    117c:	d0a7e217 	ldw	r2,-24696(gp)
    1180:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    1184:	d0a7e217 	ldw	r2,-24696(gp)
    1188:	e0ffff0b 	ldhu	r3,-4(fp)
    118c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    1190:	e13ffc17 	ldw	r4,-16(fp)
    1194:	0001cc40 	call	1cc4 <OS_EventTaskWaitMulti>
    1198:	e0bff317 	ldw	r2,-52(fp)
    119c:	e0bff815 	stw	r2,-32(fp)
    11a0:	e0bff817 	ldw	r2,-32(fp)
    11a4:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    11a8:	00024380 	call	2438 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    11ac:	0005303a 	rdctl	r2,status
    11b0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    11b4:	e0fff917 	ldw	r3,-28(fp)
    11b8:	00bfff84 	movi	r2,-2
    11bc:	1884703a 	and	r2,r3,r2
    11c0:	1001703a 	wrctl	status,r2
  
  return context;
    11c4:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    11c8:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    11cc:	d0a7e217 	ldw	r2,-24696(gp)
    11d0:	10800c43 	ldbu	r2,49(r2)
    11d4:	10803fcc 	andi	r2,r2,255
    11d8:	10000226 	beq	r2,zero,11e4 <OSEventPendMulti+0x468>
    11dc:	108000a0 	cmpeqi	r2,r2,2
    11e0:	10001826 	beq	r2,zero,1244 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    11e4:	d0a7e217 	ldw	r2,-24696(gp)
    11e8:	10800717 	ldw	r2,28(r2)
    11ec:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    11f0:	e0bff017 	ldw	r2,-64(fp)
    11f4:	10000b26 	beq	r2,zero,1224 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    11f8:	e0bffd17 	ldw	r2,-12(fp)
    11fc:	10c00104 	addi	r3,r2,4
    1200:	e0fffd15 	stw	r3,-12(fp)
    1204:	e0fff017 	ldw	r3,-64(fp)
    1208:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    120c:	e0bffd17 	ldw	r2,-12(fp)
    1210:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    1214:	e0bff18b 	ldhu	r2,-58(fp)
    1218:	10800044 	addi	r2,r2,1
    121c:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    1220:	00000d06 	br	1258 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    1224:	d0a7e217 	ldw	r2,-24696(gp)
    1228:	00c00044 	movi	r3,1
    122c:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    1230:	d0a7e217 	ldw	r2,-24696(gp)
    1234:	1009883a 	mov	r4,r2
    1238:	e17ffc17 	ldw	r5,-16(fp)
    123c:	0001ec40 	call	1ec4 <OS_EventTaskRemoveMulti>
             }
			 break;
    1240:	00000506 	br	1258 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    1244:	d0a7e217 	ldw	r2,-24696(gp)
    1248:	1009883a 	mov	r4,r2
    124c:	e17ffc17 	ldw	r5,-16(fp)
    1250:	0001ec40 	call	1ec4 <OS_EventTaskRemoveMulti>
             break;
    1254:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    1258:	d0a7e217 	ldw	r2,-24696(gp)
    125c:	10800c43 	ldbu	r2,49(r2)
    1260:	10803fcc 	andi	r2,r2,255
    1264:	10000326 	beq	r2,zero,1274 <OSEventPendMulti+0x4f8>
    1268:	108000a0 	cmpeqi	r2,r2,2
    126c:	1000231e 	bne	r2,zero,12fc <OSEventPendMulti+0x580>
    1270:	00002a06 	br	131c <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    1274:	e0bff017 	ldw	r2,-64(fp)
    1278:	10800003 	ldbu	r2,0(r2)
    127c:	10803fcc 	andi	r2,r2,255
    1280:	0080100e 	bge	zero,r2,12c4 <OSEventPendMulti+0x548>
    1284:	10c000d0 	cmplti	r3,r2,3
    1288:	1800071e 	bne	r3,zero,12a8 <OSEventPendMulti+0x52c>
    128c:	108000e0 	cmpeqi	r2,r2,3
    1290:	10000c26 	beq	r2,zero,12c4 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    1294:	e0bffe17 	ldw	r2,-8(fp)
    1298:	10c00104 	addi	r3,r2,4
    129c:	e0fffe15 	stw	r3,-8(fp)
    12a0:	10000015 	stw	zero,0(r2)
                      break;
    12a4:	00001206 	br	12f0 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    12a8:	e0bffe17 	ldw	r2,-8(fp)
    12ac:	10c00104 	addi	r3,r2,4
    12b0:	e0fffe15 	stw	r3,-8(fp)
    12b4:	d0e7e217 	ldw	r3,-24696(gp)
    12b8:	18c00917 	ldw	r3,36(r3)
    12bc:	10c00015 	stw	r3,0(r2)
                      break;
    12c0:	00000b06 	br	12f0 <OSEventPendMulti+0x574>
    12c4:	e0bff317 	ldw	r2,-52(fp)
    12c8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    12cc:	e0bffa17 	ldw	r2,-24(fp)
    12d0:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    12d4:	e0bffd17 	ldw	r2,-12(fp)
    12d8:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    12dc:	e0800217 	ldw	r2,8(fp)
    12e0:	00c00044 	movi	r3,1
    12e4:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
    12e8:	e0bff18b 	ldhu	r2,-58(fp)
    12ec:	00002206 	br	1378 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
    12f0:	e0800217 	ldw	r2,8(fp)
    12f4:	10000005 	stb	zero,0(r2)
             break;
    12f8:	00001006 	br	133c <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    12fc:	e0bffe17 	ldw	r2,-8(fp)
    1300:	10c00104 	addi	r3,r2,4
    1304:	e0fffe15 	stw	r3,-8(fp)
    1308:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    130c:	e0800217 	ldw	r2,8(fp)
    1310:	00c00384 	movi	r3,14
    1314:	10c00005 	stb	r3,0(r2)
             break;
    1318:	00000806 	br	133c <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    131c:	e0bffe17 	ldw	r2,-8(fp)
    1320:	10c00104 	addi	r3,r2,4
    1324:	e0fffe15 	stw	r3,-8(fp)
    1328:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    132c:	e0800217 	ldw	r2,8(fp)
    1330:	00c00284 	movi	r3,10
    1334:	10c00005 	stb	r3,0(r2)
             break;
    1338:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    133c:	d0a7e217 	ldw	r2,-24696(gp)
    1340:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    1344:	d0a7e217 	ldw	r2,-24696(gp)
    1348:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    134c:	d0a7e217 	ldw	r2,-24696(gp)
    1350:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    1354:	d0a7e217 	ldw	r2,-24696(gp)
    1358:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    135c:	d0a7e217 	ldw	r2,-24696(gp)
    1360:	10000915 	stw	zero,36(r2)
    1364:	e0bff317 	ldw	r2,-52(fp)
    1368:	e0bffb15 	stw	r2,-20(fp)
    136c:	e0bffb17 	ldw	r2,-20(fp)
    1370:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    1374:	e0bff18b 	ldhu	r2,-58(fp)
}
    1378:	e037883a 	mov	sp,fp
    137c:	dfc00117 	ldw	ra,4(sp)
    1380:	df000017 	ldw	fp,0(sp)
    1384:	dec00204 	addi	sp,sp,8
    1388:	f800283a 	ret

0000138c <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    138c:	defffe04 	addi	sp,sp,-8
    1390:	dfc00115 	stw	ra,4(sp)
    1394:	df000015 	stw	fp,0(sp)
    1398:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    139c:	000cdb40 	call	cdb4 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    13a0:	00021000 	call	2100 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    13a4:	00021440 	call	2144 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    13a8:	00022a40 	call	22a4 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    13ac:	00020240 	call	2024 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    13b0:	00042240 	call	4224 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    13b4:	0004b6c0 	call	4b6c <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    13b8:	0005da00 	call	5da0 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    13bc:	00021ac0 	call	21ac <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    13c0:	00022280 	call	2228 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    13c4:	000cdd00 	call	cdd0 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    13c8:	0002b100 	call	2b10 <OSDebugInit>
#endif
}
    13cc:	e037883a 	mov	sp,fp
    13d0:	dfc00117 	ldw	ra,4(sp)
    13d4:	df000017 	ldw	fp,0(sp)
    13d8:	dec00204 	addi	sp,sp,8
    13dc:	f800283a 	ret

000013e0 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    13e0:	defffc04 	addi	sp,sp,-16
    13e4:	df000315 	stw	fp,12(sp)
    13e8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    13ec:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
    13f0:	d0a7d343 	ldbu	r2,-24755(gp)
    13f4:	10803fcc 	andi	r2,r2,255
    13f8:	10800058 	cmpnei	r2,r2,1
    13fc:	1000131e 	bne	r2,zero,144c <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1400:	0005303a 	rdctl	r2,status
    1404:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1408:	e0fffe17 	ldw	r3,-8(fp)
    140c:	00bfff84 	movi	r2,-2
    1410:	1884703a 	and	r2,r3,r2
    1414:	1001703a 	wrctl	status,r2
  
  return context;
    1418:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    141c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
    1420:	d0a7e103 	ldbu	r2,-24700(gp)
    1424:	10803fcc 	andi	r2,r2,255
    1428:	10803fe0 	cmpeqi	r2,r2,255
    142c:	1000031e 	bne	r2,zero,143c <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    1430:	d0a7e103 	ldbu	r2,-24700(gp)
    1434:	10800044 	addi	r2,r2,1
    1438:	d0a7e105 	stb	r2,-24700(gp)
    143c:	e0bffd17 	ldw	r2,-12(fp)
    1440:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1444:	e0bfff17 	ldw	r2,-4(fp)
    1448:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
    144c:	e037883a 	mov	sp,fp
    1450:	df000017 	ldw	fp,0(sp)
    1454:	dec00104 	addi	sp,sp,4
    1458:	f800283a 	ret

0000145c <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    145c:	defffb04 	addi	sp,sp,-20
    1460:	dfc00415 	stw	ra,16(sp)
    1464:	df000315 	stw	fp,12(sp)
    1468:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    146c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
    1470:	d0a7d343 	ldbu	r2,-24755(gp)
    1474:	10803fcc 	andi	r2,r2,255
    1478:	10800058 	cmpnei	r2,r2,1
    147c:	10002f1e 	bne	r2,zero,153c <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1480:	0005303a 	rdctl	r2,status
    1484:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1488:	e0fffe17 	ldw	r3,-8(fp)
    148c:	00bfff84 	movi	r2,-2
    1490:	1884703a 	and	r2,r3,r2
    1494:	1001703a 	wrctl	status,r2
  
  return context;
    1498:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    149c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    14a0:	d0a7e103 	ldbu	r2,-24700(gp)
    14a4:	10803fcc 	andi	r2,r2,255
    14a8:	10000326 	beq	r2,zero,14b8 <OSIntExit+0x5c>
            OSIntNesting--;
    14ac:	d0a7e103 	ldbu	r2,-24700(gp)
    14b0:	10bfffc4 	addi	r2,r2,-1
    14b4:	d0a7e105 	stb	r2,-24700(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    14b8:	d0a7e103 	ldbu	r2,-24700(gp)
    14bc:	10803fcc 	andi	r2,r2,255
    14c0:	10001a1e 	bne	r2,zero,152c <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    14c4:	d0a7d303 	ldbu	r2,-24756(gp)
    14c8:	10803fcc 	andi	r2,r2,255
    14cc:	1000171e 	bne	r2,zero,152c <OSIntExit+0xd0>
                OS_SchedNew();
    14d0:	00025040 	call	2504 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    14d4:	d0e7d503 	ldbu	r3,-24748(gp)
    14d8:	d0a7d543 	ldbu	r2,-24747(gp)
    14dc:	18c03fcc 	andi	r3,r3,255
    14e0:	10803fcc 	andi	r2,r2,255
    14e4:	18801126 	beq	r3,r2,152c <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    14e8:	d0a7d503 	ldbu	r2,-24748(gp)
    14ec:	10c03fcc 	andi	r3,r2,255
    14f0:	008001b4 	movhi	r2,6
    14f4:	10a3f604 	addi	r2,r2,-28712
    14f8:	18c7883a 	add	r3,r3,r3
    14fc:	18c7883a 	add	r3,r3,r3
    1500:	10c5883a 	add	r2,r2,r3
    1504:	10800017 	ldw	r2,0(r2)
    1508:	d0a7dd15 	stw	r2,-24716(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    150c:	d0a7dd17 	ldw	r2,-24716(gp)
    1510:	10c00e17 	ldw	r3,56(r2)
    1514:	18c00044 	addi	r3,r3,1
    1518:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    151c:	d0a7d817 	ldw	r2,-24736(gp)
    1520:	10800044 	addi	r2,r2,1
    1524:	d0a7d815 	stw	r2,-24736(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    1528:	000caf40 	call	caf4 <OSCtxSw>
    152c:	e0bffd17 	ldw	r2,-12(fp)
    1530:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1534:	e0bfff17 	ldw	r2,-4(fp)
    1538:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    153c:	e037883a 	mov	sp,fp
    1540:	dfc00117 	ldw	ra,4(sp)
    1544:	df000017 	ldw	fp,0(sp)
    1548:	dec00204 	addi	sp,sp,8
    154c:	f800283a 	ret

00001550 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    1550:	defffc04 	addi	sp,sp,-16
    1554:	df000315 	stw	fp,12(sp)
    1558:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    155c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    1560:	d0a7d343 	ldbu	r2,-24755(gp)
    1564:	10803fcc 	andi	r2,r2,255
    1568:	10800058 	cmpnei	r2,r2,1
    156c:	1000161e 	bne	r2,zero,15c8 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1570:	0005303a 	rdctl	r2,status
    1574:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1578:	e0fffe17 	ldw	r3,-8(fp)
    157c:	00bfff84 	movi	r2,-2
    1580:	1884703a 	and	r2,r3,r2
    1584:	1001703a 	wrctl	status,r2
  
  return context;
    1588:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    158c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    1590:	d0a7e103 	ldbu	r2,-24700(gp)
    1594:	10803fcc 	andi	r2,r2,255
    1598:	1000071e 	bne	r2,zero,15b8 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    159c:	d0a7d303 	ldbu	r2,-24756(gp)
    15a0:	10803fcc 	andi	r2,r2,255
    15a4:	10803fe0 	cmpeqi	r2,r2,255
    15a8:	1000031e 	bne	r2,zero,15b8 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    15ac:	d0a7d303 	ldbu	r2,-24756(gp)
    15b0:	10800044 	addi	r2,r2,1
    15b4:	d0a7d305 	stb	r2,-24756(gp)
    15b8:	e0bffd17 	ldw	r2,-12(fp)
    15bc:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    15c0:	e0bfff17 	ldw	r2,-4(fp)
    15c4:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    15c8:	e037883a 	mov	sp,fp
    15cc:	df000017 	ldw	fp,0(sp)
    15d0:	dec00104 	addi	sp,sp,4
    15d4:	f800283a 	ret

000015d8 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    15d8:	defff804 	addi	sp,sp,-32
    15dc:	dfc00715 	stw	ra,28(sp)
    15e0:	df000615 	stw	fp,24(sp)
    15e4:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    15e8:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    15ec:	d0a7d343 	ldbu	r2,-24755(gp)
    15f0:	10803fcc 	andi	r2,r2,255
    15f4:	10800058 	cmpnei	r2,r2,1
    15f8:	1000281e 	bne	r2,zero,169c <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    15fc:	0005303a 	rdctl	r2,status
    1600:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1604:	e0fffb17 	ldw	r3,-20(fp)
    1608:	00bfff84 	movi	r2,-2
    160c:	1884703a 	and	r2,r3,r2
    1610:	1001703a 	wrctl	status,r2
  
  return context;
    1614:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
    1618:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    161c:	d0a7d303 	ldbu	r2,-24756(gp)
    1620:	10803fcc 	andi	r2,r2,255
    1624:	10001926 	beq	r2,zero,168c <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    1628:	d0a7d303 	ldbu	r2,-24756(gp)
    162c:	10bfffc4 	addi	r2,r2,-1
    1630:	d0a7d305 	stb	r2,-24756(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    1634:	d0a7d303 	ldbu	r2,-24756(gp)
    1638:	10803fcc 	andi	r2,r2,255
    163c:	10000e1e 	bne	r2,zero,1678 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    1640:	d0a7e103 	ldbu	r2,-24700(gp)
    1644:	10803fcc 	andi	r2,r2,255
    1648:	1000061e 	bne	r2,zero,1664 <OSSchedUnlock+0x8c>
    164c:	e0bffa17 	ldw	r2,-24(fp)
    1650:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1654:	e0bffc17 	ldw	r2,-16(fp)
    1658:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    165c:	00024380 	call	2438 <OS_Sched>
    1660:	00000e06 	br	169c <OSSchedUnlock+0xc4>
    1664:	e0bffa17 	ldw	r2,-24(fp)
    1668:	e0bffd15 	stw	r2,-12(fp)
    166c:	e0bffd17 	ldw	r2,-12(fp)
    1670:	1001703a 	wrctl	status,r2
    1674:	00000906 	br	169c <OSSchedUnlock+0xc4>
    1678:	e0bffa17 	ldw	r2,-24(fp)
    167c:	e0bffe15 	stw	r2,-8(fp)
    1680:	e0bffe17 	ldw	r2,-8(fp)
    1684:	1001703a 	wrctl	status,r2
    1688:	00000406 	br	169c <OSSchedUnlock+0xc4>
    168c:	e0bffa17 	ldw	r2,-24(fp)
    1690:	e0bfff15 	stw	r2,-4(fp)
    1694:	e0bfff17 	ldw	r2,-4(fp)
    1698:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    169c:	e037883a 	mov	sp,fp
    16a0:	dfc00117 	ldw	ra,4(sp)
    16a4:	df000017 	ldw	fp,0(sp)
    16a8:	dec00204 	addi	sp,sp,8
    16ac:	f800283a 	ret

000016b0 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    16b0:	defffe04 	addi	sp,sp,-8
    16b4:	dfc00115 	stw	ra,4(sp)
    16b8:	df000015 	stw	fp,0(sp)
    16bc:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    16c0:	d0a7d343 	ldbu	r2,-24755(gp)
    16c4:	10803fcc 	andi	r2,r2,255
    16c8:	10000f1e 	bne	r2,zero,1708 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    16cc:	00025040 	call	2504 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    16d0:	d0a7d503 	ldbu	r2,-24748(gp)
    16d4:	d0a7d545 	stb	r2,-24747(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    16d8:	d0a7d503 	ldbu	r2,-24748(gp)
    16dc:	10c03fcc 	andi	r3,r2,255
    16e0:	008001b4 	movhi	r2,6
    16e4:	10a3f604 	addi	r2,r2,-28712
    16e8:	18c7883a 	add	r3,r3,r3
    16ec:	18c7883a 	add	r3,r3,r3
    16f0:	10c5883a 	add	r2,r2,r3
    16f4:	10800017 	ldw	r2,0(r2)
    16f8:	d0a7dd15 	stw	r2,-24716(gp)
        OSTCBCur      = OSTCBHighRdy;
    16fc:	d0a7dd17 	ldw	r2,-24716(gp)
    1700:	d0a7e215 	stw	r2,-24696(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    1704:	000cb800 	call	cb80 <OSStartHighRdy>
    }
}
    1708:	e037883a 	mov	sp,fp
    170c:	dfc00117 	ldw	ra,4(sp)
    1710:	df000017 	ldw	fp,0(sp)
    1714:	dec00204 	addi	sp,sp,8
    1718:	f800283a 	ret

0000171c <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    171c:	defff904 	addi	sp,sp,-28
    1720:	dfc00615 	stw	ra,24(sp)
    1724:	df000515 	stw	fp,20(sp)
    1728:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    172c:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    1730:	01000084 	movi	r4,2
    1734:	00082480 	call	8248 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1738:	0005303a 	rdctl	r2,status
    173c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1740:	e0fffc17 	ldw	r3,-16(fp)
    1744:	00bfff84 	movi	r2,-2
    1748:	1884703a 	and	r2,r3,r2
    174c:	1001703a 	wrctl	status,r2
  
  return context;
    1750:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    1754:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    1758:	d027d415 	stw	zero,-24752(gp)
    175c:	e0bffb17 	ldw	r2,-20(fp)
    1760:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1764:	e0bffd17 	ldw	r2,-12(fp)
    1768:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    176c:	0009883a 	mov	r4,zero
    1770:	00082480 	call	8248 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1774:	0005303a 	rdctl	r2,status
    1778:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    177c:	e0fffe17 	ldw	r3,-8(fp)
    1780:	00bfff84 	movi	r2,-2
    1784:	1884703a 	and	r2,r3,r2
    1788:	1001703a 	wrctl	status,r2
  
  return context;
    178c:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
    1790:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    1794:	d0a7d417 	ldw	r2,-24752(gp)
    1798:	d0a7d915 	stw	r2,-24732(gp)
    OSStatRdy    = OS_TRUE;
    179c:	00800044 	movi	r2,1
    17a0:	d0a7e505 	stb	r2,-24684(gp)
    17a4:	e0bffb17 	ldw	r2,-20(fp)
    17a8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    17ac:	e0bfff17 	ldw	r2,-4(fp)
    17b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    17b4:	e037883a 	mov	sp,fp
    17b8:	dfc00117 	ldw	ra,4(sp)
    17bc:	df000017 	ldw	fp,0(sp)
    17c0:	dec00204 	addi	sp,sp,8
    17c4:	f800283a 	ret

000017c8 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    17c8:	defff704 	addi	sp,sp,-36
    17cc:	dfc00815 	stw	ra,32(sp)
    17d0:	df000715 	stw	fp,28(sp)
    17d4:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    17d8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    17dc:	000cd980 	call	cd98 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    17e0:	0005303a 	rdctl	r2,status
    17e4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    17e8:	e0fffc17 	ldw	r3,-16(fp)
    17ec:	00bfff84 	movi	r2,-2
    17f0:	1884703a 	and	r2,r3,r2
    17f4:	1001703a 	wrctl	status,r2
  
  return context;
    17f8:	e0bffc17 	ldw	r2,-16(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    17fc:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
    1800:	d0a7e317 	ldw	r2,-24692(gp)
    1804:	10800044 	addi	r2,r2,1
    1808:	d0a7e315 	stw	r2,-24692(gp)
    180c:	e0bffb17 	ldw	r2,-20(fp)
    1810:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1814:	e0bffd17 	ldw	r2,-12(fp)
    1818:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    181c:	d0a7d343 	ldbu	r2,-24755(gp)
    1820:	10803fcc 	andi	r2,r2,255
    1824:	10800058 	cmpnei	r2,r2,1
    1828:	1000691e 	bne	r2,zero,19d0 <OSTimeTick+0x208>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    182c:	d0a7d703 	ldbu	r2,-24740(gp)
    1830:	10803fcc 	andi	r2,r2,255
    1834:	10c00060 	cmpeqi	r3,r2,1
    1838:	1800061e 	bne	r3,zero,1854 <OSTimeTick+0x8c>
    183c:	10c000a0 	cmpeqi	r3,r2,2
    1840:	1800061e 	bne	r3,zero,185c <OSTimeTick+0x94>
    1844:	10000a1e 	bne	r2,zero,1870 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    1848:	00800044 	movi	r2,1
    184c:	e0bffa05 	stb	r2,-24(fp)
                 break;
    1850:	00000b06 	br	1880 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    1854:	e03ffa05 	stb	zero,-24(fp)
                 break;
    1858:	00000906 	br	1880 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    185c:	00800044 	movi	r2,1
    1860:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    1864:	00800044 	movi	r2,1
    1868:	d0a7d705 	stb	r2,-24740(gp)
                 break;
    186c:	00000406 	br	1880 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    1870:	00800044 	movi	r2,1
    1874:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    1878:	d027d705 	stb	zero,-24740(gp)
                 break;
    187c:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    1880:	e0bffa03 	ldbu	r2,-24(fp)
    1884:	1000011e 	bne	r2,zero,188c <OSTimeTick+0xc4>
            return;
    1888:	00005106 	br	19d0 <OSTimeTick+0x208>
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    188c:	d0a7d617 	ldw	r2,-24744(gp)
    1890:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    1894:	00004906 	br	19bc <OSTimeTick+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1898:	0005303a 	rdctl	r2,status
    189c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    18a0:	e0fffe17 	ldw	r3,-8(fp)
    18a4:	00bfff84 	movi	r2,-2
    18a8:	1884703a 	and	r2,r3,r2
    18ac:	1001703a 	wrctl	status,r2
  
  return context;
    18b0:	e0bffe17 	ldw	r2,-8(fp)
            OS_ENTER_CRITICAL();
    18b4:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    18b8:	e0bff917 	ldw	r2,-28(fp)
    18bc:	10800b8b 	ldhu	r2,46(r2)
    18c0:	10bfffcc 	andi	r2,r2,65535
    18c4:	10003626 	beq	r2,zero,19a0 <OSTimeTick+0x1d8>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    18c8:	e0bff917 	ldw	r2,-28(fp)
    18cc:	10800b8b 	ldhu	r2,46(r2)
    18d0:	10bfffc4 	addi	r2,r2,-1
    18d4:	1007883a 	mov	r3,r2
    18d8:	e0bff917 	ldw	r2,-28(fp)
    18dc:	10c00b8d 	sth	r3,46(r2)
    18e0:	e0bff917 	ldw	r2,-28(fp)
    18e4:	10800b8b 	ldhu	r2,46(r2)
    18e8:	10bfffcc 	andi	r2,r2,65535
    18ec:	10002c1e 	bne	r2,zero,19a0 <OSTimeTick+0x1d8>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    18f0:	e0bff917 	ldw	r2,-28(fp)
    18f4:	10800c03 	ldbu	r2,48(r2)
    18f8:	10803fcc 	andi	r2,r2,255
    18fc:	10800dcc 	andi	r2,r2,55
    1900:	10000b26 	beq	r2,zero,1930 <OSTimeTick+0x168>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    1904:	e0bff917 	ldw	r2,-28(fp)
    1908:	10c00c03 	ldbu	r3,48(r2)
    190c:	00bff204 	movi	r2,-56
    1910:	1884703a 	and	r2,r3,r2
    1914:	1007883a 	mov	r3,r2
    1918:	e0bff917 	ldw	r2,-28(fp)
    191c:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    1920:	e0bff917 	ldw	r2,-28(fp)
    1924:	00c00044 	movi	r3,1
    1928:	10c00c45 	stb	r3,49(r2)
    192c:	00000206 	br	1938 <OSTimeTick+0x170>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    1930:	e0bff917 	ldw	r2,-28(fp)
    1934:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    1938:	e0bff917 	ldw	r2,-28(fp)
    193c:	10800c03 	ldbu	r2,48(r2)
    1940:	10803fcc 	andi	r2,r2,255
    1944:	1080020c 	andi	r2,r2,8
    1948:	1000151e 	bne	r2,zero,19a0 <OSTimeTick+0x1d8>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    194c:	e0bff917 	ldw	r2,-28(fp)
    1950:	10c00d83 	ldbu	r3,54(r2)
    1954:	d0a7df03 	ldbu	r2,-24708(gp)
    1958:	1884b03a 	or	r2,r3,r2
    195c:	d0a7df05 	stb	r2,-24708(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    1960:	e0bff917 	ldw	r2,-28(fp)
    1964:	10800d03 	ldbu	r2,52(r2)
    1968:	10c03fcc 	andi	r3,r2,255
    196c:	e0bff917 	ldw	r2,-28(fp)
    1970:	10800d03 	ldbu	r2,52(r2)
    1974:	11003fcc 	andi	r4,r2,255
    1978:	d0a7df44 	addi	r2,gp,-24707
    197c:	2085883a 	add	r2,r4,r2
    1980:	11000003 	ldbu	r4,0(r2)
    1984:	e0bff917 	ldw	r2,-28(fp)
    1988:	10800d43 	ldbu	r2,53(r2)
    198c:	2084b03a 	or	r2,r4,r2
    1990:	1009883a 	mov	r4,r2
    1994:	d0a7df44 	addi	r2,gp,-24707
    1998:	1885883a 	add	r2,r3,r2
    199c:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    19a0:	e0bff917 	ldw	r2,-28(fp)
    19a4:	10800517 	ldw	r2,20(r2)
    19a8:	e0bff915 	stw	r2,-28(fp)
    19ac:	e0bffb17 	ldw	r2,-20(fp)
    19b0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    19b4:	e0bfff17 	ldw	r2,-4(fp)
    19b8:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    19bc:	e0bff917 	ldw	r2,-28(fp)
    19c0:	10800c83 	ldbu	r2,50(r2)
    19c4:	10803fcc 	andi	r2,r2,255
    19c8:	10800518 	cmpnei	r2,r2,20
    19cc:	103fb21e 	bne	r2,zero,1898 <OSTimeTick+0xd0>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    19d0:	e037883a 	mov	sp,fp
    19d4:	dfc00117 	ldw	ra,4(sp)
    19d8:	df000017 	ldw	fp,0(sp)
    19dc:	dec00204 	addi	sp,sp,8
    19e0:	f800283a 	ret

000019e4 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    19e4:	deffff04 	addi	sp,sp,-4
    19e8:	df000015 	stw	fp,0(sp)
    19ec:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    19f0:	00804784 	movi	r2,286
}
    19f4:	e037883a 	mov	sp,fp
    19f8:	df000017 	ldw	fp,0(sp)
    19fc:	dec00104 	addi	sp,sp,4
    1a00:	f800283a 	ret

00001a04 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    1a04:	deffff04 	addi	sp,sp,-4
    1a08:	df000015 	stw	fp,0(sp)
    1a0c:	d839883a 	mov	fp,sp
}
    1a10:	e037883a 	mov	sp,fp
    1a14:	df000017 	ldw	fp,0(sp)
    1a18:	dec00104 	addi	sp,sp,4
    1a1c:	f800283a 	ret

00001a20 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    1a20:	defff804 	addi	sp,sp,-32
    1a24:	dfc00715 	stw	ra,28(sp)
    1a28:	df000615 	stw	fp,24(sp)
    1a2c:	df000604 	addi	fp,sp,24
    1a30:	e13ffc15 	stw	r4,-16(fp)
    1a34:	e17ffd15 	stw	r5,-12(fp)
    1a38:	3007883a 	mov	r3,r6
    1a3c:	3805883a 	mov	r2,r7
    1a40:	e0fffe05 	stb	r3,-8(fp)
    1a44:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    1a48:	e0bffc17 	ldw	r2,-16(fp)
    1a4c:	10800283 	ldbu	r2,10(r2)
    1a50:	10c03fcc 	andi	r3,r2,255
    1a54:	00800074 	movhi	r2,1
    1a58:	10bf5f04 	addi	r2,r2,-644
    1a5c:	10c5883a 	add	r2,r2,r3
    1a60:	10800003 	ldbu	r2,0(r2)
    1a64:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    1a68:	e0bffa03 	ldbu	r2,-24(fp)
    1a6c:	e0fffc17 	ldw	r3,-16(fp)
    1a70:	1885883a 	add	r2,r3,r2
    1a74:	10800204 	addi	r2,r2,8
    1a78:	108000c3 	ldbu	r2,3(r2)
    1a7c:	10c03fcc 	andi	r3,r2,255
    1a80:	00800074 	movhi	r2,1
    1a84:	10bf5f04 	addi	r2,r2,-644
    1a88:	10c5883a 	add	r2,r2,r3
    1a8c:	10800003 	ldbu	r2,0(r2)
    1a90:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    1a94:	e0bffa03 	ldbu	r2,-24(fp)
    1a98:	100490fa 	slli	r2,r2,3
    1a9c:	1007883a 	mov	r3,r2
    1aa0:	e0bffa43 	ldbu	r2,-23(fp)
    1aa4:	1885883a 	add	r2,r3,r2
    1aa8:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    1aac:	e0fffa83 	ldbu	r3,-22(fp)
    1ab0:	008001b4 	movhi	r2,6
    1ab4:	10a3f604 	addi	r2,r2,-28712
    1ab8:	18c7883a 	add	r3,r3,r3
    1abc:	18c7883a 	add	r3,r3,r3
    1ac0:	10c5883a 	add	r2,r2,r3
    1ac4:	10800017 	ldw	r2,0(r2)
    1ac8:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    1acc:	e0bffb17 	ldw	r2,-20(fp)
    1ad0:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    1ad4:	e0bffb17 	ldw	r2,-20(fp)
    1ad8:	e0fffd17 	ldw	r3,-12(fp)
    1adc:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    1ae0:	e0bffb17 	ldw	r2,-20(fp)
    1ae4:	10800c03 	ldbu	r2,48(r2)
    1ae8:	1007883a 	mov	r3,r2
    1aec:	e0bffe03 	ldbu	r2,-8(fp)
    1af0:	0084303a 	nor	r2,zero,r2
    1af4:	1884703a 	and	r2,r3,r2
    1af8:	1007883a 	mov	r3,r2
    1afc:	e0bffb17 	ldw	r2,-20(fp)
    1b00:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    1b04:	e0bffb17 	ldw	r2,-20(fp)
    1b08:	e0ffff03 	ldbu	r3,-4(fp)
    1b0c:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    1b10:	e0bffb17 	ldw	r2,-20(fp)
    1b14:	10800c03 	ldbu	r2,48(r2)
    1b18:	10803fcc 	andi	r2,r2,255
    1b1c:	1080020c 	andi	r2,r2,8
    1b20:	1000111e 	bne	r2,zero,1b68 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    1b24:	e0bffb17 	ldw	r2,-20(fp)
    1b28:	10c00d83 	ldbu	r3,54(r2)
    1b2c:	d0a7df03 	ldbu	r2,-24708(gp)
    1b30:	1884b03a 	or	r2,r3,r2
    1b34:	d0a7df05 	stb	r2,-24708(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    1b38:	e0fffa03 	ldbu	r3,-24(fp)
    1b3c:	e13ffa03 	ldbu	r4,-24(fp)
    1b40:	d0a7df44 	addi	r2,gp,-24707
    1b44:	2085883a 	add	r2,r4,r2
    1b48:	11000003 	ldbu	r4,0(r2)
    1b4c:	e0bffb17 	ldw	r2,-20(fp)
    1b50:	10800d43 	ldbu	r2,53(r2)
    1b54:	2084b03a 	or	r2,r4,r2
    1b58:	1009883a 	mov	r4,r2
    1b5c:	d0a7df44 	addi	r2,gp,-24707
    1b60:	1885883a 	add	r2,r3,r2
    1b64:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    1b68:	e13ffb17 	ldw	r4,-20(fp)
    1b6c:	e17ffc17 	ldw	r5,-16(fp)
    1b70:	0001e100 	call	1e10 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    1b74:	e0bffb17 	ldw	r2,-20(fp)
    1b78:	10800817 	ldw	r2,32(r2)
    1b7c:	10000826 	beq	r2,zero,1ba0 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    1b80:	e0bffb17 	ldw	r2,-20(fp)
    1b84:	10800817 	ldw	r2,32(r2)
    1b88:	e13ffb17 	ldw	r4,-20(fp)
    1b8c:	100b883a 	mov	r5,r2
    1b90:	0001ec40 	call	1ec4 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    1b94:	e0bffb17 	ldw	r2,-20(fp)
    1b98:	e0fffc17 	ldw	r3,-16(fp)
    1b9c:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
    1ba0:	e0bffa83 	ldbu	r2,-22(fp)
}
    1ba4:	e037883a 	mov	sp,fp
    1ba8:	dfc00117 	ldw	ra,4(sp)
    1bac:	df000017 	ldw	fp,0(sp)
    1bb0:	dec00204 	addi	sp,sp,8
    1bb4:	f800283a 	ret

00001bb8 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    1bb8:	defffd04 	addi	sp,sp,-12
    1bbc:	df000215 	stw	fp,8(sp)
    1bc0:	df000204 	addi	fp,sp,8
    1bc4:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    1bc8:	d0a7e217 	ldw	r2,-24696(gp)
    1bcc:	e0ffff17 	ldw	r3,-4(fp)
    1bd0:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    1bd4:	d0a7e217 	ldw	r2,-24696(gp)
    1bd8:	10800d03 	ldbu	r2,52(r2)
    1bdc:	10803fcc 	andi	r2,r2,255
    1be0:	d0e7e217 	ldw	r3,-24696(gp)
    1be4:	18c00d03 	ldbu	r3,52(r3)
    1be8:	18c03fcc 	andi	r3,r3,255
    1bec:	e13fff17 	ldw	r4,-4(fp)
    1bf0:	20c7883a 	add	r3,r4,r3
    1bf4:	18c00204 	addi	r3,r3,8
    1bf8:	190000c3 	ldbu	r4,3(r3)
    1bfc:	d0e7e217 	ldw	r3,-24696(gp)
    1c00:	18c00d43 	ldbu	r3,53(r3)
    1c04:	20c6b03a 	or	r3,r4,r3
    1c08:	1809883a 	mov	r4,r3
    1c0c:	e0ffff17 	ldw	r3,-4(fp)
    1c10:	1885883a 	add	r2,r3,r2
    1c14:	10800204 	addi	r2,r2,8
    1c18:	110000c5 	stb	r4,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    1c1c:	e0bfff17 	ldw	r2,-4(fp)
    1c20:	10c00283 	ldbu	r3,10(r2)
    1c24:	d0a7e217 	ldw	r2,-24696(gp)
    1c28:	10800d83 	ldbu	r2,54(r2)
    1c2c:	1884b03a 	or	r2,r3,r2
    1c30:	1007883a 	mov	r3,r2
    1c34:	e0bfff17 	ldw	r2,-4(fp)
    1c38:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    1c3c:	d0a7e217 	ldw	r2,-24696(gp)
    1c40:	10800d03 	ldbu	r2,52(r2)
    1c44:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    1c48:	e0fffe03 	ldbu	r3,-8(fp)
    1c4c:	e13ffe03 	ldbu	r4,-8(fp)
    1c50:	d0a7df44 	addi	r2,gp,-24707
    1c54:	2085883a 	add	r2,r4,r2
    1c58:	10800003 	ldbu	r2,0(r2)
    1c5c:	1009883a 	mov	r4,r2
    1c60:	d0a7e217 	ldw	r2,-24696(gp)
    1c64:	10800d43 	ldbu	r2,53(r2)
    1c68:	0084303a 	nor	r2,zero,r2
    1c6c:	2084703a 	and	r2,r4,r2
    1c70:	1009883a 	mov	r4,r2
    1c74:	d0a7df44 	addi	r2,gp,-24707
    1c78:	1885883a 	add	r2,r3,r2
    1c7c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    1c80:	e0fffe03 	ldbu	r3,-8(fp)
    1c84:	d0a7df44 	addi	r2,gp,-24707
    1c88:	1885883a 	add	r2,r3,r2
    1c8c:	10800003 	ldbu	r2,0(r2)
    1c90:	10803fcc 	andi	r2,r2,255
    1c94:	1000071e 	bne	r2,zero,1cb4 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    1c98:	d0a7e217 	ldw	r2,-24696(gp)
    1c9c:	10800d83 	ldbu	r2,54(r2)
    1ca0:	0084303a 	nor	r2,zero,r2
    1ca4:	1007883a 	mov	r3,r2
    1ca8:	d0a7df03 	ldbu	r2,-24708(gp)
    1cac:	1884703a 	and	r2,r3,r2
    1cb0:	d0a7df05 	stb	r2,-24708(gp)
    }
}
    1cb4:	e037883a 	mov	sp,fp
    1cb8:	df000017 	ldw	fp,0(sp)
    1cbc:	dec00104 	addi	sp,sp,4
    1cc0:	f800283a 	ret

00001cc4 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    1cc4:	defffb04 	addi	sp,sp,-20
    1cc8:	df000415 	stw	fp,16(sp)
    1ccc:	df000404 	addi	fp,sp,16
    1cd0:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    1cd4:	d0a7e217 	ldw	r2,-24696(gp)
    1cd8:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    1cdc:	d0a7e217 	ldw	r2,-24696(gp)
    1ce0:	e0ffff17 	ldw	r3,-4(fp)
    1ce4:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
    1ce8:	e0bfff17 	ldw	r2,-4(fp)
    1cec:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
    1cf0:	e0bffc17 	ldw	r2,-16(fp)
    1cf4:	10800017 	ldw	r2,0(r2)
    1cf8:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    1cfc:	00002006 	br	1d80 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    1d00:	d0a7e217 	ldw	r2,-24696(gp)
    1d04:	10800d03 	ldbu	r2,52(r2)
    1d08:	10803fcc 	andi	r2,r2,255
    1d0c:	d0e7e217 	ldw	r3,-24696(gp)
    1d10:	18c00d03 	ldbu	r3,52(r3)
    1d14:	18c03fcc 	andi	r3,r3,255
    1d18:	e13ffd17 	ldw	r4,-12(fp)
    1d1c:	20c7883a 	add	r3,r4,r3
    1d20:	18c00204 	addi	r3,r3,8
    1d24:	190000c3 	ldbu	r4,3(r3)
    1d28:	d0e7e217 	ldw	r3,-24696(gp)
    1d2c:	18c00d43 	ldbu	r3,53(r3)
    1d30:	20c6b03a 	or	r3,r4,r3
    1d34:	1809883a 	mov	r4,r3
    1d38:	e0fffd17 	ldw	r3,-12(fp)
    1d3c:	1885883a 	add	r2,r3,r2
    1d40:	10800204 	addi	r2,r2,8
    1d44:	110000c5 	stb	r4,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    1d48:	e0bffd17 	ldw	r2,-12(fp)
    1d4c:	10c00283 	ldbu	r3,10(r2)
    1d50:	d0a7e217 	ldw	r2,-24696(gp)
    1d54:	10800d83 	ldbu	r2,54(r2)
    1d58:	1884b03a 	or	r2,r3,r2
    1d5c:	1007883a 	mov	r3,r2
    1d60:	e0bffd17 	ldw	r2,-12(fp)
    1d64:	10c00285 	stb	r3,10(r2)
        pevents++;
    1d68:	e0bffc17 	ldw	r2,-16(fp)
    1d6c:	10800104 	addi	r2,r2,4
    1d70:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
    1d74:	e0bffc17 	ldw	r2,-16(fp)
    1d78:	10800017 	ldw	r2,0(r2)
    1d7c:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    1d80:	e0bffd17 	ldw	r2,-12(fp)
    1d84:	103fde1e 	bne	r2,zero,1d00 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    1d88:	d0a7e217 	ldw	r2,-24696(gp)
    1d8c:	10800d03 	ldbu	r2,52(r2)
    1d90:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    1d94:	e0fffe03 	ldbu	r3,-8(fp)
    1d98:	e13ffe03 	ldbu	r4,-8(fp)
    1d9c:	d0a7df44 	addi	r2,gp,-24707
    1da0:	2085883a 	add	r2,r4,r2
    1da4:	10800003 	ldbu	r2,0(r2)
    1da8:	1009883a 	mov	r4,r2
    1dac:	d0a7e217 	ldw	r2,-24696(gp)
    1db0:	10800d43 	ldbu	r2,53(r2)
    1db4:	0084303a 	nor	r2,zero,r2
    1db8:	2084703a 	and	r2,r4,r2
    1dbc:	1009883a 	mov	r4,r2
    1dc0:	d0a7df44 	addi	r2,gp,-24707
    1dc4:	1885883a 	add	r2,r3,r2
    1dc8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    1dcc:	e0fffe03 	ldbu	r3,-8(fp)
    1dd0:	d0a7df44 	addi	r2,gp,-24707
    1dd4:	1885883a 	add	r2,r3,r2
    1dd8:	10800003 	ldbu	r2,0(r2)
    1ddc:	10803fcc 	andi	r2,r2,255
    1de0:	1000071e 	bne	r2,zero,1e00 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    1de4:	d0a7e217 	ldw	r2,-24696(gp)
    1de8:	10800d83 	ldbu	r2,54(r2)
    1dec:	0084303a 	nor	r2,zero,r2
    1df0:	1007883a 	mov	r3,r2
    1df4:	d0a7df03 	ldbu	r2,-24708(gp)
    1df8:	1884703a 	and	r2,r3,r2
    1dfc:	d0a7df05 	stb	r2,-24708(gp)
    }
}
    1e00:	e037883a 	mov	sp,fp
    1e04:	df000017 	ldw	fp,0(sp)
    1e08:	dec00104 	addi	sp,sp,4
    1e0c:	f800283a 	ret

00001e10 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    1e10:	defffc04 	addi	sp,sp,-16
    1e14:	df000315 	stw	fp,12(sp)
    1e18:	df000304 	addi	fp,sp,12
    1e1c:	e13ffe15 	stw	r4,-8(fp)
    1e20:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    1e24:	e0bffe17 	ldw	r2,-8(fp)
    1e28:	10800d03 	ldbu	r2,52(r2)
    1e2c:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    1e30:	e0bffd03 	ldbu	r2,-12(fp)
    1e34:	e0fffd03 	ldbu	r3,-12(fp)
    1e38:	e13fff17 	ldw	r4,-4(fp)
    1e3c:	20c7883a 	add	r3,r4,r3
    1e40:	18c00204 	addi	r3,r3,8
    1e44:	18c000c3 	ldbu	r3,3(r3)
    1e48:	1809883a 	mov	r4,r3
    1e4c:	e0fffe17 	ldw	r3,-8(fp)
    1e50:	18c00d43 	ldbu	r3,53(r3)
    1e54:	00c6303a 	nor	r3,zero,r3
    1e58:	20c6703a 	and	r3,r4,r3
    1e5c:	1809883a 	mov	r4,r3
    1e60:	e0ffff17 	ldw	r3,-4(fp)
    1e64:	1885883a 	add	r2,r3,r2
    1e68:	10800204 	addi	r2,r2,8
    1e6c:	110000c5 	stb	r4,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
    1e70:	e0bffd03 	ldbu	r2,-12(fp)
    1e74:	e0ffff17 	ldw	r3,-4(fp)
    1e78:	1885883a 	add	r2,r3,r2
    1e7c:	10800204 	addi	r2,r2,8
    1e80:	108000c3 	ldbu	r2,3(r2)
    1e84:	10803fcc 	andi	r2,r2,255
    1e88:	10000a1e 	bne	r2,zero,1eb4 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    1e8c:	e0bfff17 	ldw	r2,-4(fp)
    1e90:	10800283 	ldbu	r2,10(r2)
    1e94:	1007883a 	mov	r3,r2
    1e98:	e0bffe17 	ldw	r2,-8(fp)
    1e9c:	10800d83 	ldbu	r2,54(r2)
    1ea0:	0084303a 	nor	r2,zero,r2
    1ea4:	1884703a 	and	r2,r3,r2
    1ea8:	1007883a 	mov	r3,r2
    1eac:	e0bfff17 	ldw	r2,-4(fp)
    1eb0:	10c00285 	stb	r3,10(r2)
    }
}
    1eb4:	e037883a 	mov	sp,fp
    1eb8:	df000017 	ldw	fp,0(sp)
    1ebc:	dec00104 	addi	sp,sp,4
    1ec0:	f800283a 	ret

00001ec4 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    1ec4:	defffa04 	addi	sp,sp,-24
    1ec8:	df000515 	stw	fp,20(sp)
    1ecc:	df000504 	addi	fp,sp,20
    1ed0:	e13ffe15 	stw	r4,-8(fp)
    1ed4:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    1ed8:	e0bffe17 	ldw	r2,-8(fp)
    1edc:	10800d03 	ldbu	r2,52(r2)
    1ee0:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
    1ee4:	e0bffe17 	ldw	r2,-8(fp)
    1ee8:	10800d83 	ldbu	r2,54(r2)
    1eec:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
    1ef0:	e0bffe17 	ldw	r2,-8(fp)
    1ef4:	10800d43 	ldbu	r2,53(r2)
    1ef8:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
    1efc:	e0bfff17 	ldw	r2,-4(fp)
    1f00:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
    1f04:	e0bffb17 	ldw	r2,-20(fp)
    1f08:	10800017 	ldw	r2,0(r2)
    1f0c:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    1f10:	00002506 	br	1fa8 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
    1f14:	e0bffd03 	ldbu	r2,-12(fp)
    1f18:	e0fffd03 	ldbu	r3,-12(fp)
    1f1c:	e13ffc17 	ldw	r4,-16(fp)
    1f20:	20c7883a 	add	r3,r4,r3
    1f24:	18c00204 	addi	r3,r3,8
    1f28:	18c000c3 	ldbu	r3,3(r3)
    1f2c:	1809883a 	mov	r4,r3
    1f30:	e0fffd83 	ldbu	r3,-10(fp)
    1f34:	00c6303a 	nor	r3,zero,r3
    1f38:	20c6703a 	and	r3,r4,r3
    1f3c:	1809883a 	mov	r4,r3
    1f40:	e0fffc17 	ldw	r3,-16(fp)
    1f44:	1885883a 	add	r2,r3,r2
    1f48:	10800204 	addi	r2,r2,8
    1f4c:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
    1f50:	e0bffd03 	ldbu	r2,-12(fp)
    1f54:	e0fffc17 	ldw	r3,-16(fp)
    1f58:	1885883a 	add	r2,r3,r2
    1f5c:	10800204 	addi	r2,r2,8
    1f60:	108000c3 	ldbu	r2,3(r2)
    1f64:	10803fcc 	andi	r2,r2,255
    1f68:	1000091e 	bne	r2,zero,1f90 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
    1f6c:	e0bffc17 	ldw	r2,-16(fp)
    1f70:	10800283 	ldbu	r2,10(r2)
    1f74:	1007883a 	mov	r3,r2
    1f78:	e0bffd43 	ldbu	r2,-11(fp)
    1f7c:	0084303a 	nor	r2,zero,r2
    1f80:	1884703a 	and	r2,r3,r2
    1f84:	1007883a 	mov	r3,r2
    1f88:	e0bffc17 	ldw	r2,-16(fp)
    1f8c:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
    1f90:	e0bffb17 	ldw	r2,-20(fp)
    1f94:	10800104 	addi	r2,r2,4
    1f98:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
    1f9c:	e0bffb17 	ldw	r2,-20(fp)
    1fa0:	10800017 	ldw	r2,0(r2)
    1fa4:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    1fa8:	e0bffc17 	ldw	r2,-16(fp)
    1fac:	103fd91e 	bne	r2,zero,1f14 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
    1fb0:	e037883a 	mov	sp,fp
    1fb4:	df000017 	ldw	fp,0(sp)
    1fb8:	dec00104 	addi	sp,sp,4
    1fbc:	f800283a 	ret

00001fc0 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    1fc0:	defffc04 	addi	sp,sp,-16
    1fc4:	df000315 	stw	fp,12(sp)
    1fc8:	df000304 	addi	fp,sp,12
    1fcc:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    1fd0:	e0bfff17 	ldw	r2,-4(fp)
    1fd4:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
    1fd8:	e0bfff17 	ldw	r2,-4(fp)
    1fdc:	108002c4 	addi	r2,r2,11
    1fe0:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    1fe4:	e03ffe05 	stb	zero,-8(fp)
    1fe8:	00000706 	br	2008 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
    1fec:	e0bffd17 	ldw	r2,-12(fp)
    1ff0:	10c00044 	addi	r3,r2,1
    1ff4:	e0fffd15 	stw	r3,-12(fp)
    1ff8:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    1ffc:	e0bffe03 	ldbu	r2,-8(fp)
    2000:	10800044 	addi	r2,r2,1
    2004:	e0bffe05 	stb	r2,-8(fp)
    2008:	e0bffe03 	ldbu	r2,-8(fp)
    200c:	108000f0 	cmpltui	r2,r2,3
    2010:	103ff61e 	bne	r2,zero,1fec <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
    2014:	e037883a 	mov	sp,fp
    2018:	df000017 	ldw	fp,0(sp)
    201c:	dec00104 	addi	sp,sp,4
    2020:	f800283a 	ret

00002024 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    2024:	defffb04 	addi	sp,sp,-20
    2028:	dfc00415 	stw	ra,16(sp)
    202c:	df000315 	stw	fp,12(sp)
    2030:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    2034:	01000174 	movhi	r4,5
    2038:	211fe204 	addi	r4,r4,32648
    203c:	0142d004 	movi	r5,2880
    2040:	00023840 	call	2384 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    2044:	00800174 	movhi	r2,5
    2048:	109fe204 	addi	r2,r2,32648
    204c:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
    2050:	00800174 	movhi	r2,5
    2054:	109fee04 	addi	r2,r2,32696
    2058:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    205c:	e03ffd0d 	sth	zero,-12(fp)
    2060:	00001306 	br	20b0 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    2064:	e0bffe17 	ldw	r2,-8(fp)
    2068:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
    206c:	e0bffe17 	ldw	r2,-8(fp)
    2070:	e0ffff17 	ldw	r3,-4(fp)
    2074:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    2078:	e0bffe17 	ldw	r2,-8(fp)
    207c:	00c00fc4 	movi	r3,63
    2080:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    2084:	e0bffe17 	ldw	r2,-8(fp)
    2088:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
    208c:	e0bffe17 	ldw	r2,-8(fp)
    2090:	10800c04 	addi	r2,r2,48
    2094:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
    2098:	e0bfff17 	ldw	r2,-4(fp)
    209c:	10800c04 	addi	r2,r2,48
    20a0:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    20a4:	e0bffd0b 	ldhu	r2,-12(fp)
    20a8:	10800044 	addi	r2,r2,1
    20ac:	e0bffd0d 	sth	r2,-12(fp)
    20b0:	e0bffd0b 	ldhu	r2,-12(fp)
    20b4:	10800ef0 	cmpltui	r2,r2,59
    20b8:	103fea1e 	bne	r2,zero,2064 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    20bc:	e0bffe17 	ldw	r2,-8(fp)
    20c0:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    20c4:	e0bffe17 	ldw	r2,-8(fp)
    20c8:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    20cc:	e0bffe17 	ldw	r2,-8(fp)
    20d0:	00c00fc4 	movi	r3,63
    20d4:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    20d8:	e0bffe17 	ldw	r2,-8(fp)
    20dc:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    20e0:	00800174 	movhi	r2,5
    20e4:	109fe204 	addi	r2,r2,32648
    20e8:	d0a7e015 	stw	r2,-24704(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    20ec:	e037883a 	mov	sp,fp
    20f0:	dfc00117 	ldw	ra,4(sp)
    20f4:	df000017 	ldw	fp,0(sp)
    20f8:	dec00204 	addi	sp,sp,8
    20fc:	f800283a 	ret

00002100 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    2100:	deffff04 	addi	sp,sp,-4
    2104:	df000015 	stw	fp,0(sp)
    2108:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    210c:	d027e315 	stw	zero,-24692(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    2110:	d027e105 	stb	zero,-24700(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    2114:	d027d305 	stb	zero,-24756(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    2118:	d027db45 	stb	zero,-24723(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    211c:	d027d345 	stb	zero,-24755(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    2120:	d027d815 	stw	zero,-24736(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    2124:	d027d415 	stw	zero,-24752(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    2128:	d027e615 	stw	zero,-24680(gp)
    OSIdleCtrMax  = 0L;
    212c:	d027d915 	stw	zero,-24732(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    2130:	d027e505 	stb	zero,-24684(gp)
#endif
}
    2134:	e037883a 	mov	sp,fp
    2138:	df000017 	ldw	fp,0(sp)
    213c:	dec00104 	addi	sp,sp,4
    2140:	f800283a 	ret

00002144 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    2144:	defffd04 	addi	sp,sp,-12
    2148:	df000215 	stw	fp,8(sp)
    214c:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    2150:	d027df05 	stb	zero,-24708(gp)
    prdytbl       = &OSRdyTbl[0];
    2154:	d0a7df44 	addi	r2,gp,-24707
    2158:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    215c:	e03ffe05 	stb	zero,-8(fp)
    2160:	00000706 	br	2180 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
    2164:	e0bfff17 	ldw	r2,-4(fp)
    2168:	10c00044 	addi	r3,r2,1
    216c:	e0ffff15 	stw	r3,-4(fp)
    2170:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    2174:	e0bffe03 	ldbu	r2,-8(fp)
    2178:	10800044 	addi	r2,r2,1
    217c:	e0bffe05 	stb	r2,-8(fp)
    2180:	e0bffe03 	ldbu	r2,-8(fp)
    2184:	108000f0 	cmpltui	r2,r2,3
    2188:	103ff61e 	bne	r2,zero,2164 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    218c:	d027d545 	stb	zero,-24747(gp)
    OSPrioHighRdy = 0;
    2190:	d027d505 	stb	zero,-24748(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
    2194:	d027dd15 	stw	zero,-24716(gp)
    OSTCBCur      = (OS_TCB *)0;
    2198:	d027e215 	stw	zero,-24696(gp)
}
    219c:	e037883a 	mov	sp,fp
    21a0:	df000017 	ldw	fp,0(sp)
    21a4:	dec00104 	addi	sp,sp,4
    21a8:	f800283a 	ret

000021ac <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    21ac:	defff804 	addi	sp,sp,-32
    21b0:	dfc00715 	stw	ra,28(sp)
    21b4:	df000615 	stw	fp,24(sp)
    21b8:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    21bc:	00bfffd4 	movui	r2,65535
    21c0:	d8800015 	stw	r2,0(sp)
    21c4:	00800174 	movhi	r2,5
    21c8:	109de204 	addi	r2,r2,30600
    21cc:	d8800115 	stw	r2,4(sp)
    21d0:	00808004 	movi	r2,512
    21d4:	d8800215 	stw	r2,8(sp)
    21d8:	d8000315 	stw	zero,12(sp)
    21dc:	008000c4 	movi	r2,3
    21e0:	d8800415 	stw	r2,16(sp)
    21e4:	01000034 	movhi	r4,0
    21e8:	21098f04 	addi	r4,r4,9788
    21ec:	000b883a 	mov	r5,zero
    21f0:	01800174 	movhi	r6,5
    21f4:	319fe104 	addi	r6,r6,32644
    21f8:	01c00504 	movi	r7,20
    21fc:	00070500 	call	7050 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    2200:	01000504 	movi	r4,20
    2204:	01400074 	movhi	r5,1
    2208:	297f9f04 	addi	r5,r5,-388
    220c:	e1bfff04 	addi	r6,fp,-4
    2210:	000791c0 	call	791c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    2214:	e037883a 	mov	sp,fp
    2218:	dfc00117 	ldw	ra,4(sp)
    221c:	df000017 	ldw	fp,0(sp)
    2220:	dec00204 	addi	sp,sp,8
    2224:	f800283a 	ret

00002228 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
    2228:	defff804 	addi	sp,sp,-32
    222c:	dfc00715 	stw	ra,28(sp)
    2230:	df000615 	stw	fp,24(sp)
    2234:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    2238:	00bfff94 	movui	r2,65534
    223c:	d8800015 	stw	r2,0(sp)
    2240:	00800174 	movhi	r2,5
    2244:	109b6a04 	addi	r2,r2,28072
    2248:	d8800115 	stw	r2,4(sp)
    224c:	00808004 	movi	r2,512
    2250:	d8800215 	stw	r2,8(sp)
    2254:	d8000315 	stw	zero,12(sp)
    2258:	008000c4 	movi	r2,3
    225c:	d8800415 	stw	r2,16(sp)
    2260:	01000034 	movhi	r4,0
    2264:	2109a604 	addi	r4,r4,9880
    2268:	000b883a 	mov	r5,zero
    226c:	01800174 	movhi	r6,5
    2270:	319d6904 	addi	r6,r6,30116
    2274:	01c004c4 	movi	r7,19
    2278:	00070500 	call	7050 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    227c:	010004c4 	movi	r4,19
    2280:	01400074 	movhi	r5,1
    2284:	297fa304 	addi	r5,r5,-372
    2288:	e1bfff04 	addi	r6,fp,-4
    228c:	000791c0 	call	791c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
    2290:	e037883a 	mov	sp,fp
    2294:	dfc00117 	ldw	ra,4(sp)
    2298:	df000017 	ldw	fp,0(sp)
    229c:	dec00204 	addi	sp,sp,8
    22a0:	f800283a 	ret

000022a4 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    22a4:	defffb04 	addi	sp,sp,-20
    22a8:	dfc00415 	stw	ra,16(sp)
    22ac:	df000315 	stw	fp,12(sp)
    22b0:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    22b4:	010001b4 	movhi	r4,6
    22b8:	2122b204 	addi	r4,r4,-30008
    22bc:	01414404 	movi	r5,1296
    22c0:	00023840 	call	2384 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    22c4:	010001b4 	movhi	r4,6
    22c8:	2123f604 	addi	r4,r4,-28712
    22cc:	01401504 	movi	r5,84
    22d0:	00023840 	call	2384 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    22d4:	008001b4 	movhi	r2,6
    22d8:	10a2b204 	addi	r2,r2,-30008
    22dc:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
    22e0:	008001b4 	movhi	r2,6
    22e4:	10a2cd04 	addi	r2,r2,-29900
    22e8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    22ec:	e03ffd05 	stb	zero,-12(fp)
    22f0:	00001106 	br	2338 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
    22f4:	e0bffe17 	ldw	r2,-8(fp)
    22f8:	e0ffff17 	ldw	r3,-4(fp)
    22fc:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    2300:	e0bffe17 	ldw	r2,-8(fp)
    2304:	00c00fc4 	movi	r3,63
    2308:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    230c:	e0bffe17 	ldw	r2,-8(fp)
    2310:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
    2314:	e0bffe17 	ldw	r2,-8(fp)
    2318:	10801b04 	addi	r2,r2,108
    231c:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
    2320:	e0bfff17 	ldw	r2,-4(fp)
    2324:	10801b04 	addi	r2,r2,108
    2328:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    232c:	e0bffd03 	ldbu	r2,-12(fp)
    2330:	10800044 	addi	r2,r2,1
    2334:	e0bffd05 	stb	r2,-12(fp)
    2338:	e0bffd03 	ldbu	r2,-12(fp)
    233c:	108002f0 	cmpltui	r2,r2,11
    2340:	103fec1e 	bne	r2,zero,22f4 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    2344:	e0bffe17 	ldw	r2,-8(fp)
    2348:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    234c:	e0bffe17 	ldw	r2,-8(fp)
    2350:	00c00fc4 	movi	r3,63
    2354:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    2358:	e0bffe17 	ldw	r2,-8(fp)
    235c:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    2360:	d027d615 	stw	zero,-24744(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
    2364:	008001b4 	movhi	r2,6
    2368:	10a2b204 	addi	r2,r2,-30008
    236c:	d0a7da15 	stw	r2,-24728(gp)
}
    2370:	e037883a 	mov	sp,fp
    2374:	dfc00117 	ldw	ra,4(sp)
    2378:	df000017 	ldw	fp,0(sp)
    237c:	dec00204 	addi	sp,sp,8
    2380:	f800283a 	ret

00002384 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    2384:	defffd04 	addi	sp,sp,-12
    2388:	df000215 	stw	fp,8(sp)
    238c:	df000204 	addi	fp,sp,8
    2390:	e13ffe15 	stw	r4,-8(fp)
    2394:	2805883a 	mov	r2,r5
    2398:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    239c:	00000706 	br	23bc <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
    23a0:	e0bffe17 	ldw	r2,-8(fp)
    23a4:	10c00044 	addi	r3,r2,1
    23a8:	e0fffe15 	stw	r3,-8(fp)
    23ac:	10000005 	stb	zero,0(r2)
        size--;
    23b0:	e0bfff0b 	ldhu	r2,-4(fp)
    23b4:	10bfffc4 	addi	r2,r2,-1
    23b8:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    23bc:	e0bfff0b 	ldhu	r2,-4(fp)
    23c0:	103ff71e 	bne	r2,zero,23a0 <OS_MemClr+0x1c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
    23c4:	e037883a 	mov	sp,fp
    23c8:	df000017 	ldw	fp,0(sp)
    23cc:	dec00104 	addi	sp,sp,4
    23d0:	f800283a 	ret

000023d4 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    23d4:	defffc04 	addi	sp,sp,-16
    23d8:	df000315 	stw	fp,12(sp)
    23dc:	df000304 	addi	fp,sp,12
    23e0:	e13ffd15 	stw	r4,-12(fp)
    23e4:	e17ffe15 	stw	r5,-8(fp)
    23e8:	3005883a 	mov	r2,r6
    23ec:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    23f0:	00000b06 	br	2420 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
    23f4:	e0bffd17 	ldw	r2,-12(fp)
    23f8:	10c00044 	addi	r3,r2,1
    23fc:	e0fffd15 	stw	r3,-12(fp)
    2400:	e0fffe17 	ldw	r3,-8(fp)
    2404:	19000044 	addi	r4,r3,1
    2408:	e13ffe15 	stw	r4,-8(fp)
    240c:	18c00003 	ldbu	r3,0(r3)
    2410:	10c00005 	stb	r3,0(r2)
        size--;
    2414:	e0bfff0b 	ldhu	r2,-4(fp)
    2418:	10bfffc4 	addi	r2,r2,-1
    241c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
    2420:	e0bfff0b 	ldhu	r2,-4(fp)
    2424:	103ff31e 	bne	r2,zero,23f4 <OS_MemCopy+0x20>
        *pdest++ = *psrc++;
        size--;
    }
}
    2428:	e037883a 	mov	sp,fp
    242c:	df000017 	ldw	fp,0(sp)
    2430:	dec00104 	addi	sp,sp,4
    2434:	f800283a 	ret

00002438 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    2438:	defffb04 	addi	sp,sp,-20
    243c:	dfc00415 	stw	ra,16(sp)
    2440:	df000315 	stw	fp,12(sp)
    2444:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    2448:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    244c:	0005303a 	rdctl	r2,status
    2450:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2454:	e0fffe17 	ldw	r3,-8(fp)
    2458:	00bfff84 	movi	r2,-2
    245c:	1884703a 	and	r2,r3,r2
    2460:	1001703a 	wrctl	status,r2
  
  return context;
    2464:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    2468:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    246c:	d0a7e103 	ldbu	r2,-24700(gp)
    2470:	10803fcc 	andi	r2,r2,255
    2474:	10001a1e 	bne	r2,zero,24e0 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    2478:	d0a7d303 	ldbu	r2,-24756(gp)
    247c:	10803fcc 	andi	r2,r2,255
    2480:	1000171e 	bne	r2,zero,24e0 <OS_Sched+0xa8>
            OS_SchedNew();
    2484:	00025040 	call	2504 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    2488:	d0e7d503 	ldbu	r3,-24748(gp)
    248c:	d0a7d543 	ldbu	r2,-24747(gp)
    2490:	18c03fcc 	andi	r3,r3,255
    2494:	10803fcc 	andi	r2,r2,255
    2498:	18801126 	beq	r3,r2,24e0 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    249c:	d0a7d503 	ldbu	r2,-24748(gp)
    24a0:	10c03fcc 	andi	r3,r2,255
    24a4:	008001b4 	movhi	r2,6
    24a8:	10a3f604 	addi	r2,r2,-28712
    24ac:	18c7883a 	add	r3,r3,r3
    24b0:	18c7883a 	add	r3,r3,r3
    24b4:	10c5883a 	add	r2,r2,r3
    24b8:	10800017 	ldw	r2,0(r2)
    24bc:	d0a7dd15 	stw	r2,-24716(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    24c0:	d0a7dd17 	ldw	r2,-24716(gp)
    24c4:	10c00e17 	ldw	r3,56(r2)
    24c8:	18c00044 	addi	r3,r3,1
    24cc:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    24d0:	d0a7d817 	ldw	r2,-24736(gp)
    24d4:	10800044 	addi	r2,r2,1
    24d8:	d0a7d815 	stw	r2,-24736(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
    24dc:	000caf40 	call	caf4 <OSCtxSw>
    24e0:	e0bffd17 	ldw	r2,-12(fp)
    24e4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    24e8:	e0bfff17 	ldw	r2,-4(fp)
    24ec:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
    24f0:	e037883a 	mov	sp,fp
    24f4:	dfc00117 	ldw	ra,4(sp)
    24f8:	df000017 	ldw	fp,0(sp)
    24fc:	dec00204 	addi	sp,sp,8
    2500:	f800283a 	ret

00002504 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    2504:	defffe04 	addi	sp,sp,-8
    2508:	df000115 	stw	fp,4(sp)
    250c:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    2510:	d0a7df03 	ldbu	r2,-24708(gp)
    2514:	10c03fcc 	andi	r3,r2,255
    2518:	00800074 	movhi	r2,1
    251c:	10bf5f04 	addi	r2,r2,-644
    2520:	10c5883a 	add	r2,r2,r3
    2524:	10800003 	ldbu	r2,0(r2)
    2528:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    252c:	e0bfff03 	ldbu	r2,-4(fp)
    2530:	100490fa 	slli	r2,r2,3
    2534:	1009883a 	mov	r4,r2
    2538:	e0ffff03 	ldbu	r3,-4(fp)
    253c:	d0a7df44 	addi	r2,gp,-24707
    2540:	1885883a 	add	r2,r3,r2
    2544:	10800003 	ldbu	r2,0(r2)
    2548:	10c03fcc 	andi	r3,r2,255
    254c:	00800074 	movhi	r2,1
    2550:	10bf5f04 	addi	r2,r2,-644
    2554:	10c5883a 	add	r2,r2,r3
    2558:	10800003 	ldbu	r2,0(r2)
    255c:	2085883a 	add	r2,r4,r2
    2560:	d0a7d505 	stb	r2,-24748(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    2564:	e037883a 	mov	sp,fp
    2568:	df000017 	ldw	fp,0(sp)
    256c:	dec00104 	addi	sp,sp,4
    2570:	f800283a 	ret

00002574 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    2574:	defffc04 	addi	sp,sp,-16
    2578:	df000315 	stw	fp,12(sp)
    257c:	df000304 	addi	fp,sp,12
    2580:	e13ffe15 	stw	r4,-8(fp)
    2584:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
    2588:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
    258c:	00000b06 	br	25bc <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
    2590:	e0bffe17 	ldw	r2,-8(fp)
    2594:	10c00044 	addi	r3,r2,1
    2598:	e0fffe15 	stw	r3,-8(fp)
    259c:	e0ffff17 	ldw	r3,-4(fp)
    25a0:	19000044 	addi	r4,r3,1
    25a4:	e13fff15 	stw	r4,-4(fp)
    25a8:	18c00003 	ldbu	r3,0(r3)
    25ac:	10c00005 	stb	r3,0(r2)
        len++;
    25b0:	e0bffd03 	ldbu	r2,-12(fp)
    25b4:	10800044 	addi	r2,r2,1
    25b8:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    25bc:	e0bfff17 	ldw	r2,-4(fp)
    25c0:	10800003 	ldbu	r2,0(r2)
    25c4:	10803fcc 	andi	r2,r2,255
    25c8:	103ff11e 	bne	r2,zero,2590 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
    25cc:	e0bffe17 	ldw	r2,-8(fp)
    25d0:	10000005 	stb	zero,0(r2)
    return (len);
    25d4:	e0bffd03 	ldbu	r2,-12(fp)
}
    25d8:	e037883a 	mov	sp,fp
    25dc:	df000017 	ldw	fp,0(sp)
    25e0:	dec00104 	addi	sp,sp,4
    25e4:	f800283a 	ret

000025e8 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    25e8:	defffd04 	addi	sp,sp,-12
    25ec:	df000215 	stw	fp,8(sp)
    25f0:	df000204 	addi	fp,sp,8
    25f4:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
    25f8:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
    25fc:	00000606 	br	2618 <OS_StrLen+0x30>
        psrc++;
    2600:	e0bfff17 	ldw	r2,-4(fp)
    2604:	10800044 	addi	r2,r2,1
    2608:	e0bfff15 	stw	r2,-4(fp)
        len++;
    260c:	e0bffe03 	ldbu	r2,-8(fp)
    2610:	10800044 	addi	r2,r2,1
    2614:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    2618:	e0bfff17 	ldw	r2,-4(fp)
    261c:	10800003 	ldbu	r2,0(r2)
    2620:	10803fcc 	andi	r2,r2,255
    2624:	103ff61e 	bne	r2,zero,2600 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
    2628:	e0bffe03 	ldbu	r2,-8(fp)
}
    262c:	e037883a 	mov	sp,fp
    2630:	df000017 	ldw	fp,0(sp)
    2634:	dec00104 	addi	sp,sp,4
    2638:	f800283a 	ret

0000263c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    263c:	defffa04 	addi	sp,sp,-24
    2640:	dfc00515 	stw	ra,20(sp)
    2644:	df000415 	stw	fp,16(sp)
    2648:	df000404 	addi	fp,sp,16
    264c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    2650:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2654:	0005303a 	rdctl	r2,status
    2658:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    265c:	e0fffd17 	ldw	r3,-12(fp)
    2660:	00bfff84 	movi	r2,-2
    2664:	1884703a 	and	r2,r3,r2
    2668:	1001703a 	wrctl	status,r2
  
  return context;
    266c:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    2670:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
    2674:	d0a7d417 	ldw	r2,-24752(gp)
    2678:	10800044 	addi	r2,r2,1
    267c:	d0a7d415 	stw	r2,-24752(gp)
    2680:	e0bffc17 	ldw	r2,-16(fp)
    2684:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2688:	e0bffe17 	ldw	r2,-8(fp)
    268c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    2690:	000cdec0 	call	cdec <OSTaskIdleHook>
    }
    2694:	003fef06 	br	2654 <OS_TaskIdle+0x18>

00002698 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
    2698:	defff804 	addi	sp,sp,-32
    269c:	dfc00715 	stw	ra,28(sp)
    26a0:	df000615 	stw	fp,24(sp)
    26a4:	dc400515 	stw	r17,20(sp)
    26a8:	dc000415 	stw	r16,16(sp)
    26ac:	df000604 	addi	fp,sp,24
    26b0:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    26b4:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    26b8:	00000206 	br	26c4 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    26bc:	01000044 	movi	r4,1
    26c0:	00082480 	call	8248 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    26c4:	d0a7e503 	ldbu	r2,-24684(gp)
    26c8:	10803fcc 	andi	r2,r2,255
    26cc:	103ffb26 	beq	r2,zero,26bc <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
    26d0:	d0e7d917 	ldw	r3,-24732(gp)
    26d4:	00947b34 	movhi	r2,20972
    26d8:	10a147c4 	addi	r2,r2,-31457
    26dc:	1888383a 	mulxuu	r4,r3,r2
    26e0:	1885383a 	mul	r2,r3,r2
    26e4:	1021883a 	mov	r16,r2
    26e8:	2023883a 	mov	r17,r4
    26ec:	8804d17a 	srli	r2,r17,5
    26f0:	d0a7d915 	stw	r2,-24732(gp)
    if (OSIdleCtrMax == 0L) {
    26f4:	d0a7d917 	ldw	r2,-24732(gp)
    26f8:	1000031e 	bne	r2,zero,2708 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
    26fc:	d027db05 	stb	zero,-24724(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
    2700:	01003fc4 	movi	r4,255
    2704:	0007e9c0 	call	7e9c <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2708:	0005303a 	rdctl	r2,status
    270c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2710:	e0fffb17 	ldw	r3,-20(fp)
    2714:	00bfff84 	movi	r2,-2
    2718:	1884703a 	and	r2,r3,r2
    271c:	1001703a 	wrctl	status,r2
  
  return context;
    2720:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    2724:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    2728:	d0a7d417 	ldw	r2,-24752(gp)
    272c:	d0a7e615 	stw	r2,-24680(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    2730:	d027d415 	stw	zero,-24752(gp)
    2734:	e0bffa17 	ldw	r2,-24(fp)
    2738:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    273c:	e0bffc17 	ldw	r2,-16(fp)
    2740:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
    2744:	d0e7e617 	ldw	r3,-24680(gp)
    2748:	d0a7d917 	ldw	r2,-24732(gp)
    274c:	1885203a 	divu	r2,r3,r2
    2750:	1007883a 	mov	r3,r2
    2754:	00801904 	movi	r2,100
    2758:	10c5c83a 	sub	r2,r2,r3
    275c:	d0a7db05 	stb	r2,-24724(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    2760:	000cd7c0 	call	cd7c <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
    2764:	00027740 	call	2774 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
    2768:	0009883a 	mov	r4,zero
    276c:	00082480 	call	8248 <OSTimeDly>
    }
    2770:	003fe506 	br	2708 <OS_TaskStat+0x70>

00002774 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
    2774:	defffa04 	addi	sp,sp,-24
    2778:	dfc00515 	stw	ra,20(sp)
    277c:	df000415 	stw	fp,16(sp)
    2780:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    2784:	e03ffc05 	stb	zero,-16(fp)
    2788:	00002406 	br	281c <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
    278c:	e0fffc03 	ldbu	r3,-16(fp)
    2790:	e0bffe04 	addi	r2,fp,-8
    2794:	1809883a 	mov	r4,r3
    2798:	100b883a 	mov	r5,r2
    279c:	0007cd40 	call	7cd4 <OSTaskStkChk>
    27a0:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
    27a4:	e0bffc43 	ldbu	r2,-15(fp)
    27a8:	1000191e 	bne	r2,zero,2810 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
    27ac:	e0fffc03 	ldbu	r3,-16(fp)
    27b0:	008001b4 	movhi	r2,6
    27b4:	10a3f604 	addi	r2,r2,-28712
    27b8:	18c7883a 	add	r3,r3,r3
    27bc:	18c7883a 	add	r3,r3,r3
    27c0:	10c5883a 	add	r2,r2,r3
    27c4:	10800017 	ldw	r2,0(r2)
    27c8:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
    27cc:	e0bffd17 	ldw	r2,-12(fp)
    27d0:	10000f26 	beq	r2,zero,2810 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
    27d4:	e0bffd17 	ldw	r2,-12(fp)
    27d8:	10800060 	cmpeqi	r2,r2,1
    27dc:	10000c1e 	bne	r2,zero,2810 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
    27e0:	e0bffd17 	ldw	r2,-12(fp)
    27e4:	10c00217 	ldw	r3,8(r2)
    27e8:	e0bffd17 	ldw	r2,-12(fp)
    27ec:	10800317 	ldw	r2,12(r2)
    27f0:	1085883a 	add	r2,r2,r2
    27f4:	1085883a 	add	r2,r2,r2
    27f8:	1887883a 	add	r3,r3,r2
    27fc:	e0bffd17 	ldw	r2,-12(fp)
    2800:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
    2804:	e0ffff17 	ldw	r3,-4(fp)
    2808:	e0bffd17 	ldw	r2,-12(fp)
    280c:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    2810:	e0bffc03 	ldbu	r2,-16(fp)
    2814:	10800044 	addi	r2,r2,1
    2818:	e0bffc05 	stb	r2,-16(fp)
    281c:	e0bffc03 	ldbu	r2,-16(fp)
    2820:	10800570 	cmpltui	r2,r2,21
    2824:	103fd91e 	bne	r2,zero,278c <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
    2828:	e037883a 	mov	sp,fp
    282c:	dfc00117 	ldw	ra,4(sp)
    2830:	df000017 	ldw	fp,0(sp)
    2834:	dec00204 	addi	sp,sp,8
    2838:	f800283a 	ret

0000283c <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    283c:	defff204 	addi	sp,sp,-56
    2840:	dfc00d15 	stw	ra,52(sp)
    2844:	df000c15 	stw	fp,48(sp)
    2848:	df000c04 	addi	fp,sp,48
    284c:	e17ffc15 	stw	r5,-16(fp)
    2850:	e1bffd15 	stw	r6,-12(fp)
    2854:	3807883a 	mov	r3,r7
    2858:	e0800417 	ldw	r2,16(fp)
    285c:	e13ffb05 	stb	r4,-20(fp)
    2860:	e0fffe0d 	sth	r3,-8(fp)
    2864:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    2868:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    286c:	0005303a 	rdctl	r2,status
    2870:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2874:	e0fff617 	ldw	r3,-40(fp)
    2878:	00bfff84 	movi	r2,-2
    287c:	1884703a 	and	r2,r3,r2
    2880:	1001703a 	wrctl	status,r2
  
  return context;
    2884:	e0bff617 	ldw	r2,-40(fp)
#endif



    OS_ENTER_CRITICAL();
    2888:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    288c:	d0a7da17 	ldw	r2,-24728(gp)
    2890:	e0bff515 	stw	r2,-44(fp)
    if (ptcb != (OS_TCB *)0) {
    2894:	e0bff517 	ldw	r2,-44(fp)
    2898:	10009326 	beq	r2,zero,2ae8 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    289c:	e0bff517 	ldw	r2,-44(fp)
    28a0:	10800517 	ldw	r2,20(r2)
    28a4:	d0a7da15 	stw	r2,-24728(gp)
    28a8:	e0bff417 	ldw	r2,-48(fp)
    28ac:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    28b0:	e0bff717 	ldw	r2,-36(fp)
    28b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    28b8:	e0bff517 	ldw	r2,-44(fp)
    28bc:	e0fffc17 	ldw	r3,-16(fp)
    28c0:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    28c4:	e0bff517 	ldw	r2,-44(fp)
    28c8:	e0fffb03 	ldbu	r3,-20(fp)
    28cc:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    28d0:	e0bff517 	ldw	r2,-44(fp)
    28d4:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    28d8:	e0bff517 	ldw	r2,-44(fp)
    28dc:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
    28e0:	e0bff517 	ldw	r2,-44(fp)
    28e4:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    28e8:	e0bff517 	ldw	r2,-44(fp)
    28ec:	e0c00317 	ldw	r3,12(fp)
    28f0:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    28f4:	e0bff517 	ldw	r2,-44(fp)
    28f8:	e0c00217 	ldw	r3,8(fp)
    28fc:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
    2900:	e0bff517 	ldw	r2,-44(fp)
    2904:	e0fffd17 	ldw	r3,-12(fp)
    2908:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
    290c:	e0bff517 	ldw	r2,-44(fp)
    2910:	e0ffff0b 	ldhu	r3,-4(fp)
    2914:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
    2918:	e0bff517 	ldw	r2,-44(fp)
    291c:	e0fffe0b 	ldhu	r3,-8(fp)
    2920:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
    2924:	e0bff517 	ldw	r2,-44(fp)
    2928:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
    292c:	e0bffb03 	ldbu	r2,-20(fp)
    2930:	1004d0fa 	srli	r2,r2,3
    2934:	1007883a 	mov	r3,r2
    2938:	e0bff517 	ldw	r2,-44(fp)
    293c:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
    2940:	e0bffb03 	ldbu	r2,-20(fp)
    2944:	108001cc 	andi	r2,r2,7
    2948:	1007883a 	mov	r3,r2
    294c:	e0bff517 	ldw	r2,-44(fp)
    2950:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
    2954:	e0bff517 	ldw	r2,-44(fp)
    2958:	10800d03 	ldbu	r2,52(r2)
    295c:	10803fcc 	andi	r2,r2,255
    2960:	00c00044 	movi	r3,1
    2964:	1884983a 	sll	r2,r3,r2
    2968:	1007883a 	mov	r3,r2
    296c:	e0bff517 	ldw	r2,-44(fp)
    2970:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
    2974:	e0bff517 	ldw	r2,-44(fp)
    2978:	10800cc3 	ldbu	r2,51(r2)
    297c:	10803fcc 	andi	r2,r2,255
    2980:	00c00044 	movi	r3,1
    2984:	1884983a 	sll	r2,r3,r2
    2988:	1007883a 	mov	r3,r2
    298c:	e0bff517 	ldw	r2,-44(fp)
    2990:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
    2994:	e0bff517 	ldw	r2,-44(fp)
    2998:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
    299c:	e0bff517 	ldw	r2,-44(fp)
    29a0:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
    29a4:	e0bff517 	ldw	r2,-44(fp)
    29a8:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
    29ac:	e0bff517 	ldw	r2,-44(fp)
    29b0:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
    29b4:	e0bff517 	ldw	r2,-44(fp)
    29b8:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
    29bc:	e0bff517 	ldw	r2,-44(fp)
    29c0:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
    29c4:	e0bff517 	ldw	r2,-44(fp)
    29c8:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
    29cc:	e0bff517 	ldw	r2,-44(fp)
    29d0:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
    29d4:	e0bff517 	ldw	r2,-44(fp)
    29d8:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
    29dc:	e0bff517 	ldw	r2,-44(fp)
    29e0:	00c00fc4 	movi	r3,63
    29e4:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    29e8:	e0bff517 	ldw	r2,-44(fp)
    29ec:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
    29f0:	e13ff517 	ldw	r4,-44(fp)
    29f4:	000ce080 	call	ce08 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
    29f8:	e13ff517 	ldw	r4,-44(fp)
    29fc:	000cd200 	call	cd20 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2a00:	0005303a 	rdctl	r2,status
    2a04:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2a08:	e0fff817 	ldw	r3,-32(fp)
    2a0c:	00bfff84 	movi	r2,-2
    2a10:	1884703a 	and	r2,r3,r2
    2a14:	1001703a 	wrctl	status,r2
  
  return context;
    2a18:	e0bff817 	ldw	r2,-32(fp)

        OS_ENTER_CRITICAL();
    2a1c:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
    2a20:	e0fffb03 	ldbu	r3,-20(fp)
    2a24:	008001b4 	movhi	r2,6
    2a28:	10a3f604 	addi	r2,r2,-28712
    2a2c:	18c7883a 	add	r3,r3,r3
    2a30:	18c7883a 	add	r3,r3,r3
    2a34:	10c5883a 	add	r2,r2,r3
    2a38:	e0fff517 	ldw	r3,-44(fp)
    2a3c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
    2a40:	d0e7d617 	ldw	r3,-24744(gp)
    2a44:	e0bff517 	ldw	r2,-44(fp)
    2a48:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
    2a4c:	e0bff517 	ldw	r2,-44(fp)
    2a50:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
    2a54:	d0a7d617 	ldw	r2,-24744(gp)
    2a58:	10000326 	beq	r2,zero,2a68 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
    2a5c:	d0a7d617 	ldw	r2,-24744(gp)
    2a60:	e0fff517 	ldw	r3,-44(fp)
    2a64:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
    2a68:	e0bff517 	ldw	r2,-44(fp)
    2a6c:	d0a7d615 	stw	r2,-24744(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    2a70:	e0bff517 	ldw	r2,-44(fp)
    2a74:	10c00d83 	ldbu	r3,54(r2)
    2a78:	d0a7df03 	ldbu	r2,-24708(gp)
    2a7c:	1884b03a 	or	r2,r3,r2
    2a80:	d0a7df05 	stb	r2,-24708(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    2a84:	e0bff517 	ldw	r2,-44(fp)
    2a88:	10800d03 	ldbu	r2,52(r2)
    2a8c:	10c03fcc 	andi	r3,r2,255
    2a90:	e0bff517 	ldw	r2,-44(fp)
    2a94:	10800d03 	ldbu	r2,52(r2)
    2a98:	11003fcc 	andi	r4,r2,255
    2a9c:	d0a7df44 	addi	r2,gp,-24707
    2aa0:	2085883a 	add	r2,r4,r2
    2aa4:	11000003 	ldbu	r4,0(r2)
    2aa8:	e0bff517 	ldw	r2,-44(fp)
    2aac:	10800d43 	ldbu	r2,53(r2)
    2ab0:	2084b03a 	or	r2,r4,r2
    2ab4:	1009883a 	mov	r4,r2
    2ab8:	d0a7df44 	addi	r2,gp,-24707
    2abc:	1885883a 	add	r2,r3,r2
    2ac0:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
    2ac4:	d0a7db43 	ldbu	r2,-24723(gp)
    2ac8:	10800044 	addi	r2,r2,1
    2acc:	d0a7db45 	stb	r2,-24723(gp)
    2ad0:	e0bff417 	ldw	r2,-48(fp)
    2ad4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2ad8:	e0bff917 	ldw	r2,-28(fp)
    2adc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    2ae0:	0005883a 	mov	r2,zero
    2ae4:	00000506 	br	2afc <OS_TCBInit+0x2c0>
    2ae8:	e0bff417 	ldw	r2,-48(fp)
    2aec:	e0bffa15 	stw	r2,-24(fp)
    2af0:	e0bffa17 	ldw	r2,-24(fp)
    2af4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
    2af8:	00801084 	movi	r2,66
}
    2afc:	e037883a 	mov	sp,fp
    2b00:	dfc00117 	ldw	ra,4(sp)
    2b04:	df000017 	ldw	fp,0(sp)
    2b08:	dec00204 	addi	sp,sp,8
    2b0c:	f800283a 	ret

00002b10 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
    2b10:	defffe04 	addi	sp,sp,-8
    2b14:	df000115 	stw	fp,4(sp)
    2b18:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
    2b1c:	d0a00204 	addi	r2,gp,-32760
    2b20:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
    2b24:	d0a00304 	addi	r2,gp,-32756
    2b28:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
    2b2c:	d0a00484 	addi	r2,gp,-32750
    2b30:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
    2b34:	d0a00504 	addi	r2,gp,-32748
    2b38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
    2b3c:	d0a00404 	addi	r2,gp,-32752
    2b40:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
    2b44:	d0a00584 	addi	r2,gp,-32746
    2b48:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
    2b4c:	d0a00604 	addi	r2,gp,-32744
    2b50:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
    2b54:	d0a00684 	addi	r2,gp,-32742
    2b58:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
    2b5c:	d0a00704 	addi	r2,gp,-32740
    2b60:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
    2b64:	d0a00784 	addi	r2,gp,-32738
    2b68:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
    2b6c:	d0a00804 	addi	r2,gp,-32736
    2b70:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
    2b74:	d0a00884 	addi	r2,gp,-32734
    2b78:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
    2b7c:	d0a00904 	addi	r2,gp,-32732
    2b80:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
    2b84:	d0a00984 	addi	r2,gp,-32730
    2b88:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
    2b8c:	d0a00a04 	addi	r2,gp,-32728
    2b90:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
    2b94:	d0a00a84 	addi	r2,gp,-32726
    2b98:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
    2b9c:	d0a00b04 	addi	r2,gp,-32724
    2ba0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
    2ba4:	d0a00b84 	addi	r2,gp,-32722
    2ba8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
    2bac:	d0a00c04 	addi	r2,gp,-32720
    2bb0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
    2bb4:	d0a00c84 	addi	r2,gp,-32718
    2bb8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
    2bbc:	d0a00d04 	addi	r2,gp,-32716
    2bc0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
    2bc4:	d0a00d84 	addi	r2,gp,-32714
    2bc8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
    2bcc:	d0a00e04 	addi	r2,gp,-32712
    2bd0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
    2bd4:	d0a00e84 	addi	r2,gp,-32710
    2bd8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
    2bdc:	d0a00f04 	addi	r2,gp,-32708
    2be0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
    2be4:	d0a00f84 	addi	r2,gp,-32706
    2be8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
    2bec:	d0a01004 	addi	r2,gp,-32704
    2bf0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
    2bf4:	d0a01084 	addi	r2,gp,-32702
    2bf8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
    2bfc:	d0a01104 	addi	r2,gp,-32700
    2c00:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
    2c04:	d0a01184 	addi	r2,gp,-32698
    2c08:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
    2c0c:	d0a01204 	addi	r2,gp,-32696
    2c10:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
    2c14:	d0a01284 	addi	r2,gp,-32694
    2c18:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
    2c1c:	d0a01304 	addi	r2,gp,-32692
    2c20:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
    2c24:	d0a01384 	addi	r2,gp,-32690
    2c28:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
    2c2c:	d0a01404 	addi	r2,gp,-32688
    2c30:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
    2c34:	d0a01484 	addi	r2,gp,-32686
    2c38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
    2c3c:	d0a01504 	addi	r2,gp,-32684
    2c40:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
    2c44:	d0a01584 	addi	r2,gp,-32682
    2c48:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
    2c4c:	d0a01604 	addi	r2,gp,-32680
    2c50:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
    2c54:	d0a01684 	addi	r2,gp,-32678
    2c58:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
    2c5c:	d0a01704 	addi	r2,gp,-32676
    2c60:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
    2c64:	d0a01784 	addi	r2,gp,-32674
    2c68:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
    2c6c:	d0a01804 	addi	r2,gp,-32672
    2c70:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
    2c74:	d0a01884 	addi	r2,gp,-32670
    2c78:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
    2c7c:	d0a01904 	addi	r2,gp,-32668
    2c80:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
    2c84:	d0a01e04 	addi	r2,gp,-32648
    2c88:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
    2c8c:	e037883a 	mov	sp,fp
    2c90:	df000017 	ldw	fp,0(sp)
    2c94:	dec00104 	addi	sp,sp,4
    2c98:	f800283a 	ret

00002c9c <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
    2c9c:	defff204 	addi	sp,sp,-56
    2ca0:	df000d15 	stw	fp,52(sp)
    2ca4:	df000d04 	addi	fp,sp,52
    2ca8:	e13ffc15 	stw	r4,-16(fp)
    2cac:	2807883a 	mov	r3,r5
    2cb0:	3005883a 	mov	r2,r6
    2cb4:	e1ffff15 	stw	r7,-4(fp)
    2cb8:	e0fffd0d 	sth	r3,-12(fp)
    2cbc:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    2cc0:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    2cc4:	e0bfff17 	ldw	r2,-4(fp)
    2cc8:	1000021e 	bne	r2,zero,2cd4 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
    2ccc:	0005883a 	mov	r2,zero
    2cd0:	0000b006 	br	2f94 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    2cd4:	e0bffc17 	ldw	r2,-16(fp)
    2cd8:	1000051e 	bne	r2,zero,2cf0 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    2cdc:	e0bfff17 	ldw	r2,-4(fp)
    2ce0:	00c01b84 	movi	r3,110
    2ce4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    2ce8:	0005883a 	mov	r2,zero
    2cec:	0000a906 	br	2f94 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    2cf0:	e0bffc17 	ldw	r2,-16(fp)
    2cf4:	10800003 	ldbu	r2,0(r2)
    2cf8:	10803fcc 	andi	r2,r2,255
    2cfc:	10800160 	cmpeqi	r2,r2,5
    2d00:	1000051e 	bne	r2,zero,2d18 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
    2d04:	e0bfff17 	ldw	r2,-4(fp)
    2d08:	00c00044 	movi	r3,1
    2d0c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    2d10:	0005883a 	mov	r2,zero
    2d14:	00009f06 	br	2f94 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    2d18:	e0fffe03 	ldbu	r3,-8(fp)
    2d1c:	00bfe004 	movi	r2,-128
    2d20:	1884703a 	and	r2,r3,r2
    2d24:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
    2d28:	e0bff503 	ldbu	r2,-44(fp)
    2d2c:	10000626 	beq	r2,zero,2d48 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
    2d30:	e0bffe03 	ldbu	r2,-8(fp)
    2d34:	10801fcc 	andi	r2,r2,127
    2d38:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    2d3c:	00800044 	movi	r2,1
    2d40:	e0bff385 	stb	r2,-50(fp)
    2d44:	00000106 	br	2d4c <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
    2d48:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
    2d4c:	e0bfff17 	ldw	r2,-4(fp)
    2d50:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2d54:	0005303a 	rdctl	r2,status
    2d58:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2d5c:	e0fff617 	ldw	r3,-40(fp)
    2d60:	00bfff84 	movi	r2,-2
    2d64:	1884703a 	and	r2,r3,r2
    2d68:	1001703a 	wrctl	status,r2
  
  return context;
    2d6c:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
    2d70:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
    2d74:	e0bffe03 	ldbu	r2,-8(fp)
    2d78:	10c00060 	cmpeqi	r3,r2,1
    2d7c:	18005f1e 	bne	r3,zero,2efc <OSFlagAccept+0x260>
    2d80:	10c00088 	cmpgei	r3,r2,2
    2d84:	1800021e 	bne	r3,zero,2d90 <OSFlagAccept+0xf4>
    2d88:	10003f26 	beq	r2,zero,2e88 <OSFlagAccept+0x1ec>
    2d8c:	00007706 	br	2f6c <OSFlagAccept+0x2d0>
    2d90:	10c000a0 	cmpeqi	r3,r2,2
    2d94:	1800031e 	bne	r3,zero,2da4 <OSFlagAccept+0x108>
    2d98:	108000e0 	cmpeqi	r2,r2,3
    2d9c:	10001e1e 	bne	r2,zero,2e18 <OSFlagAccept+0x17c>
    2da0:	00007206 	br	2f6c <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    2da4:	e0bffc17 	ldw	r2,-16(fp)
    2da8:	10c0020b 	ldhu	r3,8(r2)
    2dac:	e0bffd0b 	ldhu	r2,-12(fp)
    2db0:	1884703a 	and	r2,r3,r2
    2db4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    2db8:	e0fff30b 	ldhu	r3,-52(fp)
    2dbc:	e0bffd0b 	ldhu	r2,-12(fp)
    2dc0:	18800d1e 	bne	r3,r2,2df8 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    2dc4:	e0bff383 	ldbu	r2,-50(fp)
    2dc8:	10800058 	cmpnei	r2,r2,1
    2dcc:	10000d1e 	bne	r2,zero,2e04 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    2dd0:	e0bffc17 	ldw	r2,-16(fp)
    2dd4:	1080020b 	ldhu	r2,8(r2)
    2dd8:	1007883a 	mov	r3,r2
    2ddc:	e0bff30b 	ldhu	r2,-52(fp)
    2de0:	0084303a 	nor	r2,zero,r2
    2de4:	1884703a 	and	r2,r3,r2
    2de8:	1007883a 	mov	r3,r2
    2dec:	e0bffc17 	ldw	r2,-16(fp)
    2df0:	10c0020d 	sth	r3,8(r2)
    2df4:	00000306 	br	2e04 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    2df8:	e0bfff17 	ldw	r2,-4(fp)
    2dfc:	00c01c04 	movi	r3,112
    2e00:	10c00005 	stb	r3,0(r2)
    2e04:	e0bff417 	ldw	r2,-48(fp)
    2e08:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2e0c:	e0bff717 	ldw	r2,-36(fp)
    2e10:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    2e14:	00005e06 	br	2f90 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    2e18:	e0bffc17 	ldw	r2,-16(fp)
    2e1c:	10c0020b 	ldhu	r3,8(r2)
    2e20:	e0bffd0b 	ldhu	r2,-12(fp)
    2e24:	1884703a 	and	r2,r3,r2
    2e28:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    2e2c:	e0bff30b 	ldhu	r2,-52(fp)
    2e30:	10000d26 	beq	r2,zero,2e68 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    2e34:	e0bff383 	ldbu	r2,-50(fp)
    2e38:	10800058 	cmpnei	r2,r2,1
    2e3c:	10000d1e 	bne	r2,zero,2e74 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    2e40:	e0bffc17 	ldw	r2,-16(fp)
    2e44:	1080020b 	ldhu	r2,8(r2)
    2e48:	1007883a 	mov	r3,r2
    2e4c:	e0bff30b 	ldhu	r2,-52(fp)
    2e50:	0084303a 	nor	r2,zero,r2
    2e54:	1884703a 	and	r2,r3,r2
    2e58:	1007883a 	mov	r3,r2
    2e5c:	e0bffc17 	ldw	r2,-16(fp)
    2e60:	10c0020d 	sth	r3,8(r2)
    2e64:	00000306 	br	2e74 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    2e68:	e0bfff17 	ldw	r2,-4(fp)
    2e6c:	00c01c04 	movi	r3,112
    2e70:	10c00005 	stb	r3,0(r2)
    2e74:	e0bff417 	ldw	r2,-48(fp)
    2e78:	e0bff815 	stw	r2,-32(fp)
    2e7c:	e0bff817 	ldw	r2,-32(fp)
    2e80:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    2e84:	00004206 	br	2f90 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    2e88:	e0bffc17 	ldw	r2,-16(fp)
    2e8c:	1080020b 	ldhu	r2,8(r2)
    2e90:	0084303a 	nor	r2,zero,r2
    2e94:	1007883a 	mov	r3,r2
    2e98:	e0bffd0b 	ldhu	r2,-12(fp)
    2e9c:	1884703a 	and	r2,r3,r2
    2ea0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    2ea4:	e0fff30b 	ldhu	r3,-52(fp)
    2ea8:	e0bffd0b 	ldhu	r2,-12(fp)
    2eac:	18800b1e 	bne	r3,r2,2edc <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    2eb0:	e0bff383 	ldbu	r2,-50(fp)
    2eb4:	10800058 	cmpnei	r2,r2,1
    2eb8:	10000b1e 	bne	r2,zero,2ee8 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    2ebc:	e0bffc17 	ldw	r2,-16(fp)
    2ec0:	10c0020b 	ldhu	r3,8(r2)
    2ec4:	e0bff30b 	ldhu	r2,-52(fp)
    2ec8:	1884b03a 	or	r2,r3,r2
    2ecc:	1007883a 	mov	r3,r2
    2ed0:	e0bffc17 	ldw	r2,-16(fp)
    2ed4:	10c0020d 	sth	r3,8(r2)
    2ed8:	00000306 	br	2ee8 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    2edc:	e0bfff17 	ldw	r2,-4(fp)
    2ee0:	00c01c04 	movi	r3,112
    2ee4:	10c00005 	stb	r3,0(r2)
    2ee8:	e0bff417 	ldw	r2,-48(fp)
    2eec:	e0bff915 	stw	r2,-28(fp)
    2ef0:	e0bff917 	ldw	r2,-28(fp)
    2ef4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    2ef8:	00002506 	br	2f90 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    2efc:	e0bffc17 	ldw	r2,-16(fp)
    2f00:	1080020b 	ldhu	r2,8(r2)
    2f04:	0084303a 	nor	r2,zero,r2
    2f08:	1007883a 	mov	r3,r2
    2f0c:	e0bffd0b 	ldhu	r2,-12(fp)
    2f10:	1884703a 	and	r2,r3,r2
    2f14:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    2f18:	e0bff30b 	ldhu	r2,-52(fp)
    2f1c:	10000b26 	beq	r2,zero,2f4c <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    2f20:	e0bff383 	ldbu	r2,-50(fp)
    2f24:	10800058 	cmpnei	r2,r2,1
    2f28:	10000b1e 	bne	r2,zero,2f58 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    2f2c:	e0bffc17 	ldw	r2,-16(fp)
    2f30:	10c0020b 	ldhu	r3,8(r2)
    2f34:	e0bff30b 	ldhu	r2,-52(fp)
    2f38:	1884b03a 	or	r2,r3,r2
    2f3c:	1007883a 	mov	r3,r2
    2f40:	e0bffc17 	ldw	r2,-16(fp)
    2f44:	10c0020d 	sth	r3,8(r2)
    2f48:	00000306 	br	2f58 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    2f4c:	e0bfff17 	ldw	r2,-4(fp)
    2f50:	00c01c04 	movi	r3,112
    2f54:	10c00005 	stb	r3,0(r2)
    2f58:	e0bff417 	ldw	r2,-48(fp)
    2f5c:	e0bffa15 	stw	r2,-24(fp)
    2f60:	e0bffa17 	ldw	r2,-24(fp)
    2f64:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    2f68:	00000906 	br	2f90 <OSFlagAccept+0x2f4>
    2f6c:	e0bff417 	ldw	r2,-48(fp)
    2f70:	e0bffb15 	stw	r2,-20(fp)
    2f74:	e0bffb17 	ldw	r2,-20(fp)
    2f78:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    2f7c:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
    2f80:	e0bfff17 	ldw	r2,-4(fp)
    2f84:	00c01bc4 	movi	r3,111
    2f88:	10c00005 	stb	r3,0(r2)
             break;
    2f8c:	0001883a 	nop
    }
    return (flags_rdy);
    2f90:	e0bff30b 	ldhu	r2,-52(fp)
}
    2f94:	e037883a 	mov	sp,fp
    2f98:	df000017 	ldw	fp,0(sp)
    2f9c:	dec00104 	addi	sp,sp,4
    2fa0:	f800283a 	ret

00002fa4 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
    2fa4:	defff804 	addi	sp,sp,-32
    2fa8:	df000715 	stw	fp,28(sp)
    2fac:	df000704 	addi	fp,sp,28
    2fb0:	2005883a 	mov	r2,r4
    2fb4:	e17fff15 	stw	r5,-4(fp)
    2fb8:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
    2fbc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
    2fc0:	e0bfff17 	ldw	r2,-4(fp)
    2fc4:	1000021e 	bne	r2,zero,2fd0 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
    2fc8:	0005883a 	mov	r2,zero
    2fcc:	00003b06 	br	30bc <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
    2fd0:	00800074 	movhi	r2,1
    2fd4:	108f6904 	addi	r2,r2,15780
    2fd8:	10800003 	ldbu	r2,0(r2)
    2fdc:	10803fcc 	andi	r2,r2,255
    2fe0:	10000526 	beq	r2,zero,2ff8 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
    2fe4:	e0bfff17 	ldw	r2,-4(fp)
    2fe8:	00c00404 	movi	r3,16
    2fec:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
    2ff0:	0005883a 	mov	r2,zero
    2ff4:	00003106 	br	30bc <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2ff8:	0005303a 	rdctl	r2,status
    2ffc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3000:	e0fffb17 	ldw	r3,-20(fp)
    3004:	00bfff84 	movi	r2,-2
    3008:	1884703a 	and	r2,r3,r2
    300c:	1001703a 	wrctl	status,r2
  
  return context;
    3010:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    3014:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
    3018:	00800074 	movhi	r2,1
    301c:	108f6c04 	addi	r2,r2,15792
    3020:	10800017 	ldw	r2,0(r2)
    3024:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
    3028:	e0bffa17 	ldw	r2,-24(fp)
    302c:	10001b26 	beq	r2,zero,309c <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
    3030:	00800074 	movhi	r2,1
    3034:	108f6c04 	addi	r2,r2,15792
    3038:	10800017 	ldw	r2,0(r2)
    303c:	10c00117 	ldw	r3,4(r2)
    3040:	00800074 	movhi	r2,1
    3044:	108f6c04 	addi	r2,r2,15792
    3048:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
    304c:	e0bffa17 	ldw	r2,-24(fp)
    3050:	00c00144 	movi	r3,5
    3054:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
    3058:	e0bffa17 	ldw	r2,-24(fp)
    305c:	e0fffe0b 	ldhu	r3,-8(fp)
    3060:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
    3064:	e0bffa17 	ldw	r2,-24(fp)
    3068:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
    306c:	e0bffa17 	ldw	r2,-24(fp)
    3070:	00c00fc4 	movi	r3,63
    3074:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    3078:	e0bffa17 	ldw	r2,-24(fp)
    307c:	100002c5 	stb	zero,11(r2)
    3080:	e0bff917 	ldw	r2,-28(fp)
    3084:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3088:	e0bffc17 	ldw	r2,-16(fp)
    308c:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
    3090:	e0bfff17 	ldw	r2,-4(fp)
    3094:	10000005 	stb	zero,0(r2)
    3098:	00000706 	br	30b8 <OSFlagCreate+0x114>
    309c:	e0bff917 	ldw	r2,-28(fp)
    30a0:	e0bffd15 	stw	r2,-12(fp)
    30a4:	e0bffd17 	ldw	r2,-12(fp)
    30a8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
    30ac:	e0bfff17 	ldw	r2,-4(fp)
    30b0:	00c01c84 	movi	r3,114
    30b4:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
    30b8:	e0bffa17 	ldw	r2,-24(fp)
}
    30bc:	e037883a 	mov	sp,fp
    30c0:	df000017 	ldw	fp,0(sp)
    30c4:	dec00104 	addi	sp,sp,4
    30c8:	f800283a 	ret

000030cc <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
    30cc:	defff204 	addi	sp,sp,-56
    30d0:	dfc00d15 	stw	ra,52(sp)
    30d4:	df000c15 	stw	fp,48(sp)
    30d8:	df000c04 	addi	fp,sp,48
    30dc:	e13ffd15 	stw	r4,-12(fp)
    30e0:	2805883a 	mov	r2,r5
    30e4:	e1bfff15 	stw	r6,-4(fp)
    30e8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    30ec:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    30f0:	e0bfff17 	ldw	r2,-4(fp)
    30f4:	1000021e 	bne	r2,zero,3100 <OSFlagDel+0x34>
        return (pgrp);
    30f8:	e0bffd17 	ldw	r2,-12(fp)
    30fc:	00008a06 	br	3328 <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    3100:	e0bffd17 	ldw	r2,-12(fp)
    3104:	1000051e 	bne	r2,zero,311c <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    3108:	e0bfff17 	ldw	r2,-4(fp)
    310c:	00c01b84 	movi	r3,110
    3110:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    3114:	e0bffd17 	ldw	r2,-12(fp)
    3118:	00008306 	br	3328 <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    311c:	00800074 	movhi	r2,1
    3120:	108f6904 	addi	r2,r2,15780
    3124:	10800003 	ldbu	r2,0(r2)
    3128:	10803fcc 	andi	r2,r2,255
    312c:	10000526 	beq	r2,zero,3144 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    3130:	e0bfff17 	ldw	r2,-4(fp)
    3134:	00c003c4 	movi	r3,15
    3138:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    313c:	e0bffd17 	ldw	r2,-12(fp)
    3140:	00007906 	br	3328 <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
    3144:	e0bffd17 	ldw	r2,-12(fp)
    3148:	10800003 	ldbu	r2,0(r2)
    314c:	10803fcc 	andi	r2,r2,255
    3150:	10800160 	cmpeqi	r2,r2,5
    3154:	1000051e 	bne	r2,zero,316c <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
    3158:	e0bfff17 	ldw	r2,-4(fp)
    315c:	00c00044 	movi	r3,1
    3160:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    3164:	e0bffd17 	ldw	r2,-12(fp)
    3168:	00006f06 	br	3328 <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    316c:	0005303a 	rdctl	r2,status
    3170:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3174:	e0fff817 	ldw	r3,-32(fp)
    3178:	00bfff84 	movi	r2,-2
    317c:	1884703a 	and	r2,r3,r2
    3180:	1001703a 	wrctl	status,r2
  
  return context;
    3184:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    3188:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
    318c:	e0bffd17 	ldw	r2,-12(fp)
    3190:	10800117 	ldw	r2,4(r2)
    3194:	10000326 	beq	r2,zero,31a4 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    3198:	00800044 	movi	r2,1
    319c:	e0bff405 	stb	r2,-48(fp)
    31a0:	00000106 	br	31a8 <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    31a4:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
    31a8:	e0bffe03 	ldbu	r2,-8(fp)
    31ac:	10000326 	beq	r2,zero,31bc <OSFlagDel+0xf0>
    31b0:	10800060 	cmpeqi	r2,r2,1
    31b4:	1000271e 	bne	r2,zero,3254 <OSFlagDel+0x188>
    31b8:	00005006 	br	32fc <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
    31bc:	e0bff403 	ldbu	r2,-48(fp)
    31c0:	10001a1e 	bne	r2,zero,322c <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
    31c4:	e0bffd17 	ldw	r2,-12(fp)
    31c8:	00c00fc4 	movi	r3,63
    31cc:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    31d0:	e0bffd17 	ldw	r2,-12(fp)
    31d4:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    31d8:	e0bffd17 	ldw	r2,-12(fp)
    31dc:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
    31e0:	00800074 	movhi	r2,1
    31e4:	108f6c04 	addi	r2,r2,15792
    31e8:	10c00017 	ldw	r3,0(r2)
    31ec:	e0bffd17 	ldw	r2,-12(fp)
    31f0:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
    31f4:	e0bffd17 	ldw	r2,-12(fp)
    31f8:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
    31fc:	00800074 	movhi	r2,1
    3200:	108f6c04 	addi	r2,r2,15792
    3204:	e0fffd17 	ldw	r3,-12(fp)
    3208:	10c00015 	stw	r3,0(r2)
    320c:	e0bff717 	ldw	r2,-36(fp)
    3210:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3214:	e0bff917 	ldw	r2,-28(fp)
    3218:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
    321c:	e0bfff17 	ldw	r2,-4(fp)
    3220:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
    3224:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
    3228:	00003e06 	br	3324 <OSFlagDel+0x258>
    322c:	e0bff717 	ldw	r2,-36(fp)
    3230:	e0bffa15 	stw	r2,-24(fp)
    3234:	e0bffa17 	ldw	r2,-24(fp)
    3238:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
    323c:	e0bfff17 	ldw	r2,-4(fp)
    3240:	00c01244 	movi	r3,73
    3244:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
    3248:	e0bffd17 	ldw	r2,-12(fp)
    324c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
    3250:	00003406 	br	3324 <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    3254:	e0bffd17 	ldw	r2,-12(fp)
    3258:	10800117 	ldw	r2,4(r2)
    325c:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    3260:	00000606 	br	327c <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
    3264:	e13ff517 	ldw	r4,-44(fp)
    3268:	000b883a 	mov	r5,zero
    326c:	00043080 	call	4308 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    3270:	e0bff517 	ldw	r2,-44(fp)
    3274:	10800017 	ldw	r2,0(r2)
    3278:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    327c:	e0bff517 	ldw	r2,-44(fp)
    3280:	103ff81e 	bne	r2,zero,3264 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
    3284:	e0bffd17 	ldw	r2,-12(fp)
    3288:	00c00fc4 	movi	r3,63
    328c:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    3290:	e0bffd17 	ldw	r2,-12(fp)
    3294:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    3298:	e0bffd17 	ldw	r2,-12(fp)
    329c:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
    32a0:	00800074 	movhi	r2,1
    32a4:	108f6c04 	addi	r2,r2,15792
    32a8:	10c00017 	ldw	r3,0(r2)
    32ac:	e0bffd17 	ldw	r2,-12(fp)
    32b0:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
    32b4:	e0bffd17 	ldw	r2,-12(fp)
    32b8:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
    32bc:	00800074 	movhi	r2,1
    32c0:	108f6c04 	addi	r2,r2,15792
    32c4:	e0fffd17 	ldw	r3,-12(fp)
    32c8:	10c00015 	stw	r3,0(r2)
    32cc:	e0bff717 	ldw	r2,-36(fp)
    32d0:	e0bffb15 	stw	r2,-20(fp)
    32d4:	e0bffb17 	ldw	r2,-20(fp)
    32d8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    32dc:	e0bff403 	ldbu	r2,-48(fp)
    32e0:	10800058 	cmpnei	r2,r2,1
    32e4:	1000011e 	bne	r2,zero,32ec <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    32e8:	00024380 	call	2438 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
    32ec:	e0bfff17 	ldw	r2,-4(fp)
    32f0:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
    32f4:	e03ff615 	stw	zero,-40(fp)
             break;
    32f8:	00000a06 	br	3324 <OSFlagDel+0x258>
    32fc:	e0bff717 	ldw	r2,-36(fp)
    3300:	e0bffc15 	stw	r2,-16(fp)
    3304:	e0bffc17 	ldw	r2,-16(fp)
    3308:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
    330c:	e0bfff17 	ldw	r2,-4(fp)
    3310:	00c001c4 	movi	r3,7
    3314:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
    3318:	e0bffd17 	ldw	r2,-12(fp)
    331c:	e0bff615 	stw	r2,-40(fp)
             break;
    3320:	0001883a 	nop
    }
    return (pgrp_return);
    3324:	e0bff617 	ldw	r2,-40(fp)
}
    3328:	e037883a 	mov	sp,fp
    332c:	dfc00117 	ldw	ra,4(sp)
    3330:	df000017 	ldw	fp,0(sp)
    3334:	dec00204 	addi	sp,sp,8
    3338:	f800283a 	ret

0000333c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    333c:	defff604 	addi	sp,sp,-40
    3340:	dfc00915 	stw	ra,36(sp)
    3344:	df000815 	stw	fp,32(sp)
    3348:	df000804 	addi	fp,sp,32
    334c:	e13ffd15 	stw	r4,-12(fp)
    3350:	e17ffe15 	stw	r5,-8(fp)
    3354:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3358:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    335c:	e0bfff17 	ldw	r2,-4(fp)
    3360:	1000021e 	bne	r2,zero,336c <OSFlagNameGet+0x30>
        return (0);
    3364:	0005883a 	mov	r2,zero
    3368:	00003b06 	br	3458 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    336c:	e0bffd17 	ldw	r2,-12(fp)
    3370:	1000051e 	bne	r2,zero,3388 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    3374:	e0bfff17 	ldw	r2,-4(fp)
    3378:	00c01b84 	movi	r3,110
    337c:	10c00005 	stb	r3,0(r2)
        return (0);
    3380:	0005883a 	mov	r2,zero
    3384:	00003406 	br	3458 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    3388:	e0bffe17 	ldw	r2,-8(fp)
    338c:	1000051e 	bne	r2,zero,33a4 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    3390:	e0bfff17 	ldw	r2,-4(fp)
    3394:	00c00304 	movi	r3,12
    3398:	10c00005 	stb	r3,0(r2)
        return (0);
    339c:	0005883a 	mov	r2,zero
    33a0:	00002d06 	br	3458 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    33a4:	00800074 	movhi	r2,1
    33a8:	108f6904 	addi	r2,r2,15780
    33ac:	10800003 	ldbu	r2,0(r2)
    33b0:	10803fcc 	andi	r2,r2,255
    33b4:	10000526 	beq	r2,zero,33cc <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
    33b8:	e0bfff17 	ldw	r2,-4(fp)
    33bc:	00c00444 	movi	r3,17
    33c0:	10c00005 	stb	r3,0(r2)
        return (0);
    33c4:	0005883a 	mov	r2,zero
    33c8:	00002306 	br	3458 <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    33cc:	0005303a 	rdctl	r2,status
    33d0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    33d4:	e0fffa17 	ldw	r3,-24(fp)
    33d8:	00bfff84 	movi	r2,-2
    33dc:	1884703a 	and	r2,r3,r2
    33e0:	1001703a 	wrctl	status,r2
  
  return context;
    33e4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    33e8:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    33ec:	e0bffd17 	ldw	r2,-12(fp)
    33f0:	10800003 	ldbu	r2,0(r2)
    33f4:	10803fcc 	andi	r2,r2,255
    33f8:	10800160 	cmpeqi	r2,r2,5
    33fc:	1000091e 	bne	r2,zero,3424 <OSFlagNameGet+0xe8>
    3400:	e0bff817 	ldw	r2,-32(fp)
    3404:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3408:	e0bffb17 	ldw	r2,-20(fp)
    340c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    3410:	e0bfff17 	ldw	r2,-4(fp)
    3414:	00c00044 	movi	r3,1
    3418:	10c00005 	stb	r3,0(r2)
        return (0);
    341c:	0005883a 	mov	r2,zero
    3420:	00000d06 	br	3458 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
    3424:	e0bffd17 	ldw	r2,-12(fp)
    3428:	10800284 	addi	r2,r2,10
    342c:	e13ffe17 	ldw	r4,-8(fp)
    3430:	100b883a 	mov	r5,r2
    3434:	00025740 	call	2574 <OS_StrCopy>
    3438:	e0bff905 	stb	r2,-28(fp)
    343c:	e0bff817 	ldw	r2,-32(fp)
    3440:	e0bffc15 	stw	r2,-16(fp)
    3444:	e0bffc17 	ldw	r2,-16(fp)
    3448:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    344c:	e0bfff17 	ldw	r2,-4(fp)
    3450:	10000005 	stb	zero,0(r2)
    return (len);
    3454:	e0bff903 	ldbu	r2,-28(fp)
}
    3458:	e037883a 	mov	sp,fp
    345c:	dfc00117 	ldw	ra,4(sp)
    3460:	df000017 	ldw	fp,0(sp)
    3464:	dec00204 	addi	sp,sp,8
    3468:	f800283a 	ret

0000346c <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    346c:	defff504 	addi	sp,sp,-44
    3470:	dfc00a15 	stw	ra,40(sp)
    3474:	df000915 	stw	fp,36(sp)
    3478:	df000904 	addi	fp,sp,36
    347c:	e13ffd15 	stw	r4,-12(fp)
    3480:	e17ffe15 	stw	r5,-8(fp)
    3484:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3488:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    348c:	e0bfff17 	ldw	r2,-4(fp)
    3490:	1000011e 	bne	r2,zero,3498 <OSFlagNameSet+0x2c>
        return;
    3494:	00004406 	br	35a8 <OSFlagNameSet+0x13c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    3498:	e0bffd17 	ldw	r2,-12(fp)
    349c:	1000041e 	bne	r2,zero,34b0 <OSFlagNameSet+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    34a0:	e0bfff17 	ldw	r2,-4(fp)
    34a4:	00c01b84 	movi	r3,110
    34a8:	10c00005 	stb	r3,0(r2)
        return;
    34ac:	00003e06 	br	35a8 <OSFlagNameSet+0x13c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    34b0:	e0bffe17 	ldw	r2,-8(fp)
    34b4:	1000041e 	bne	r2,zero,34c8 <OSFlagNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
    34b8:	e0bfff17 	ldw	r2,-4(fp)
    34bc:	00c00304 	movi	r3,12
    34c0:	10c00005 	stb	r3,0(r2)
        return;
    34c4:	00003806 	br	35a8 <OSFlagNameSet+0x13c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    34c8:	00800074 	movhi	r2,1
    34cc:	108f6904 	addi	r2,r2,15780
    34d0:	10800003 	ldbu	r2,0(r2)
    34d4:	10803fcc 	andi	r2,r2,255
    34d8:	10000426 	beq	r2,zero,34ec <OSFlagNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
    34dc:	e0bfff17 	ldw	r2,-4(fp)
    34e0:	00c00484 	movi	r3,18
    34e4:	10c00005 	stb	r3,0(r2)
        return;
    34e8:	00002f06 	br	35a8 <OSFlagNameSet+0x13c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    34ec:	0005303a 	rdctl	r2,status
    34f0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    34f4:	e0fff917 	ldw	r3,-28(fp)
    34f8:	00bfff84 	movi	r2,-2
    34fc:	1884703a 	and	r2,r3,r2
    3500:	1001703a 	wrctl	status,r2
  
  return context;
    3504:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    3508:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    350c:	e0bffd17 	ldw	r2,-12(fp)
    3510:	10800003 	ldbu	r2,0(r2)
    3514:	10803fcc 	andi	r2,r2,255
    3518:	10800160 	cmpeqi	r2,r2,5
    351c:	1000081e 	bne	r2,zero,3540 <OSFlagNameSet+0xd4>
    3520:	e0bff717 	ldw	r2,-36(fp)
    3524:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3528:	e0bffa17 	ldw	r2,-24(fp)
    352c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    3530:	e0bfff17 	ldw	r2,-4(fp)
    3534:	00c00044 	movi	r3,1
    3538:	10c00005 	stb	r3,0(r2)
        return;
    353c:	00001a06 	br	35a8 <OSFlagNameSet+0x13c>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    3540:	e13ffe17 	ldw	r4,-8(fp)
    3544:	00025e80 	call	25e8 <OS_StrLen>
    3548:	e0bff805 	stb	r2,-32(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
    354c:	e0bff803 	ldbu	r2,-32(fp)
    3550:	10800830 	cmpltui	r2,r2,32
    3554:	1000081e 	bne	r2,zero,3578 <OSFlagNameSet+0x10c>
    3558:	e0bff717 	ldw	r2,-36(fp)
    355c:	e0bffb15 	stw	r2,-20(fp)
    3560:	e0bffb17 	ldw	r2,-20(fp)
    3564:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
    3568:	e0bfff17 	ldw	r2,-4(fp)
    356c:	00c01cc4 	movi	r3,115
    3570:	10c00005 	stb	r3,0(r2)
        return;
    3574:	00000c06 	br	35a8 <OSFlagNameSet+0x13c>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    3578:	e0bffd17 	ldw	r2,-12(fp)
    357c:	10800284 	addi	r2,r2,10
    3580:	1009883a 	mov	r4,r2
    3584:	e17ffe17 	ldw	r5,-8(fp)
    3588:	00025740 	call	2574 <OS_StrCopy>
    358c:	e0bff717 	ldw	r2,-36(fp)
    3590:	e0bffc15 	stw	r2,-16(fp)
    3594:	e0bffc17 	ldw	r2,-16(fp)
    3598:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    359c:	e0bfff17 	ldw	r2,-4(fp)
    35a0:	10000005 	stb	zero,0(r2)
    return;
    35a4:	0001883a 	nop
}
    35a8:	e037883a 	mov	sp,fp
    35ac:	dfc00117 	ldw	ra,4(sp)
    35b0:	df000017 	ldw	fp,0(sp)
    35b4:	dec00204 	addi	sp,sp,8
    35b8:	f800283a 	ret

000035bc <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
    35bc:	deffe204 	addi	sp,sp,-120
    35c0:	dfc01d15 	stw	ra,116(sp)
    35c4:	df001c15 	stw	fp,112(sp)
    35c8:	df001c04 	addi	fp,sp,112
    35cc:	e13ffc15 	stw	r4,-16(fp)
    35d0:	2809883a 	mov	r4,r5
    35d4:	3007883a 	mov	r3,r6
    35d8:	3805883a 	mov	r2,r7
    35dc:	e13ffd0d 	sth	r4,-12(fp)
    35e0:	e0fffe05 	stb	r3,-8(fp)
    35e4:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    35e8:	e03fe615 	stw	zero,-104(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    35ec:	e0800217 	ldw	r2,8(fp)
    35f0:	1000021e 	bne	r2,zero,35fc <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
    35f4:	0005883a 	mov	r2,zero
    35f8:	00016706 	br	3b98 <OSFlagPend+0x5dc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    35fc:	e0bffc17 	ldw	r2,-16(fp)
    3600:	1000051e 	bne	r2,zero,3618 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    3604:	e0800217 	ldw	r2,8(fp)
    3608:	00c01b84 	movi	r3,110
    360c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    3610:	0005883a 	mov	r2,zero
    3614:	00016006 	br	3b98 <OSFlagPend+0x5dc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    3618:	00800074 	movhi	r2,1
    361c:	108f6904 	addi	r2,r2,15780
    3620:	10800003 	ldbu	r2,0(r2)
    3624:	10803fcc 	andi	r2,r2,255
    3628:	10000526 	beq	r2,zero,3640 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
    362c:	e0800217 	ldw	r2,8(fp)
    3630:	00c00084 	movi	r3,2
    3634:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    3638:	0005883a 	mov	r2,zero
    363c:	00015606 	br	3b98 <OSFlagPend+0x5dc>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
    3640:	00800074 	movhi	r2,1
    3644:	108f5b04 	addi	r2,r2,15724
    3648:	10800003 	ldbu	r2,0(r2)
    364c:	10803fcc 	andi	r2,r2,255
    3650:	10000526 	beq	r2,zero,3668 <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
    3654:	e0800217 	ldw	r2,8(fp)
    3658:	00c00344 	movi	r3,13
    365c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    3660:	0005883a 	mov	r2,zero
    3664:	00014c06 	br	3b98 <OSFlagPend+0x5dc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    3668:	e0bffc17 	ldw	r2,-16(fp)
    366c:	10800003 	ldbu	r2,0(r2)
    3670:	10803fcc 	andi	r2,r2,255
    3674:	10800160 	cmpeqi	r2,r2,5
    3678:	1000051e 	bne	r2,zero,3690 <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
    367c:	e0800217 	ldw	r2,8(fp)
    3680:	00c00044 	movi	r3,1
    3684:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    3688:	0005883a 	mov	r2,zero
    368c:	00014206 	br	3b98 <OSFlagPend+0x5dc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    3690:	e0fffe03 	ldbu	r3,-8(fp)
    3694:	00bfe004 	movi	r2,-128
    3698:	1884703a 	and	r2,r3,r2
    369c:	e0bfe705 	stb	r2,-100(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
    36a0:	e0bfe703 	ldbu	r2,-100(fp)
    36a4:	10000626 	beq	r2,zero,36c0 <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
    36a8:	e0bffe03 	ldbu	r2,-8(fp)
    36ac:	10801fcc 	andi	r2,r2,127
    36b0:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    36b4:	00800044 	movi	r2,1
    36b8:	e0bfe505 	stb	r2,-108(fp)
    36bc:	00000106 	br	36c4 <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
    36c0:	e03fe505 	stb	zero,-108(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    36c4:	0005303a 	rdctl	r2,status
    36c8:	e0bfe915 	stw	r2,-92(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    36cc:	e0ffe917 	ldw	r3,-92(fp)
    36d0:	00bfff84 	movi	r2,-2
    36d4:	1884703a 	and	r2,r3,r2
    36d8:	1001703a 	wrctl	status,r2
  
  return context;
    36dc:	e0bfe917 	ldw	r2,-92(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    36e0:	e0bfe615 	stw	r2,-104(fp)
    switch (wait_type) {
    36e4:	e0bffe03 	ldbu	r2,-8(fp)
    36e8:	10c00060 	cmpeqi	r3,r2,1
    36ec:	1800921e 	bne	r3,zero,3938 <OSFlagPend+0x37c>
    36f0:	10c00088 	cmpgei	r3,r2,2
    36f4:	1800021e 	bne	r3,zero,3700 <OSFlagPend+0x144>
    36f8:	10006126 	beq	r2,zero,3880 <OSFlagPend+0x2c4>
    36fc:	0000bb06 	br	39ec <OSFlagPend+0x430>
    3700:	10c000a0 	cmpeqi	r3,r2,2
    3704:	1800031e 	bne	r3,zero,3714 <OSFlagPend+0x158>
    3708:	108000e0 	cmpeqi	r2,r2,3
    370c:	10002f1e 	bne	r2,zero,37cc <OSFlagPend+0x210>
    3710:	0000b606 	br	39ec <OSFlagPend+0x430>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
    3714:	e0bffc17 	ldw	r2,-16(fp)
    3718:	10c0020b 	ldhu	r3,8(r2)
    371c:	e0bffd0b 	ldhu	r2,-12(fp)
    3720:	1884703a 	and	r2,r3,r2
    3724:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    3728:	e0ffe78b 	ldhu	r3,-98(fp)
    372c:	e0bffd0b 	ldhu	r2,-12(fp)
    3730:	1880191e 	bne	r3,r2,3798 <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    3734:	e0bfe503 	ldbu	r2,-108(fp)
    3738:	10800058 	cmpnei	r2,r2,1
    373c:	1000091e 	bne	r2,zero,3764 <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    3740:	e0bffc17 	ldw	r2,-16(fp)
    3744:	1080020b 	ldhu	r2,8(r2)
    3748:	1007883a 	mov	r3,r2
    374c:	e0bfe78b 	ldhu	r2,-98(fp)
    3750:	0084303a 	nor	r2,zero,r2
    3754:	1884703a 	and	r2,r3,r2
    3758:	1007883a 	mov	r3,r2
    375c:	e0bffc17 	ldw	r2,-16(fp)
    3760:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    3764:	00800074 	movhi	r2,1
    3768:	108f6a04 	addi	r2,r2,15784
    376c:	10800017 	ldw	r2,0(r2)
    3770:	e0ffe78b 	ldhu	r3,-98(fp)
    3774:	10c00b0d 	sth	r3,44(r2)
    3778:	e0bfe617 	ldw	r2,-104(fp)
    377c:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3780:	e0bfea17 	ldw	r2,-88(fp)
    3784:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    3788:	e0800217 	ldw	r2,8(fp)
    378c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    3790:	e0bfe78b 	ldhu	r2,-98(fp)
    3794:	00010006 	br	3b98 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    3798:	e1bffd0b 	ldhu	r6,-12(fp)
    379c:	e0fffe03 	ldbu	r3,-8(fp)
    37a0:	e0bfff0b 	ldhu	r2,-4(fp)
    37a4:	e17ff704 	addi	r5,fp,-36
    37a8:	d8800015 	stw	r2,0(sp)
    37ac:	e13ffc17 	ldw	r4,-16(fp)
    37b0:	180f883a 	mov	r7,r3
    37b4:	00040600 	call	4060 <OS_FlagBlock>
    37b8:	e0bfe617 	ldw	r2,-104(fp)
    37bc:	e0bfeb15 	stw	r2,-84(fp)
    37c0:	e0bfeb17 	ldw	r2,-84(fp)
    37c4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    37c8:	00009206 	br	3a14 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
    37cc:	e0bffc17 	ldw	r2,-16(fp)
    37d0:	10c0020b 	ldhu	r3,8(r2)
    37d4:	e0bffd0b 	ldhu	r2,-12(fp)
    37d8:	1884703a 	and	r2,r3,r2
    37dc:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    37e0:	e0bfe78b 	ldhu	r2,-98(fp)
    37e4:	10001926 	beq	r2,zero,384c <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    37e8:	e0bfe503 	ldbu	r2,-108(fp)
    37ec:	10800058 	cmpnei	r2,r2,1
    37f0:	1000091e 	bne	r2,zero,3818 <OSFlagPend+0x25c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    37f4:	e0bffc17 	ldw	r2,-16(fp)
    37f8:	1080020b 	ldhu	r2,8(r2)
    37fc:	1007883a 	mov	r3,r2
    3800:	e0bfe78b 	ldhu	r2,-98(fp)
    3804:	0084303a 	nor	r2,zero,r2
    3808:	1884703a 	and	r2,r3,r2
    380c:	1007883a 	mov	r3,r2
    3810:	e0bffc17 	ldw	r2,-16(fp)
    3814:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    3818:	00800074 	movhi	r2,1
    381c:	108f6a04 	addi	r2,r2,15784
    3820:	10800017 	ldw	r2,0(r2)
    3824:	e0ffe78b 	ldhu	r3,-98(fp)
    3828:	10c00b0d 	sth	r3,44(r2)
    382c:	e0bfe617 	ldw	r2,-104(fp)
    3830:	e0bfec15 	stw	r2,-80(fp)
    3834:	e0bfec17 	ldw	r2,-80(fp)
    3838:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    383c:	e0800217 	ldw	r2,8(fp)
    3840:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    3844:	e0bfe78b 	ldhu	r2,-98(fp)
    3848:	0000d306 	br	3b98 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    384c:	e1bffd0b 	ldhu	r6,-12(fp)
    3850:	e0fffe03 	ldbu	r3,-8(fp)
    3854:	e0bfff0b 	ldhu	r2,-4(fp)
    3858:	e17ff704 	addi	r5,fp,-36
    385c:	d8800015 	stw	r2,0(sp)
    3860:	e13ffc17 	ldw	r4,-16(fp)
    3864:	180f883a 	mov	r7,r3
    3868:	00040600 	call	4060 <OS_FlagBlock>
    386c:	e0bfe617 	ldw	r2,-104(fp)
    3870:	e0bfed15 	stw	r2,-76(fp)
    3874:	e0bfed17 	ldw	r2,-76(fp)
    3878:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    387c:	00006506 	br	3a14 <OSFlagPend+0x458>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    3880:	e0bffc17 	ldw	r2,-16(fp)
    3884:	1080020b 	ldhu	r2,8(r2)
    3888:	0084303a 	nor	r2,zero,r2
    388c:	1007883a 	mov	r3,r2
    3890:	e0bffd0b 	ldhu	r2,-12(fp)
    3894:	1884703a 	and	r2,r3,r2
    3898:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    389c:	e0ffe78b 	ldhu	r3,-98(fp)
    38a0:	e0bffd0b 	ldhu	r2,-12(fp)
    38a4:	1880171e 	bne	r3,r2,3904 <OSFlagPend+0x348>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    38a8:	e0bfe503 	ldbu	r2,-108(fp)
    38ac:	10800058 	cmpnei	r2,r2,1
    38b0:	1000071e 	bne	r2,zero,38d0 <OSFlagPend+0x314>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    38b4:	e0bffc17 	ldw	r2,-16(fp)
    38b8:	10c0020b 	ldhu	r3,8(r2)
    38bc:	e0bfe78b 	ldhu	r2,-98(fp)
    38c0:	1884b03a 	or	r2,r3,r2
    38c4:	1007883a 	mov	r3,r2
    38c8:	e0bffc17 	ldw	r2,-16(fp)
    38cc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    38d0:	00800074 	movhi	r2,1
    38d4:	108f6a04 	addi	r2,r2,15784
    38d8:	10800017 	ldw	r2,0(r2)
    38dc:	e0ffe78b 	ldhu	r3,-98(fp)
    38e0:	10c00b0d 	sth	r3,44(r2)
    38e4:	e0bfe617 	ldw	r2,-104(fp)
    38e8:	e0bfee15 	stw	r2,-72(fp)
    38ec:	e0bfee17 	ldw	r2,-72(fp)
    38f0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    38f4:	e0800217 	ldw	r2,8(fp)
    38f8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    38fc:	e0bfe78b 	ldhu	r2,-98(fp)
    3900:	0000a506 	br	3b98 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    3904:	e1bffd0b 	ldhu	r6,-12(fp)
    3908:	e0fffe03 	ldbu	r3,-8(fp)
    390c:	e0bfff0b 	ldhu	r2,-4(fp)
    3910:	e17ff704 	addi	r5,fp,-36
    3914:	d8800015 	stw	r2,0(sp)
    3918:	e13ffc17 	ldw	r4,-16(fp)
    391c:	180f883a 	mov	r7,r3
    3920:	00040600 	call	4060 <OS_FlagBlock>
    3924:	e0bfe617 	ldw	r2,-104(fp)
    3928:	e0bfef15 	stw	r2,-68(fp)
    392c:	e0bfef17 	ldw	r2,-68(fp)
    3930:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    3934:	00003706 	br	3a14 <OSFlagPend+0x458>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    3938:	e0bffc17 	ldw	r2,-16(fp)
    393c:	1080020b 	ldhu	r2,8(r2)
    3940:	0084303a 	nor	r2,zero,r2
    3944:	1007883a 	mov	r3,r2
    3948:	e0bffd0b 	ldhu	r2,-12(fp)
    394c:	1884703a 	and	r2,r3,r2
    3950:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    3954:	e0bfe78b 	ldhu	r2,-98(fp)
    3958:	10001726 	beq	r2,zero,39b8 <OSFlagPend+0x3fc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    395c:	e0bfe503 	ldbu	r2,-108(fp)
    3960:	10800058 	cmpnei	r2,r2,1
    3964:	1000071e 	bne	r2,zero,3984 <OSFlagPend+0x3c8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    3968:	e0bffc17 	ldw	r2,-16(fp)
    396c:	10c0020b 	ldhu	r3,8(r2)
    3970:	e0bfe78b 	ldhu	r2,-98(fp)
    3974:	1884b03a 	or	r2,r3,r2
    3978:	1007883a 	mov	r3,r2
    397c:	e0bffc17 	ldw	r2,-16(fp)
    3980:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    3984:	00800074 	movhi	r2,1
    3988:	108f6a04 	addi	r2,r2,15784
    398c:	10800017 	ldw	r2,0(r2)
    3990:	e0ffe78b 	ldhu	r3,-98(fp)
    3994:	10c00b0d 	sth	r3,44(r2)
    3998:	e0bfe617 	ldw	r2,-104(fp)
    399c:	e0bff015 	stw	r2,-64(fp)
    39a0:	e0bff017 	ldw	r2,-64(fp)
    39a4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    39a8:	e0800217 	ldw	r2,8(fp)
    39ac:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    39b0:	e0bfe78b 	ldhu	r2,-98(fp)
    39b4:	00007806 	br	3b98 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    39b8:	e1bffd0b 	ldhu	r6,-12(fp)
    39bc:	e0fffe03 	ldbu	r3,-8(fp)
    39c0:	e0bfff0b 	ldhu	r2,-4(fp)
    39c4:	e17ff704 	addi	r5,fp,-36
    39c8:	d8800015 	stw	r2,0(sp)
    39cc:	e13ffc17 	ldw	r4,-16(fp)
    39d0:	180f883a 	mov	r7,r3
    39d4:	00040600 	call	4060 <OS_FlagBlock>
    39d8:	e0bfe617 	ldw	r2,-104(fp)
    39dc:	e0bff115 	stw	r2,-60(fp)
    39e0:	e0bff117 	ldw	r2,-60(fp)
    39e4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    39e8:	00000a06 	br	3a14 <OSFlagPend+0x458>
    39ec:	e0bfe617 	ldw	r2,-104(fp)
    39f0:	e0bff215 	stw	r2,-56(fp)
    39f4:	e0bff217 	ldw	r2,-56(fp)
    39f8:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    39fc:	e03fe78d 	sth	zero,-98(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
    3a00:	e0800217 	ldw	r2,8(fp)
    3a04:	00c01bc4 	movi	r3,111
    3a08:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
    3a0c:	e0bfe78b 	ldhu	r2,-98(fp)
    3a10:	00006106 	br	3b98 <OSFlagPend+0x5dc>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
    3a14:	00024380 	call	2438 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3a18:	0005303a 	rdctl	r2,status
    3a1c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3a20:	e0fff317 	ldw	r3,-52(fp)
    3a24:	00bfff84 	movi	r2,-2
    3a28:	1884703a 	and	r2,r3,r2
    3a2c:	1001703a 	wrctl	status,r2
  
  return context;
    3a30:	e0bff317 	ldw	r2,-52(fp)
    OS_ENTER_CRITICAL();
    3a34:	e0bfe615 	stw	r2,-104(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
    3a38:	00800074 	movhi	r2,1
    3a3c:	108f6a04 	addi	r2,r2,15784
    3a40:	10800017 	ldw	r2,0(r2)
    3a44:	10800c43 	ldbu	r2,49(r2)
    3a48:	10803fcc 	andi	r2,r2,255
    3a4c:	10002226 	beq	r2,zero,3ad8 <OSFlagPend+0x51c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
    3a50:	00800074 	movhi	r2,1
    3a54:	108f6a04 	addi	r2,r2,15784
    3a58:	10800017 	ldw	r2,0(r2)
    3a5c:	10800c43 	ldbu	r2,49(r2)
    3a60:	e0bfe805 	stb	r2,-96(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    3a64:	00800074 	movhi	r2,1
    3a68:	108f6a04 	addi	r2,r2,15784
    3a6c:	10800017 	ldw	r2,0(r2)
    3a70:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
    3a74:	e0bff704 	addi	r2,fp,-36
    3a78:	1009883a 	mov	r4,r2
    3a7c:	00044180 	call	4418 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
    3a80:	00800074 	movhi	r2,1
    3a84:	108f6a04 	addi	r2,r2,15784
    3a88:	10800017 	ldw	r2,0(r2)
    3a8c:	10000c05 	stb	zero,48(r2)
    3a90:	e0bfe617 	ldw	r2,-104(fp)
    3a94:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3a98:	e0bff417 	ldw	r2,-48(fp)
    3a9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
    3aa0:	e03fe78d 	sth	zero,-98(fp)
        switch (pend_stat) {
    3aa4:	e0bfe803 	ldbu	r2,-96(fp)
    3aa8:	108000a0 	cmpeqi	r2,r2,2
    3aac:	10000426 	beq	r2,zero,3ac0 <OSFlagPend+0x504>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
    3ab0:	e0800217 	ldw	r2,8(fp)
    3ab4:	00c00384 	movi	r3,14
    3ab8:	10c00005 	stb	r3,0(r2)
                 break;
    3abc:	00000406 	br	3ad0 <OSFlagPend+0x514>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
    3ac0:	e0800217 	ldw	r2,8(fp)
    3ac4:	00c00284 	movi	r3,10
    3ac8:	10c00005 	stb	r3,0(r2)
                 break;
    3acc:	0001883a 	nop
        }
        return (flags_rdy);
    3ad0:	e0bfe78b 	ldhu	r2,-98(fp)
    3ad4:	00003006 	br	3b98 <OSFlagPend+0x5dc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
    3ad8:	00800074 	movhi	r2,1
    3adc:	108f6a04 	addi	r2,r2,15784
    3ae0:	10800017 	ldw	r2,0(r2)
    3ae4:	10800b0b 	ldhu	r2,44(r2)
    3ae8:	e0bfe78d 	sth	r2,-98(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
    3aec:	e0bfe503 	ldbu	r2,-108(fp)
    3af0:	10800058 	cmpnei	r2,r2,1
    3af4:	1000211e 	bne	r2,zero,3b7c <OSFlagPend+0x5c0>
        switch (wait_type) {
    3af8:	e0bffe03 	ldbu	r2,-8(fp)
    3afc:	10001616 	blt	r2,zero,3b58 <OSFlagPend+0x59c>
    3b00:	10c00090 	cmplti	r3,r2,2
    3b04:	18000c1e 	bne	r3,zero,3b38 <OSFlagPend+0x57c>
    3b08:	10800108 	cmpgei	r2,r2,4
    3b0c:	1000121e 	bne	r2,zero,3b58 <OSFlagPend+0x59c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
    3b10:	e0bffc17 	ldw	r2,-16(fp)
    3b14:	1080020b 	ldhu	r2,8(r2)
    3b18:	1007883a 	mov	r3,r2
    3b1c:	e0bfe78b 	ldhu	r2,-98(fp)
    3b20:	0084303a 	nor	r2,zero,r2
    3b24:	1884703a 	and	r2,r3,r2
    3b28:	1007883a 	mov	r3,r2
    3b2c:	e0bffc17 	ldw	r2,-16(fp)
    3b30:	10c0020d 	sth	r3,8(r2)
                 break;
    3b34:	00001106 	br	3b7c <OSFlagPend+0x5c0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
    3b38:	e0bffc17 	ldw	r2,-16(fp)
    3b3c:	10c0020b 	ldhu	r3,8(r2)
    3b40:	e0bfe78b 	ldhu	r2,-98(fp)
    3b44:	1884b03a 	or	r2,r3,r2
    3b48:	1007883a 	mov	r3,r2
    3b4c:	e0bffc17 	ldw	r2,-16(fp)
    3b50:	10c0020d 	sth	r3,8(r2)
                 break;
    3b54:	00000906 	br	3b7c <OSFlagPend+0x5c0>
    3b58:	e0bfe617 	ldw	r2,-104(fp)
    3b5c:	e0bff515 	stw	r2,-44(fp)
    3b60:	e0bff517 	ldw	r2,-44(fp)
    3b64:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    3b68:	e0800217 	ldw	r2,8(fp)
    3b6c:	00c01bc4 	movi	r3,111
    3b70:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    3b74:	0005883a 	mov	r2,zero
    3b78:	00000706 	br	3b98 <OSFlagPend+0x5dc>
    3b7c:	e0bfe617 	ldw	r2,-104(fp)
    3b80:	e0bff615 	stw	r2,-40(fp)
    3b84:	e0bff617 	ldw	r2,-40(fp)
    3b88:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
    3b8c:	e0800217 	ldw	r2,8(fp)
    3b90:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
    3b94:	e0bfe78b 	ldhu	r2,-98(fp)
}
    3b98:	e037883a 	mov	sp,fp
    3b9c:	dfc00117 	ldw	ra,4(sp)
    3ba0:	df000017 	ldw	fp,0(sp)
    3ba4:	dec00204 	addi	sp,sp,8
    3ba8:	f800283a 	ret

00003bac <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
    3bac:	defffb04 	addi	sp,sp,-20
    3bb0:	df000415 	stw	fp,16(sp)
    3bb4:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    3bb8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3bbc:	0005303a 	rdctl	r2,status
    3bc0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3bc4:	e0fffe17 	ldw	r3,-8(fp)
    3bc8:	00bfff84 	movi	r2,-2
    3bcc:	1884703a 	and	r2,r3,r2
    3bd0:	1001703a 	wrctl	status,r2
  
  return context;
    3bd4:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    3bd8:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
    3bdc:	00800074 	movhi	r2,1
    3be0:	108f6a04 	addi	r2,r2,15784
    3be4:	10800017 	ldw	r2,0(r2)
    3be8:	10800b0b 	ldhu	r2,44(r2)
    3bec:	e0bffd0d 	sth	r2,-12(fp)
    3bf0:	e0bffc17 	ldw	r2,-16(fp)
    3bf4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3bf8:	e0bfff17 	ldw	r2,-4(fp)
    3bfc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
    3c00:	e0bffd0b 	ldhu	r2,-12(fp)
}
    3c04:	e037883a 	mov	sp,fp
    3c08:	df000017 	ldw	fp,0(sp)
    3c0c:	dec00104 	addi	sp,sp,4
    3c10:	f800283a 	ret

00003c14 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
    3c14:	deffef04 	addi	sp,sp,-68
    3c18:	dfc01015 	stw	ra,64(sp)
    3c1c:	df000f15 	stw	fp,60(sp)
    3c20:	df000f04 	addi	fp,sp,60
    3c24:	e13ffc15 	stw	r4,-16(fp)
    3c28:	2807883a 	mov	r3,r5
    3c2c:	3005883a 	mov	r2,r6
    3c30:	e1ffff15 	stw	r7,-4(fp)
    3c34:	e0fffd0d 	sth	r3,-12(fp)
    3c38:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
    3c3c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    3c40:	e0bfff17 	ldw	r2,-4(fp)
    3c44:	1000021e 	bne	r2,zero,3c50 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
    3c48:	0005883a 	mov	r2,zero
    3c4c:	0000ce06 	br	3f88 <OSFlagPost+0x374>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
    3c50:	e0bffc17 	ldw	r2,-16(fp)
    3c54:	1000051e 	bne	r2,zero,3c6c <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    3c58:	e0bfff17 	ldw	r2,-4(fp)
    3c5c:	00c01b84 	movi	r3,110
    3c60:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    3c64:	0005883a 	mov	r2,zero
    3c68:	0000c706 	br	3f88 <OSFlagPost+0x374>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
    3c6c:	e0bffc17 	ldw	r2,-16(fp)
    3c70:	10800003 	ldbu	r2,0(r2)
    3c74:	10803fcc 	andi	r2,r2,255
    3c78:	10800160 	cmpeqi	r2,r2,5
    3c7c:	1000051e 	bne	r2,zero,3c94 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
    3c80:	e0bfff17 	ldw	r2,-4(fp)
    3c84:	00c00044 	movi	r3,1
    3c88:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    3c8c:	0005883a 	mov	r2,zero
    3c90:	0000bd06 	br	3f88 <OSFlagPost+0x374>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3c94:	0005303a 	rdctl	r2,status
    3c98:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3c9c:	e0fff617 	ldw	r3,-40(fp)
    3ca0:	00bfff84 	movi	r2,-2
    3ca4:	1884703a 	and	r2,r3,r2
    3ca8:	1001703a 	wrctl	status,r2
  
  return context;
    3cac:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    3cb0:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
    3cb4:	e0bffe03 	ldbu	r2,-8(fp)
    3cb8:	10000326 	beq	r2,zero,3cc8 <OSFlagPost+0xb4>
    3cbc:	10800060 	cmpeqi	r2,r2,1
    3cc0:	10000b1e 	bne	r2,zero,3cf0 <OSFlagPost+0xdc>
    3cc4:	00001206 	br	3d10 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
    3cc8:	e0bffc17 	ldw	r2,-16(fp)
    3ccc:	1080020b 	ldhu	r2,8(r2)
    3cd0:	1007883a 	mov	r3,r2
    3cd4:	e0bffd0b 	ldhu	r2,-12(fp)
    3cd8:	0084303a 	nor	r2,zero,r2
    3cdc:	1884703a 	and	r2,r3,r2
    3ce0:	1007883a 	mov	r3,r2
    3ce4:	e0bffc17 	ldw	r2,-16(fp)
    3ce8:	10c0020d 	sth	r3,8(r2)
             break;
    3cec:	00001106 	br	3d34 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
    3cf0:	e0bffc17 	ldw	r2,-16(fp)
    3cf4:	10c0020b 	ldhu	r3,8(r2)
    3cf8:	e0bffd0b 	ldhu	r2,-12(fp)
    3cfc:	1884b03a 	or	r2,r3,r2
    3d00:	1007883a 	mov	r3,r2
    3d04:	e0bffc17 	ldw	r2,-16(fp)
    3d08:	10c0020d 	sth	r3,8(r2)
             break;
    3d0c:	00000906 	br	3d34 <OSFlagPost+0x120>
    3d10:	e0bff317 	ldw	r2,-52(fp)
    3d14:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3d18:	e0bff717 	ldw	r2,-36(fp)
    3d1c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
    3d20:	e0bfff17 	ldw	r2,-4(fp)
    3d24:	00c01c44 	movi	r3,113
    3d28:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
    3d2c:	0005883a 	mov	r2,zero
    3d30:	00009506 	br	3f88 <OSFlagPost+0x374>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    3d34:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    3d38:	e0bffc17 	ldw	r2,-16(fp)
    3d3c:	10800117 	ldw	r2,4(r2)
    3d40:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    3d44:	00007406 	br	3f18 <OSFlagPost+0x304>
        switch (pnode->OSFlagNodeWaitType) {
    3d48:	e0bff117 	ldw	r2,-60(fp)
    3d4c:	10800483 	ldbu	r2,18(r2)
    3d50:	10803fcc 	andi	r2,r2,255
    3d54:	10c00060 	cmpeqi	r3,r2,1
    3d58:	18004d1e 	bne	r3,zero,3e90 <OSFlagPost+0x27c>
    3d5c:	10c00088 	cmpgei	r3,r2,2
    3d60:	1800021e 	bne	r3,zero,3d6c <OSFlagPost+0x158>
    3d64:	10003126 	beq	r2,zero,3e2c <OSFlagPost+0x218>
    3d68:	00005f06 	br	3ee8 <OSFlagPost+0x2d4>
    3d6c:	10c000a0 	cmpeqi	r3,r2,2
    3d70:	1800031e 	bne	r3,zero,3d80 <OSFlagPost+0x16c>
    3d74:	108000e0 	cmpeqi	r2,r2,3
    3d78:	1000181e 	bne	r2,zero,3ddc <OSFlagPost+0x1c8>
    3d7c:	00005a06 	br	3ee8 <OSFlagPost+0x2d4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    3d80:	e0bffc17 	ldw	r2,-16(fp)
    3d84:	10c0020b 	ldhu	r3,8(r2)
    3d88:	e0bff117 	ldw	r2,-60(fp)
    3d8c:	1080040b 	ldhu	r2,16(r2)
    3d90:	1884703a 	and	r2,r3,r2
    3d94:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    3d98:	e0bff117 	ldw	r2,-60(fp)
    3d9c:	1080040b 	ldhu	r2,16(r2)
    3da0:	10ffffcc 	andi	r3,r2,65535
    3da4:	e0bff40b 	ldhu	r2,-48(fp)
    3da8:	18800b1e 	bne	r3,r2,3dd8 <OSFlagPost+0x1c4>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    3dac:	e0bff40b 	ldhu	r2,-48(fp)
    3db0:	e13ff117 	ldw	r4,-60(fp)
    3db4:	100b883a 	mov	r5,r2
    3db8:	00043080 	call	4308 <OS_FlagTaskRdy>
    3dbc:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
    3dc0:	e0bff483 	ldbu	r2,-46(fp)
    3dc4:	10800058 	cmpnei	r2,r2,1
    3dc8:	1000031e 	bne	r2,zero,3dd8 <OSFlagPost+0x1c4>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    3dcc:	00800044 	movi	r2,1
    3dd0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    3dd4:	00004d06 	br	3f0c <OSFlagPost+0x2f8>
    3dd8:	00004c06 	br	3f0c <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    3ddc:	e0bffc17 	ldw	r2,-16(fp)
    3de0:	10c0020b 	ldhu	r3,8(r2)
    3de4:	e0bff117 	ldw	r2,-60(fp)
    3de8:	1080040b 	ldhu	r2,16(r2)
    3dec:	1884703a 	and	r2,r3,r2
    3df0:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    3df4:	e0bff40b 	ldhu	r2,-48(fp)
    3df8:	10000b26 	beq	r2,zero,3e28 <OSFlagPost+0x214>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    3dfc:	e0bff40b 	ldhu	r2,-48(fp)
    3e00:	e13ff117 	ldw	r4,-60(fp)
    3e04:	100b883a 	mov	r5,r2
    3e08:	00043080 	call	4308 <OS_FlagTaskRdy>
    3e0c:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
    3e10:	e0bff483 	ldbu	r2,-46(fp)
    3e14:	10800058 	cmpnei	r2,r2,1
    3e18:	1000031e 	bne	r2,zero,3e28 <OSFlagPost+0x214>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    3e1c:	00800044 	movi	r2,1
    3e20:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    3e24:	00003906 	br	3f0c <OSFlagPost+0x2f8>
    3e28:	00003806 	br	3f0c <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    3e2c:	e0bffc17 	ldw	r2,-16(fp)
    3e30:	1080020b 	ldhu	r2,8(r2)
    3e34:	0084303a 	nor	r2,zero,r2
    3e38:	1007883a 	mov	r3,r2
    3e3c:	e0bff117 	ldw	r2,-60(fp)
    3e40:	1080040b 	ldhu	r2,16(r2)
    3e44:	1884703a 	and	r2,r3,r2
    3e48:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    3e4c:	e0bff117 	ldw	r2,-60(fp)
    3e50:	1080040b 	ldhu	r2,16(r2)
    3e54:	10ffffcc 	andi	r3,r2,65535
    3e58:	e0bff40b 	ldhu	r2,-48(fp)
    3e5c:	18800b1e 	bne	r3,r2,3e8c <OSFlagPost+0x278>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    3e60:	e0bff40b 	ldhu	r2,-48(fp)
    3e64:	e13ff117 	ldw	r4,-60(fp)
    3e68:	100b883a 	mov	r5,r2
    3e6c:	00043080 	call	4308 <OS_FlagTaskRdy>
    3e70:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
    3e74:	e0bff483 	ldbu	r2,-46(fp)
    3e78:	10800058 	cmpnei	r2,r2,1
    3e7c:	1000031e 	bne	r2,zero,3e8c <OSFlagPost+0x278>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    3e80:	00800044 	movi	r2,1
    3e84:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    3e88:	00002006 	br	3f0c <OSFlagPost+0x2f8>
    3e8c:	00001f06 	br	3f0c <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    3e90:	e0bffc17 	ldw	r2,-16(fp)
    3e94:	1080020b 	ldhu	r2,8(r2)
    3e98:	0084303a 	nor	r2,zero,r2
    3e9c:	1007883a 	mov	r3,r2
    3ea0:	e0bff117 	ldw	r2,-60(fp)
    3ea4:	1080040b 	ldhu	r2,16(r2)
    3ea8:	1884703a 	and	r2,r3,r2
    3eac:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    3eb0:	e0bff40b 	ldhu	r2,-48(fp)
    3eb4:	10000b26 	beq	r2,zero,3ee4 <OSFlagPost+0x2d0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    3eb8:	e0bff40b 	ldhu	r2,-48(fp)
    3ebc:	e13ff117 	ldw	r4,-60(fp)
    3ec0:	100b883a 	mov	r5,r2
    3ec4:	00043080 	call	4308 <OS_FlagTaskRdy>
    3ec8:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
    3ecc:	e0bff483 	ldbu	r2,-46(fp)
    3ed0:	10800058 	cmpnei	r2,r2,1
    3ed4:	1000031e 	bne	r2,zero,3ee4 <OSFlagPost+0x2d0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    3ed8:	00800044 	movi	r2,1
    3edc:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    3ee0:	00000a06 	br	3f0c <OSFlagPost+0x2f8>
    3ee4:	00000906 	br	3f0c <OSFlagPost+0x2f8>
    3ee8:	e0bff317 	ldw	r2,-52(fp)
    3eec:	e0bff815 	stw	r2,-32(fp)
    3ef0:	e0bff817 	ldw	r2,-32(fp)
    3ef4:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    3ef8:	e0bfff17 	ldw	r2,-4(fp)
    3efc:	00c01bc4 	movi	r3,111
    3f00:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    3f04:	0005883a 	mov	r2,zero
    3f08:	00001f06 	br	3f88 <OSFlagPost+0x374>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    3f0c:	e0bff117 	ldw	r2,-60(fp)
    3f10:	10800017 	ldw	r2,0(r2)
    3f14:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    3f18:	e0bff117 	ldw	r2,-60(fp)
    3f1c:	103f8a1e 	bne	r2,zero,3d48 <OSFlagPost+0x134>
    3f20:	e0bff317 	ldw	r2,-52(fp)
    3f24:	e0bff915 	stw	r2,-28(fp)
    3f28:	e0bff917 	ldw	r2,-28(fp)
    3f2c:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
    3f30:	e0bff203 	ldbu	r2,-56(fp)
    3f34:	10800058 	cmpnei	r2,r2,1
    3f38:	1000011e 	bne	r2,zero,3f40 <OSFlagPost+0x32c>
        OS_Sched();
    3f3c:	00024380 	call	2438 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3f40:	0005303a 	rdctl	r2,status
    3f44:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3f48:	e0fffa17 	ldw	r3,-24(fp)
    3f4c:	00bfff84 	movi	r2,-2
    3f50:	1884703a 	and	r2,r3,r2
    3f54:	1001703a 	wrctl	status,r2
  
  return context;
    3f58:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    3f5c:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
    3f60:	e0bffc17 	ldw	r2,-16(fp)
    3f64:	1080020b 	ldhu	r2,8(r2)
    3f68:	e0bff50d 	sth	r2,-44(fp)
    3f6c:	e0bff317 	ldw	r2,-52(fp)
    3f70:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3f74:	e0bffb17 	ldw	r2,-20(fp)
    3f78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
    3f7c:	e0bfff17 	ldw	r2,-4(fp)
    3f80:	10000005 	stb	zero,0(r2)
    return (flags_cur);
    3f84:	e0bff50b 	ldhu	r2,-44(fp)
}
    3f88:	e037883a 	mov	sp,fp
    3f8c:	dfc00117 	ldw	ra,4(sp)
    3f90:	df000017 	ldw	fp,0(sp)
    3f94:	dec00204 	addi	sp,sp,8
    3f98:	f800283a 	ret

00003f9c <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
    3f9c:	defff904 	addi	sp,sp,-28
    3fa0:	df000615 	stw	fp,24(sp)
    3fa4:	df000604 	addi	fp,sp,24
    3fa8:	e13ffe15 	stw	r4,-8(fp)
    3fac:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
    3fb0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
    3fb4:	e0bfff17 	ldw	r2,-4(fp)
    3fb8:	1000021e 	bne	r2,zero,3fc4 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
    3fbc:	0005883a 	mov	r2,zero
    3fc0:	00002306 	br	4050 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
    3fc4:	e0bffe17 	ldw	r2,-8(fp)
    3fc8:	1000051e 	bne	r2,zero,3fe0 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    3fcc:	e0bfff17 	ldw	r2,-4(fp)
    3fd0:	00c01b84 	movi	r3,110
    3fd4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    3fd8:	0005883a 	mov	r2,zero
    3fdc:	00001c06 	br	4050 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
    3fe0:	e0bffe17 	ldw	r2,-8(fp)
    3fe4:	10800003 	ldbu	r2,0(r2)
    3fe8:	10803fcc 	andi	r2,r2,255
    3fec:	10800160 	cmpeqi	r2,r2,5
    3ff0:	1000051e 	bne	r2,zero,4008 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    3ff4:	e0bfff17 	ldw	r2,-4(fp)
    3ff8:	00c00044 	movi	r3,1
    3ffc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    4000:	0005883a 	mov	r2,zero
    4004:	00001206 	br	4050 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4008:	0005303a 	rdctl	r2,status
    400c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4010:	e0fffc17 	ldw	r3,-16(fp)
    4014:	00bfff84 	movi	r2,-2
    4018:	1884703a 	and	r2,r3,r2
    401c:	1001703a 	wrctl	status,r2
  
  return context;
    4020:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    4024:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
    4028:	e0bffe17 	ldw	r2,-8(fp)
    402c:	1080020b 	ldhu	r2,8(r2)
    4030:	e0bffb0d 	sth	r2,-20(fp)
    4034:	e0bffa17 	ldw	r2,-24(fp)
    4038:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    403c:	e0bffd17 	ldw	r2,-12(fp)
    4040:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    4044:	e0bfff17 	ldw	r2,-4(fp)
    4048:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
    404c:	e0bffb0b 	ldhu	r2,-20(fp)
}
    4050:	e037883a 	mov	sp,fp
    4054:	df000017 	ldw	fp,0(sp)
    4058:	dec00104 	addi	sp,sp,4
    405c:	f800283a 	ret

00004060 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
    4060:	defff804 	addi	sp,sp,-32
    4064:	df000715 	stw	fp,28(sp)
    4068:	df000704 	addi	fp,sp,28
    406c:	e13ffb15 	stw	r4,-20(fp)
    4070:	e17ffc15 	stw	r5,-16(fp)
    4074:	3009883a 	mov	r4,r6
    4078:	3807883a 	mov	r3,r7
    407c:	e0800117 	ldw	r2,4(fp)
    4080:	e13ffd0d 	sth	r4,-12(fp)
    4084:	e0fffe05 	stb	r3,-8(fp)
    4088:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
    408c:	00800074 	movhi	r2,1
    4090:	108f6a04 	addi	r2,r2,15784
    4094:	10c00017 	ldw	r3,0(r2)
    4098:	00800074 	movhi	r2,1
    409c:	108f6a04 	addi	r2,r2,15784
    40a0:	10800017 	ldw	r2,0(r2)
    40a4:	10800c03 	ldbu	r2,48(r2)
    40a8:	10800814 	ori	r2,r2,32
    40ac:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
    40b0:	00800074 	movhi	r2,1
    40b4:	108f6a04 	addi	r2,r2,15784
    40b8:	10800017 	ldw	r2,0(r2)
    40bc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
    40c0:	00800074 	movhi	r2,1
    40c4:	108f6a04 	addi	r2,r2,15784
    40c8:	10800017 	ldw	r2,0(r2)
    40cc:	e0ffff0b 	ldhu	r3,-4(fp)
    40d0:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
    40d4:	00800074 	movhi	r2,1
    40d8:	108f6a04 	addi	r2,r2,15784
    40dc:	10800017 	ldw	r2,0(r2)
    40e0:	e0fffc17 	ldw	r3,-16(fp)
    40e4:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
    40e8:	e0bffc17 	ldw	r2,-16(fp)
    40ec:	e0fffd0b 	ldhu	r3,-12(fp)
    40f0:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
    40f4:	e0bffc17 	ldw	r2,-16(fp)
    40f8:	e0fffe03 	ldbu	r3,-8(fp)
    40fc:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
    4100:	00800074 	movhi	r2,1
    4104:	108f6a04 	addi	r2,r2,15784
    4108:	10c00017 	ldw	r3,0(r2)
    410c:	e0bffc17 	ldw	r2,-16(fp)
    4110:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
    4114:	e0bffb17 	ldw	r2,-20(fp)
    4118:	10c00117 	ldw	r3,4(r2)
    411c:	e0bffc17 	ldw	r2,-16(fp)
    4120:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
    4124:	e0bffc17 	ldw	r2,-16(fp)
    4128:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
    412c:	e0bffc17 	ldw	r2,-16(fp)
    4130:	e0fffb17 	ldw	r3,-20(fp)
    4134:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    4138:	e0bffb17 	ldw	r2,-20(fp)
    413c:	10800117 	ldw	r2,4(r2)
    4140:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
    4144:	e0bff917 	ldw	r2,-28(fp)
    4148:	10000326 	beq	r2,zero,4158 <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
    414c:	e0bff917 	ldw	r2,-28(fp)
    4150:	e0fffc17 	ldw	r3,-16(fp)
    4154:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
    4158:	e0bffb17 	ldw	r2,-20(fp)
    415c:	e0fffc17 	ldw	r3,-16(fp)
    4160:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
    4164:	00800074 	movhi	r2,1
    4168:	108f6a04 	addi	r2,r2,15784
    416c:	10800017 	ldw	r2,0(r2)
    4170:	10800d03 	ldbu	r2,52(r2)
    4174:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    4178:	e0fffa03 	ldbu	r3,-24(fp)
    417c:	e13ffa03 	ldbu	r4,-24(fp)
    4180:	00800074 	movhi	r2,1
    4184:	108f6744 	addi	r2,r2,15773
    4188:	1105883a 	add	r2,r2,r4
    418c:	10800003 	ldbu	r2,0(r2)
    4190:	1009883a 	mov	r4,r2
    4194:	00800074 	movhi	r2,1
    4198:	108f6a04 	addi	r2,r2,15784
    419c:	10800017 	ldw	r2,0(r2)
    41a0:	10800d43 	ldbu	r2,53(r2)
    41a4:	0084303a 	nor	r2,zero,r2
    41a8:	2084703a 	and	r2,r4,r2
    41ac:	1009883a 	mov	r4,r2
    41b0:	00800074 	movhi	r2,1
    41b4:	108f6744 	addi	r2,r2,15773
    41b8:	10c5883a 	add	r2,r2,r3
    41bc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
    41c0:	e0fffa03 	ldbu	r3,-24(fp)
    41c4:	00800074 	movhi	r2,1
    41c8:	108f6744 	addi	r2,r2,15773
    41cc:	10c5883a 	add	r2,r2,r3
    41d0:	10800003 	ldbu	r2,0(r2)
    41d4:	10803fcc 	andi	r2,r2,255
    41d8:	10000e1e 	bne	r2,zero,4214 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    41dc:	00800074 	movhi	r2,1
    41e0:	108f6a04 	addi	r2,r2,15784
    41e4:	10800017 	ldw	r2,0(r2)
    41e8:	10800d83 	ldbu	r2,54(r2)
    41ec:	0084303a 	nor	r2,zero,r2
    41f0:	1007883a 	mov	r3,r2
    41f4:	00800074 	movhi	r2,1
    41f8:	108f6704 	addi	r2,r2,15772
    41fc:	10800003 	ldbu	r2,0(r2)
    4200:	1884703a 	and	r2,r3,r2
    4204:	1007883a 	mov	r3,r2
    4208:	00800074 	movhi	r2,1
    420c:	108f6704 	addi	r2,r2,15772
    4210:	10c00005 	stb	r3,0(r2)
    }
}
    4214:	e037883a 	mov	sp,fp
    4218:	df000017 	ldw	fp,0(sp)
    421c:	dec00104 	addi	sp,sp,4
    4220:	f800283a 	ret

00004224 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
    4224:	defffb04 	addi	sp,sp,-20
    4228:	dfc00415 	stw	ra,16(sp)
    422c:	df000315 	stw	fp,12(sp)
    4230:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    4234:	01000174 	movhi	r4,5
    4238:	21178204 	addi	r4,r4,24072
    423c:	0140dc04 	movi	r5,880
    4240:	00023840 	call	2384 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
    4244:	00800174 	movhi	r2,5
    4248:	10978204 	addi	r2,r2,24072
    424c:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
    4250:	00800174 	movhi	r2,5
    4254:	10978d04 	addi	r2,r2,24116
    4258:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    425c:	e03ffd0d 	sth	zero,-12(fp)
    4260:	00001306 	br	42b0 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    4264:	e0bffe17 	ldw	r2,-8(fp)
    4268:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
    426c:	e0bffe17 	ldw	r2,-8(fp)
    4270:	e0ffff17 	ldw	r3,-4(fp)
    4274:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
    4278:	e0bffe17 	ldw	r2,-8(fp)
    427c:	00c00fc4 	movi	r3,63
    4280:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    4284:	e0bffe17 	ldw	r2,-8(fp)
    4288:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
    428c:	e0bffe17 	ldw	r2,-8(fp)
    4290:	10800b04 	addi	r2,r2,44
    4294:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
    4298:	e0bfff17 	ldw	r2,-4(fp)
    429c:	10800b04 	addi	r2,r2,44
    42a0:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    42a4:	e0bffd0b 	ldhu	r2,-12(fp)
    42a8:	10800044 	addi	r2,r2,1
    42ac:	e0bffd0d 	sth	r2,-12(fp)
    42b0:	e0bffd0b 	ldhu	r2,-12(fp)
    42b4:	108004f0 	cmpltui	r2,r2,19
    42b8:	103fea1e 	bne	r2,zero,4264 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    42bc:	e0bffe17 	ldw	r2,-8(fp)
    42c0:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
    42c4:	e0bffe17 	ldw	r2,-8(fp)
    42c8:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
    42cc:	e0bffe17 	ldw	r2,-8(fp)
    42d0:	00c00fc4 	movi	r3,63
    42d4:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    42d8:	e0bffe17 	ldw	r2,-8(fp)
    42dc:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
    42e0:	00800074 	movhi	r2,1
    42e4:	108f6c04 	addi	r2,r2,15792
    42e8:	00c00174 	movhi	r3,5
    42ec:	18d78204 	addi	r3,r3,24072
    42f0:	10c00015 	stw	r3,0(r2)
#endif
}
    42f4:	e037883a 	mov	sp,fp
    42f8:	dfc00117 	ldw	ra,4(sp)
    42fc:	df000017 	ldw	fp,0(sp)
    4300:	dec00204 	addi	sp,sp,8
    4304:	f800283a 	ret

00004308 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
    4308:	defffa04 	addi	sp,sp,-24
    430c:	dfc00515 	stw	ra,20(sp)
    4310:	df000415 	stw	fp,16(sp)
    4314:	df000404 	addi	fp,sp,16
    4318:	e13ffe15 	stw	r4,-8(fp)
    431c:	2805883a 	mov	r2,r5
    4320:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
    4324:	e0bffe17 	ldw	r2,-8(fp)
    4328:	10800217 	ldw	r2,8(r2)
    432c:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
    4330:	e0bffd17 	ldw	r2,-12(fp)
    4334:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
    4338:	e0bffd17 	ldw	r2,-12(fp)
    433c:	e0ffff0b 	ldhu	r3,-4(fp)
    4340:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
    4344:	e0bffd17 	ldw	r2,-12(fp)
    4348:	10c00c03 	ldbu	r3,48(r2)
    434c:	00bff7c4 	movi	r2,-33
    4350:	1884703a 	and	r2,r3,r2
    4354:	1007883a 	mov	r3,r2
    4358:	e0bffd17 	ldw	r2,-12(fp)
    435c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
    4360:	e0bffd17 	ldw	r2,-12(fp)
    4364:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
    4368:	e0bffd17 	ldw	r2,-12(fp)
    436c:	10800c03 	ldbu	r2,48(r2)
    4370:	10803fcc 	andi	r2,r2,255
    4374:	10001f1e 	bne	r2,zero,43f4 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
    4378:	e0bffd17 	ldw	r2,-12(fp)
    437c:	10c00d83 	ldbu	r3,54(r2)
    4380:	00800074 	movhi	r2,1
    4384:	108f6704 	addi	r2,r2,15772
    4388:	10800003 	ldbu	r2,0(r2)
    438c:	1884b03a 	or	r2,r3,r2
    4390:	1007883a 	mov	r3,r2
    4394:	00800074 	movhi	r2,1
    4398:	108f6704 	addi	r2,r2,15772
    439c:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    43a0:	e0bffd17 	ldw	r2,-12(fp)
    43a4:	10800d03 	ldbu	r2,52(r2)
    43a8:	10c03fcc 	andi	r3,r2,255
    43ac:	e0bffd17 	ldw	r2,-12(fp)
    43b0:	10800d03 	ldbu	r2,52(r2)
    43b4:	11003fcc 	andi	r4,r2,255
    43b8:	00800074 	movhi	r2,1
    43bc:	108f6744 	addi	r2,r2,15773
    43c0:	1105883a 	add	r2,r2,r4
    43c4:	11000003 	ldbu	r4,0(r2)
    43c8:	e0bffd17 	ldw	r2,-12(fp)
    43cc:	10800d43 	ldbu	r2,53(r2)
    43d0:	2084b03a 	or	r2,r4,r2
    43d4:	1009883a 	mov	r4,r2
    43d8:	00800074 	movhi	r2,1
    43dc:	108f6744 	addi	r2,r2,15773
    43e0:	10c5883a 	add	r2,r2,r3
    43e4:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
    43e8:	00800044 	movi	r2,1
    43ec:	e0bffc05 	stb	r2,-16(fp)
    43f0:	00000106 	br	43f8 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
    43f4:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
    43f8:	e13ffe17 	ldw	r4,-8(fp)
    43fc:	00044180 	call	4418 <OS_FlagUnlink>
    return (sched);
    4400:	e0bffc03 	ldbu	r2,-16(fp)
}
    4404:	e037883a 	mov	sp,fp
    4408:	dfc00117 	ldw	ra,4(sp)
    440c:	df000017 	ldw	fp,0(sp)
    4410:	dec00204 	addi	sp,sp,8
    4414:	f800283a 	ret

00004418 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
    4418:	defffa04 	addi	sp,sp,-24
    441c:	df000515 	stw	fp,20(sp)
    4420:	df000504 	addi	fp,sp,20
    4424:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
    4428:	e0bfff17 	ldw	r2,-4(fp)
    442c:	10800117 	ldw	r2,4(r2)
    4430:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    4434:	e0bfff17 	ldw	r2,-4(fp)
    4438:	10800017 	ldw	r2,0(r2)
    443c:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
    4440:	e0bffb17 	ldw	r2,-20(fp)
    4444:	10000b1e 	bne	r2,zero,4474 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
    4448:	e0bfff17 	ldw	r2,-4(fp)
    444c:	10800317 	ldw	r2,12(r2)
    4450:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
    4454:	e0bffd17 	ldw	r2,-12(fp)
    4458:	e0fffc17 	ldw	r3,-16(fp)
    445c:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
    4460:	e0bffc17 	ldw	r2,-16(fp)
    4464:	10000b26 	beq	r2,zero,4494 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
    4468:	e0bffc17 	ldw	r2,-16(fp)
    446c:	10000115 	stw	zero,4(r2)
    4470:	00000806 	br	4494 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
    4474:	e0bffb17 	ldw	r2,-20(fp)
    4478:	e0fffc17 	ldw	r3,-16(fp)
    447c:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
    4480:	e0bffc17 	ldw	r2,-16(fp)
    4484:	10000326 	beq	r2,zero,4494 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
    4488:	e0bffc17 	ldw	r2,-16(fp)
    448c:	e0fffb17 	ldw	r3,-20(fp)
    4490:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
    4494:	e0bfff17 	ldw	r2,-4(fp)
    4498:	10800217 	ldw	r2,8(r2)
    449c:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
    44a0:	e0bffe17 	ldw	r2,-8(fp)
    44a4:	10000a15 	stw	zero,40(r2)
#endif
}
    44a8:	e037883a 	mov	sp,fp
    44ac:	df000017 	ldw	fp,0(sp)
    44b0:	dec00104 	addi	sp,sp,4
    44b4:	f800283a 	ret

000044b8 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
    44b8:	defff404 	addi	sp,sp,-48
    44bc:	df000b15 	stw	fp,44(sp)
    44c0:	df000b04 	addi	fp,sp,44
    44c4:	e13ffc15 	stw	r4,-16(fp)
    44c8:	e17ffd15 	stw	r5,-12(fp)
    44cc:	e1bffe15 	stw	r6,-8(fp)
    44d0:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    44d4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    44d8:	e0bfff17 	ldw	r2,-4(fp)
    44dc:	1000021e 	bne	r2,zero,44e8 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
    44e0:	0005883a 	mov	r2,zero
    44e4:	00006d06 	br	469c <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
    44e8:	e0bffc17 	ldw	r2,-16(fp)
    44ec:	1000051e 	bne	r2,zero,4504 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    44f0:	e0bfff17 	ldw	r2,-4(fp)
    44f4:	00c01884 	movi	r3,98
    44f8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    44fc:	0005883a 	mov	r2,zero
    4500:	00006606 	br	469c <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
    4504:	e0bffc17 	ldw	r2,-16(fp)
    4508:	108000cc 	andi	r2,r2,3
    450c:	10000526 	beq	r2,zero,4524 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    4510:	e0bfff17 	ldw	r2,-4(fp)
    4514:	00c01884 	movi	r3,98
    4518:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    451c:	0005883a 	mov	r2,zero
    4520:	00005e06 	br	469c <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
    4524:	e0bffd17 	ldw	r2,-12(fp)
    4528:	108000a8 	cmpgeui	r2,r2,2
    452c:	1000051e 	bne	r2,zero,4544 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
    4530:	e0bfff17 	ldw	r2,-4(fp)
    4534:	00c016c4 	movi	r3,91
    4538:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    453c:	0005883a 	mov	r2,zero
    4540:	00005606 	br	469c <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
    4544:	e0bffe17 	ldw	r2,-8(fp)
    4548:	10800128 	cmpgeui	r2,r2,4
    454c:	1000051e 	bne	r2,zero,4564 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
    4550:	e0bfff17 	ldw	r2,-4(fp)
    4554:	00c01704 	movi	r3,92
    4558:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    455c:	0005883a 	mov	r2,zero
    4560:	00004e06 	br	469c <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4564:	0005303a 	rdctl	r2,status
    4568:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    456c:	e0fffa17 	ldw	r3,-24(fp)
    4570:	00bfff84 	movi	r2,-2
    4574:	1884703a 	and	r2,r3,r2
    4578:	1001703a 	wrctl	status,r2
  
  return context;
    457c:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    4580:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
    4584:	00800074 	movhi	r2,1
    4588:	108f6404 	addi	r2,r2,15760
    458c:	10800017 	ldw	r2,0(r2)
    4590:	e0bff915 	stw	r2,-28(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
    4594:	00800074 	movhi	r2,1
    4598:	108f6404 	addi	r2,r2,15760
    459c:	10800017 	ldw	r2,0(r2)
    45a0:	10000726 	beq	r2,zero,45c0 <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
    45a4:	00800074 	movhi	r2,1
    45a8:	108f6404 	addi	r2,r2,15760
    45ac:	10800017 	ldw	r2,0(r2)
    45b0:	10c00117 	ldw	r3,4(r2)
    45b4:	00800074 	movhi	r2,1
    45b8:	108f6404 	addi	r2,r2,15760
    45bc:	10c00015 	stw	r3,0(r2)
    45c0:	e0bff817 	ldw	r2,-32(fp)
    45c4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    45c8:	e0bffb17 	ldw	r2,-20(fp)
    45cc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
    45d0:	e0bff917 	ldw	r2,-28(fp)
    45d4:	1000051e 	bne	r2,zero,45ec <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
    45d8:	e0bfff17 	ldw	r2,-4(fp)
    45dc:	00c01684 	movi	r3,90
    45e0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    45e4:	0005883a 	mov	r2,zero
    45e8:	00002c06 	br	469c <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    45ec:	e0bffc17 	ldw	r2,-16(fp)
    45f0:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
    45f4:	e0fffc17 	ldw	r3,-16(fp)
    45f8:	e0bffe17 	ldw	r2,-8(fp)
    45fc:	1885883a 	add	r2,r3,r2
    4600:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
    4604:	e03ff715 	stw	zero,-36(fp)
    4608:	00000c06 	br	463c <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
    460c:	e0bff617 	ldw	r2,-40(fp)
    4610:	e0fff517 	ldw	r3,-44(fp)
    4614:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
    4618:	e0bff517 	ldw	r2,-44(fp)
    461c:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    4620:	e0fff517 	ldw	r3,-44(fp)
    4624:	e0bffe17 	ldw	r2,-8(fp)
    4628:	1885883a 	add	r2,r3,r2
    462c:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
    4630:	e0bff717 	ldw	r2,-36(fp)
    4634:	10800044 	addi	r2,r2,1
    4638:	e0bff715 	stw	r2,-36(fp)
    463c:	e0bffd17 	ldw	r2,-12(fp)
    4640:	10bfffc4 	addi	r2,r2,-1
    4644:	e0fff717 	ldw	r3,-36(fp)
    4648:	18bff036 	bltu	r3,r2,460c <OSMemCreate+0x154>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
    464c:	e0bff617 	ldw	r2,-40(fp)
    4650:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
    4654:	e0bff917 	ldw	r2,-28(fp)
    4658:	e0fffc17 	ldw	r3,-16(fp)
    465c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
    4660:	e0bff917 	ldw	r2,-28(fp)
    4664:	e0fffc17 	ldw	r3,-16(fp)
    4668:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
    466c:	e0bff917 	ldw	r2,-28(fp)
    4670:	e0fffd17 	ldw	r3,-12(fp)
    4674:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
    4678:	e0bff917 	ldw	r2,-28(fp)
    467c:	e0fffd17 	ldw	r3,-12(fp)
    4680:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
    4684:	e0bff917 	ldw	r2,-28(fp)
    4688:	e0fffe17 	ldw	r3,-8(fp)
    468c:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
    4690:	e0bfff17 	ldw	r2,-4(fp)
    4694:	10000005 	stb	zero,0(r2)
    return (pmem);
    4698:	e0bff917 	ldw	r2,-28(fp)
}
    469c:	e037883a 	mov	sp,fp
    46a0:	df000017 	ldw	fp,0(sp)
    46a4:	dec00104 	addi	sp,sp,4
    46a8:	f800283a 	ret

000046ac <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
    46ac:	defff804 	addi	sp,sp,-32
    46b0:	df000715 	stw	fp,28(sp)
    46b4:	df000704 	addi	fp,sp,28
    46b8:	e13ffe15 	stw	r4,-8(fp)
    46bc:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    46c0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    46c4:	e0bfff17 	ldw	r2,-4(fp)
    46c8:	1000021e 	bne	r2,zero,46d4 <OSMemGet+0x28>
        return ((void *)0);
    46cc:	0005883a 	mov	r2,zero
    46d0:	00002e06 	br	478c <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
    46d4:	e0bffe17 	ldw	r2,-8(fp)
    46d8:	1000051e 	bne	r2,zero,46f0 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    46dc:	e0bfff17 	ldw	r2,-4(fp)
    46e0:	00c01804 	movi	r3,96
    46e4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    46e8:	0005883a 	mov	r2,zero
    46ec:	00002706 	br	478c <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    46f0:	0005303a 	rdctl	r2,status
    46f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    46f8:	e0fffb17 	ldw	r3,-20(fp)
    46fc:	00bfff84 	movi	r2,-2
    4700:	1884703a 	and	r2,r3,r2
    4704:	1001703a 	wrctl	status,r2
  
  return context;
    4708:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    470c:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
    4710:	e0bffe17 	ldw	r2,-8(fp)
    4714:	10800417 	ldw	r2,16(r2)
    4718:	10001426 	beq	r2,zero,476c <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
    471c:	e0bffe17 	ldw	r2,-8(fp)
    4720:	10800117 	ldw	r2,4(r2)
    4724:	e0bffa15 	stw	r2,-24(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
    4728:	e0bffa17 	ldw	r2,-24(fp)
    472c:	10c00017 	ldw	r3,0(r2)
    4730:	e0bffe17 	ldw	r2,-8(fp)
    4734:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
    4738:	e0bffe17 	ldw	r2,-8(fp)
    473c:	10800417 	ldw	r2,16(r2)
    4740:	10ffffc4 	addi	r3,r2,-1
    4744:	e0bffe17 	ldw	r2,-8(fp)
    4748:	10c00415 	stw	r3,16(r2)
    474c:	e0bff917 	ldw	r2,-28(fp)
    4750:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4754:	e0bffc17 	ldw	r2,-16(fp)
    4758:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
    475c:	e0bfff17 	ldw	r2,-4(fp)
    4760:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
    4764:	e0bffa17 	ldw	r2,-24(fp)
    4768:	00000806 	br	478c <OSMemGet+0xe0>
    476c:	e0bff917 	ldw	r2,-28(fp)
    4770:	e0bffd15 	stw	r2,-12(fp)
    4774:	e0bffd17 	ldw	r2,-12(fp)
    4778:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
    477c:	e0bfff17 	ldw	r2,-4(fp)
    4780:	00c01744 	movi	r3,93
    4784:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
    4788:	0005883a 	mov	r2,zero
}
    478c:	e037883a 	mov	sp,fp
    4790:	df000017 	ldw	fp,0(sp)
    4794:	dec00104 	addi	sp,sp,4
    4798:	f800283a 	ret

0000479c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    479c:	defff704 	addi	sp,sp,-36
    47a0:	dfc00815 	stw	ra,32(sp)
    47a4:	df000715 	stw	fp,28(sp)
    47a8:	df000704 	addi	fp,sp,28
    47ac:	e13ffd15 	stw	r4,-12(fp)
    47b0:	e17ffe15 	stw	r5,-8(fp)
    47b4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    47b8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    47bc:	e0bfff17 	ldw	r2,-4(fp)
    47c0:	1000021e 	bne	r2,zero,47cc <OSMemNameGet+0x30>
        return (0);
    47c4:	0005883a 	mov	r2,zero
    47c8:	00002d06 	br	4880 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    47cc:	e0bffd17 	ldw	r2,-12(fp)
    47d0:	1000051e 	bne	r2,zero,47e8 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    47d4:	e0bfff17 	ldw	r2,-4(fp)
    47d8:	00c01804 	movi	r3,96
    47dc:	10c00005 	stb	r3,0(r2)
        return (0);
    47e0:	0005883a 	mov	r2,zero
    47e4:	00002606 	br	4880 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    47e8:	e0bffe17 	ldw	r2,-8(fp)
    47ec:	1000051e 	bne	r2,zero,4804 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    47f0:	e0bfff17 	ldw	r2,-4(fp)
    47f4:	00c00304 	movi	r3,12
    47f8:	10c00005 	stb	r3,0(r2)
        return (0);
    47fc:	0005883a 	mov	r2,zero
    4800:	00001f06 	br	4880 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    4804:	00800074 	movhi	r2,1
    4808:	108f6904 	addi	r2,r2,15780
    480c:	10800003 	ldbu	r2,0(r2)
    4810:	10803fcc 	andi	r2,r2,255
    4814:	10000526 	beq	r2,zero,482c <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
    4818:	e0bfff17 	ldw	r2,-4(fp)
    481c:	00c00444 	movi	r3,17
    4820:	10c00005 	stb	r3,0(r2)
        return (0);
    4824:	0005883a 	mov	r2,zero
    4828:	00001506 	br	4880 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    482c:	0005303a 	rdctl	r2,status
    4830:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4834:	e0fffb17 	ldw	r3,-20(fp)
    4838:	00bfff84 	movi	r2,-2
    483c:	1884703a 	and	r2,r3,r2
    4840:	1001703a 	wrctl	status,r2
  
  return context;
    4844:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    4848:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
    484c:	e0bffd17 	ldw	r2,-12(fp)
    4850:	10800504 	addi	r2,r2,20
    4854:	e13ffe17 	ldw	r4,-8(fp)
    4858:	100b883a 	mov	r5,r2
    485c:	00025740 	call	2574 <OS_StrCopy>
    4860:	e0bffa05 	stb	r2,-24(fp)
    4864:	e0bff917 	ldw	r2,-28(fp)
    4868:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    486c:	e0bffc17 	ldw	r2,-16(fp)
    4870:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    4874:	e0bfff17 	ldw	r2,-4(fp)
    4878:	10000005 	stb	zero,0(r2)
    return (len);
    487c:	e0bffa03 	ldbu	r2,-24(fp)
}
    4880:	e037883a 	mov	sp,fp
    4884:	dfc00117 	ldw	ra,4(sp)
    4888:	df000017 	ldw	fp,0(sp)
    488c:	dec00204 	addi	sp,sp,8
    4890:	f800283a 	ret

00004894 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    4894:	defff604 	addi	sp,sp,-40
    4898:	dfc00915 	stw	ra,36(sp)
    489c:	df000815 	stw	fp,32(sp)
    48a0:	df000804 	addi	fp,sp,32
    48a4:	e13ffd15 	stw	r4,-12(fp)
    48a8:	e17ffe15 	stw	r5,-8(fp)
    48ac:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    48b0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    48b4:	e0bfff17 	ldw	r2,-4(fp)
    48b8:	1000011e 	bne	r2,zero,48c0 <OSMemNameSet+0x2c>
        return;
    48bc:	00003606 	br	4998 <OSMemNameSet+0x104>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    48c0:	e0bffd17 	ldw	r2,-12(fp)
    48c4:	1000041e 	bne	r2,zero,48d8 <OSMemNameSet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    48c8:	e0bfff17 	ldw	r2,-4(fp)
    48cc:	00c01804 	movi	r3,96
    48d0:	10c00005 	stb	r3,0(r2)
        return;
    48d4:	00003006 	br	4998 <OSMemNameSet+0x104>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    48d8:	e0bffe17 	ldw	r2,-8(fp)
    48dc:	1000041e 	bne	r2,zero,48f0 <OSMemNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
    48e0:	e0bfff17 	ldw	r2,-4(fp)
    48e4:	00c00304 	movi	r3,12
    48e8:	10c00005 	stb	r3,0(r2)
        return;
    48ec:	00002a06 	br	4998 <OSMemNameSet+0x104>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    48f0:	00800074 	movhi	r2,1
    48f4:	108f6904 	addi	r2,r2,15780
    48f8:	10800003 	ldbu	r2,0(r2)
    48fc:	10803fcc 	andi	r2,r2,255
    4900:	10000426 	beq	r2,zero,4914 <OSMemNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
    4904:	e0bfff17 	ldw	r2,-4(fp)
    4908:	00c00484 	movi	r3,18
    490c:	10c00005 	stb	r3,0(r2)
        return;
    4910:	00002106 	br	4998 <OSMemNameSet+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4914:	0005303a 	rdctl	r2,status
    4918:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    491c:	e0fffa17 	ldw	r3,-24(fp)
    4920:	00bfff84 	movi	r2,-2
    4924:	1884703a 	and	r2,r3,r2
    4928:	1001703a 	wrctl	status,r2
  
  return context;
    492c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    4930:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    4934:	e13ffe17 	ldw	r4,-8(fp)
    4938:	00025e80 	call	25e8 <OS_StrLen>
    493c:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
    4940:	e0bff903 	ldbu	r2,-28(fp)
    4944:	10800830 	cmpltui	r2,r2,32
    4948:	1000081e 	bne	r2,zero,496c <OSMemNameSet+0xd8>
    494c:	e0bff817 	ldw	r2,-32(fp)
    4950:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4954:	e0bffb17 	ldw	r2,-20(fp)
    4958:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
    495c:	e0bfff17 	ldw	r2,-4(fp)
    4960:	00c018c4 	movi	r3,99
    4964:	10c00005 	stb	r3,0(r2)
        return;
    4968:	00000b06 	br	4998 <OSMemNameSet+0x104>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    496c:	e0bffd17 	ldw	r2,-12(fp)
    4970:	10800504 	addi	r2,r2,20
    4974:	1009883a 	mov	r4,r2
    4978:	e17ffe17 	ldw	r5,-8(fp)
    497c:	00025740 	call	2574 <OS_StrCopy>
    4980:	e0bff817 	ldw	r2,-32(fp)
    4984:	e0bffc15 	stw	r2,-16(fp)
    4988:	e0bffc17 	ldw	r2,-16(fp)
    498c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    4990:	e0bfff17 	ldw	r2,-4(fp)
    4994:	10000005 	stb	zero,0(r2)
}
    4998:	e037883a 	mov	sp,fp
    499c:	dfc00117 	ldw	ra,4(sp)
    49a0:	df000017 	ldw	fp,0(sp)
    49a4:	dec00204 	addi	sp,sp,8
    49a8:	f800283a 	ret

000049ac <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
    49ac:	defff904 	addi	sp,sp,-28
    49b0:	df000615 	stw	fp,24(sp)
    49b4:	df000604 	addi	fp,sp,24
    49b8:	e13ffe15 	stw	r4,-8(fp)
    49bc:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    49c0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    49c4:	e0bffe17 	ldw	r2,-8(fp)
    49c8:	1000021e 	bne	r2,zero,49d4 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    49cc:	00801804 	movi	r2,96
    49d0:	00002806 	br	4a74 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
    49d4:	e0bfff17 	ldw	r2,-4(fp)
    49d8:	1000021e 	bne	r2,zero,49e4 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
    49dc:	008017c4 	movi	r2,95
    49e0:	00002406 	br	4a74 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    49e4:	0005303a 	rdctl	r2,status
    49e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    49ec:	e0fffb17 	ldw	r3,-20(fp)
    49f0:	00bfff84 	movi	r2,-2
    49f4:	1884703a 	and	r2,r3,r2
    49f8:	1001703a 	wrctl	status,r2
  
  return context;
    49fc:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    4a00:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
    4a04:	e0bffe17 	ldw	r2,-8(fp)
    4a08:	10c00417 	ldw	r3,16(r2)
    4a0c:	e0bffe17 	ldw	r2,-8(fp)
    4a10:	10800317 	ldw	r2,12(r2)
    4a14:	18800636 	bltu	r3,r2,4a30 <OSMemPut+0x84>
    4a18:	e0bffa17 	ldw	r2,-24(fp)
    4a1c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4a20:	e0bffc17 	ldw	r2,-16(fp)
    4a24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
    4a28:	00801784 	movi	r2,94
    4a2c:	00001106 	br	4a74 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
    4a30:	e0bffe17 	ldw	r2,-8(fp)
    4a34:	10c00117 	ldw	r3,4(r2)
    4a38:	e0bfff17 	ldw	r2,-4(fp)
    4a3c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
    4a40:	e0bffe17 	ldw	r2,-8(fp)
    4a44:	e0ffff17 	ldw	r3,-4(fp)
    4a48:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
    4a4c:	e0bffe17 	ldw	r2,-8(fp)
    4a50:	10800417 	ldw	r2,16(r2)
    4a54:	10c00044 	addi	r3,r2,1
    4a58:	e0bffe17 	ldw	r2,-8(fp)
    4a5c:	10c00415 	stw	r3,16(r2)
    4a60:	e0bffa17 	ldw	r2,-24(fp)
    4a64:	e0bffd15 	stw	r2,-12(fp)
    4a68:	e0bffd17 	ldw	r2,-12(fp)
    4a6c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
    4a70:	0005883a 	mov	r2,zero
}
    4a74:	e037883a 	mov	sp,fp
    4a78:	df000017 	ldw	fp,0(sp)
    4a7c:	dec00104 	addi	sp,sp,4
    4a80:	f800283a 	ret

00004a84 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
    4a84:	defffa04 	addi	sp,sp,-24
    4a88:	df000515 	stw	fp,20(sp)
    4a8c:	df000504 	addi	fp,sp,20
    4a90:	e13ffe15 	stw	r4,-8(fp)
    4a94:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4a98:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    4a9c:	e0bffe17 	ldw	r2,-8(fp)
    4aa0:	1000021e 	bne	r2,zero,4aac <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    4aa4:	00801804 	movi	r2,96
    4aa8:	00002c06 	br	4b5c <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
    4aac:	e0bfff17 	ldw	r2,-4(fp)
    4ab0:	1000021e 	bne	r2,zero,4abc <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
    4ab4:	00801844 	movi	r2,97
    4ab8:	00002806 	br	4b5c <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4abc:	0005303a 	rdctl	r2,status
    4ac0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4ac4:	e0fffc17 	ldw	r3,-16(fp)
    4ac8:	00bfff84 	movi	r2,-2
    4acc:	1884703a 	and	r2,r3,r2
    4ad0:	1001703a 	wrctl	status,r2
  
  return context;
    4ad4:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    4ad8:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
    4adc:	e0bffe17 	ldw	r2,-8(fp)
    4ae0:	10c00017 	ldw	r3,0(r2)
    4ae4:	e0bfff17 	ldw	r2,-4(fp)
    4ae8:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
    4aec:	e0bffe17 	ldw	r2,-8(fp)
    4af0:	10c00117 	ldw	r3,4(r2)
    4af4:	e0bfff17 	ldw	r2,-4(fp)
    4af8:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
    4afc:	e0bffe17 	ldw	r2,-8(fp)
    4b00:	10c00217 	ldw	r3,8(r2)
    4b04:	e0bfff17 	ldw	r2,-4(fp)
    4b08:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
    4b0c:	e0bffe17 	ldw	r2,-8(fp)
    4b10:	10c00317 	ldw	r3,12(r2)
    4b14:	e0bfff17 	ldw	r2,-4(fp)
    4b18:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
    4b1c:	e0bffe17 	ldw	r2,-8(fp)
    4b20:	10c00417 	ldw	r3,16(r2)
    4b24:	e0bfff17 	ldw	r2,-4(fp)
    4b28:	10c00415 	stw	r3,16(r2)
    4b2c:	e0bffb17 	ldw	r2,-20(fp)
    4b30:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4b34:	e0bffd17 	ldw	r2,-12(fp)
    4b38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
    4b3c:	e0bfff17 	ldw	r2,-4(fp)
    4b40:	10c00317 	ldw	r3,12(r2)
    4b44:	e0bfff17 	ldw	r2,-4(fp)
    4b48:	10800417 	ldw	r2,16(r2)
    4b4c:	1887c83a 	sub	r3,r3,r2
    4b50:	e0bfff17 	ldw	r2,-4(fp)
    4b54:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
    4b58:	0005883a 	mov	r2,zero
}
    4b5c:	e037883a 	mov	sp,fp
    4b60:	df000017 	ldw	fp,0(sp)
    4b64:	dec00104 	addi	sp,sp,4
    4b68:	f800283a 	ret

00004b6c <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
    4b6c:	defffc04 	addi	sp,sp,-16
    4b70:	dfc00315 	stw	ra,12(sp)
    4b74:	df000215 	stw	fp,8(sp)
    4b78:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    4b7c:	01000174 	movhi	r4,5
    4b80:	21185e04 	addi	r4,r4,24952
    4b84:	01430c04 	movi	r5,3120
    4b88:	00023840 	call	2384 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    4b8c:	00800174 	movhi	r2,5
    4b90:	10985e04 	addi	r2,r2,24952
    4b94:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    4b98:	e03fff0d 	sth	zero,-4(fp)
    4b9c:	00001306 	br	4bec <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
    4ba0:	e0bfff0b 	ldhu	r2,-4(fp)
    4ba4:	10800044 	addi	r2,r2,1
    4ba8:	10c00d24 	muli	r3,r2,52
    4bac:	00800174 	movhi	r2,5
    4bb0:	10985e04 	addi	r2,r2,24952
    4bb4:	1887883a 	add	r3,r3,r2
    4bb8:	e0bffe17 	ldw	r2,-8(fp)
    4bbc:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
    4bc0:	e0bffe17 	ldw	r2,-8(fp)
    4bc4:	00c00fc4 	movi	r3,63
    4bc8:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
    4bcc:	e0bffe17 	ldw	r2,-8(fp)
    4bd0:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
    4bd4:	e0bffe17 	ldw	r2,-8(fp)
    4bd8:	10800d04 	addi	r2,r2,52
    4bdc:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    4be0:	e0bfff0b 	ldhu	r2,-4(fp)
    4be4:	10800044 	addi	r2,r2,1
    4be8:	e0bfff0d 	sth	r2,-4(fp)
    4bec:	e0bfff0b 	ldhu	r2,-4(fp)
    4bf0:	10800ef0 	cmpltui	r2,r2,59
    4bf4:	103fea1e 	bne	r2,zero,4ba0 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
    4bf8:	e0bffe17 	ldw	r2,-8(fp)
    4bfc:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
    4c00:	e0bffe17 	ldw	r2,-8(fp)
    4c04:	00c00fc4 	movi	r3,63
    4c08:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
    4c0c:	e0bffe17 	ldw	r2,-8(fp)
    4c10:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
    4c14:	00800074 	movhi	r2,1
    4c18:	108f6404 	addi	r2,r2,15760
    4c1c:	00c00174 	movhi	r3,5
    4c20:	18d85e04 	addi	r3,r3,24952
    4c24:	10c00015 	stw	r3,0(r2)
#endif
}
    4c28:	e037883a 	mov	sp,fp
    4c2c:	dfc00117 	ldw	ra,4(sp)
    4c30:	df000017 	ldw	fp,0(sp)
    4c34:	dec00204 	addi	sp,sp,8
    4c38:	f800283a 	ret

00004c3c <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
    4c3c:	defff804 	addi	sp,sp,-32
    4c40:	df000715 	stw	fp,28(sp)
    4c44:	df000704 	addi	fp,sp,28
    4c48:	e13ffe15 	stw	r4,-8(fp)
    4c4c:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4c50:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    4c54:	e0bfff17 	ldw	r2,-4(fp)
    4c58:	1000021e 	bne	r2,zero,4c64 <OSQAccept+0x28>
        return ((void *)0);
    4c5c:	0005883a 	mov	r2,zero
    4c60:	00004206 	br	4d6c <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    4c64:	e0bffe17 	ldw	r2,-8(fp)
    4c68:	1000051e 	bne	r2,zero,4c80 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    4c6c:	e0bfff17 	ldw	r2,-4(fp)
    4c70:	00c00104 	movi	r3,4
    4c74:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    4c78:	0005883a 	mov	r2,zero
    4c7c:	00003b06 	br	4d6c <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    4c80:	e0bffe17 	ldw	r2,-8(fp)
    4c84:	10800003 	ldbu	r2,0(r2)
    4c88:	10803fcc 	andi	r2,r2,255
    4c8c:	108000a0 	cmpeqi	r2,r2,2
    4c90:	1000051e 	bne	r2,zero,4ca8 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    4c94:	e0bfff17 	ldw	r2,-4(fp)
    4c98:	00c00044 	movi	r3,1
    4c9c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    4ca0:	0005883a 	mov	r2,zero
    4ca4:	00003106 	br	4d6c <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4ca8:	0005303a 	rdctl	r2,status
    4cac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4cb0:	e0fffc17 	ldw	r3,-16(fp)
    4cb4:	00bfff84 	movi	r2,-2
    4cb8:	1884703a 	and	r2,r3,r2
    4cbc:	1001703a 	wrctl	status,r2
  
  return context;
    4cc0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    4cc4:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    4cc8:	e0bffe17 	ldw	r2,-8(fp)
    4ccc:	10800117 	ldw	r2,4(r2)
    4cd0:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    4cd4:	e0bffb17 	ldw	r2,-20(fp)
    4cd8:	1080058b 	ldhu	r2,22(r2)
    4cdc:	10bfffcc 	andi	r2,r2,65535
    4ce0:	10001926 	beq	r2,zero,4d48 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    4ce4:	e0bffb17 	ldw	r2,-20(fp)
    4ce8:	10800417 	ldw	r2,16(r2)
    4cec:	11000104 	addi	r4,r2,4
    4cf0:	e0fffb17 	ldw	r3,-20(fp)
    4cf4:	19000415 	stw	r4,16(r3)
    4cf8:	10800017 	ldw	r2,0(r2)
    4cfc:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    4d00:	e0bffb17 	ldw	r2,-20(fp)
    4d04:	1080058b 	ldhu	r2,22(r2)
    4d08:	10bfffc4 	addi	r2,r2,-1
    4d0c:	1007883a 	mov	r3,r2
    4d10:	e0bffb17 	ldw	r2,-20(fp)
    4d14:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    4d18:	e0bffb17 	ldw	r2,-20(fp)
    4d1c:	10c00417 	ldw	r3,16(r2)
    4d20:	e0bffb17 	ldw	r2,-20(fp)
    4d24:	10800217 	ldw	r2,8(r2)
    4d28:	1880041e 	bne	r3,r2,4d3c <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
    4d2c:	e0bffb17 	ldw	r2,-20(fp)
    4d30:	10c00117 	ldw	r3,4(r2)
    4d34:	e0bffb17 	ldw	r2,-20(fp)
    4d38:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
    4d3c:	e0bfff17 	ldw	r2,-4(fp)
    4d40:	10000005 	stb	zero,0(r2)
    4d44:	00000406 	br	4d58 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
    4d48:	e0bfff17 	ldw	r2,-4(fp)
    4d4c:	00c007c4 	movi	r3,31
    4d50:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
    4d54:	e03ff915 	stw	zero,-28(fp)
    4d58:	e0bffa17 	ldw	r2,-24(fp)
    4d5c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4d60:	e0bffd17 	ldw	r2,-12(fp)
    4d64:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
    4d68:	e0bff917 	ldw	r2,-28(fp)
}
    4d6c:	e037883a 	mov	sp,fp
    4d70:	df000017 	ldw	fp,0(sp)
    4d74:	dec00104 	addi	sp,sp,4
    4d78:	f800283a 	ret

00004d7c <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
    4d7c:	defff404 	addi	sp,sp,-48
    4d80:	dfc00b15 	stw	ra,44(sp)
    4d84:	df000a15 	stw	fp,40(sp)
    4d88:	df000a04 	addi	fp,sp,40
    4d8c:	e13ffe15 	stw	r4,-8(fp)
    4d90:	2805883a 	mov	r2,r5
    4d94:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4d98:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    4d9c:	00800074 	movhi	r2,1
    4da0:	108f6904 	addi	r2,r2,15780
    4da4:	10800003 	ldbu	r2,0(r2)
    4da8:	10803fcc 	andi	r2,r2,255
    4dac:	10000226 	beq	r2,zero,4db8 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
    4db0:	0005883a 	mov	r2,zero
    4db4:	00006b06 	br	4f64 <OSQCreate+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4db8:	0005303a 	rdctl	r2,status
    4dbc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4dc0:	e0fff917 	ldw	r3,-28(fp)
    4dc4:	00bfff84 	movi	r2,-2
    4dc8:	1884703a 	and	r2,r3,r2
    4dcc:	1001703a 	wrctl	status,r2
  
  return context;
    4dd0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    4dd4:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
    4dd8:	00800074 	movhi	r2,1
    4ddc:	108f6804 	addi	r2,r2,15776
    4de0:	10800017 	ldw	r2,0(r2)
    4de4:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
    4de8:	00800074 	movhi	r2,1
    4dec:	108f6804 	addi	r2,r2,15776
    4df0:	10800017 	ldw	r2,0(r2)
    4df4:	10000726 	beq	r2,zero,4e14 <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    4df8:	00800074 	movhi	r2,1
    4dfc:	108f6804 	addi	r2,r2,15776
    4e00:	10800017 	ldw	r2,0(r2)
    4e04:	10c00117 	ldw	r3,4(r2)
    4e08:	00800074 	movhi	r2,1
    4e0c:	108f6804 	addi	r2,r2,15776
    4e10:	10c00015 	stw	r3,0(r2)
    4e14:	e0bff717 	ldw	r2,-36(fp)
    4e18:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4e1c:	e0bffa17 	ldw	r2,-24(fp)
    4e20:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
    4e24:	e0bff617 	ldw	r2,-40(fp)
    4e28:	10004d26 	beq	r2,zero,4f60 <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4e2c:	0005303a 	rdctl	r2,status
    4e30:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4e34:	e0fffb17 	ldw	r3,-20(fp)
    4e38:	00bfff84 	movi	r2,-2
    4e3c:	1884703a 	and	r2,r3,r2
    4e40:	1001703a 	wrctl	status,r2
  
  return context;
    4e44:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
    4e48:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
    4e4c:	00800074 	movhi	r2,1
    4e50:	108f6604 	addi	r2,r2,15768
    4e54:	10800017 	ldw	r2,0(r2)
    4e58:	e0bff815 	stw	r2,-32(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
    4e5c:	e0bff817 	ldw	r2,-32(fp)
    4e60:	10003126 	beq	r2,zero,4f28 <OSQCreate+0x1ac>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
    4e64:	00800074 	movhi	r2,1
    4e68:	108f6604 	addi	r2,r2,15768
    4e6c:	10800017 	ldw	r2,0(r2)
    4e70:	10c00017 	ldw	r3,0(r2)
    4e74:	00800074 	movhi	r2,1
    4e78:	108f6604 	addi	r2,r2,15768
    4e7c:	10c00015 	stw	r3,0(r2)
    4e80:	e0bff717 	ldw	r2,-36(fp)
    4e84:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4e88:	e0bffc17 	ldw	r2,-16(fp)
    4e8c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
    4e90:	e0bff817 	ldw	r2,-32(fp)
    4e94:	e0fffe17 	ldw	r3,-8(fp)
    4e98:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
    4e9c:	e0bfff0b 	ldhu	r2,-4(fp)
    4ea0:	1085883a 	add	r2,r2,r2
    4ea4:	1085883a 	add	r2,r2,r2
    4ea8:	1007883a 	mov	r3,r2
    4eac:	e0bffe17 	ldw	r2,-8(fp)
    4eb0:	10c7883a 	add	r3,r2,r3
    4eb4:	e0bff817 	ldw	r2,-32(fp)
    4eb8:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
    4ebc:	e0bff817 	ldw	r2,-32(fp)
    4ec0:	e0fffe17 	ldw	r3,-8(fp)
    4ec4:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
    4ec8:	e0bff817 	ldw	r2,-32(fp)
    4ecc:	e0fffe17 	ldw	r3,-8(fp)
    4ed0:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
    4ed4:	e0bff817 	ldw	r2,-32(fp)
    4ed8:	e0ffff0b 	ldhu	r3,-4(fp)
    4edc:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
    4ee0:	e0bff817 	ldw	r2,-32(fp)
    4ee4:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
    4ee8:	e0bff617 	ldw	r2,-40(fp)
    4eec:	00c00084 	movi	r3,2
    4ef0:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
    4ef4:	e0bff617 	ldw	r2,-40(fp)
    4ef8:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
    4efc:	e0bff617 	ldw	r2,-40(fp)
    4f00:	e0fff817 	ldw	r3,-32(fp)
    4f04:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
    4f08:	e0bff617 	ldw	r2,-40(fp)
    4f0c:	00c00fc4 	movi	r3,63
    4f10:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
    4f14:	e0bff617 	ldw	r2,-40(fp)
    4f18:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
    4f1c:	e13ff617 	ldw	r4,-40(fp)
    4f20:	0001fc00 	call	1fc0 <OS_EventWaitListInit>
    4f24:	00000e06 	br	4f60 <OSQCreate+0x1e4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
    4f28:	00800074 	movhi	r2,1
    4f2c:	108f6804 	addi	r2,r2,15776
    4f30:	10c00017 	ldw	r3,0(r2)
    4f34:	e0bff617 	ldw	r2,-40(fp)
    4f38:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
    4f3c:	00800074 	movhi	r2,1
    4f40:	108f6804 	addi	r2,r2,15776
    4f44:	e0fff617 	ldw	r3,-40(fp)
    4f48:	10c00015 	stw	r3,0(r2)
    4f4c:	e0bff717 	ldw	r2,-36(fp)
    4f50:	e0bffd15 	stw	r2,-12(fp)
    4f54:	e0bffd17 	ldw	r2,-12(fp)
    4f58:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
    4f5c:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
    4f60:	e0bff617 	ldw	r2,-40(fp)
}
    4f64:	e037883a 	mov	sp,fp
    4f68:	dfc00117 	ldw	ra,4(sp)
    4f6c:	df000017 	ldw	fp,0(sp)
    4f70:	dec00204 	addi	sp,sp,8
    4f74:	f800283a 	ret

00004f78 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    4f78:	defff204 	addi	sp,sp,-56
    4f7c:	dfc00d15 	stw	ra,52(sp)
    4f80:	df000c15 	stw	fp,48(sp)
    4f84:	df000c04 	addi	fp,sp,48
    4f88:	e13ffd15 	stw	r4,-12(fp)
    4f8c:	2805883a 	mov	r2,r5
    4f90:	e1bfff15 	stw	r6,-4(fp)
    4f94:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    4f98:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    4f9c:	e0bfff17 	ldw	r2,-4(fp)
    4fa0:	1000021e 	bne	r2,zero,4fac <OSQDel+0x34>
        return (pevent);
    4fa4:	e0bffd17 	ldw	r2,-12(fp)
    4fa8:	0000a006 	br	522c <OSQDel+0x2b4>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    4fac:	e0bffd17 	ldw	r2,-12(fp)
    4fb0:	1000051e 	bne	r2,zero,4fc8 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    4fb4:	e0bfff17 	ldw	r2,-4(fp)
    4fb8:	00c00104 	movi	r3,4
    4fbc:	10c00005 	stb	r3,0(r2)
        return (pevent);
    4fc0:	e0bffd17 	ldw	r2,-12(fp)
    4fc4:	00009906 	br	522c <OSQDel+0x2b4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    4fc8:	e0bffd17 	ldw	r2,-12(fp)
    4fcc:	10800003 	ldbu	r2,0(r2)
    4fd0:	10803fcc 	andi	r2,r2,255
    4fd4:	108000a0 	cmpeqi	r2,r2,2
    4fd8:	1000051e 	bne	r2,zero,4ff0 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    4fdc:	e0bfff17 	ldw	r2,-4(fp)
    4fe0:	00c00044 	movi	r3,1
    4fe4:	10c00005 	stb	r3,0(r2)
        return (pevent);
    4fe8:	e0bffd17 	ldw	r2,-12(fp)
    4fec:	00008f06 	br	522c <OSQDel+0x2b4>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    4ff0:	00800074 	movhi	r2,1
    4ff4:	108f6904 	addi	r2,r2,15780
    4ff8:	10800003 	ldbu	r2,0(r2)
    4ffc:	10803fcc 	andi	r2,r2,255
    5000:	10000526 	beq	r2,zero,5018 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    5004:	e0bfff17 	ldw	r2,-4(fp)
    5008:	00c003c4 	movi	r3,15
    500c:	10c00005 	stb	r3,0(r2)
        return (pevent);
    5010:	e0bffd17 	ldw	r2,-12(fp)
    5014:	00008506 	br	522c <OSQDel+0x2b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5018:	0005303a 	rdctl	r2,status
    501c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5020:	e0fff817 	ldw	r3,-32(fp)
    5024:	00bfff84 	movi	r2,-2
    5028:	1884703a 	and	r2,r3,r2
    502c:	1001703a 	wrctl	status,r2
  
  return context;
    5030:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    5034:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
    5038:	e0bffd17 	ldw	r2,-12(fp)
    503c:	10800283 	ldbu	r2,10(r2)
    5040:	10803fcc 	andi	r2,r2,255
    5044:	10000326 	beq	r2,zero,5054 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    5048:	00800044 	movi	r2,1
    504c:	e0bff405 	stb	r2,-48(fp)
    5050:	00000106 	br	5058 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    5054:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
    5058:	e0bffe03 	ldbu	r2,-8(fp)
    505c:	10000326 	beq	r2,zero,506c <OSQDel+0xf4>
    5060:	10800060 	cmpeqi	r2,r2,1
    5064:	1000381e 	bne	r2,zero,5148 <OSQDel+0x1d0>
    5068:	00006506 	br	5200 <OSQDel+0x288>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
    506c:	e0bff403 	ldbu	r2,-48(fp)
    5070:	1000261e 	bne	r2,zero,510c <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    5074:	e0bffd17 	ldw	r2,-12(fp)
    5078:	00c00fc4 	movi	r3,63
    507c:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    5080:	e0bffd17 	ldw	r2,-12(fp)
    5084:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
    5088:	e0bffd17 	ldw	r2,-12(fp)
    508c:	10800117 	ldw	r2,4(r2)
    5090:	e0bff715 	stw	r2,-36(fp)
                 pq->OSQPtr             = OSQFreeList;
    5094:	00800074 	movhi	r2,1
    5098:	108f6604 	addi	r2,r2,15768
    509c:	10c00017 	ldw	r3,0(r2)
    50a0:	e0bff717 	ldw	r2,-36(fp)
    50a4:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
    50a8:	00800074 	movhi	r2,1
    50ac:	108f6604 	addi	r2,r2,15768
    50b0:	e0fff717 	ldw	r3,-36(fp)
    50b4:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    50b8:	e0bffd17 	ldw	r2,-12(fp)
    50bc:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    50c0:	00800074 	movhi	r2,1
    50c4:	108f6804 	addi	r2,r2,15776
    50c8:	10c00017 	ldw	r3,0(r2)
    50cc:	e0bffd17 	ldw	r2,-12(fp)
    50d0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    50d4:	e0bffd17 	ldw	r2,-12(fp)
    50d8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    50dc:	00800074 	movhi	r2,1
    50e0:	108f6804 	addi	r2,r2,15776
    50e4:	e0fffd17 	ldw	r3,-12(fp)
    50e8:	10c00015 	stw	r3,0(r2)
    50ec:	e0bff617 	ldw	r2,-40(fp)
    50f0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    50f4:	e0bff917 	ldw	r2,-28(fp)
    50f8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    50fc:	e0bfff17 	ldw	r2,-4(fp)
    5100:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
    5104:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    5108:	00004706 	br	5228 <OSQDel+0x2b0>
    510c:	e0bff617 	ldw	r2,-40(fp)
    5110:	e0bffa15 	stw	r2,-24(fp)
    5114:	e0bffa17 	ldw	r2,-24(fp)
    5118:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
    511c:	e0bfff17 	ldw	r2,-4(fp)
    5120:	00c01244 	movi	r3,73
    5124:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    5128:	e0bffd17 	ldw	r2,-12(fp)
    512c:	e0bff515 	stw	r2,-44(fp)
             }
             break;
    5130:	00003d06 	br	5228 <OSQDel+0x2b0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
    5134:	e13ffd17 	ldw	r4,-12(fp)
    5138:	000b883a 	mov	r5,zero
    513c:	01800104 	movi	r6,4
    5140:	000f883a 	mov	r7,zero
    5144:	0001a200 	call	1a20 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
    5148:	e0bffd17 	ldw	r2,-12(fp)
    514c:	10800283 	ldbu	r2,10(r2)
    5150:	10803fcc 	andi	r2,r2,255
    5154:	103ff71e 	bne	r2,zero,5134 <OSQDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    5158:	e0bffd17 	ldw	r2,-12(fp)
    515c:	00c00fc4 	movi	r3,63
    5160:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    5164:	e0bffd17 	ldw	r2,-12(fp)
    5168:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
    516c:	e0bffd17 	ldw	r2,-12(fp)
    5170:	10800117 	ldw	r2,4(r2)
    5174:	e0bff715 	stw	r2,-36(fp)
             pq->OSQPtr             = OSQFreeList;
    5178:	00800074 	movhi	r2,1
    517c:	108f6604 	addi	r2,r2,15768
    5180:	10c00017 	ldw	r3,0(r2)
    5184:	e0bff717 	ldw	r2,-36(fp)
    5188:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
    518c:	00800074 	movhi	r2,1
    5190:	108f6604 	addi	r2,r2,15768
    5194:	e0fff717 	ldw	r3,-36(fp)
    5198:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    519c:	e0bffd17 	ldw	r2,-12(fp)
    51a0:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    51a4:	00800074 	movhi	r2,1
    51a8:	108f6804 	addi	r2,r2,15776
    51ac:	10c00017 	ldw	r3,0(r2)
    51b0:	e0bffd17 	ldw	r2,-12(fp)
    51b4:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    51b8:	e0bffd17 	ldw	r2,-12(fp)
    51bc:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    51c0:	00800074 	movhi	r2,1
    51c4:	108f6804 	addi	r2,r2,15776
    51c8:	e0fffd17 	ldw	r3,-12(fp)
    51cc:	10c00015 	stw	r3,0(r2)
    51d0:	e0bff617 	ldw	r2,-40(fp)
    51d4:	e0bffb15 	stw	r2,-20(fp)
    51d8:	e0bffb17 	ldw	r2,-20(fp)
    51dc:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    51e0:	e0bff403 	ldbu	r2,-48(fp)
    51e4:	10800058 	cmpnei	r2,r2,1
    51e8:	1000011e 	bne	r2,zero,51f0 <OSQDel+0x278>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    51ec:	00024380 	call	2438 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    51f0:	e0bfff17 	ldw	r2,-4(fp)
    51f4:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
    51f8:	e03ff515 	stw	zero,-44(fp)
             break;
    51fc:	00000a06 	br	5228 <OSQDel+0x2b0>
    5200:	e0bff617 	ldw	r2,-40(fp)
    5204:	e0bffc15 	stw	r2,-16(fp)
    5208:	e0bffc17 	ldw	r2,-16(fp)
    520c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    5210:	e0bfff17 	ldw	r2,-4(fp)
    5214:	00c001c4 	movi	r3,7
    5218:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    521c:	e0bffd17 	ldw	r2,-12(fp)
    5220:	e0bff515 	stw	r2,-44(fp)
             break;
    5224:	0001883a 	nop
    }
    return (pevent_return);
    5228:	e0bff517 	ldw	r2,-44(fp)
}
    522c:	e037883a 	mov	sp,fp
    5230:	dfc00117 	ldw	ra,4(sp)
    5234:	df000017 	ldw	fp,0(sp)
    5238:	dec00204 	addi	sp,sp,8
    523c:	f800283a 	ret

00005240 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
    5240:	defffa04 	addi	sp,sp,-24
    5244:	df000515 	stw	fp,20(sp)
    5248:	df000504 	addi	fp,sp,20
    524c:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    5250:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    5254:	e0bfff17 	ldw	r2,-4(fp)
    5258:	1000021e 	bne	r2,zero,5264 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
    525c:	00800104 	movi	r2,4
    5260:	00002106 	br	52e8 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    5264:	e0bfff17 	ldw	r2,-4(fp)
    5268:	10800003 	ldbu	r2,0(r2)
    526c:	10803fcc 	andi	r2,r2,255
    5270:	108000a0 	cmpeqi	r2,r2,2
    5274:	1000021e 	bne	r2,zero,5280 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
    5278:	00800044 	movi	r2,1
    527c:	00001a06 	br	52e8 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5280:	0005303a 	rdctl	r2,status
    5284:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5288:	e0fffd17 	ldw	r3,-12(fp)
    528c:	00bfff84 	movi	r2,-2
    5290:	1884703a 	and	r2,r3,r2
    5294:	1001703a 	wrctl	status,r2
  
  return context;
    5298:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    529c:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
    52a0:	e0bfff17 	ldw	r2,-4(fp)
    52a4:	10800117 	ldw	r2,4(r2)
    52a8:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
    52ac:	e0bffc17 	ldw	r2,-16(fp)
    52b0:	10c00117 	ldw	r3,4(r2)
    52b4:	e0bffc17 	ldw	r2,-16(fp)
    52b8:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
    52bc:	e0bffc17 	ldw	r2,-16(fp)
    52c0:	10c00117 	ldw	r3,4(r2)
    52c4:	e0bffc17 	ldw	r2,-16(fp)
    52c8:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
    52cc:	e0bffc17 	ldw	r2,-16(fp)
    52d0:	1000058d 	sth	zero,22(r2)
    52d4:	e0bffb17 	ldw	r2,-20(fp)
    52d8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    52dc:	e0bffe17 	ldw	r2,-8(fp)
    52e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    52e4:	0005883a 	mov	r2,zero
}
    52e8:	e037883a 	mov	sp,fp
    52ec:	df000017 	ldw	fp,0(sp)
    52f0:	dec00104 	addi	sp,sp,4
    52f4:	f800283a 	ret

000052f8 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    52f8:	defff304 	addi	sp,sp,-52
    52fc:	dfc00c15 	stw	ra,48(sp)
    5300:	df000b15 	stw	fp,44(sp)
    5304:	df000b04 	addi	fp,sp,44
    5308:	e13ffd15 	stw	r4,-12(fp)
    530c:	2805883a 	mov	r2,r5
    5310:	e1bfff15 	stw	r6,-4(fp)
    5314:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    5318:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    531c:	e0bfff17 	ldw	r2,-4(fp)
    5320:	1000021e 	bne	r2,zero,532c <OSQPend+0x34>
        return ((void *)0);
    5324:	0005883a 	mov	r2,zero
    5328:	0000ad06 	br	55e0 <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    532c:	e0bffd17 	ldw	r2,-12(fp)
    5330:	1000051e 	bne	r2,zero,5348 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    5334:	e0bfff17 	ldw	r2,-4(fp)
    5338:	00c00104 	movi	r3,4
    533c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    5340:	0005883a 	mov	r2,zero
    5344:	0000a606 	br	55e0 <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    5348:	e0bffd17 	ldw	r2,-12(fp)
    534c:	10800003 	ldbu	r2,0(r2)
    5350:	10803fcc 	andi	r2,r2,255
    5354:	108000a0 	cmpeqi	r2,r2,2
    5358:	1000051e 	bne	r2,zero,5370 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    535c:	e0bfff17 	ldw	r2,-4(fp)
    5360:	00c00044 	movi	r3,1
    5364:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    5368:	0005883a 	mov	r2,zero
    536c:	00009c06 	br	55e0 <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    5370:	00800074 	movhi	r2,1
    5374:	108f6904 	addi	r2,r2,15780
    5378:	10800003 	ldbu	r2,0(r2)
    537c:	10803fcc 	andi	r2,r2,255
    5380:	10000526 	beq	r2,zero,5398 <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
    5384:	e0bfff17 	ldw	r2,-4(fp)
    5388:	00c00084 	movi	r3,2
    538c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    5390:	0005883a 	mov	r2,zero
    5394:	00009206 	br	55e0 <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
    5398:	00800074 	movhi	r2,1
    539c:	108f5b04 	addi	r2,r2,15724
    53a0:	10800003 	ldbu	r2,0(r2)
    53a4:	10803fcc 	andi	r2,r2,255
    53a8:	10000526 	beq	r2,zero,53c0 <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
    53ac:	e0bfff17 	ldw	r2,-4(fp)
    53b0:	00c00344 	movi	r3,13
    53b4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    53b8:	0005883a 	mov	r2,zero
    53bc:	00008806 	br	55e0 <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    53c0:	0005303a 	rdctl	r2,status
    53c4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    53c8:	e0fff817 	ldw	r3,-32(fp)
    53cc:	00bfff84 	movi	r2,-2
    53d0:	1884703a 	and	r2,r3,r2
    53d4:	1001703a 	wrctl	status,r2
  
  return context;
    53d8:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    53dc:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    53e0:	e0bffd17 	ldw	r2,-12(fp)
    53e4:	10800117 	ldw	r2,4(r2)
    53e8:	e0bff715 	stw	r2,-36(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    53ec:	e0bff717 	ldw	r2,-36(fp)
    53f0:	1080058b 	ldhu	r2,22(r2)
    53f4:	10bfffcc 	andi	r2,r2,65535
    53f8:	10001e26 	beq	r2,zero,5474 <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    53fc:	e0bff717 	ldw	r2,-36(fp)
    5400:	10800417 	ldw	r2,16(r2)
    5404:	11000104 	addi	r4,r2,4
    5408:	e0fff717 	ldw	r3,-36(fp)
    540c:	19000415 	stw	r4,16(r3)
    5410:	10800017 	ldw	r2,0(r2)
    5414:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    5418:	e0bff717 	ldw	r2,-36(fp)
    541c:	1080058b 	ldhu	r2,22(r2)
    5420:	10bfffc4 	addi	r2,r2,-1
    5424:	1007883a 	mov	r3,r2
    5428:	e0bff717 	ldw	r2,-36(fp)
    542c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    5430:	e0bff717 	ldw	r2,-36(fp)
    5434:	10c00417 	ldw	r3,16(r2)
    5438:	e0bff717 	ldw	r2,-36(fp)
    543c:	10800217 	ldw	r2,8(r2)
    5440:	1880041e 	bne	r3,r2,5454 <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
    5444:	e0bff717 	ldw	r2,-36(fp)
    5448:	10c00117 	ldw	r3,4(r2)
    544c:	e0bff717 	ldw	r2,-36(fp)
    5450:	10c00415 	stw	r3,16(r2)
    5454:	e0bff617 	ldw	r2,-40(fp)
    5458:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    545c:	e0bff917 	ldw	r2,-28(fp)
    5460:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    5464:	e0bfff17 	ldw	r2,-4(fp)
    5468:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
    546c:	e0bff517 	ldw	r2,-44(fp)
    5470:	00005b06 	br	55e0 <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
    5474:	00800074 	movhi	r2,1
    5478:	108f6a04 	addi	r2,r2,15784
    547c:	10c00017 	ldw	r3,0(r2)
    5480:	00800074 	movhi	r2,1
    5484:	108f6a04 	addi	r2,r2,15784
    5488:	10800017 	ldw	r2,0(r2)
    548c:	10800c03 	ldbu	r2,48(r2)
    5490:	10800114 	ori	r2,r2,4
    5494:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    5498:	00800074 	movhi	r2,1
    549c:	108f6a04 	addi	r2,r2,15784
    54a0:	10800017 	ldw	r2,0(r2)
    54a4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
    54a8:	00800074 	movhi	r2,1
    54ac:	108f6a04 	addi	r2,r2,15784
    54b0:	10800017 	ldw	r2,0(r2)
    54b4:	e0fffe0b 	ldhu	r3,-8(fp)
    54b8:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
    54bc:	e13ffd17 	ldw	r4,-12(fp)
    54c0:	0001bb80 	call	1bb8 <OS_EventTaskWait>
    54c4:	e0bff617 	ldw	r2,-40(fp)
    54c8:	e0bffa15 	stw	r2,-24(fp)
    54cc:	e0bffa17 	ldw	r2,-24(fp)
    54d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
    54d4:	00024380 	call	2438 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    54d8:	0005303a 	rdctl	r2,status
    54dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    54e0:	e0fffb17 	ldw	r3,-20(fp)
    54e4:	00bfff84 	movi	r2,-2
    54e8:	1884703a 	and	r2,r3,r2
    54ec:	1001703a 	wrctl	status,r2
  
  return context;
    54f0:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
    54f4:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    54f8:	00800074 	movhi	r2,1
    54fc:	108f6a04 	addi	r2,r2,15784
    5500:	10800017 	ldw	r2,0(r2)
    5504:	10800c43 	ldbu	r2,49(r2)
    5508:	10803fcc 	andi	r2,r2,255
    550c:	10000326 	beq	r2,zero,551c <OSQPend+0x224>
    5510:	108000a0 	cmpeqi	r2,r2,2
    5514:	1000091e 	bne	r2,zero,553c <OSQPend+0x244>
    5518:	00000d06 	br	5550 <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
    551c:	00800074 	movhi	r2,1
    5520:	108f6a04 	addi	r2,r2,15784
    5524:	10800017 	ldw	r2,0(r2)
    5528:	10800917 	ldw	r2,36(r2)
    552c:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
    5530:	e0bfff17 	ldw	r2,-4(fp)
    5534:	10000005 	stb	zero,0(r2)
             break;
    5538:	00001006 	br	557c <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
    553c:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    5540:	e0bfff17 	ldw	r2,-4(fp)
    5544:	00c00384 	movi	r3,14
    5548:	10c00005 	stb	r3,0(r2)
             break;
    554c:	00000b06 	br	557c <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
    5550:	00800074 	movhi	r2,1
    5554:	108f6a04 	addi	r2,r2,15784
    5558:	10800017 	ldw	r2,0(r2)
    555c:	1009883a 	mov	r4,r2
    5560:	e17ffd17 	ldw	r5,-12(fp)
    5564:	0001e100 	call	1e10 <OS_EventTaskRemove>
             pmsg = (void *)0;
    5568:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    556c:	e0bfff17 	ldw	r2,-4(fp)
    5570:	00c00284 	movi	r3,10
    5574:	10c00005 	stb	r3,0(r2)
             break;
    5578:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    557c:	00800074 	movhi	r2,1
    5580:	108f6a04 	addi	r2,r2,15784
    5584:	10800017 	ldw	r2,0(r2)
    5588:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    558c:	00800074 	movhi	r2,1
    5590:	108f6a04 	addi	r2,r2,15784
    5594:	10800017 	ldw	r2,0(r2)
    5598:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    559c:	00800074 	movhi	r2,1
    55a0:	108f6a04 	addi	r2,r2,15784
    55a4:	10800017 	ldw	r2,0(r2)
    55a8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    55ac:	00800074 	movhi	r2,1
    55b0:	108f6a04 	addi	r2,r2,15784
    55b4:	10800017 	ldw	r2,0(r2)
    55b8:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
    55bc:	00800074 	movhi	r2,1
    55c0:	108f6a04 	addi	r2,r2,15784
    55c4:	10800017 	ldw	r2,0(r2)
    55c8:	10000915 	stw	zero,36(r2)
    55cc:	e0bff617 	ldw	r2,-40(fp)
    55d0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    55d4:	e0bffc17 	ldw	r2,-16(fp)
    55d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
    55dc:	e0bff517 	ldw	r2,-44(fp)
}
    55e0:	e037883a 	mov	sp,fp
    55e4:	dfc00117 	ldw	ra,4(sp)
    55e8:	df000017 	ldw	fp,0(sp)
    55ec:	dec00204 	addi	sp,sp,8
    55f0:	f800283a 	ret

000055f4 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    55f4:	defff604 	addi	sp,sp,-40
    55f8:	dfc00915 	stw	ra,36(sp)
    55fc:	df000815 	stw	fp,32(sp)
    5600:	df000804 	addi	fp,sp,32
    5604:	e13ffd15 	stw	r4,-12(fp)
    5608:	2805883a 	mov	r2,r5
    560c:	e1bfff15 	stw	r6,-4(fp)
    5610:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    5614:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    5618:	e0bfff17 	ldw	r2,-4(fp)
    561c:	1000021e 	bne	r2,zero,5628 <OSQPendAbort+0x34>
        return (0);
    5620:	0005883a 	mov	r2,zero
    5624:	00004906 	br	574c <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    5628:	e0bffd17 	ldw	r2,-12(fp)
    562c:	1000051e 	bne	r2,zero,5644 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    5630:	e0bfff17 	ldw	r2,-4(fp)
    5634:	00c00104 	movi	r3,4
    5638:	10c00005 	stb	r3,0(r2)
        return (0);
    563c:	0005883a 	mov	r2,zero
    5640:	00004206 	br	574c <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    5644:	e0bffd17 	ldw	r2,-12(fp)
    5648:	10800003 	ldbu	r2,0(r2)
    564c:	10803fcc 	andi	r2,r2,255
    5650:	108000a0 	cmpeqi	r2,r2,2
    5654:	1000051e 	bne	r2,zero,566c <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    5658:	e0bfff17 	ldw	r2,-4(fp)
    565c:	00c00044 	movi	r3,1
    5660:	10c00005 	stb	r3,0(r2)
        return (0);
    5664:	0005883a 	mov	r2,zero
    5668:	00003806 	br	574c <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    566c:	0005303a 	rdctl	r2,status
    5670:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5674:	e0fffa17 	ldw	r3,-24(fp)
    5678:	00bfff84 	movi	r2,-2
    567c:	1884703a 	and	r2,r3,r2
    5680:	1001703a 	wrctl	status,r2
  
  return context;
    5684:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    5688:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
    568c:	e0bffd17 	ldw	r2,-12(fp)
    5690:	10800283 	ldbu	r2,10(r2)
    5694:	10803fcc 	andi	r2,r2,255
    5698:	10002526 	beq	r2,zero,5730 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
    569c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
    56a0:	e0bffe03 	ldbu	r2,-8(fp)
    56a4:	10800060 	cmpeqi	r2,r2,1
    56a8:	10000e26 	beq	r2,zero,56e4 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    56ac:	00000806 	br	56d0 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    56b0:	e13ffd17 	ldw	r4,-12(fp)
    56b4:	000b883a 	mov	r5,zero
    56b8:	01800104 	movi	r6,4
    56bc:	01c00084 	movi	r7,2
    56c0:	0001a200 	call	1a20 <OS_EventTaskRdy>
                     nbr_tasks++;
    56c4:	e0bff803 	ldbu	r2,-32(fp)
    56c8:	10800044 	addi	r2,r2,1
    56cc:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    56d0:	e0bffd17 	ldw	r2,-12(fp)
    56d4:	10800283 	ldbu	r2,10(r2)
    56d8:	10803fcc 	andi	r2,r2,255
    56dc:	103ff41e 	bne	r2,zero,56b0 <OSQPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    56e0:	00000906 	br	5708 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    56e4:	e13ffd17 	ldw	r4,-12(fp)
    56e8:	000b883a 	mov	r5,zero
    56ec:	01800104 	movi	r6,4
    56f0:	01c00084 	movi	r7,2
    56f4:	0001a200 	call	1a20 <OS_EventTaskRdy>
                 nbr_tasks++;
    56f8:	e0bff803 	ldbu	r2,-32(fp)
    56fc:	10800044 	addi	r2,r2,1
    5700:	e0bff805 	stb	r2,-32(fp)
                 break;
    5704:	0001883a 	nop
    5708:	e0bff917 	ldw	r2,-28(fp)
    570c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5710:	e0bffb17 	ldw	r2,-20(fp)
    5714:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
    5718:	00024380 	call	2438 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    571c:	e0bfff17 	ldw	r2,-4(fp)
    5720:	00c00384 	movi	r3,14
    5724:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    5728:	e0bff803 	ldbu	r2,-32(fp)
    572c:	00000706 	br	574c <OSQPendAbort+0x158>
    5730:	e0bff917 	ldw	r2,-28(fp)
    5734:	e0bffc15 	stw	r2,-16(fp)
    5738:	e0bffc17 	ldw	r2,-16(fp)
    573c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    5740:	e0bfff17 	ldw	r2,-4(fp)
    5744:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
    5748:	0005883a 	mov	r2,zero
}
    574c:	e037883a 	mov	sp,fp
    5750:	dfc00117 	ldw	ra,4(sp)
    5754:	df000017 	ldw	fp,0(sp)
    5758:	dec00204 	addi	sp,sp,8
    575c:	f800283a 	ret

00005760 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
    5760:	defff604 	addi	sp,sp,-40
    5764:	dfc00915 	stw	ra,36(sp)
    5768:	df000815 	stw	fp,32(sp)
    576c:	df000804 	addi	fp,sp,32
    5770:	e13ffe15 	stw	r4,-8(fp)
    5774:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    5778:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    577c:	e0bffe17 	ldw	r2,-8(fp)
    5780:	1000021e 	bne	r2,zero,578c <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
    5784:	00800104 	movi	r2,4
    5788:	00004a06 	br	58b4 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    578c:	e0bffe17 	ldw	r2,-8(fp)
    5790:	10800003 	ldbu	r2,0(r2)
    5794:	10803fcc 	andi	r2,r2,255
    5798:	108000a0 	cmpeqi	r2,r2,2
    579c:	1000021e 	bne	r2,zero,57a8 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
    57a0:	00800044 	movi	r2,1
    57a4:	00004306 	br	58b4 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    57a8:	0005303a 	rdctl	r2,status
    57ac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    57b0:	e0fffa17 	ldw	r3,-24(fp)
    57b4:	00bfff84 	movi	r2,-2
    57b8:	1884703a 	and	r2,r3,r2
    57bc:	1001703a 	wrctl	status,r2
  
  return context;
    57c0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    57c4:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
    57c8:	e0bffe17 	ldw	r2,-8(fp)
    57cc:	10800283 	ldbu	r2,10(r2)
    57d0:	10803fcc 	andi	r2,r2,255
    57d4:	10000c26 	beq	r2,zero,5808 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    57d8:	e13ffe17 	ldw	r4,-8(fp)
    57dc:	e17fff17 	ldw	r5,-4(fp)
    57e0:	01800104 	movi	r6,4
    57e4:	000f883a 	mov	r7,zero
    57e8:	0001a200 	call	1a20 <OS_EventTaskRdy>
    57ec:	e0bff817 	ldw	r2,-32(fp)
    57f0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    57f4:	e0bffb17 	ldw	r2,-20(fp)
    57f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
    57fc:	00024380 	call	2438 <OS_Sched>
        return (OS_ERR_NONE);
    5800:	0005883a 	mov	r2,zero
    5804:	00002b06 	br	58b4 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
    5808:	e0bffe17 	ldw	r2,-8(fp)
    580c:	10800117 	ldw	r2,4(r2)
    5810:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
    5814:	e0bff917 	ldw	r2,-28(fp)
    5818:	10c0058b 	ldhu	r3,22(r2)
    581c:	e0bff917 	ldw	r2,-28(fp)
    5820:	1080050b 	ldhu	r2,20(r2)
    5824:	18ffffcc 	andi	r3,r3,65535
    5828:	10bfffcc 	andi	r2,r2,65535
    582c:	18800636 	bltu	r3,r2,5848 <OSQPost+0xe8>
    5830:	e0bff817 	ldw	r2,-32(fp)
    5834:	e0bffc15 	stw	r2,-16(fp)
    5838:	e0bffc17 	ldw	r2,-16(fp)
    583c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    5840:	00800784 	movi	r2,30
    5844:	00001b06 	br	58b4 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
    5848:	e0bff917 	ldw	r2,-28(fp)
    584c:	10800317 	ldw	r2,12(r2)
    5850:	11000104 	addi	r4,r2,4
    5854:	e0fff917 	ldw	r3,-28(fp)
    5858:	19000315 	stw	r4,12(r3)
    585c:	e0ffff17 	ldw	r3,-4(fp)
    5860:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
    5864:	e0bff917 	ldw	r2,-28(fp)
    5868:	1080058b 	ldhu	r2,22(r2)
    586c:	10800044 	addi	r2,r2,1
    5870:	1007883a 	mov	r3,r2
    5874:	e0bff917 	ldw	r2,-28(fp)
    5878:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
    587c:	e0bff917 	ldw	r2,-28(fp)
    5880:	10c00317 	ldw	r3,12(r2)
    5884:	e0bff917 	ldw	r2,-28(fp)
    5888:	10800217 	ldw	r2,8(r2)
    588c:	1880041e 	bne	r3,r2,58a0 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
    5890:	e0bff917 	ldw	r2,-28(fp)
    5894:	10c00117 	ldw	r3,4(r2)
    5898:	e0bff917 	ldw	r2,-28(fp)
    589c:	10c00315 	stw	r3,12(r2)
    58a0:	e0bff817 	ldw	r2,-32(fp)
    58a4:	e0bffd15 	stw	r2,-12(fp)
    58a8:	e0bffd17 	ldw	r2,-12(fp)
    58ac:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    58b0:	0005883a 	mov	r2,zero
}
    58b4:	e037883a 	mov	sp,fp
    58b8:	dfc00117 	ldw	ra,4(sp)
    58bc:	df000017 	ldw	fp,0(sp)
    58c0:	dec00204 	addi	sp,sp,8
    58c4:	f800283a 	ret

000058c8 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
    58c8:	defff604 	addi	sp,sp,-40
    58cc:	dfc00915 	stw	ra,36(sp)
    58d0:	df000815 	stw	fp,32(sp)
    58d4:	df000804 	addi	fp,sp,32
    58d8:	e13ffe15 	stw	r4,-8(fp)
    58dc:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    58e0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    58e4:	e0bffe17 	ldw	r2,-8(fp)
    58e8:	1000021e 	bne	r2,zero,58f4 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
    58ec:	00800104 	movi	r2,4
    58f0:	00004c06 	br	5a24 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    58f4:	e0bffe17 	ldw	r2,-8(fp)
    58f8:	10800003 	ldbu	r2,0(r2)
    58fc:	10803fcc 	andi	r2,r2,255
    5900:	108000a0 	cmpeqi	r2,r2,2
    5904:	1000021e 	bne	r2,zero,5910 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
    5908:	00800044 	movi	r2,1
    590c:	00004506 	br	5a24 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5910:	0005303a 	rdctl	r2,status
    5914:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5918:	e0fffa17 	ldw	r3,-24(fp)
    591c:	00bfff84 	movi	r2,-2
    5920:	1884703a 	and	r2,r3,r2
    5924:	1001703a 	wrctl	status,r2
  
  return context;
    5928:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    592c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
    5930:	e0bffe17 	ldw	r2,-8(fp)
    5934:	10800283 	ldbu	r2,10(r2)
    5938:	10803fcc 	andi	r2,r2,255
    593c:	10000c26 	beq	r2,zero,5970 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    5940:	e13ffe17 	ldw	r4,-8(fp)
    5944:	e17fff17 	ldw	r5,-4(fp)
    5948:	01800104 	movi	r6,4
    594c:	000f883a 	mov	r7,zero
    5950:	0001a200 	call	1a20 <OS_EventTaskRdy>
    5954:	e0bff817 	ldw	r2,-32(fp)
    5958:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    595c:	e0bffb17 	ldw	r2,-20(fp)
    5960:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
    5964:	00024380 	call	2438 <OS_Sched>
        return (OS_ERR_NONE);
    5968:	0005883a 	mov	r2,zero
    596c:	00002d06 	br	5a24 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    5970:	e0bffe17 	ldw	r2,-8(fp)
    5974:	10800117 	ldw	r2,4(r2)
    5978:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    597c:	e0bff917 	ldw	r2,-28(fp)
    5980:	10c0058b 	ldhu	r3,22(r2)
    5984:	e0bff917 	ldw	r2,-28(fp)
    5988:	1080050b 	ldhu	r2,20(r2)
    598c:	18ffffcc 	andi	r3,r3,65535
    5990:	10bfffcc 	andi	r2,r2,65535
    5994:	18800636 	bltu	r3,r2,59b0 <OSQPostFront+0xe8>
    5998:	e0bff817 	ldw	r2,-32(fp)
    599c:	e0bffc15 	stw	r2,-16(fp)
    59a0:	e0bffc17 	ldw	r2,-16(fp)
    59a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    59a8:	00800784 	movi	r2,30
    59ac:	00001d06 	br	5a24 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
    59b0:	e0bff917 	ldw	r2,-28(fp)
    59b4:	10c00417 	ldw	r3,16(r2)
    59b8:	e0bff917 	ldw	r2,-28(fp)
    59bc:	10800117 	ldw	r2,4(r2)
    59c0:	1880041e 	bne	r3,r2,59d4 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
    59c4:	e0bff917 	ldw	r2,-28(fp)
    59c8:	10c00217 	ldw	r3,8(r2)
    59cc:	e0bff917 	ldw	r2,-28(fp)
    59d0:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
    59d4:	e0bff917 	ldw	r2,-28(fp)
    59d8:	10800417 	ldw	r2,16(r2)
    59dc:	10ffff04 	addi	r3,r2,-4
    59e0:	e0bff917 	ldw	r2,-28(fp)
    59e4:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
    59e8:	e0bff917 	ldw	r2,-28(fp)
    59ec:	10800417 	ldw	r2,16(r2)
    59f0:	e0ffff17 	ldw	r3,-4(fp)
    59f4:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    59f8:	e0bff917 	ldw	r2,-28(fp)
    59fc:	1080058b 	ldhu	r2,22(r2)
    5a00:	10800044 	addi	r2,r2,1
    5a04:	1007883a 	mov	r3,r2
    5a08:	e0bff917 	ldw	r2,-28(fp)
    5a0c:	10c0058d 	sth	r3,22(r2)
    5a10:	e0bff817 	ldw	r2,-32(fp)
    5a14:	e0bffd15 	stw	r2,-12(fp)
    5a18:	e0bffd17 	ldw	r2,-12(fp)
    5a1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    5a20:	0005883a 	mov	r2,zero
}
    5a24:	e037883a 	mov	sp,fp
    5a28:	dfc00117 	ldw	ra,4(sp)
    5a2c:	df000017 	ldw	fp,0(sp)
    5a30:	dec00204 	addi	sp,sp,8
    5a34:	f800283a 	ret

00005a38 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
    5a38:	defff504 	addi	sp,sp,-44
    5a3c:	dfc00a15 	stw	ra,40(sp)
    5a40:	df000915 	stw	fp,36(sp)
    5a44:	df000904 	addi	fp,sp,36
    5a48:	e13ffd15 	stw	r4,-12(fp)
    5a4c:	e17ffe15 	stw	r5,-8(fp)
    5a50:	3005883a 	mov	r2,r6
    5a54:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    5a58:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    5a5c:	e0bffd17 	ldw	r2,-12(fp)
    5a60:	1000021e 	bne	r2,zero,5a6c <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
    5a64:	00800104 	movi	r2,4
    5a68:	00007106 	br	5c30 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    5a6c:	e0bffd17 	ldw	r2,-12(fp)
    5a70:	10800003 	ldbu	r2,0(r2)
    5a74:	10803fcc 	andi	r2,r2,255
    5a78:	108000a0 	cmpeqi	r2,r2,2
    5a7c:	1000021e 	bne	r2,zero,5a88 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
    5a80:	00800044 	movi	r2,1
    5a84:	00006a06 	br	5c30 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5a88:	0005303a 	rdctl	r2,status
    5a8c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5a90:	e0fff917 	ldw	r3,-28(fp)
    5a94:	00bfff84 	movi	r2,-2
    5a98:	1884703a 	and	r2,r3,r2
    5a9c:	1001703a 	wrctl	status,r2
  
  return context;
    5aa0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    5aa4:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
    5aa8:	e0bffd17 	ldw	r2,-12(fp)
    5aac:	10800283 	ldbu	r2,10(r2)
    5ab0:	10803fcc 	andi	r2,r2,255
    5ab4:	10001d26 	beq	r2,zero,5b2c <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
    5ab8:	e0bfff03 	ldbu	r2,-4(fp)
    5abc:	1080004c 	andi	r2,r2,1
    5ac0:	10000b26 	beq	r2,zero,5af0 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    5ac4:	00000506 	br	5adc <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    5ac8:	e13ffd17 	ldw	r4,-12(fp)
    5acc:	e17ffe17 	ldw	r5,-8(fp)
    5ad0:	01800104 	movi	r6,4
    5ad4:	000f883a 	mov	r7,zero
    5ad8:	0001a200 	call	1a20 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    5adc:	e0bffd17 	ldw	r2,-12(fp)
    5ae0:	10800283 	ldbu	r2,10(r2)
    5ae4:	10803fcc 	andi	r2,r2,255
    5ae8:	103ff71e 	bne	r2,zero,5ac8 <OSQPostOpt+0x90>
    5aec:	00000506 	br	5b04 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    5af0:	e13ffd17 	ldw	r4,-12(fp)
    5af4:	e17ffe17 	ldw	r5,-8(fp)
    5af8:	01800104 	movi	r6,4
    5afc:	000f883a 	mov	r7,zero
    5b00:	0001a200 	call	1a20 <OS_EventTaskRdy>
    5b04:	e0bff717 	ldw	r2,-36(fp)
    5b08:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5b0c:	e0bffa17 	ldw	r2,-24(fp)
    5b10:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
    5b14:	e0bfff03 	ldbu	r2,-4(fp)
    5b18:	1080010c 	andi	r2,r2,4
    5b1c:	1000011e 	bne	r2,zero,5b24 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
    5b20:	00024380 	call	2438 <OS_Sched>
        }
        return (OS_ERR_NONE);
    5b24:	0005883a 	mov	r2,zero
    5b28:	00004106 	br	5c30 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    5b2c:	e0bffd17 	ldw	r2,-12(fp)
    5b30:	10800117 	ldw	r2,4(r2)
    5b34:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    5b38:	e0bff817 	ldw	r2,-32(fp)
    5b3c:	10c0058b 	ldhu	r3,22(r2)
    5b40:	e0bff817 	ldw	r2,-32(fp)
    5b44:	1080050b 	ldhu	r2,20(r2)
    5b48:	18ffffcc 	andi	r3,r3,65535
    5b4c:	10bfffcc 	andi	r2,r2,65535
    5b50:	18800636 	bltu	r3,r2,5b6c <OSQPostOpt+0x134>
    5b54:	e0bff717 	ldw	r2,-36(fp)
    5b58:	e0bffb15 	stw	r2,-20(fp)
    5b5c:	e0bffb17 	ldw	r2,-20(fp)
    5b60:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    5b64:	00800784 	movi	r2,30
    5b68:	00003106 	br	5c30 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
    5b6c:	e0bfff03 	ldbu	r2,-4(fp)
    5b70:	1080008c 	andi	r2,r2,2
    5b74:	10001326 	beq	r2,zero,5bc4 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
    5b78:	e0bff817 	ldw	r2,-32(fp)
    5b7c:	10c00417 	ldw	r3,16(r2)
    5b80:	e0bff817 	ldw	r2,-32(fp)
    5b84:	10800117 	ldw	r2,4(r2)
    5b88:	1880041e 	bne	r3,r2,5b9c <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
    5b8c:	e0bff817 	ldw	r2,-32(fp)
    5b90:	10c00217 	ldw	r3,8(r2)
    5b94:	e0bff817 	ldw	r2,-32(fp)
    5b98:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
    5b9c:	e0bff817 	ldw	r2,-32(fp)
    5ba0:	10800417 	ldw	r2,16(r2)
    5ba4:	10ffff04 	addi	r3,r2,-4
    5ba8:	e0bff817 	ldw	r2,-32(fp)
    5bac:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
    5bb0:	e0bff817 	ldw	r2,-32(fp)
    5bb4:	10800417 	ldw	r2,16(r2)
    5bb8:	e0fffe17 	ldw	r3,-8(fp)
    5bbc:	10c00015 	stw	r3,0(r2)
    5bc0:	00001006 	br	5c04 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
    5bc4:	e0bff817 	ldw	r2,-32(fp)
    5bc8:	10800317 	ldw	r2,12(r2)
    5bcc:	11000104 	addi	r4,r2,4
    5bd0:	e0fff817 	ldw	r3,-32(fp)
    5bd4:	19000315 	stw	r4,12(r3)
    5bd8:	e0fffe17 	ldw	r3,-8(fp)
    5bdc:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
    5be0:	e0bff817 	ldw	r2,-32(fp)
    5be4:	10c00317 	ldw	r3,12(r2)
    5be8:	e0bff817 	ldw	r2,-32(fp)
    5bec:	10800217 	ldw	r2,8(r2)
    5bf0:	1880041e 	bne	r3,r2,5c04 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
    5bf4:	e0bff817 	ldw	r2,-32(fp)
    5bf8:	10c00117 	ldw	r3,4(r2)
    5bfc:	e0bff817 	ldw	r2,-32(fp)
    5c00:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    5c04:	e0bff817 	ldw	r2,-32(fp)
    5c08:	1080058b 	ldhu	r2,22(r2)
    5c0c:	10800044 	addi	r2,r2,1
    5c10:	1007883a 	mov	r3,r2
    5c14:	e0bff817 	ldw	r2,-32(fp)
    5c18:	10c0058d 	sth	r3,22(r2)
    5c1c:	e0bff717 	ldw	r2,-36(fp)
    5c20:	e0bffc15 	stw	r2,-16(fp)
    5c24:	e0bffc17 	ldw	r2,-16(fp)
    5c28:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    5c2c:	0005883a 	mov	r2,zero
}
    5c30:	e037883a 	mov	sp,fp
    5c34:	dfc00117 	ldw	ra,4(sp)
    5c38:	df000017 	ldw	fp,0(sp)
    5c3c:	dec00204 	addi	sp,sp,8
    5c40:	f800283a 	ret

00005c44 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
    5c44:	defff604 	addi	sp,sp,-40
    5c48:	df000915 	stw	fp,36(sp)
    5c4c:	df000904 	addi	fp,sp,36
    5c50:	e13ffe15 	stw	r4,-8(fp)
    5c54:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    5c58:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    5c5c:	e0bffe17 	ldw	r2,-8(fp)
    5c60:	1000021e 	bne	r2,zero,5c6c <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    5c64:	00800104 	movi	r2,4
    5c68:	00004906 	br	5d90 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
    5c6c:	e0bfff17 	ldw	r2,-4(fp)
    5c70:	1000021e 	bne	r2,zero,5c7c <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    5c74:	00800244 	movi	r2,9
    5c78:	00004506 	br	5d90 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    5c7c:	e0bffe17 	ldw	r2,-8(fp)
    5c80:	10800003 	ldbu	r2,0(r2)
    5c84:	10803fcc 	andi	r2,r2,255
    5c88:	108000a0 	cmpeqi	r2,r2,2
    5c8c:	1000021e 	bne	r2,zero,5c98 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    5c90:	00800044 	movi	r2,1
    5c94:	00003e06 	br	5d90 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5c98:	0005303a 	rdctl	r2,status
    5c9c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5ca0:	e0fffc17 	ldw	r3,-16(fp)
    5ca4:	00bfff84 	movi	r2,-2
    5ca8:	1884703a 	and	r2,r3,r2
    5cac:	1001703a 	wrctl	status,r2
  
  return context;
    5cb0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    5cb4:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    5cb8:	e0bffe17 	ldw	r2,-8(fp)
    5cbc:	10c00283 	ldbu	r3,10(r2)
    5cc0:	e0bfff17 	ldw	r2,-4(fp)
    5cc4:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
    5cc8:	e0bffe17 	ldw	r2,-8(fp)
    5ccc:	108002c4 	addi	r2,r2,11
    5cd0:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
    5cd4:	e0bfff17 	ldw	r2,-4(fp)
    5cd8:	10800204 	addi	r2,r2,8
    5cdc:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    5ce0:	e03ff705 	stb	zero,-36(fp)
    5ce4:	00000b06 	br	5d14 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
    5ce8:	e0bff917 	ldw	r2,-28(fp)
    5cec:	10c00044 	addi	r3,r2,1
    5cf0:	e0fff915 	stw	r3,-28(fp)
    5cf4:	e0fff817 	ldw	r3,-32(fp)
    5cf8:	19000044 	addi	r4,r3,1
    5cfc:	e13ff815 	stw	r4,-32(fp)
    5d00:	18c00003 	ldbu	r3,0(r3)
    5d04:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    5d08:	e0bff703 	ldbu	r2,-36(fp)
    5d0c:	10800044 	addi	r2,r2,1
    5d10:	e0bff705 	stb	r2,-36(fp)
    5d14:	e0bff703 	ldbu	r2,-36(fp)
    5d18:	108000f0 	cmpltui	r2,r2,3
    5d1c:	103ff21e 	bne	r2,zero,5ce8 <OSQQuery+0xa4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
    5d20:	e0bffe17 	ldw	r2,-8(fp)
    5d24:	10800117 	ldw	r2,4(r2)
    5d28:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
    5d2c:	e0bffb17 	ldw	r2,-20(fp)
    5d30:	1080058b 	ldhu	r2,22(r2)
    5d34:	10bfffcc 	andi	r2,r2,65535
    5d38:	10000626 	beq	r2,zero,5d54 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
    5d3c:	e0bffb17 	ldw	r2,-20(fp)
    5d40:	10800417 	ldw	r2,16(r2)
    5d44:	10c00017 	ldw	r3,0(r2)
    5d48:	e0bfff17 	ldw	r2,-4(fp)
    5d4c:	10c00015 	stw	r3,0(r2)
    5d50:	00000206 	br	5d5c <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
    5d54:	e0bfff17 	ldw	r2,-4(fp)
    5d58:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
    5d5c:	e0bffb17 	ldw	r2,-20(fp)
    5d60:	10c0058b 	ldhu	r3,22(r2)
    5d64:	e0bfff17 	ldw	r2,-4(fp)
    5d68:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
    5d6c:	e0bffb17 	ldw	r2,-20(fp)
    5d70:	10c0050b 	ldhu	r3,20(r2)
    5d74:	e0bfff17 	ldw	r2,-4(fp)
    5d78:	10c0018d 	sth	r3,6(r2)
    5d7c:	e0bffa17 	ldw	r2,-24(fp)
    5d80:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5d84:	e0bffd17 	ldw	r2,-12(fp)
    5d88:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    5d8c:	0005883a 	mov	r2,zero
}
    5d90:	e037883a 	mov	sp,fp
    5d94:	df000017 	ldw	fp,0(sp)
    5d98:	dec00104 	addi	sp,sp,4
    5d9c:	f800283a 	ret

00005da0 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
    5da0:	defffb04 	addi	sp,sp,-20
    5da4:	dfc00415 	stw	ra,16(sp)
    5da8:	df000315 	stw	fp,12(sp)
    5dac:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    5db0:	01000174 	movhi	r4,5
    5db4:	211d6a04 	addi	r4,r4,30120
    5db8:	01407804 	movi	r5,480
    5dbc:	00023840 	call	2384 <OS_MemClr>
    pq1 = &OSQTbl[0];
    5dc0:	00800174 	movhi	r2,5
    5dc4:	109d6a04 	addi	r2,r2,30120
    5dc8:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
    5dcc:	00800174 	movhi	r2,5
    5dd0:	109d7004 	addi	r2,r2,30144
    5dd4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    5dd8:	e03ffd0d 	sth	zero,-12(fp)
    5ddc:	00000c06 	br	5e10 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
    5de0:	e0bffe17 	ldw	r2,-8(fp)
    5de4:	e0ffff17 	ldw	r3,-4(fp)
    5de8:	10c00015 	stw	r3,0(r2)
        pq1++;
    5dec:	e0bffe17 	ldw	r2,-8(fp)
    5df0:	10800604 	addi	r2,r2,24
    5df4:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
    5df8:	e0bfff17 	ldw	r2,-4(fp)
    5dfc:	10800604 	addi	r2,r2,24
    5e00:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    5e04:	e0bffd0b 	ldhu	r2,-12(fp)
    5e08:	10800044 	addi	r2,r2,1
    5e0c:	e0bffd0d 	sth	r2,-12(fp)
    5e10:	e0bffd0b 	ldhu	r2,-12(fp)
    5e14:	108004f0 	cmpltui	r2,r2,19
    5e18:	103ff11e 	bne	r2,zero,5de0 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
    5e1c:	e0bffe17 	ldw	r2,-8(fp)
    5e20:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
    5e24:	00800074 	movhi	r2,1
    5e28:	108f6604 	addi	r2,r2,15768
    5e2c:	00c00174 	movhi	r3,5
    5e30:	18dd6a04 	addi	r3,r3,30120
    5e34:	10c00015 	stw	r3,0(r2)
#endif
}
    5e38:	e037883a 	mov	sp,fp
    5e3c:	dfc00117 	ldw	ra,4(sp)
    5e40:	df000017 	ldw	fp,0(sp)
    5e44:	dec00204 	addi	sp,sp,8
    5e48:	f800283a 	ret

00005e4c <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
    5e4c:	defffa04 	addi	sp,sp,-24
    5e50:	df000515 	stw	fp,20(sp)
    5e54:	df000504 	addi	fp,sp,20
    5e58:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    5e5c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    5e60:	e0bfff17 	ldw	r2,-4(fp)
    5e64:	1000021e 	bne	r2,zero,5e70 <OSSemAccept+0x24>
        return (0);
    5e68:	0005883a 	mov	r2,zero
    5e6c:	00001f06 	br	5eec <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    5e70:	e0bfff17 	ldw	r2,-4(fp)
    5e74:	10800003 	ldbu	r2,0(r2)
    5e78:	10803fcc 	andi	r2,r2,255
    5e7c:	108000e0 	cmpeqi	r2,r2,3
    5e80:	1000021e 	bne	r2,zero,5e8c <OSSemAccept+0x40>
        return (0);
    5e84:	0005883a 	mov	r2,zero
    5e88:	00001806 	br	5eec <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5e8c:	0005303a 	rdctl	r2,status
    5e90:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5e94:	e0fffd17 	ldw	r3,-12(fp)
    5e98:	00bfff84 	movi	r2,-2
    5e9c:	1884703a 	and	r2,r3,r2
    5ea0:	1001703a 	wrctl	status,r2
  
  return context;
    5ea4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    5ea8:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
    5eac:	e0bfff17 	ldw	r2,-4(fp)
    5eb0:	1080020b 	ldhu	r2,8(r2)
    5eb4:	e0bffc0d 	sth	r2,-16(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
    5eb8:	e0bffc0b 	ldhu	r2,-16(fp)
    5ebc:	10000626 	beq	r2,zero,5ed8 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
    5ec0:	e0bfff17 	ldw	r2,-4(fp)
    5ec4:	1080020b 	ldhu	r2,8(r2)
    5ec8:	10bfffc4 	addi	r2,r2,-1
    5ecc:	1007883a 	mov	r3,r2
    5ed0:	e0bfff17 	ldw	r2,-4(fp)
    5ed4:	10c0020d 	sth	r3,8(r2)
    5ed8:	e0bffb17 	ldw	r2,-20(fp)
    5edc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5ee0:	e0bffe17 	ldw	r2,-8(fp)
    5ee4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
    5ee8:	e0bffc0b 	ldhu	r2,-16(fp)
}
    5eec:	e037883a 	mov	sp,fp
    5ef0:	df000017 	ldw	fp,0(sp)
    5ef4:	dec00104 	addi	sp,sp,4
    5ef8:	f800283a 	ret

00005efc <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
    5efc:	defff904 	addi	sp,sp,-28
    5f00:	dfc00615 	stw	ra,24(sp)
    5f04:	df000515 	stw	fp,20(sp)
    5f08:	df000504 	addi	fp,sp,20
    5f0c:	2005883a 	mov	r2,r4
    5f10:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    5f14:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    5f18:	00800074 	movhi	r2,1
    5f1c:	108f6904 	addi	r2,r2,15780
    5f20:	10800003 	ldbu	r2,0(r2)
    5f24:	10803fcc 	andi	r2,r2,255
    5f28:	10000226 	beq	r2,zero,5f34 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
    5f2c:	0005883a 	mov	r2,zero
    5f30:	00002d06 	br	5fe8 <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5f34:	0005303a 	rdctl	r2,status
    5f38:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5f3c:	e0fffd17 	ldw	r3,-12(fp)
    5f40:	00bfff84 	movi	r2,-2
    5f44:	1884703a 	and	r2,r3,r2
    5f48:	1001703a 	wrctl	status,r2
  
  return context;
    5f4c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    5f50:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
    5f54:	00800074 	movhi	r2,1
    5f58:	108f6804 	addi	r2,r2,15776
    5f5c:	10800017 	ldw	r2,0(r2)
    5f60:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
    5f64:	00800074 	movhi	r2,1
    5f68:	108f6804 	addi	r2,r2,15776
    5f6c:	10800017 	ldw	r2,0(r2)
    5f70:	10000726 	beq	r2,zero,5f90 <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    5f74:	00800074 	movhi	r2,1
    5f78:	108f6804 	addi	r2,r2,15776
    5f7c:	10800017 	ldw	r2,0(r2)
    5f80:	10c00117 	ldw	r3,4(r2)
    5f84:	00800074 	movhi	r2,1
    5f88:	108f6804 	addi	r2,r2,15776
    5f8c:	10c00015 	stw	r3,0(r2)
    5f90:	e0bffb17 	ldw	r2,-20(fp)
    5f94:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5f98:	e0bffe17 	ldw	r2,-8(fp)
    5f9c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
    5fa0:	e0bffc17 	ldw	r2,-16(fp)
    5fa4:	10000f26 	beq	r2,zero,5fe4 <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
    5fa8:	e0bffc17 	ldw	r2,-16(fp)
    5fac:	00c000c4 	movi	r3,3
    5fb0:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
    5fb4:	e0bffc17 	ldw	r2,-16(fp)
    5fb8:	e0ffff0b 	ldhu	r3,-4(fp)
    5fbc:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
    5fc0:	e0bffc17 	ldw	r2,-16(fp)
    5fc4:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
    5fc8:	e0bffc17 	ldw	r2,-16(fp)
    5fcc:	00c00fc4 	movi	r3,63
    5fd0:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
    5fd4:	e0bffc17 	ldw	r2,-16(fp)
    5fd8:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
    5fdc:	e13ffc17 	ldw	r4,-16(fp)
    5fe0:	0001fc00 	call	1fc0 <OS_EventWaitListInit>
    }
    return (pevent);
    5fe4:	e0bffc17 	ldw	r2,-16(fp)
}
    5fe8:	e037883a 	mov	sp,fp
    5fec:	dfc00117 	ldw	ra,4(sp)
    5ff0:	df000017 	ldw	fp,0(sp)
    5ff4:	dec00204 	addi	sp,sp,8
    5ff8:	f800283a 	ret

00005ffc <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    5ffc:	defff304 	addi	sp,sp,-52
    6000:	dfc00c15 	stw	ra,48(sp)
    6004:	df000b15 	stw	fp,44(sp)
    6008:	df000b04 	addi	fp,sp,44
    600c:	e13ffd15 	stw	r4,-12(fp)
    6010:	2805883a 	mov	r2,r5
    6014:	e1bfff15 	stw	r6,-4(fp)
    6018:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    601c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    6020:	e0bfff17 	ldw	r2,-4(fp)
    6024:	1000021e 	bne	r2,zero,6030 <OSSemDel+0x34>
        return (pevent);
    6028:	e0bffd17 	ldw	r2,-12(fp)
    602c:	00008806 	br	6250 <OSSemDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    6030:	e0bffd17 	ldw	r2,-12(fp)
    6034:	1000051e 	bne	r2,zero,604c <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    6038:	e0bfff17 	ldw	r2,-4(fp)
    603c:	00c00104 	movi	r3,4
    6040:	10c00005 	stb	r3,0(r2)
        return (pevent);
    6044:	e0bffd17 	ldw	r2,-12(fp)
    6048:	00008106 	br	6250 <OSSemDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    604c:	e0bffd17 	ldw	r2,-12(fp)
    6050:	10800003 	ldbu	r2,0(r2)
    6054:	10803fcc 	andi	r2,r2,255
    6058:	108000e0 	cmpeqi	r2,r2,3
    605c:	1000051e 	bne	r2,zero,6074 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    6060:	e0bfff17 	ldw	r2,-4(fp)
    6064:	00c00044 	movi	r3,1
    6068:	10c00005 	stb	r3,0(r2)
        return (pevent);
    606c:	e0bffd17 	ldw	r2,-12(fp)
    6070:	00007706 	br	6250 <OSSemDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    6074:	00800074 	movhi	r2,1
    6078:	108f6904 	addi	r2,r2,15780
    607c:	10800003 	ldbu	r2,0(r2)
    6080:	10803fcc 	andi	r2,r2,255
    6084:	10000526 	beq	r2,zero,609c <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
    6088:	e0bfff17 	ldw	r2,-4(fp)
    608c:	00c003c4 	movi	r3,15
    6090:	10c00005 	stb	r3,0(r2)
        return (pevent);
    6094:	e0bffd17 	ldw	r2,-12(fp)
    6098:	00006d06 	br	6250 <OSSemDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    609c:	0005303a 	rdctl	r2,status
    60a0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    60a4:	e0fff817 	ldw	r3,-32(fp)
    60a8:	00bfff84 	movi	r2,-2
    60ac:	1884703a 	and	r2,r3,r2
    60b0:	1001703a 	wrctl	status,r2
  
  return context;
    60b4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    60b8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
    60bc:	e0bffd17 	ldw	r2,-12(fp)
    60c0:	10800283 	ldbu	r2,10(r2)
    60c4:	10803fcc 	andi	r2,r2,255
    60c8:	10000326 	beq	r2,zero,60d8 <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    60cc:	00800044 	movi	r2,1
    60d0:	e0bff505 	stb	r2,-44(fp)
    60d4:	00000106 	br	60dc <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    60d8:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
    60dc:	e0bffe03 	ldbu	r2,-8(fp)
    60e0:	10000326 	beq	r2,zero,60f0 <OSSemDel+0xf4>
    60e4:	10800060 	cmpeqi	r2,r2,1
    60e8:	10002c1e 	bne	r2,zero,619c <OSSemDel+0x1a0>
    60ec:	00004d06 	br	6224 <OSSemDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
    60f0:	e0bff503 	ldbu	r2,-44(fp)
    60f4:	10001a1e 	bne	r2,zero,6160 <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    60f8:	e0bffd17 	ldw	r2,-12(fp)
    60fc:	00c00fc4 	movi	r3,63
    6100:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    6104:	e0bffd17 	ldw	r2,-12(fp)
    6108:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    610c:	e0bffd17 	ldw	r2,-12(fp)
    6110:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    6114:	00800074 	movhi	r2,1
    6118:	108f6804 	addi	r2,r2,15776
    611c:	10c00017 	ldw	r3,0(r2)
    6120:	e0bffd17 	ldw	r2,-12(fp)
    6124:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    6128:	e0bffd17 	ldw	r2,-12(fp)
    612c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    6130:	00800074 	movhi	r2,1
    6134:	108f6804 	addi	r2,r2,15776
    6138:	e0fffd17 	ldw	r3,-12(fp)
    613c:	10c00015 	stw	r3,0(r2)
    6140:	e0bff717 	ldw	r2,-36(fp)
    6144:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6148:	e0bff917 	ldw	r2,-28(fp)
    614c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    6150:	e0bfff17 	ldw	r2,-4(fp)
    6154:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
    6158:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    615c:	00003b06 	br	624c <OSSemDel+0x250>
    6160:	e0bff717 	ldw	r2,-36(fp)
    6164:	e0bffa15 	stw	r2,-24(fp)
    6168:	e0bffa17 	ldw	r2,-24(fp)
    616c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
    6170:	e0bfff17 	ldw	r2,-4(fp)
    6174:	00c01244 	movi	r3,73
    6178:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    617c:	e0bffd17 	ldw	r2,-12(fp)
    6180:	e0bff615 	stw	r2,-40(fp)
             }
             break;
    6184:	00003106 	br	624c <OSSemDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    6188:	e13ffd17 	ldw	r4,-12(fp)
    618c:	000b883a 	mov	r5,zero
    6190:	01800044 	movi	r6,1
    6194:	000f883a 	mov	r7,zero
    6198:	0001a200 	call	1a20 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
    619c:	e0bffd17 	ldw	r2,-12(fp)
    61a0:	10800283 	ldbu	r2,10(r2)
    61a4:	10803fcc 	andi	r2,r2,255
    61a8:	103ff71e 	bne	r2,zero,6188 <OSSemDel+0x18c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    61ac:	e0bffd17 	ldw	r2,-12(fp)
    61b0:	00c00fc4 	movi	r3,63
    61b4:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    61b8:	e0bffd17 	ldw	r2,-12(fp)
    61bc:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    61c0:	e0bffd17 	ldw	r2,-12(fp)
    61c4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    61c8:	00800074 	movhi	r2,1
    61cc:	108f6804 	addi	r2,r2,15776
    61d0:	10c00017 	ldw	r3,0(r2)
    61d4:	e0bffd17 	ldw	r2,-12(fp)
    61d8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    61dc:	e0bffd17 	ldw	r2,-12(fp)
    61e0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    61e4:	00800074 	movhi	r2,1
    61e8:	108f6804 	addi	r2,r2,15776
    61ec:	e0fffd17 	ldw	r3,-12(fp)
    61f0:	10c00015 	stw	r3,0(r2)
    61f4:	e0bff717 	ldw	r2,-36(fp)
    61f8:	e0bffb15 	stw	r2,-20(fp)
    61fc:	e0bffb17 	ldw	r2,-20(fp)
    6200:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    6204:	e0bff503 	ldbu	r2,-44(fp)
    6208:	10800058 	cmpnei	r2,r2,1
    620c:	1000011e 	bne	r2,zero,6214 <OSSemDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    6210:	00024380 	call	2438 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    6214:	e0bfff17 	ldw	r2,-4(fp)
    6218:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
    621c:	e03ff615 	stw	zero,-40(fp)
             break;
    6220:	00000a06 	br	624c <OSSemDel+0x250>
    6224:	e0bff717 	ldw	r2,-36(fp)
    6228:	e0bffc15 	stw	r2,-16(fp)
    622c:	e0bffc17 	ldw	r2,-16(fp)
    6230:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    6234:	e0bfff17 	ldw	r2,-4(fp)
    6238:	00c001c4 	movi	r3,7
    623c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    6240:	e0bffd17 	ldw	r2,-12(fp)
    6244:	e0bff615 	stw	r2,-40(fp)
             break;
    6248:	0001883a 	nop
    }
    return (pevent_return);
    624c:	e0bff617 	ldw	r2,-40(fp)
}
    6250:	e037883a 	mov	sp,fp
    6254:	dfc00117 	ldw	ra,4(sp)
    6258:	df000017 	ldw	fp,0(sp)
    625c:	dec00204 	addi	sp,sp,8
    6260:	f800283a 	ret

00006264 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    6264:	defff504 	addi	sp,sp,-44
    6268:	dfc00a15 	stw	ra,40(sp)
    626c:	df000915 	stw	fp,36(sp)
    6270:	df000904 	addi	fp,sp,36
    6274:	e13ffd15 	stw	r4,-12(fp)
    6278:	2805883a 	mov	r2,r5
    627c:	e1bfff15 	stw	r6,-4(fp)
    6280:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    6284:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    6288:	e0bfff17 	ldw	r2,-4(fp)
    628c:	1000011e 	bne	r2,zero,6294 <OSSemPend+0x30>
        return;
    6290:	00008906 	br	64b8 <OSSemPend+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    6294:	e0bffd17 	ldw	r2,-12(fp)
    6298:	1000041e 	bne	r2,zero,62ac <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
    629c:	e0bfff17 	ldw	r2,-4(fp)
    62a0:	00c00104 	movi	r3,4
    62a4:	10c00005 	stb	r3,0(r2)
        return;
    62a8:	00008306 	br	64b8 <OSSemPend+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    62ac:	e0bffd17 	ldw	r2,-12(fp)
    62b0:	10800003 	ldbu	r2,0(r2)
    62b4:	10803fcc 	andi	r2,r2,255
    62b8:	108000e0 	cmpeqi	r2,r2,3
    62bc:	1000041e 	bne	r2,zero,62d0 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    62c0:	e0bfff17 	ldw	r2,-4(fp)
    62c4:	00c00044 	movi	r3,1
    62c8:	10c00005 	stb	r3,0(r2)
        return;
    62cc:	00007a06 	br	64b8 <OSSemPend+0x254>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
    62d0:	00800074 	movhi	r2,1
    62d4:	108f6904 	addi	r2,r2,15780
    62d8:	10800003 	ldbu	r2,0(r2)
    62dc:	10803fcc 	andi	r2,r2,255
    62e0:	10000426 	beq	r2,zero,62f4 <OSSemPend+0x90>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
    62e4:	e0bfff17 	ldw	r2,-4(fp)
    62e8:	00c00084 	movi	r3,2
    62ec:	10c00005 	stb	r3,0(r2)
        return;
    62f0:	00007106 	br	64b8 <OSSemPend+0x254>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
    62f4:	00800074 	movhi	r2,1
    62f8:	108f5b04 	addi	r2,r2,15724
    62fc:	10800003 	ldbu	r2,0(r2)
    6300:	10803fcc 	andi	r2,r2,255
    6304:	10000426 	beq	r2,zero,6318 <OSSemPend+0xb4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
    6308:	e0bfff17 	ldw	r2,-4(fp)
    630c:	00c00344 	movi	r3,13
    6310:	10c00005 	stb	r3,0(r2)
        return;
    6314:	00006806 	br	64b8 <OSSemPend+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6318:	0005303a 	rdctl	r2,status
    631c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6320:	e0fff817 	ldw	r3,-32(fp)
    6324:	00bfff84 	movi	r2,-2
    6328:	1884703a 	and	r2,r3,r2
    632c:	1001703a 	wrctl	status,r2
  
  return context;
    6330:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    6334:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
    6338:	e0bffd17 	ldw	r2,-12(fp)
    633c:	1080020b 	ldhu	r2,8(r2)
    6340:	10bfffcc 	andi	r2,r2,65535
    6344:	10000d26 	beq	r2,zero,637c <OSSemPend+0x118>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
    6348:	e0bffd17 	ldw	r2,-12(fp)
    634c:	1080020b 	ldhu	r2,8(r2)
    6350:	10bfffc4 	addi	r2,r2,-1
    6354:	1007883a 	mov	r3,r2
    6358:	e0bffd17 	ldw	r2,-12(fp)
    635c:	10c0020d 	sth	r3,8(r2)
    6360:	e0bff717 	ldw	r2,-36(fp)
    6364:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6368:	e0bff917 	ldw	r2,-28(fp)
    636c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    6370:	e0bfff17 	ldw	r2,-4(fp)
    6374:	10000005 	stb	zero,0(r2)
        return;
    6378:	00004f06 	br	64b8 <OSSemPend+0x254>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
    637c:	00800074 	movhi	r2,1
    6380:	108f6a04 	addi	r2,r2,15784
    6384:	10c00017 	ldw	r3,0(r2)
    6388:	00800074 	movhi	r2,1
    638c:	108f6a04 	addi	r2,r2,15784
    6390:	10800017 	ldw	r2,0(r2)
    6394:	10800c03 	ldbu	r2,48(r2)
    6398:	10800054 	ori	r2,r2,1
    639c:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    63a0:	00800074 	movhi	r2,1
    63a4:	108f6a04 	addi	r2,r2,15784
    63a8:	10800017 	ldw	r2,0(r2)
    63ac:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
    63b0:	00800074 	movhi	r2,1
    63b4:	108f6a04 	addi	r2,r2,15784
    63b8:	10800017 	ldw	r2,0(r2)
    63bc:	e0fffe0b 	ldhu	r3,-8(fp)
    63c0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    63c4:	e13ffd17 	ldw	r4,-12(fp)
    63c8:	0001bb80 	call	1bb8 <OS_EventTaskWait>
    63cc:	e0bff717 	ldw	r2,-36(fp)
    63d0:	e0bffa15 	stw	r2,-24(fp)
    63d4:	e0bffa17 	ldw	r2,-24(fp)
    63d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
    63dc:	00024380 	call	2438 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    63e0:	0005303a 	rdctl	r2,status
    63e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    63e8:	e0fffb17 	ldw	r3,-20(fp)
    63ec:	00bfff84 	movi	r2,-2
    63f0:	1884703a 	and	r2,r3,r2
    63f4:	1001703a 	wrctl	status,r2
  
  return context;
    63f8:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
    63fc:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    6400:	00800074 	movhi	r2,1
    6404:	108f6a04 	addi	r2,r2,15784
    6408:	10800017 	ldw	r2,0(r2)
    640c:	10800c43 	ldbu	r2,49(r2)
    6410:	10803fcc 	andi	r2,r2,255
    6414:	10000326 	beq	r2,zero,6424 <OSSemPend+0x1c0>
    6418:	108000a0 	cmpeqi	r2,r2,2
    641c:	1000041e 	bne	r2,zero,6430 <OSSemPend+0x1cc>
    6420:	00000706 	br	6440 <OSSemPend+0x1dc>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
    6424:	e0bfff17 	ldw	r2,-4(fp)
    6428:	10000005 	stb	zero,0(r2)
             break;
    642c:	00000e06 	br	6468 <OSSemPend+0x204>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    6430:	e0bfff17 	ldw	r2,-4(fp)
    6434:	00c00384 	movi	r3,14
    6438:	10c00005 	stb	r3,0(r2)
             break;
    643c:	00000a06 	br	6468 <OSSemPend+0x204>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
    6440:	00800074 	movhi	r2,1
    6444:	108f6a04 	addi	r2,r2,15784
    6448:	10800017 	ldw	r2,0(r2)
    644c:	1009883a 	mov	r4,r2
    6450:	e17ffd17 	ldw	r5,-12(fp)
    6454:	0001e100 	call	1e10 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    6458:	e0bfff17 	ldw	r2,-4(fp)
    645c:	00c00284 	movi	r3,10
    6460:	10c00005 	stb	r3,0(r2)
             break;
    6464:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    6468:	00800074 	movhi	r2,1
    646c:	108f6a04 	addi	r2,r2,15784
    6470:	10800017 	ldw	r2,0(r2)
    6474:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    6478:	00800074 	movhi	r2,1
    647c:	108f6a04 	addi	r2,r2,15784
    6480:	10800017 	ldw	r2,0(r2)
    6484:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    6488:	00800074 	movhi	r2,1
    648c:	108f6a04 	addi	r2,r2,15784
    6490:	10800017 	ldw	r2,0(r2)
    6494:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    6498:	00800074 	movhi	r2,1
    649c:	108f6a04 	addi	r2,r2,15784
    64a0:	10800017 	ldw	r2,0(r2)
    64a4:	10000815 	stw	zero,32(r2)
    64a8:	e0bff717 	ldw	r2,-36(fp)
    64ac:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    64b0:	e0bffc17 	ldw	r2,-16(fp)
    64b4:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
    64b8:	e037883a 	mov	sp,fp
    64bc:	dfc00117 	ldw	ra,4(sp)
    64c0:	df000017 	ldw	fp,0(sp)
    64c4:	dec00204 	addi	sp,sp,8
    64c8:	f800283a 	ret

000064cc <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    64cc:	defff604 	addi	sp,sp,-40
    64d0:	dfc00915 	stw	ra,36(sp)
    64d4:	df000815 	stw	fp,32(sp)
    64d8:	df000804 	addi	fp,sp,32
    64dc:	e13ffd15 	stw	r4,-12(fp)
    64e0:	2805883a 	mov	r2,r5
    64e4:	e1bfff15 	stw	r6,-4(fp)
    64e8:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    64ec:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    64f0:	e0bfff17 	ldw	r2,-4(fp)
    64f4:	1000021e 	bne	r2,zero,6500 <OSSemPendAbort+0x34>
        return (0);
    64f8:	0005883a 	mov	r2,zero
    64fc:	00004906 	br	6624 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    6500:	e0bffd17 	ldw	r2,-12(fp)
    6504:	1000051e 	bne	r2,zero,651c <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    6508:	e0bfff17 	ldw	r2,-4(fp)
    650c:	00c00104 	movi	r3,4
    6510:	10c00005 	stb	r3,0(r2)
        return (0);
    6514:	0005883a 	mov	r2,zero
    6518:	00004206 	br	6624 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    651c:	e0bffd17 	ldw	r2,-12(fp)
    6520:	10800003 	ldbu	r2,0(r2)
    6524:	10803fcc 	andi	r2,r2,255
    6528:	108000e0 	cmpeqi	r2,r2,3
    652c:	1000051e 	bne	r2,zero,6544 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    6530:	e0bfff17 	ldw	r2,-4(fp)
    6534:	00c00044 	movi	r3,1
    6538:	10c00005 	stb	r3,0(r2)
        return (0);
    653c:	0005883a 	mov	r2,zero
    6540:	00003806 	br	6624 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6544:	0005303a 	rdctl	r2,status
    6548:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    654c:	e0fffa17 	ldw	r3,-24(fp)
    6550:	00bfff84 	movi	r2,-2
    6554:	1884703a 	and	r2,r3,r2
    6558:	1001703a 	wrctl	status,r2
  
  return context;
    655c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    6560:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
    6564:	e0bffd17 	ldw	r2,-12(fp)
    6568:	10800283 	ldbu	r2,10(r2)
    656c:	10803fcc 	andi	r2,r2,255
    6570:	10002526 	beq	r2,zero,6608 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
    6574:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
    6578:	e0bffe03 	ldbu	r2,-8(fp)
    657c:	10800060 	cmpeqi	r2,r2,1
    6580:	10000e26 	beq	r2,zero,65bc <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    6584:	00000806 	br	65a8 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    6588:	e13ffd17 	ldw	r4,-12(fp)
    658c:	000b883a 	mov	r5,zero
    6590:	01800044 	movi	r6,1
    6594:	01c00084 	movi	r7,2
    6598:	0001a200 	call	1a20 <OS_EventTaskRdy>
                     nbr_tasks++;
    659c:	e0bff803 	ldbu	r2,-32(fp)
    65a0:	10800044 	addi	r2,r2,1
    65a4:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    65a8:	e0bffd17 	ldw	r2,-12(fp)
    65ac:	10800283 	ldbu	r2,10(r2)
    65b0:	10803fcc 	andi	r2,r2,255
    65b4:	103ff41e 	bne	r2,zero,6588 <OSSemPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    65b8:	00000906 	br	65e0 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    65bc:	e13ffd17 	ldw	r4,-12(fp)
    65c0:	000b883a 	mov	r5,zero
    65c4:	01800044 	movi	r6,1
    65c8:	01c00084 	movi	r7,2
    65cc:	0001a200 	call	1a20 <OS_EventTaskRdy>
                 nbr_tasks++;
    65d0:	e0bff803 	ldbu	r2,-32(fp)
    65d4:	10800044 	addi	r2,r2,1
    65d8:	e0bff805 	stb	r2,-32(fp)
                 break;
    65dc:	0001883a 	nop
    65e0:	e0bff917 	ldw	r2,-28(fp)
    65e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    65e8:	e0bffb17 	ldw	r2,-20(fp)
    65ec:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    65f0:	00024380 	call	2438 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    65f4:	e0bfff17 	ldw	r2,-4(fp)
    65f8:	00c00384 	movi	r3,14
    65fc:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    6600:	e0bff803 	ldbu	r2,-32(fp)
    6604:	00000706 	br	6624 <OSSemPendAbort+0x158>
    6608:	e0bff917 	ldw	r2,-28(fp)
    660c:	e0bffc15 	stw	r2,-16(fp)
    6610:	e0bffc17 	ldw	r2,-16(fp)
    6614:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    6618:	e0bfff17 	ldw	r2,-4(fp)
    661c:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
    6620:	0005883a 	mov	r2,zero
}
    6624:	e037883a 	mov	sp,fp
    6628:	dfc00117 	ldw	ra,4(sp)
    662c:	df000017 	ldw	fp,0(sp)
    6630:	dec00204 	addi	sp,sp,8
    6634:	f800283a 	ret

00006638 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
    6638:	defff804 	addi	sp,sp,-32
    663c:	dfc00715 	stw	ra,28(sp)
    6640:	df000615 	stw	fp,24(sp)
    6644:	df000604 	addi	fp,sp,24
    6648:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    664c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    6650:	e0bfff17 	ldw	r2,-4(fp)
    6654:	1000021e 	bne	r2,zero,6660 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
    6658:	00800104 	movi	r2,4
    665c:	00003506 	br	6734 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    6660:	e0bfff17 	ldw	r2,-4(fp)
    6664:	10800003 	ldbu	r2,0(r2)
    6668:	10803fcc 	andi	r2,r2,255
    666c:	108000e0 	cmpeqi	r2,r2,3
    6670:	1000021e 	bne	r2,zero,667c <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
    6674:	00800044 	movi	r2,1
    6678:	00002e06 	br	6734 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    667c:	0005303a 	rdctl	r2,status
    6680:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6684:	e0fffb17 	ldw	r3,-20(fp)
    6688:	00bfff84 	movi	r2,-2
    668c:	1884703a 	and	r2,r3,r2
    6690:	1001703a 	wrctl	status,r2
  
  return context;
    6694:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    6698:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
    669c:	e0bfff17 	ldw	r2,-4(fp)
    66a0:	10800283 	ldbu	r2,10(r2)
    66a4:	10803fcc 	andi	r2,r2,255
    66a8:	10000c26 	beq	r2,zero,66dc <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    66ac:	e13fff17 	ldw	r4,-4(fp)
    66b0:	000b883a 	mov	r5,zero
    66b4:	01800044 	movi	r6,1
    66b8:	000f883a 	mov	r7,zero
    66bc:	0001a200 	call	1a20 <OS_EventTaskRdy>
    66c0:	e0bffa17 	ldw	r2,-24(fp)
    66c4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    66c8:	e0bffc17 	ldw	r2,-16(fp)
    66cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    66d0:	00024380 	call	2438 <OS_Sched>
        return (OS_ERR_NONE);
    66d4:	0005883a 	mov	r2,zero
    66d8:	00001606 	br	6734 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
    66dc:	e0bfff17 	ldw	r2,-4(fp)
    66e0:	1080020b 	ldhu	r2,8(r2)
    66e4:	10ffffcc 	andi	r3,r2,65535
    66e8:	00bfffd4 	movui	r2,65535
    66ec:	18800c26 	beq	r3,r2,6720 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
    66f0:	e0bfff17 	ldw	r2,-4(fp)
    66f4:	1080020b 	ldhu	r2,8(r2)
    66f8:	10800044 	addi	r2,r2,1
    66fc:	1007883a 	mov	r3,r2
    6700:	e0bfff17 	ldw	r2,-4(fp)
    6704:	10c0020d 	sth	r3,8(r2)
    6708:	e0bffa17 	ldw	r2,-24(fp)
    670c:	e0bffd15 	stw	r2,-12(fp)
    6710:	e0bffd17 	ldw	r2,-12(fp)
    6714:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    6718:	0005883a 	mov	r2,zero
    671c:	00000506 	br	6734 <OSSemPost+0xfc>
    6720:	e0bffa17 	ldw	r2,-24(fp)
    6724:	e0bffe15 	stw	r2,-8(fp)
    6728:	e0bffe17 	ldw	r2,-8(fp)
    672c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
    6730:	00800c84 	movi	r2,50
}
    6734:	e037883a 	mov	sp,fp
    6738:	dfc00117 	ldw	ra,4(sp)
    673c:	df000017 	ldw	fp,0(sp)
    6740:	dec00204 	addi	sp,sp,8
    6744:	f800283a 	ret

00006748 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
    6748:	defff704 	addi	sp,sp,-36
    674c:	df000815 	stw	fp,32(sp)
    6750:	df000804 	addi	fp,sp,32
    6754:	e13ffe15 	stw	r4,-8(fp)
    6758:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    675c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    6760:	e0bffe17 	ldw	r2,-8(fp)
    6764:	1000021e 	bne	r2,zero,6770 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    6768:	00800104 	movi	r2,4
    676c:	00003606 	br	6848 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
    6770:	e0bfff17 	ldw	r2,-4(fp)
    6774:	1000021e 	bne	r2,zero,6780 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    6778:	00800244 	movi	r2,9
    677c:	00003206 	br	6848 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    6780:	e0bffe17 	ldw	r2,-8(fp)
    6784:	10800003 	ldbu	r2,0(r2)
    6788:	10803fcc 	andi	r2,r2,255
    678c:	108000e0 	cmpeqi	r2,r2,3
    6790:	1000021e 	bne	r2,zero,679c <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    6794:	00800044 	movi	r2,1
    6798:	00002b06 	br	6848 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    679c:	0005303a 	rdctl	r2,status
    67a0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    67a4:	e0fffc17 	ldw	r3,-16(fp)
    67a8:	00bfff84 	movi	r2,-2
    67ac:	1884703a 	and	r2,r3,r2
    67b0:	1001703a 	wrctl	status,r2
  
  return context;
    67b4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    67b8:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    67bc:	e0bffe17 	ldw	r2,-8(fp)
    67c0:	10c00283 	ldbu	r3,10(r2)
    67c4:	e0bfff17 	ldw	r2,-4(fp)
    67c8:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
    67cc:	e0bffe17 	ldw	r2,-8(fp)
    67d0:	108002c4 	addi	r2,r2,11
    67d4:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
    67d8:	e0bfff17 	ldw	r2,-4(fp)
    67dc:	10800084 	addi	r2,r2,2
    67e0:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    67e4:	e03ffa05 	stb	zero,-24(fp)
    67e8:	00000b06 	br	6818 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
    67ec:	e0bff917 	ldw	r2,-28(fp)
    67f0:	10c00044 	addi	r3,r2,1
    67f4:	e0fff915 	stw	r3,-28(fp)
    67f8:	e0fff817 	ldw	r3,-32(fp)
    67fc:	19000044 	addi	r4,r3,1
    6800:	e13ff815 	stw	r4,-32(fp)
    6804:	18c00003 	ldbu	r3,0(r3)
    6808:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    680c:	e0bffa03 	ldbu	r2,-24(fp)
    6810:	10800044 	addi	r2,r2,1
    6814:	e0bffa05 	stb	r2,-24(fp)
    6818:	e0bffa03 	ldbu	r2,-24(fp)
    681c:	108000f0 	cmpltui	r2,r2,3
    6820:	103ff21e 	bne	r2,zero,67ec <OSSemQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
    6824:	e0bffe17 	ldw	r2,-8(fp)
    6828:	10c0020b 	ldhu	r3,8(r2)
    682c:	e0bfff17 	ldw	r2,-4(fp)
    6830:	10c0000d 	sth	r3,0(r2)
    6834:	e0bffb17 	ldw	r2,-20(fp)
    6838:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    683c:	e0bffd17 	ldw	r2,-12(fp)
    6840:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    6844:	0005883a 	mov	r2,zero
}
    6848:	e037883a 	mov	sp,fp
    684c:	df000017 	ldw	fp,0(sp)
    6850:	dec00104 	addi	sp,sp,4
    6854:	f800283a 	ret

00006858 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
    6858:	defff904 	addi	sp,sp,-28
    685c:	df000615 	stw	fp,24(sp)
    6860:	df000604 	addi	fp,sp,24
    6864:	e13ffd15 	stw	r4,-12(fp)
    6868:	2805883a 	mov	r2,r5
    686c:	e1bfff15 	stw	r6,-4(fp)
    6870:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    6874:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    6878:	e0bfff17 	ldw	r2,-4(fp)
    687c:	1000011e 	bne	r2,zero,6884 <OSSemSet+0x2c>
        return;
    6880:	00003006 	br	6944 <OSSemSet+0xec>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    6884:	e0bffd17 	ldw	r2,-12(fp)
    6888:	1000041e 	bne	r2,zero,689c <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    688c:	e0bfff17 	ldw	r2,-4(fp)
    6890:	00c00104 	movi	r3,4
    6894:	10c00005 	stb	r3,0(r2)
        return;
    6898:	00002a06 	br	6944 <OSSemSet+0xec>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    689c:	e0bffd17 	ldw	r2,-12(fp)
    68a0:	10800003 	ldbu	r2,0(r2)
    68a4:	10803fcc 	andi	r2,r2,255
    68a8:	108000e0 	cmpeqi	r2,r2,3
    68ac:	1000041e 	bne	r2,zero,68c0 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
    68b0:	e0bfff17 	ldw	r2,-4(fp)
    68b4:	00c00044 	movi	r3,1
    68b8:	10c00005 	stb	r3,0(r2)
        return;
    68bc:	00002106 	br	6944 <OSSemSet+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    68c0:	0005303a 	rdctl	r2,status
    68c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    68c8:	e0fffb17 	ldw	r3,-20(fp)
    68cc:	00bfff84 	movi	r2,-2
    68d0:	1884703a 	and	r2,r3,r2
    68d4:	1001703a 	wrctl	status,r2
  
  return context;
    68d8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    68dc:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
    68e0:	e0bfff17 	ldw	r2,-4(fp)
    68e4:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
    68e8:	e0bffd17 	ldw	r2,-12(fp)
    68ec:	1080020b 	ldhu	r2,8(r2)
    68f0:	10bfffcc 	andi	r2,r2,65535
    68f4:	10000426 	beq	r2,zero,6908 <OSSemSet+0xb0>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
    68f8:	e0bffd17 	ldw	r2,-12(fp)
    68fc:	e0fffe0b 	ldhu	r3,-8(fp)
    6900:	10c0020d 	sth	r3,8(r2)
    6904:	00000b06 	br	6934 <OSSemSet+0xdc>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
    6908:	e0bffd17 	ldw	r2,-12(fp)
    690c:	10800283 	ldbu	r2,10(r2)
    6910:	10803fcc 	andi	r2,r2,255
    6914:	1000041e 	bne	r2,zero,6928 <OSSemSet+0xd0>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
    6918:	e0bffd17 	ldw	r2,-12(fp)
    691c:	e0fffe0b 	ldhu	r3,-8(fp)
    6920:	10c0020d 	sth	r3,8(r2)
    6924:	00000306 	br	6934 <OSSemSet+0xdc>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
    6928:	e0bfff17 	ldw	r2,-4(fp)
    692c:	00c01244 	movi	r3,73
    6930:	10c00005 	stb	r3,0(r2)
    6934:	e0bffa17 	ldw	r2,-24(fp)
    6938:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    693c:	e0bffc17 	ldw	r2,-16(fp)
    6940:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
    6944:	e037883a 	mov	sp,fp
    6948:	df000017 	ldw	fp,0(sp)
    694c:	dec00104 	addi	sp,sp,4
    6950:	f800283a 	ret

00006954 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
    6954:	defff104 	addi	sp,sp,-60
    6958:	dfc00e15 	stw	ra,56(sp)
    695c:	df000d15 	stw	fp,52(sp)
    6960:	df000d04 	addi	fp,sp,52
    6964:	2007883a 	mov	r3,r4
    6968:	2805883a 	mov	r2,r5
    696c:	e0fffe05 	stb	r3,-8(fp)
    6970:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
    6974:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
    6978:	e0bffe03 	ldbu	r2,-8(fp)
    697c:	10800530 	cmpltui	r2,r2,20
    6980:	1000051e 	bne	r2,zero,6998 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
    6984:	e0bffe03 	ldbu	r2,-8(fp)
    6988:	10803fe0 	cmpeqi	r2,r2,255
    698c:	1000021e 	bne	r2,zero,6998 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
    6990:	00800a84 	movi	r2,42
    6994:	00013a06 	br	6e80 <OSTaskChangePrio+0x52c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
    6998:	e0bfff03 	ldbu	r2,-4(fp)
    699c:	10800530 	cmpltui	r2,r2,20
    69a0:	1000021e 	bne	r2,zero,69ac <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
    69a4:	00800a84 	movi	r2,42
    69a8:	00013506 	br	6e80 <OSTaskChangePrio+0x52c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    69ac:	0005303a 	rdctl	r2,status
    69b0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    69b4:	e0fff917 	ldw	r3,-28(fp)
    69b8:	00bfff84 	movi	r2,-2
    69bc:	1884703a 	and	r2,r3,r2
    69c0:	1001703a 	wrctl	status,r2
  
  return context;
    69c4:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    69c8:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
    69cc:	e0ffff03 	ldbu	r3,-4(fp)
    69d0:	008001b4 	movhi	r2,6
    69d4:	10a3f604 	addi	r2,r2,-28712
    69d8:	18c7883a 	add	r3,r3,r3
    69dc:	18c7883a 	add	r3,r3,r3
    69e0:	10c5883a 	add	r2,r2,r3
    69e4:	10800017 	ldw	r2,0(r2)
    69e8:	10000626 	beq	r2,zero,6a04 <OSTaskChangePrio+0xb0>
    69ec:	e0bff517 	ldw	r2,-44(fp)
    69f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    69f4:	e0bffa17 	ldw	r2,-24(fp)
    69f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
    69fc:	00800a04 	movi	r2,40
    6a00:	00011f06 	br	6e80 <OSTaskChangePrio+0x52c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
    6a04:	e0bffe03 	ldbu	r2,-8(fp)
    6a08:	10803fd8 	cmpnei	r2,r2,255
    6a0c:	1000051e 	bne	r2,zero,6a24 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
    6a10:	00800074 	movhi	r2,1
    6a14:	108f6a04 	addi	r2,r2,15784
    6a18:	10800017 	ldw	r2,0(r2)
    6a1c:	10800c83 	ldbu	r2,50(r2)
    6a20:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
    6a24:	e0fffe03 	ldbu	r3,-8(fp)
    6a28:	008001b4 	movhi	r2,6
    6a2c:	10a3f604 	addi	r2,r2,-28712
    6a30:	18c7883a 	add	r3,r3,r3
    6a34:	18c7883a 	add	r3,r3,r3
    6a38:	10c5883a 	add	r2,r2,r3
    6a3c:	10800017 	ldw	r2,0(r2)
    6a40:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
    6a44:	e0bff617 	ldw	r2,-40(fp)
    6a48:	1000061e 	bne	r2,zero,6a64 <OSTaskChangePrio+0x110>
    6a4c:	e0bff517 	ldw	r2,-44(fp)
    6a50:	e0bffb15 	stw	r2,-20(fp)
    6a54:	e0bffb17 	ldw	r2,-20(fp)
    6a58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
    6a5c:	00800a44 	movi	r2,41
    6a60:	00010706 	br	6e80 <OSTaskChangePrio+0x52c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
    6a64:	e0bff617 	ldw	r2,-40(fp)
    6a68:	10800058 	cmpnei	r2,r2,1
    6a6c:	1000061e 	bne	r2,zero,6a88 <OSTaskChangePrio+0x134>
    6a70:	e0bff517 	ldw	r2,-44(fp)
    6a74:	e0bffc15 	stw	r2,-16(fp)
    6a78:	e0bffc17 	ldw	r2,-16(fp)
    6a7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
    6a80:	008010c4 	movi	r2,67
    6a84:	0000fe06 	br	6e80 <OSTaskChangePrio+0x52c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
    6a88:	e0bfff03 	ldbu	r2,-4(fp)
    6a8c:	1004d0fa 	srli	r2,r2,3
    6a90:	e0bff705 	stb	r2,-36(fp)
    x_new                 = (INT8U)(newprio & 0x07);
    6a94:	e0bfff03 	ldbu	r2,-4(fp)
    6a98:	108001cc 	andi	r2,r2,7
    6a9c:	e0bff745 	stb	r2,-35(fp)
    bity_new              = (INT8U)(1 << y_new);
    6aa0:	e0bff703 	ldbu	r2,-36(fp)
    6aa4:	00c00044 	movi	r3,1
    6aa8:	1884983a 	sll	r2,r3,r2
    6aac:	e0bff785 	stb	r2,-34(fp)
    bitx_new              = (INT8U)(1 << x_new);
    6ab0:	e0bff743 	ldbu	r2,-35(fp)
    6ab4:	00c00044 	movi	r3,1
    6ab8:	1884983a 	sll	r2,r3,r2
    6abc:	e0bff7c5 	stb	r2,-33(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
    6ac0:	e0fffe03 	ldbu	r3,-8(fp)
    6ac4:	008001b4 	movhi	r2,6
    6ac8:	10a3f604 	addi	r2,r2,-28712
    6acc:	18c7883a 	add	r3,r3,r3
    6ad0:	18c7883a 	add	r3,r3,r3
    6ad4:	10c5883a 	add	r2,r2,r3
    6ad8:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
    6adc:	e0ffff03 	ldbu	r3,-4(fp)
    6ae0:	008001b4 	movhi	r2,6
    6ae4:	10a3f604 	addi	r2,r2,-28712
    6ae8:	18c7883a 	add	r3,r3,r3
    6aec:	18c7883a 	add	r3,r3,r3
    6af0:	10c5883a 	add	r2,r2,r3
    6af4:	e0fff617 	ldw	r3,-40(fp)
    6af8:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
    6afc:	e0bff617 	ldw	r2,-40(fp)
    6b00:	10800d03 	ldbu	r2,52(r2)
    6b04:	e0bff805 	stb	r2,-32(fp)
    bity_old              =  ptcb->OSTCBBitY;
    6b08:	e0bff617 	ldw	r2,-40(fp)
    6b0c:	10800d83 	ldbu	r2,54(r2)
    6b10:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
    6b14:	e0bff617 	ldw	r2,-40(fp)
    6b18:	10800d43 	ldbu	r2,53(r2)
    6b1c:	e0bff885 	stb	r2,-30(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
    6b20:	e0fff803 	ldbu	r3,-32(fp)
    6b24:	00800074 	movhi	r2,1
    6b28:	108f6744 	addi	r2,r2,15773
    6b2c:	10c5883a 	add	r2,r2,r3
    6b30:	10c00003 	ldbu	r3,0(r2)
    6b34:	e0bff883 	ldbu	r2,-30(fp)
    6b38:	1884703a 	and	r2,r3,r2
    6b3c:	10803fcc 	andi	r2,r2,255
    6b40:	10003726 	beq	r2,zero,6c20 <OSTaskChangePrio+0x2cc>
         OSRdyTbl[y_old] &= ~bitx_old;
    6b44:	e0fff803 	ldbu	r3,-32(fp)
    6b48:	e13ff803 	ldbu	r4,-32(fp)
    6b4c:	00800074 	movhi	r2,1
    6b50:	108f6744 	addi	r2,r2,15773
    6b54:	1105883a 	add	r2,r2,r4
    6b58:	10800003 	ldbu	r2,0(r2)
    6b5c:	1009883a 	mov	r4,r2
    6b60:	e0bff883 	ldbu	r2,-30(fp)
    6b64:	0084303a 	nor	r2,zero,r2
    6b68:	2084703a 	and	r2,r4,r2
    6b6c:	1009883a 	mov	r4,r2
    6b70:	00800074 	movhi	r2,1
    6b74:	108f6744 	addi	r2,r2,15773
    6b78:	10c5883a 	add	r2,r2,r3
    6b7c:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
    6b80:	e0fff803 	ldbu	r3,-32(fp)
    6b84:	00800074 	movhi	r2,1
    6b88:	108f6744 	addi	r2,r2,15773
    6b8c:	10c5883a 	add	r2,r2,r3
    6b90:	10800003 	ldbu	r2,0(r2)
    6b94:	10803fcc 	andi	r2,r2,255
    6b98:	10000b1e 	bne	r2,zero,6bc8 <OSTaskChangePrio+0x274>
             OSRdyGrp &= ~bity_old;
    6b9c:	e0bff843 	ldbu	r2,-31(fp)
    6ba0:	0084303a 	nor	r2,zero,r2
    6ba4:	1007883a 	mov	r3,r2
    6ba8:	00800074 	movhi	r2,1
    6bac:	108f6704 	addi	r2,r2,15772
    6bb0:	10800003 	ldbu	r2,0(r2)
    6bb4:	1884703a 	and	r2,r3,r2
    6bb8:	1007883a 	mov	r3,r2
    6bbc:	00800074 	movhi	r2,1
    6bc0:	108f6704 	addi	r2,r2,15772
    6bc4:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
    6bc8:	00800074 	movhi	r2,1
    6bcc:	108f6704 	addi	r2,r2,15772
    6bd0:	10c00003 	ldbu	r3,0(r2)
    6bd4:	e0bff783 	ldbu	r2,-34(fp)
    6bd8:	1884b03a 	or	r2,r3,r2
    6bdc:	1007883a 	mov	r3,r2
    6be0:	00800074 	movhi	r2,1
    6be4:	108f6704 	addi	r2,r2,15772
    6be8:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
    6bec:	e0fff703 	ldbu	r3,-36(fp)
    6bf0:	e13ff703 	ldbu	r4,-36(fp)
    6bf4:	00800074 	movhi	r2,1
    6bf8:	108f6744 	addi	r2,r2,15773
    6bfc:	1105883a 	add	r2,r2,r4
    6c00:	11000003 	ldbu	r4,0(r2)
    6c04:	e0bff7c3 	ldbu	r2,-33(fp)
    6c08:	2084b03a 	or	r2,r4,r2
    6c0c:	1009883a 	mov	r4,r2
    6c10:	00800074 	movhi	r2,1
    6c14:	108f6744 	addi	r2,r2,15773
    6c18:	10c5883a 	add	r2,r2,r3
    6c1c:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
    6c20:	e0bff617 	ldw	r2,-40(fp)
    6c24:	10800717 	ldw	r2,28(r2)
    6c28:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
    6c2c:	e0bff317 	ldw	r2,-52(fp)
    6c30:	10003326 	beq	r2,zero,6d00 <OSTaskChangePrio+0x3ac>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
    6c34:	e0bff803 	ldbu	r2,-32(fp)
    6c38:	e0fff803 	ldbu	r3,-32(fp)
    6c3c:	e13ff317 	ldw	r4,-52(fp)
    6c40:	20c7883a 	add	r3,r4,r3
    6c44:	18c00204 	addi	r3,r3,8
    6c48:	18c000c3 	ldbu	r3,3(r3)
    6c4c:	1809883a 	mov	r4,r3
    6c50:	e0fff883 	ldbu	r3,-30(fp)
    6c54:	00c6303a 	nor	r3,zero,r3
    6c58:	20c6703a 	and	r3,r4,r3
    6c5c:	1809883a 	mov	r4,r3
    6c60:	e0fff317 	ldw	r3,-52(fp)
    6c64:	1885883a 	add	r2,r3,r2
    6c68:	10800204 	addi	r2,r2,8
    6c6c:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
    6c70:	e0bff803 	ldbu	r2,-32(fp)
    6c74:	e0fff317 	ldw	r3,-52(fp)
    6c78:	1885883a 	add	r2,r3,r2
    6c7c:	10800204 	addi	r2,r2,8
    6c80:	108000c3 	ldbu	r2,3(r2)
    6c84:	10803fcc 	andi	r2,r2,255
    6c88:	1000091e 	bne	r2,zero,6cb0 <OSTaskChangePrio+0x35c>
            pevent->OSEventGrp    &= ~bity_old;
    6c8c:	e0bff317 	ldw	r2,-52(fp)
    6c90:	10800283 	ldbu	r2,10(r2)
    6c94:	1007883a 	mov	r3,r2
    6c98:	e0bff843 	ldbu	r2,-31(fp)
    6c9c:	0084303a 	nor	r2,zero,r2
    6ca0:	1884703a 	and	r2,r3,r2
    6ca4:	1007883a 	mov	r3,r2
    6ca8:	e0bff317 	ldw	r2,-52(fp)
    6cac:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
    6cb0:	e0bff317 	ldw	r2,-52(fp)
    6cb4:	10c00283 	ldbu	r3,10(r2)
    6cb8:	e0bff783 	ldbu	r2,-34(fp)
    6cbc:	1884b03a 	or	r2,r3,r2
    6cc0:	1007883a 	mov	r3,r2
    6cc4:	e0bff317 	ldw	r2,-52(fp)
    6cc8:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
    6ccc:	e0bff703 	ldbu	r2,-36(fp)
    6cd0:	e0fff703 	ldbu	r3,-36(fp)
    6cd4:	e13ff317 	ldw	r4,-52(fp)
    6cd8:	20c7883a 	add	r3,r4,r3
    6cdc:	18c00204 	addi	r3,r3,8
    6ce0:	190000c3 	ldbu	r4,3(r3)
    6ce4:	e0fff7c3 	ldbu	r3,-33(fp)
    6ce8:	20c6b03a 	or	r3,r4,r3
    6cec:	1809883a 	mov	r4,r3
    6cf0:	e0fff317 	ldw	r3,-52(fp)
    6cf4:	1885883a 	add	r2,r3,r2
    6cf8:	10800204 	addi	r2,r2,8
    6cfc:	110000c5 	stb	r4,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
    6d00:	e0bff617 	ldw	r2,-40(fp)
    6d04:	10800817 	ldw	r2,32(r2)
    6d08:	10004226 	beq	r2,zero,6e14 <OSTaskChangePrio+0x4c0>
        pevents =  ptcb->OSTCBEventMultiPtr;
    6d0c:	e0bff617 	ldw	r2,-40(fp)
    6d10:	10800817 	ldw	r2,32(r2)
    6d14:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
    6d18:	e0bff417 	ldw	r2,-48(fp)
    6d1c:	10800017 	ldw	r2,0(r2)
    6d20:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
    6d24:	00003906 	br	6e0c <OSTaskChangePrio+0x4b8>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
    6d28:	e0bff803 	ldbu	r2,-32(fp)
    6d2c:	e0fff803 	ldbu	r3,-32(fp)
    6d30:	e13ff317 	ldw	r4,-52(fp)
    6d34:	20c7883a 	add	r3,r4,r3
    6d38:	18c00204 	addi	r3,r3,8
    6d3c:	18c000c3 	ldbu	r3,3(r3)
    6d40:	1809883a 	mov	r4,r3
    6d44:	e0fff883 	ldbu	r3,-30(fp)
    6d48:	00c6303a 	nor	r3,zero,r3
    6d4c:	20c6703a 	and	r3,r4,r3
    6d50:	1809883a 	mov	r4,r3
    6d54:	e0fff317 	ldw	r3,-52(fp)
    6d58:	1885883a 	add	r2,r3,r2
    6d5c:	10800204 	addi	r2,r2,8
    6d60:	110000c5 	stb	r4,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
    6d64:	e0bff803 	ldbu	r2,-32(fp)
    6d68:	e0fff317 	ldw	r3,-52(fp)
    6d6c:	1885883a 	add	r2,r3,r2
    6d70:	10800204 	addi	r2,r2,8
    6d74:	108000c3 	ldbu	r2,3(r2)
    6d78:	10803fcc 	andi	r2,r2,255
    6d7c:	1000091e 	bne	r2,zero,6da4 <OSTaskChangePrio+0x450>
                pevent->OSEventGrp    &= ~bity_old;
    6d80:	e0bff317 	ldw	r2,-52(fp)
    6d84:	10800283 	ldbu	r2,10(r2)
    6d88:	1007883a 	mov	r3,r2
    6d8c:	e0bff843 	ldbu	r2,-31(fp)
    6d90:	0084303a 	nor	r2,zero,r2
    6d94:	1884703a 	and	r2,r3,r2
    6d98:	1007883a 	mov	r3,r2
    6d9c:	e0bff317 	ldw	r2,-52(fp)
    6da0:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
    6da4:	e0bff317 	ldw	r2,-52(fp)
    6da8:	10c00283 	ldbu	r3,10(r2)
    6dac:	e0bff783 	ldbu	r2,-34(fp)
    6db0:	1884b03a 	or	r2,r3,r2
    6db4:	1007883a 	mov	r3,r2
    6db8:	e0bff317 	ldw	r2,-52(fp)
    6dbc:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
    6dc0:	e0bff703 	ldbu	r2,-36(fp)
    6dc4:	e0fff703 	ldbu	r3,-36(fp)
    6dc8:	e13ff317 	ldw	r4,-52(fp)
    6dcc:	20c7883a 	add	r3,r4,r3
    6dd0:	18c00204 	addi	r3,r3,8
    6dd4:	190000c3 	ldbu	r4,3(r3)
    6dd8:	e0fff7c3 	ldbu	r3,-33(fp)
    6ddc:	20c6b03a 	or	r3,r4,r3
    6de0:	1809883a 	mov	r4,r3
    6de4:	e0fff317 	ldw	r3,-52(fp)
    6de8:	1885883a 	add	r2,r3,r2
    6dec:	10800204 	addi	r2,r2,8
    6df0:	110000c5 	stb	r4,3(r2)
            pevents++;
    6df4:	e0bff417 	ldw	r2,-48(fp)
    6df8:	10800104 	addi	r2,r2,4
    6dfc:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
    6e00:	e0bff417 	ldw	r2,-48(fp)
    6e04:	10800017 	ldw	r2,0(r2)
    6e08:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
    6e0c:	e0bff317 	ldw	r2,-52(fp)
    6e10:	103fc51e 	bne	r2,zero,6d28 <OSTaskChangePrio+0x3d4>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
    6e14:	e0bff617 	ldw	r2,-40(fp)
    6e18:	e0ffff03 	ldbu	r3,-4(fp)
    6e1c:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
    6e20:	e0bff617 	ldw	r2,-40(fp)
    6e24:	e0fff703 	ldbu	r3,-36(fp)
    6e28:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
    6e2c:	e0bff617 	ldw	r2,-40(fp)
    6e30:	e0fff743 	ldbu	r3,-35(fp)
    6e34:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
    6e38:	e0bff617 	ldw	r2,-40(fp)
    6e3c:	e0fff783 	ldbu	r3,-34(fp)
    6e40:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
    6e44:	e0bff617 	ldw	r2,-40(fp)
    6e48:	e0fff7c3 	ldbu	r3,-33(fp)
    6e4c:	10c00d45 	stb	r3,53(r2)
    6e50:	e0bff517 	ldw	r2,-44(fp)
    6e54:	e0bffd15 	stw	r2,-12(fp)
    6e58:	e0bffd17 	ldw	r2,-12(fp)
    6e5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    6e60:	00800074 	movhi	r2,1
    6e64:	108f5b44 	addi	r2,r2,15725
    6e68:	10800003 	ldbu	r2,0(r2)
    6e6c:	10803fcc 	andi	r2,r2,255
    6e70:	10800058 	cmpnei	r2,r2,1
    6e74:	1000011e 	bne	r2,zero,6e7c <OSTaskChangePrio+0x528>
        OS_Sched();                                         /* Find new highest priority task          */
    6e78:	00024380 	call	2438 <OS_Sched>
    }
    return (OS_ERR_NONE);
    6e7c:	0005883a 	mov	r2,zero
}
    6e80:	e037883a 	mov	sp,fp
    6e84:	dfc00117 	ldw	ra,4(sp)
    6e88:	df000017 	ldw	fp,0(sp)
    6e8c:	dec00204 	addi	sp,sp,8
    6e90:	f800283a 	ret

00006e94 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
    6e94:	deffee04 	addi	sp,sp,-72
    6e98:	dfc01115 	stw	ra,68(sp)
    6e9c:	df001015 	stw	fp,64(sp)
    6ea0:	df001004 	addi	fp,sp,64
    6ea4:	e13ffc15 	stw	r4,-16(fp)
    6ea8:	e17ffd15 	stw	r5,-12(fp)
    6eac:	e1bffe15 	stw	r6,-8(fp)
    6eb0:	3805883a 	mov	r2,r7
    6eb4:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    6eb8:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    6ebc:	e0bfff03 	ldbu	r2,-4(fp)
    6ec0:	10800570 	cmpltui	r2,r2,21
    6ec4:	1000021e 	bne	r2,zero,6ed0 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
    6ec8:	00800a84 	movi	r2,42
    6ecc:	00005b06 	br	703c <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6ed0:	0005303a 	rdctl	r2,status
    6ed4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6ed8:	e0fff617 	ldw	r3,-40(fp)
    6edc:	00bfff84 	movi	r2,-2
    6ee0:	1884703a 	and	r2,r3,r2
    6ee4:	1001703a 	wrctl	status,r2
  
  return context;
    6ee8:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    6eec:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    6ef0:	00800074 	movhi	r2,1
    6ef4:	108f6904 	addi	r2,r2,15780
    6ef8:	10800003 	ldbu	r2,0(r2)
    6efc:	10803fcc 	andi	r2,r2,255
    6f00:	10000626 	beq	r2,zero,6f1c <OSTaskCreate+0x88>
    6f04:	e0bff317 	ldw	r2,-52(fp)
    6f08:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6f0c:	e0bff717 	ldw	r2,-36(fp)
    6f10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    6f14:	00800f04 	movi	r2,60
    6f18:	00004806 	br	703c <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    6f1c:	e0ffff03 	ldbu	r3,-4(fp)
    6f20:	008001b4 	movhi	r2,6
    6f24:	10a3f604 	addi	r2,r2,-28712
    6f28:	18c7883a 	add	r3,r3,r3
    6f2c:	18c7883a 	add	r3,r3,r3
    6f30:	10c5883a 	add	r2,r2,r3
    6f34:	10800017 	ldw	r2,0(r2)
    6f38:	10003b1e 	bne	r2,zero,7028 <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    6f3c:	e0ffff03 	ldbu	r3,-4(fp)
    6f40:	008001b4 	movhi	r2,6
    6f44:	10a3f604 	addi	r2,r2,-28712
    6f48:	18c7883a 	add	r3,r3,r3
    6f4c:	18c7883a 	add	r3,r3,r3
    6f50:	10c5883a 	add	r2,r2,r3
    6f54:	00c00044 	movi	r3,1
    6f58:	10c00015 	stw	r3,0(r2)
    6f5c:	e0bff317 	ldw	r2,-52(fp)
    6f60:	e0bff815 	stw	r2,-32(fp)
    6f64:	e0bff817 	ldw	r2,-32(fp)
    6f68:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
    6f6c:	e13ffc17 	ldw	r4,-16(fp)
    6f70:	e17ffd17 	ldw	r5,-12(fp)
    6f74:	e1bffe17 	ldw	r6,-8(fp)
    6f78:	000f883a 	mov	r7,zero
    6f7c:	000cbc40 	call	cbc4 <OSTaskStkInit>
    6f80:	e0bff415 	stw	r2,-48(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
    6f84:	e0bfff03 	ldbu	r2,-4(fp)
    6f88:	d8000015 	stw	zero,0(sp)
    6f8c:	d8000115 	stw	zero,4(sp)
    6f90:	d8000215 	stw	zero,8(sp)
    6f94:	1009883a 	mov	r4,r2
    6f98:	e17ff417 	ldw	r5,-48(fp)
    6f9c:	000d883a 	mov	r6,zero
    6fa0:	000f883a 	mov	r7,zero
    6fa4:	000283c0 	call	283c <OS_TCBInit>
    6fa8:	e0bff505 	stb	r2,-44(fp)
        if (err == OS_ERR_NONE) {
    6fac:	e0bff503 	ldbu	r2,-44(fp)
    6fb0:	1000081e 	bne	r2,zero,6fd4 <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
    6fb4:	00800074 	movhi	r2,1
    6fb8:	108f5b44 	addi	r2,r2,15725
    6fbc:	10800003 	ldbu	r2,0(r2)
    6fc0:	10803fcc 	andi	r2,r2,255
    6fc4:	10800058 	cmpnei	r2,r2,1
    6fc8:	1000151e 	bne	r2,zero,7020 <OSTaskCreate+0x18c>
                OS_Sched();
    6fcc:	00024380 	call	2438 <OS_Sched>
    6fd0:	00001306 	br	7020 <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6fd4:	0005303a 	rdctl	r2,status
    6fd8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6fdc:	e0fff917 	ldw	r3,-28(fp)
    6fe0:	00bfff84 	movi	r2,-2
    6fe4:	1884703a 	and	r2,r3,r2
    6fe8:	1001703a 	wrctl	status,r2
  
  return context;
    6fec:	e0bff917 	ldw	r2,-28(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    6ff0:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
    6ff4:	e0ffff03 	ldbu	r3,-4(fp)
    6ff8:	008001b4 	movhi	r2,6
    6ffc:	10a3f604 	addi	r2,r2,-28712
    7000:	18c7883a 	add	r3,r3,r3
    7004:	18c7883a 	add	r3,r3,r3
    7008:	10c5883a 	add	r2,r2,r3
    700c:	10000015 	stw	zero,0(r2)
    7010:	e0bff317 	ldw	r2,-52(fp)
    7014:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7018:	e0bffa17 	ldw	r2,-24(fp)
    701c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
    7020:	e0bff503 	ldbu	r2,-44(fp)
    7024:	00000506 	br	703c <OSTaskCreate+0x1a8>
    7028:	e0bff317 	ldw	r2,-52(fp)
    702c:	e0bffb15 	stw	r2,-20(fp)
    7030:	e0bffb17 	ldw	r2,-20(fp)
    7034:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    7038:	00800a04 	movi	r2,40
}
    703c:	e037883a 	mov	sp,fp
    7040:	dfc00117 	ldw	ra,4(sp)
    7044:	df000017 	ldw	fp,0(sp)
    7048:	dec00204 	addi	sp,sp,8
    704c:	f800283a 	ret

00007050 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
    7050:	deffec04 	addi	sp,sp,-80
    7054:	dfc01315 	stw	ra,76(sp)
    7058:	df001215 	stw	fp,72(sp)
    705c:	df001204 	addi	fp,sp,72
    7060:	e13ffa15 	stw	r4,-24(fp)
    7064:	e17ffb15 	stw	r5,-20(fp)
    7068:	e1bffc15 	stw	r6,-16(fp)
    706c:	3809883a 	mov	r4,r7
    7070:	e0c00217 	ldw	r3,8(fp)
    7074:	e0800617 	ldw	r2,24(fp)
    7078:	e13ffd05 	stb	r4,-12(fp)
    707c:	e0fffe0d 	sth	r3,-8(fp)
    7080:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    7084:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    7088:	e0bffd03 	ldbu	r2,-12(fp)
    708c:	10800570 	cmpltui	r2,r2,21
    7090:	1000021e 	bne	r2,zero,709c <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
    7094:	00800a84 	movi	r2,42
    7098:	00006306 	br	7228 <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    709c:	0005303a 	rdctl	r2,status
    70a0:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    70a4:	e0fff417 	ldw	r3,-48(fp)
    70a8:	00bfff84 	movi	r2,-2
    70ac:	1884703a 	and	r2,r3,r2
    70b0:	1001703a 	wrctl	status,r2
  
  return context;
    70b4:	e0bff417 	ldw	r2,-48(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    70b8:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    70bc:	00800074 	movhi	r2,1
    70c0:	108f6904 	addi	r2,r2,15780
    70c4:	10800003 	ldbu	r2,0(r2)
    70c8:	10803fcc 	andi	r2,r2,255
    70cc:	10000626 	beq	r2,zero,70e8 <OSTaskCreateExt+0x98>
    70d0:	e0bff117 	ldw	r2,-60(fp)
    70d4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    70d8:	e0bff517 	ldw	r2,-44(fp)
    70dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    70e0:	00800f04 	movi	r2,60
    70e4:	00005006 	br	7228 <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    70e8:	e0fffd03 	ldbu	r3,-12(fp)
    70ec:	008001b4 	movhi	r2,6
    70f0:	10a3f604 	addi	r2,r2,-28712
    70f4:	18c7883a 	add	r3,r3,r3
    70f8:	18c7883a 	add	r3,r3,r3
    70fc:	10c5883a 	add	r2,r2,r3
    7100:	10800017 	ldw	r2,0(r2)
    7104:	1000431e 	bne	r2,zero,7214 <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    7108:	e0fffd03 	ldbu	r3,-12(fp)
    710c:	008001b4 	movhi	r2,6
    7110:	10a3f604 	addi	r2,r2,-28712
    7114:	18c7883a 	add	r3,r3,r3
    7118:	18c7883a 	add	r3,r3,r3
    711c:	10c5883a 	add	r2,r2,r3
    7120:	00c00044 	movi	r3,1
    7124:	10c00015 	stw	r3,0(r2)
    7128:	e0bff117 	ldw	r2,-60(fp)
    712c:	e0bff615 	stw	r2,-40(fp)
    7130:	e0bff617 	ldw	r2,-40(fp)
    7134:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
    7138:	e0bfff0b 	ldhu	r2,-4(fp)
    713c:	e1000317 	ldw	r4,12(fp)
    7140:	e1400417 	ldw	r5,16(fp)
    7144:	100d883a 	mov	r6,r2
    7148:	00081dc0 	call	81dc <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
    714c:	e0bfff0b 	ldhu	r2,-4(fp)
    7150:	e13ffa17 	ldw	r4,-24(fp)
    7154:	e17ffb17 	ldw	r5,-20(fp)
    7158:	e1bffc17 	ldw	r6,-16(fp)
    715c:	100f883a 	mov	r7,r2
    7160:	000cbc40 	call	cbc4 <OSTaskStkInit>
    7164:	e0bff215 	stw	r2,-56(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
    7168:	e13ffd03 	ldbu	r4,-12(fp)
    716c:	e1fffe0b 	ldhu	r7,-8(fp)
    7170:	e0bfff0b 	ldhu	r2,-4(fp)
    7174:	e0c00417 	ldw	r3,16(fp)
    7178:	d8c00015 	stw	r3,0(sp)
    717c:	e0c00517 	ldw	r3,20(fp)
    7180:	d8c00115 	stw	r3,4(sp)
    7184:	d8800215 	stw	r2,8(sp)
    7188:	e17ff217 	ldw	r5,-56(fp)
    718c:	e1800317 	ldw	r6,12(fp)
    7190:	000283c0 	call	283c <OS_TCBInit>
    7194:	e0bff305 	stb	r2,-52(fp)
        if (err == OS_ERR_NONE) {
    7198:	e0bff303 	ldbu	r2,-52(fp)
    719c:	1000081e 	bne	r2,zero,71c0 <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
    71a0:	00800074 	movhi	r2,1
    71a4:	108f5b44 	addi	r2,r2,15725
    71a8:	10800003 	ldbu	r2,0(r2)
    71ac:	10803fcc 	andi	r2,r2,255
    71b0:	10800058 	cmpnei	r2,r2,1
    71b4:	1000151e 	bne	r2,zero,720c <OSTaskCreateExt+0x1bc>
                OS_Sched();
    71b8:	00024380 	call	2438 <OS_Sched>
    71bc:	00001306 	br	720c <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    71c0:	0005303a 	rdctl	r2,status
    71c4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    71c8:	e0fff717 	ldw	r3,-36(fp)
    71cc:	00bfff84 	movi	r2,-2
    71d0:	1884703a 	and	r2,r3,r2
    71d4:	1001703a 	wrctl	status,r2
  
  return context;
    71d8:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    71dc:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
    71e0:	e0fffd03 	ldbu	r3,-12(fp)
    71e4:	008001b4 	movhi	r2,6
    71e8:	10a3f604 	addi	r2,r2,-28712
    71ec:	18c7883a 	add	r3,r3,r3
    71f0:	18c7883a 	add	r3,r3,r3
    71f4:	10c5883a 	add	r2,r2,r3
    71f8:	10000015 	stw	zero,0(r2)
    71fc:	e0bff117 	ldw	r2,-60(fp)
    7200:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7204:	e0bff817 	ldw	r2,-32(fp)
    7208:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
    720c:	e0bff303 	ldbu	r2,-52(fp)
    7210:	00000506 	br	7228 <OSTaskCreateExt+0x1d8>
    7214:	e0bff117 	ldw	r2,-60(fp)
    7218:	e0bff915 	stw	r2,-28(fp)
    721c:	e0bff917 	ldw	r2,-28(fp)
    7220:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    7224:	00800a04 	movi	r2,40
}
    7228:	e037883a 	mov	sp,fp
    722c:	dfc00117 	ldw	ra,4(sp)
    7230:	df000017 	ldw	fp,0(sp)
    7234:	dec00204 	addi	sp,sp,8
    7238:	f800283a 	ret

0000723c <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
    723c:	defff404 	addi	sp,sp,-48
    7240:	dfc00b15 	stw	ra,44(sp)
    7244:	df000a15 	stw	fp,40(sp)
    7248:	df000a04 	addi	fp,sp,40
    724c:	2005883a 	mov	r2,r4
    7250:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
    7254:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
    7258:	00800074 	movhi	r2,1
    725c:	108f6904 	addi	r2,r2,15780
    7260:	10800003 	ldbu	r2,0(r2)
    7264:	10803fcc 	andi	r2,r2,255
    7268:	10000226 	beq	r2,zero,7274 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
    726c:	00801004 	movi	r2,64
    7270:	0000e506 	br	7608 <OSTaskDel+0x3cc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
    7274:	e0bfff03 	ldbu	r2,-4(fp)
    7278:	10800518 	cmpnei	r2,r2,20
    727c:	1000021e 	bne	r2,zero,7288 <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
    7280:	00800f84 	movi	r2,62
    7284:	0000e006 	br	7608 <OSTaskDel+0x3cc>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
    7288:	e0bfff03 	ldbu	r2,-4(fp)
    728c:	10800530 	cmpltui	r2,r2,20
    7290:	1000051e 	bne	r2,zero,72a8 <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
    7294:	e0bfff03 	ldbu	r2,-4(fp)
    7298:	10803fe0 	cmpeqi	r2,r2,255
    729c:	1000021e 	bne	r2,zero,72a8 <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
    72a0:	00800a84 	movi	r2,42
    72a4:	0000d806 	br	7608 <OSTaskDel+0x3cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    72a8:	0005303a 	rdctl	r2,status
    72ac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    72b0:	e0fff917 	ldw	r3,-28(fp)
    72b4:	00bfff84 	movi	r2,-2
    72b8:	1884703a 	and	r2,r3,r2
    72bc:	1001703a 	wrctl	status,r2
  
  return context;
    72c0:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
    72c4:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
    72c8:	e0bfff03 	ldbu	r2,-4(fp)
    72cc:	10803fd8 	cmpnei	r2,r2,255
    72d0:	1000051e 	bne	r2,zero,72e8 <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
    72d4:	00800074 	movhi	r2,1
    72d8:	108f6a04 	addi	r2,r2,15784
    72dc:	10800017 	ldw	r2,0(r2)
    72e0:	10800c83 	ldbu	r2,50(r2)
    72e4:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    72e8:	e0ffff03 	ldbu	r3,-4(fp)
    72ec:	008001b4 	movhi	r2,6
    72f0:	10a3f604 	addi	r2,r2,-28712
    72f4:	18c7883a 	add	r3,r3,r3
    72f8:	18c7883a 	add	r3,r3,r3
    72fc:	10c5883a 	add	r2,r2,r3
    7300:	10800017 	ldw	r2,0(r2)
    7304:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
    7308:	e0bff717 	ldw	r2,-36(fp)
    730c:	1000061e 	bne	r2,zero,7328 <OSTaskDel+0xec>
    7310:	e0bff617 	ldw	r2,-40(fp)
    7314:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7318:	e0bffa17 	ldw	r2,-24(fp)
    731c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    7320:	008010c4 	movi	r2,67
    7324:	0000b806 	br	7608 <OSTaskDel+0x3cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
    7328:	e0bff717 	ldw	r2,-36(fp)
    732c:	10800058 	cmpnei	r2,r2,1
    7330:	1000061e 	bne	r2,zero,734c <OSTaskDel+0x110>
    7334:	e0bff617 	ldw	r2,-40(fp)
    7338:	e0bffb15 	stw	r2,-20(fp)
    733c:	e0bffb17 	ldw	r2,-20(fp)
    7340:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    7344:	00800f44 	movi	r2,61
    7348:	0000af06 	br	7608 <OSTaskDel+0x3cc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
    734c:	e0bff717 	ldw	r2,-36(fp)
    7350:	10800d03 	ldbu	r2,52(r2)
    7354:	10c03fcc 	andi	r3,r2,255
    7358:	e0bff717 	ldw	r2,-36(fp)
    735c:	10800d03 	ldbu	r2,52(r2)
    7360:	11003fcc 	andi	r4,r2,255
    7364:	00800074 	movhi	r2,1
    7368:	108f6744 	addi	r2,r2,15773
    736c:	1105883a 	add	r2,r2,r4
    7370:	10800003 	ldbu	r2,0(r2)
    7374:	1009883a 	mov	r4,r2
    7378:	e0bff717 	ldw	r2,-36(fp)
    737c:	10800d43 	ldbu	r2,53(r2)
    7380:	0084303a 	nor	r2,zero,r2
    7384:	2084703a 	and	r2,r4,r2
    7388:	1009883a 	mov	r4,r2
    738c:	00800074 	movhi	r2,1
    7390:	108f6744 	addi	r2,r2,15773
    7394:	10c5883a 	add	r2,r2,r3
    7398:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
    739c:	e0bff717 	ldw	r2,-36(fp)
    73a0:	10800d03 	ldbu	r2,52(r2)
    73a4:	10c03fcc 	andi	r3,r2,255
    73a8:	00800074 	movhi	r2,1
    73ac:	108f6744 	addi	r2,r2,15773
    73b0:	10c5883a 	add	r2,r2,r3
    73b4:	10800003 	ldbu	r2,0(r2)
    73b8:	10803fcc 	andi	r2,r2,255
    73bc:	10000c1e 	bne	r2,zero,73f0 <OSTaskDel+0x1b4>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
    73c0:	e0bff717 	ldw	r2,-36(fp)
    73c4:	10800d83 	ldbu	r2,54(r2)
    73c8:	0084303a 	nor	r2,zero,r2
    73cc:	1007883a 	mov	r3,r2
    73d0:	00800074 	movhi	r2,1
    73d4:	108f6704 	addi	r2,r2,15772
    73d8:	10800003 	ldbu	r2,0(r2)
    73dc:	1884703a 	and	r2,r3,r2
    73e0:	1007883a 	mov	r3,r2
    73e4:	00800074 	movhi	r2,1
    73e8:	108f6704 	addi	r2,r2,15772
    73ec:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
    73f0:	e0bff717 	ldw	r2,-36(fp)
    73f4:	10800717 	ldw	r2,28(r2)
    73f8:	10000526 	beq	r2,zero,7410 <OSTaskDel+0x1d4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
    73fc:	e0bff717 	ldw	r2,-36(fp)
    7400:	10800717 	ldw	r2,28(r2)
    7404:	e13ff717 	ldw	r4,-36(fp)
    7408:	100b883a 	mov	r5,r2
    740c:	0001e100 	call	1e10 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
    7410:	e0bff717 	ldw	r2,-36(fp)
    7414:	10800817 	ldw	r2,32(r2)
    7418:	10000526 	beq	r2,zero,7430 <OSTaskDel+0x1f4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    741c:	e0bff717 	ldw	r2,-36(fp)
    7420:	10800817 	ldw	r2,32(r2)
    7424:	e13ff717 	ldw	r4,-36(fp)
    7428:	100b883a 	mov	r5,r2
    742c:	0001ec40 	call	1ec4 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
    7430:	e0bff717 	ldw	r2,-36(fp)
    7434:	10800a17 	ldw	r2,40(r2)
    7438:	e0bff815 	stw	r2,-32(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
    743c:	e0bff817 	ldw	r2,-32(fp)
    7440:	10000226 	beq	r2,zero,744c <OSTaskDel+0x210>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
    7444:	e13ff817 	ldw	r4,-32(fp)
    7448:	00044180 	call	4418 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
    744c:	e0bff717 	ldw	r2,-36(fp)
    7450:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
    7454:	e0bff717 	ldw	r2,-36(fp)
    7458:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    745c:	e0bff717 	ldw	r2,-36(fp)
    7460:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
    7464:	00800074 	movhi	r2,1
    7468:	108f5b04 	addi	r2,r2,15724
    746c:	10800003 	ldbu	r2,0(r2)
    7470:	10803fcc 	andi	r2,r2,255
    7474:	10803fe0 	cmpeqi	r2,r2,255
    7478:	1000081e 	bne	r2,zero,749c <OSTaskDel+0x260>
        OSLockNesting++;
    747c:	00800074 	movhi	r2,1
    7480:	108f5b04 	addi	r2,r2,15724
    7484:	10800003 	ldbu	r2,0(r2)
    7488:	10800044 	addi	r2,r2,1
    748c:	1007883a 	mov	r3,r2
    7490:	00800074 	movhi	r2,1
    7494:	108f5b04 	addi	r2,r2,15724
    7498:	10c00005 	stb	r3,0(r2)
    749c:	e0bff617 	ldw	r2,-40(fp)
    74a0:	e0bffc15 	stw	r2,-16(fp)
    74a4:	e0bffc17 	ldw	r2,-16(fp)
    74a8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
    74ac:	0001a040 	call	1a04 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    74b0:	0005303a 	rdctl	r2,status
    74b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    74b8:	e0fffd17 	ldw	r3,-12(fp)
    74bc:	00bfff84 	movi	r2,-2
    74c0:	1884703a 	and	r2,r3,r2
    74c4:	1001703a 	wrctl	status,r2
  
  return context;
    74c8:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
    74cc:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
    74d0:	00800074 	movhi	r2,1
    74d4:	108f5b04 	addi	r2,r2,15724
    74d8:	10800003 	ldbu	r2,0(r2)
    74dc:	10803fcc 	andi	r2,r2,255
    74e0:	10000826 	beq	r2,zero,7504 <OSTaskDel+0x2c8>
        OSLockNesting--;
    74e4:	00800074 	movhi	r2,1
    74e8:	108f5b04 	addi	r2,r2,15724
    74ec:	10800003 	ldbu	r2,0(r2)
    74f0:	10bfffc4 	addi	r2,r2,-1
    74f4:	1007883a 	mov	r3,r2
    74f8:	00800074 	movhi	r2,1
    74fc:	108f5b04 	addi	r2,r2,15724
    7500:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
    7504:	e13ff717 	ldw	r4,-36(fp)
    7508:	000cd400 	call	cd40 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
    750c:	00800074 	movhi	r2,1
    7510:	108f6344 	addi	r2,r2,15757
    7514:	10800003 	ldbu	r2,0(r2)
    7518:	10bfffc4 	addi	r2,r2,-1
    751c:	1007883a 	mov	r3,r2
    7520:	00800074 	movhi	r2,1
    7524:	108f6344 	addi	r2,r2,15757
    7528:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
    752c:	e0ffff03 	ldbu	r3,-4(fp)
    7530:	008001b4 	movhi	r2,6
    7534:	10a3f604 	addi	r2,r2,-28712
    7538:	18c7883a 	add	r3,r3,r3
    753c:	18c7883a 	add	r3,r3,r3
    7540:	10c5883a 	add	r2,r2,r3
    7544:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
    7548:	e0bff717 	ldw	r2,-36(fp)
    754c:	10800617 	ldw	r2,24(r2)
    7550:	1000091e 	bne	r2,zero,7578 <OSTaskDel+0x33c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
    7554:	e0bff717 	ldw	r2,-36(fp)
    7558:	10800517 	ldw	r2,20(r2)
    755c:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
    7560:	e0bff717 	ldw	r2,-36(fp)
    7564:	10c00517 	ldw	r3,20(r2)
    7568:	00800074 	movhi	r2,1
    756c:	108f5e04 	addi	r2,r2,15736
    7570:	10c00015 	stw	r3,0(r2)
    7574:	00000a06 	br	75a0 <OSTaskDel+0x364>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
    7578:	e0bff717 	ldw	r2,-36(fp)
    757c:	10800617 	ldw	r2,24(r2)
    7580:	e0fff717 	ldw	r3,-36(fp)
    7584:	18c00517 	ldw	r3,20(r3)
    7588:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
    758c:	e0bff717 	ldw	r2,-36(fp)
    7590:	10800517 	ldw	r2,20(r2)
    7594:	e0fff717 	ldw	r3,-36(fp)
    7598:	18c00617 	ldw	r3,24(r3)
    759c:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
    75a0:	00800074 	movhi	r2,1
    75a4:	108f6204 	addi	r2,r2,15752
    75a8:	10c00017 	ldw	r3,0(r2)
    75ac:	e0bff717 	ldw	r2,-36(fp)
    75b0:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
    75b4:	00800074 	movhi	r2,1
    75b8:	108f6204 	addi	r2,r2,15752
    75bc:	e0fff717 	ldw	r3,-36(fp)
    75c0:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
    75c4:	e0bff717 	ldw	r2,-36(fp)
    75c8:	00c00fc4 	movi	r3,63
    75cc:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    75d0:	e0bff717 	ldw	r2,-36(fp)
    75d4:	10001345 	stb	zero,77(r2)
    75d8:	e0bff617 	ldw	r2,-40(fp)
    75dc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    75e0:	e0bffe17 	ldw	r2,-8(fp)
    75e4:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    75e8:	00800074 	movhi	r2,1
    75ec:	108f5b44 	addi	r2,r2,15725
    75f0:	10800003 	ldbu	r2,0(r2)
    75f4:	10803fcc 	andi	r2,r2,255
    75f8:	10800058 	cmpnei	r2,r2,1
    75fc:	1000011e 	bne	r2,zero,7604 <OSTaskDel+0x3c8>
        OS_Sched();                                     /* Find new highest priority task              */
    7600:	00024380 	call	2438 <OS_Sched>
    }
    return (OS_ERR_NONE);
    7604:	0005883a 	mov	r2,zero
}
    7608:	e037883a 	mov	sp,fp
    760c:	dfc00117 	ldw	ra,4(sp)
    7610:	df000017 	ldw	fp,0(sp)
    7614:	dec00204 	addi	sp,sp,8
    7618:	f800283a 	ret

0000761c <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
    761c:	defff504 	addi	sp,sp,-44
    7620:	df000a15 	stw	fp,40(sp)
    7624:	df000a04 	addi	fp,sp,40
    7628:	2005883a 	mov	r2,r4
    762c:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7630:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
    7634:	e0bfff03 	ldbu	r2,-4(fp)
    7638:	10800518 	cmpnei	r2,r2,20
    763c:	1000021e 	bne	r2,zero,7648 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
    7640:	00800f84 	movi	r2,62
    7644:	00004706 	br	7764 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    7648:	e0bfff03 	ldbu	r2,-4(fp)
    764c:	10800530 	cmpltui	r2,r2,20
    7650:	1000051e 	bne	r2,zero,7668 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
    7654:	e0bfff03 	ldbu	r2,-4(fp)
    7658:	10803fe0 	cmpeqi	r2,r2,255
    765c:	1000021e 	bne	r2,zero,7668 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
    7660:	00800a84 	movi	r2,42
    7664:	00003f06 	br	7764 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
    7668:	e0bfff03 	ldbu	r2,-4(fp)
    766c:	10803fd8 	cmpnei	r2,r2,255
    7670:	1000131e 	bne	r2,zero,76c0 <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7674:	0005303a 	rdctl	r2,status
    7678:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    767c:	e0fff917 	ldw	r3,-28(fp)
    7680:	00bfff84 	movi	r2,-2
    7684:	1884703a 	and	r2,r3,r2
    7688:	1001703a 	wrctl	status,r2
  
  return context;
    768c:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
    7690:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
    7694:	00800074 	movhi	r2,1
    7698:	108f6a04 	addi	r2,r2,15784
    769c:	10800017 	ldw	r2,0(r2)
    76a0:	10800dc3 	ldbu	r2,55(r2)
    76a4:	e0bff705 	stb	r2,-36(fp)
    76a8:	e0bff617 	ldw	r2,-40(fp)
    76ac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    76b0:	e0bffa17 	ldw	r2,-24(fp)
    76b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
    76b8:	e0bff703 	ldbu	r2,-36(fp)
    76bc:	00002906 	br	7764 <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    76c0:	0005303a 	rdctl	r2,status
    76c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    76c8:	e0fffb17 	ldw	r3,-20(fp)
    76cc:	00bfff84 	movi	r2,-2
    76d0:	1884703a 	and	r2,r3,r2
    76d4:	1001703a 	wrctl	status,r2
  
  return context;
    76d8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    76dc:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
    76e0:	e0ffff03 	ldbu	r3,-4(fp)
    76e4:	008001b4 	movhi	r2,6
    76e8:	10a3f604 	addi	r2,r2,-28712
    76ec:	18c7883a 	add	r3,r3,r3
    76f0:	18c7883a 	add	r3,r3,r3
    76f4:	10c5883a 	add	r2,r2,r3
    76f8:	10800017 	ldw	r2,0(r2)
    76fc:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
    7700:	e0bff817 	ldw	r2,-32(fp)
    7704:	1000061e 	bne	r2,zero,7720 <OSTaskDelReq+0x104>
    7708:	e0bff617 	ldw	r2,-40(fp)
    770c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7710:	e0bffc17 	ldw	r2,-16(fp)
    7714:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
    7718:	008010c4 	movi	r2,67
    771c:	00001106 	br	7764 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
    7720:	e0bff817 	ldw	r2,-32(fp)
    7724:	10800058 	cmpnei	r2,r2,1
    7728:	1000061e 	bne	r2,zero,7744 <OSTaskDelReq+0x128>
    772c:	e0bff617 	ldw	r2,-40(fp)
    7730:	e0bffd15 	stw	r2,-12(fp)
    7734:	e0bffd17 	ldw	r2,-12(fp)
    7738:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    773c:	00800f44 	movi	r2,61
    7740:	00000806 	br	7764 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
    7744:	e0bff817 	ldw	r2,-32(fp)
    7748:	00c00fc4 	movi	r3,63
    774c:	10c00dc5 	stb	r3,55(r2)
    7750:	e0bff617 	ldw	r2,-40(fp)
    7754:	e0bffe15 	stw	r2,-8(fp)
    7758:	e0bffe17 	ldw	r2,-8(fp)
    775c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    7760:	0005883a 	mov	r2,zero
}
    7764:	e037883a 	mov	sp,fp
    7768:	df000017 	ldw	fp,0(sp)
    776c:	dec00104 	addi	sp,sp,4
    7770:	f800283a 	ret

00007774 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
    7774:	defff404 	addi	sp,sp,-48
    7778:	dfc00b15 	stw	ra,44(sp)
    777c:	df000a15 	stw	fp,40(sp)
    7780:	df000a04 	addi	fp,sp,40
    7784:	2005883a 	mov	r2,r4
    7788:	e17ffe15 	stw	r5,-8(fp)
    778c:	e1bfff15 	stw	r6,-4(fp)
    7790:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
    7794:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
    7798:	e0bfff17 	ldw	r2,-4(fp)
    779c:	1000021e 	bne	r2,zero,77a8 <OSTaskNameGet+0x34>
        return (0);
    77a0:	0005883a 	mov	r2,zero
    77a4:	00005806 	br	7908 <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
    77a8:	e0bffd03 	ldbu	r2,-12(fp)
    77ac:	10800570 	cmpltui	r2,r2,21
    77b0:	1000081e 	bne	r2,zero,77d4 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
    77b4:	e0bffd03 	ldbu	r2,-12(fp)
    77b8:	10803fe0 	cmpeqi	r2,r2,255
    77bc:	1000051e 	bne	r2,zero,77d4 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
    77c0:	e0bfff17 	ldw	r2,-4(fp)
    77c4:	00c00a84 	movi	r3,42
    77c8:	10c00005 	stb	r3,0(r2)
            return (0);
    77cc:	0005883a 	mov	r2,zero
    77d0:	00004d06 	br	7908 <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
    77d4:	e0bffe17 	ldw	r2,-8(fp)
    77d8:	1000051e 	bne	r2,zero,77f0 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
    77dc:	e0bfff17 	ldw	r2,-4(fp)
    77e0:	00c00304 	movi	r3,12
    77e4:	10c00005 	stb	r3,0(r2)
        return (0);
    77e8:	0005883a 	mov	r2,zero
    77ec:	00004606 	br	7908 <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
    77f0:	00800074 	movhi	r2,1
    77f4:	108f6904 	addi	r2,r2,15780
    77f8:	10800003 	ldbu	r2,0(r2)
    77fc:	10803fcc 	andi	r2,r2,255
    7800:	10000526 	beq	r2,zero,7818 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
    7804:	e0bfff17 	ldw	r2,-4(fp)
    7808:	00c00444 	movi	r3,17
    780c:	10c00005 	stb	r3,0(r2)
        return (0);
    7810:	0005883a 	mov	r2,zero
    7814:	00003c06 	br	7908 <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7818:	0005303a 	rdctl	r2,status
    781c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7820:	e0fff917 	ldw	r3,-28(fp)
    7824:	00bfff84 	movi	r2,-2
    7828:	1884703a 	and	r2,r3,r2
    782c:	1001703a 	wrctl	status,r2
  
  return context;
    7830:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    7834:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
    7838:	e0bffd03 	ldbu	r2,-12(fp)
    783c:	10803fd8 	cmpnei	r2,r2,255
    7840:	1000051e 	bne	r2,zero,7858 <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
    7844:	00800074 	movhi	r2,1
    7848:	108f6a04 	addi	r2,r2,15784
    784c:	10800017 	ldw	r2,0(r2)
    7850:	10800c83 	ldbu	r2,50(r2)
    7854:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    7858:	e0fffd03 	ldbu	r3,-12(fp)
    785c:	008001b4 	movhi	r2,6
    7860:	10a3f604 	addi	r2,r2,-28712
    7864:	18c7883a 	add	r3,r3,r3
    7868:	18c7883a 	add	r3,r3,r3
    786c:	10c5883a 	add	r2,r2,r3
    7870:	10800017 	ldw	r2,0(r2)
    7874:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
    7878:	e0bff717 	ldw	r2,-36(fp)
    787c:	1000091e 	bne	r2,zero,78a4 <OSTaskNameGet+0x130>
    7880:	e0bff617 	ldw	r2,-40(fp)
    7884:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7888:	e0bffa17 	ldw	r2,-24(fp)
    788c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
    7890:	e0bfff17 	ldw	r2,-4(fp)
    7894:	00c010c4 	movi	r3,67
    7898:	10c00005 	stb	r3,0(r2)
        return (0);
    789c:	0005883a 	mov	r2,zero
    78a0:	00001906 	br	7908 <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
    78a4:	e0bff717 	ldw	r2,-36(fp)
    78a8:	10800058 	cmpnei	r2,r2,1
    78ac:	1000091e 	bne	r2,zero,78d4 <OSTaskNameGet+0x160>
    78b0:	e0bff617 	ldw	r2,-40(fp)
    78b4:	e0bffb15 	stw	r2,-20(fp)
    78b8:	e0bffb17 	ldw	r2,-20(fp)
    78bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
    78c0:	e0bfff17 	ldw	r2,-4(fp)
    78c4:	00c010c4 	movi	r3,67
    78c8:	10c00005 	stb	r3,0(r2)
        return (0);
    78cc:	0005883a 	mov	r2,zero
    78d0:	00000d06 	br	7908 <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
    78d4:	e0bff717 	ldw	r2,-36(fp)
    78d8:	10801304 	addi	r2,r2,76
    78dc:	e13ffe17 	ldw	r4,-8(fp)
    78e0:	100b883a 	mov	r5,r2
    78e4:	00025740 	call	2574 <OS_StrCopy>
    78e8:	e0bff805 	stb	r2,-32(fp)
    78ec:	e0bff617 	ldw	r2,-40(fp)
    78f0:	e0bffc15 	stw	r2,-16(fp)
    78f4:	e0bffc17 	ldw	r2,-16(fp)
    78f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    78fc:	e0bfff17 	ldw	r2,-4(fp)
    7900:	10000005 	stb	zero,0(r2)
    return (len);
    7904:	e0bff803 	ldbu	r2,-32(fp)
}
    7908:	e037883a 	mov	sp,fp
    790c:	dfc00117 	ldw	ra,4(sp)
    7910:	df000017 	ldw	fp,0(sp)
    7914:	dec00204 	addi	sp,sp,8
    7918:	f800283a 	ret

0000791c <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
    791c:	defff304 	addi	sp,sp,-52
    7920:	dfc00c15 	stw	ra,48(sp)
    7924:	df000b15 	stw	fp,44(sp)
    7928:	df000b04 	addi	fp,sp,44
    792c:	2005883a 	mov	r2,r4
    7930:	e17ffe15 	stw	r5,-8(fp)
    7934:	e1bfff15 	stw	r6,-4(fp)
    7938:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    793c:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    7940:	e0bfff17 	ldw	r2,-4(fp)
    7944:	1000011e 	bne	r2,zero,794c <OSTaskNameSet+0x30>
        return;
    7948:	00005f06 	br	7ac8 <OSTaskNameSet+0x1ac>
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
    794c:	e0bffd03 	ldbu	r2,-12(fp)
    7950:	10800570 	cmpltui	r2,r2,21
    7954:	1000071e 	bne	r2,zero,7974 <OSTaskNameSet+0x58>
        if (prio != OS_PRIO_SELF) {
    7958:	e0bffd03 	ldbu	r2,-12(fp)
    795c:	10803fe0 	cmpeqi	r2,r2,255
    7960:	1000041e 	bne	r2,zero,7974 <OSTaskNameSet+0x58>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
    7964:	e0bfff17 	ldw	r2,-4(fp)
    7968:	00c00a84 	movi	r3,42
    796c:	10c00005 	stb	r3,0(r2)
            return;
    7970:	00005506 	br	7ac8 <OSTaskNameSet+0x1ac>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
    7974:	e0bffe17 	ldw	r2,-8(fp)
    7978:	1000041e 	bne	r2,zero,798c <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
    797c:	e0bfff17 	ldw	r2,-4(fp)
    7980:	00c00304 	movi	r3,12
    7984:	10c00005 	stb	r3,0(r2)
        return;
    7988:	00004f06 	br	7ac8 <OSTaskNameSet+0x1ac>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
    798c:	00800074 	movhi	r2,1
    7990:	108f6904 	addi	r2,r2,15780
    7994:	10800003 	ldbu	r2,0(r2)
    7998:	10803fcc 	andi	r2,r2,255
    799c:	10000426 	beq	r2,zero,79b0 <OSTaskNameSet+0x94>
        *perr = OS_ERR_NAME_SET_ISR;
    79a0:	e0bfff17 	ldw	r2,-4(fp)
    79a4:	00c00484 	movi	r3,18
    79a8:	10c00005 	stb	r3,0(r2)
        return;
    79ac:	00004606 	br	7ac8 <OSTaskNameSet+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    79b0:	0005303a 	rdctl	r2,status
    79b4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    79b8:	e0fff817 	ldw	r3,-32(fp)
    79bc:	00bfff84 	movi	r2,-2
    79c0:	1884703a 	and	r2,r3,r2
    79c4:	1001703a 	wrctl	status,r2
  
  return context;
    79c8:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
    79cc:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
    79d0:	e0bffd03 	ldbu	r2,-12(fp)
    79d4:	10803fd8 	cmpnei	r2,r2,255
    79d8:	1000051e 	bne	r2,zero,79f0 <OSTaskNameSet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
    79dc:	00800074 	movhi	r2,1
    79e0:	108f6a04 	addi	r2,r2,15784
    79e4:	10800017 	ldw	r2,0(r2)
    79e8:	10800c83 	ldbu	r2,50(r2)
    79ec:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    79f0:	e0fffd03 	ldbu	r3,-12(fp)
    79f4:	008001b4 	movhi	r2,6
    79f8:	10a3f604 	addi	r2,r2,-28712
    79fc:	18c7883a 	add	r3,r3,r3
    7a00:	18c7883a 	add	r3,r3,r3
    7a04:	10c5883a 	add	r2,r2,r3
    7a08:	10800017 	ldw	r2,0(r2)
    7a0c:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
    7a10:	e0bff617 	ldw	r2,-40(fp)
    7a14:	1000081e 	bne	r2,zero,7a38 <OSTaskNameSet+0x11c>
    7a18:	e0bff517 	ldw	r2,-44(fp)
    7a1c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7a20:	e0bff917 	ldw	r2,-28(fp)
    7a24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
    7a28:	e0bfff17 	ldw	r2,-4(fp)
    7a2c:	00c010c4 	movi	r3,67
    7a30:	10c00005 	stb	r3,0(r2)
        return;
    7a34:	00002406 	br	7ac8 <OSTaskNameSet+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
    7a38:	e0bff617 	ldw	r2,-40(fp)
    7a3c:	10800058 	cmpnei	r2,r2,1
    7a40:	1000081e 	bne	r2,zero,7a64 <OSTaskNameSet+0x148>
    7a44:	e0bff517 	ldw	r2,-44(fp)
    7a48:	e0bffa15 	stw	r2,-24(fp)
    7a4c:	e0bffa17 	ldw	r2,-24(fp)
    7a50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
    7a54:	e0bfff17 	ldw	r2,-4(fp)
    7a58:	00c010c4 	movi	r3,67
    7a5c:	10c00005 	stb	r3,0(r2)
        return;
    7a60:	00001906 	br	7ac8 <OSTaskNameSet+0x1ac>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
    7a64:	e13ffe17 	ldw	r4,-8(fp)
    7a68:	00025e80 	call	25e8 <OS_StrLen>
    7a6c:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
    7a70:	e0bff703 	ldbu	r2,-36(fp)
    7a74:	10800830 	cmpltui	r2,r2,32
    7a78:	1000081e 	bne	r2,zero,7a9c <OSTaskNameSet+0x180>
    7a7c:	e0bff517 	ldw	r2,-44(fp)
    7a80:	e0bffb15 	stw	r2,-20(fp)
    7a84:	e0bffb17 	ldw	r2,-20(fp)
    7a88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
    7a8c:	e0bfff17 	ldw	r2,-4(fp)
    7a90:	00c01044 	movi	r3,65
    7a94:	10c00005 	stb	r3,0(r2)
        return;
    7a98:	00000b06 	br	7ac8 <OSTaskNameSet+0x1ac>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    7a9c:	e0bff617 	ldw	r2,-40(fp)
    7aa0:	10801304 	addi	r2,r2,76
    7aa4:	1009883a 	mov	r4,r2
    7aa8:	e17ffe17 	ldw	r5,-8(fp)
    7aac:	00025740 	call	2574 <OS_StrCopy>
    7ab0:	e0bff517 	ldw	r2,-44(fp)
    7ab4:	e0bffc15 	stw	r2,-16(fp)
    7ab8:	e0bffc17 	ldw	r2,-16(fp)
    7abc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    7ac0:	e0bfff17 	ldw	r2,-4(fp)
    7ac4:	10000005 	stb	zero,0(r2)
}
    7ac8:	e037883a 	mov	sp,fp
    7acc:	dfc00117 	ldw	ra,4(sp)
    7ad0:	df000017 	ldw	fp,0(sp)
    7ad4:	dec00204 	addi	sp,sp,8
    7ad8:	f800283a 	ret

00007adc <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
    7adc:	defff404 	addi	sp,sp,-48
    7ae0:	dfc00b15 	stw	ra,44(sp)
    7ae4:	df000a15 	stw	fp,40(sp)
    7ae8:	df000a04 	addi	fp,sp,40
    7aec:	2005883a 	mov	r2,r4
    7af0:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    7af4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
    7af8:	e0bfff03 	ldbu	r2,-4(fp)
    7afc:	10800530 	cmpltui	r2,r2,20
    7b00:	1000021e 	bne	r2,zero,7b0c <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    7b04:	00800a84 	movi	r2,42
    7b08:	00006d06 	br	7cc0 <OSTaskResume+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7b0c:	0005303a 	rdctl	r2,status
    7b10:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7b14:	e0fff817 	ldw	r3,-32(fp)
    7b18:	00bfff84 	movi	r2,-2
    7b1c:	1884703a 	and	r2,r3,r2
    7b20:	1001703a 	wrctl	status,r2
  
  return context;
    7b24:	e0bff817 	ldw	r2,-32(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    7b28:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
    7b2c:	e0ffff03 	ldbu	r3,-4(fp)
    7b30:	008001b4 	movhi	r2,6
    7b34:	10a3f604 	addi	r2,r2,-28712
    7b38:	18c7883a 	add	r3,r3,r3
    7b3c:	18c7883a 	add	r3,r3,r3
    7b40:	10c5883a 	add	r2,r2,r3
    7b44:	10800017 	ldw	r2,0(r2)
    7b48:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
    7b4c:	e0bff717 	ldw	r2,-36(fp)
    7b50:	1000061e 	bne	r2,zero,7b6c <OSTaskResume+0x90>
    7b54:	e0bff617 	ldw	r2,-40(fp)
    7b58:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7b5c:	e0bff917 	ldw	r2,-28(fp)
    7b60:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
    7b64:	00801184 	movi	r2,70
    7b68:	00005506 	br	7cc0 <OSTaskResume+0x1e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
    7b6c:	e0bff717 	ldw	r2,-36(fp)
    7b70:	10800058 	cmpnei	r2,r2,1
    7b74:	1000061e 	bne	r2,zero,7b90 <OSTaskResume+0xb4>
    7b78:	e0bff617 	ldw	r2,-40(fp)
    7b7c:	e0bffa15 	stw	r2,-24(fp)
    7b80:	e0bffa17 	ldw	r2,-24(fp)
    7b84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    7b88:	008010c4 	movi	r2,67
    7b8c:	00004c06 	br	7cc0 <OSTaskResume+0x1e4>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
    7b90:	e0bff717 	ldw	r2,-36(fp)
    7b94:	10800c03 	ldbu	r2,48(r2)
    7b98:	10803fcc 	andi	r2,r2,255
    7b9c:	1080020c 	andi	r2,r2,8
    7ba0:	10004226 	beq	r2,zero,7cac <OSTaskResume+0x1d0>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
    7ba4:	e0bff717 	ldw	r2,-36(fp)
    7ba8:	10c00c03 	ldbu	r3,48(r2)
    7bac:	00bffdc4 	movi	r2,-9
    7bb0:	1884703a 	and	r2,r3,r2
    7bb4:	1007883a 	mov	r3,r2
    7bb8:	e0bff717 	ldw	r2,-36(fp)
    7bbc:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
    7bc0:	e0bff717 	ldw	r2,-36(fp)
    7bc4:	10800c03 	ldbu	r2,48(r2)
    7bc8:	10803fcc 	andi	r2,r2,255
    7bcc:	1000311e 	bne	r2,zero,7c94 <OSTaskResume+0x1b8>
            if (ptcb->OSTCBDly == 0) {
    7bd0:	e0bff717 	ldw	r2,-36(fp)
    7bd4:	10800b8b 	ldhu	r2,46(r2)
    7bd8:	10bfffcc 	andi	r2,r2,65535
    7bdc:	1000281e 	bne	r2,zero,7c80 <OSTaskResume+0x1a4>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
    7be0:	e0bff717 	ldw	r2,-36(fp)
    7be4:	10c00d83 	ldbu	r3,54(r2)
    7be8:	00800074 	movhi	r2,1
    7bec:	108f6704 	addi	r2,r2,15772
    7bf0:	10800003 	ldbu	r2,0(r2)
    7bf4:	1884b03a 	or	r2,r3,r2
    7bf8:	1007883a 	mov	r3,r2
    7bfc:	00800074 	movhi	r2,1
    7c00:	108f6704 	addi	r2,r2,15772
    7c04:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    7c08:	e0bff717 	ldw	r2,-36(fp)
    7c0c:	10800d03 	ldbu	r2,52(r2)
    7c10:	10c03fcc 	andi	r3,r2,255
    7c14:	e0bff717 	ldw	r2,-36(fp)
    7c18:	10800d03 	ldbu	r2,52(r2)
    7c1c:	11003fcc 	andi	r4,r2,255
    7c20:	00800074 	movhi	r2,1
    7c24:	108f6744 	addi	r2,r2,15773
    7c28:	1105883a 	add	r2,r2,r4
    7c2c:	11000003 	ldbu	r4,0(r2)
    7c30:	e0bff717 	ldw	r2,-36(fp)
    7c34:	10800d43 	ldbu	r2,53(r2)
    7c38:	2084b03a 	or	r2,r4,r2
    7c3c:	1009883a 	mov	r4,r2
    7c40:	00800074 	movhi	r2,1
    7c44:	108f6744 	addi	r2,r2,15773
    7c48:	10c5883a 	add	r2,r2,r3
    7c4c:	11000005 	stb	r4,0(r2)
    7c50:	e0bff617 	ldw	r2,-40(fp)
    7c54:	e0bffb15 	stw	r2,-20(fp)
    7c58:	e0bffb17 	ldw	r2,-20(fp)
    7c5c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
    7c60:	00800074 	movhi	r2,1
    7c64:	108f5b44 	addi	r2,r2,15725
    7c68:	10800003 	ldbu	r2,0(r2)
    7c6c:	10803fcc 	andi	r2,r2,255
    7c70:	10800058 	cmpnei	r2,r2,1
    7c74:	10000b1e 	bne	r2,zero,7ca4 <OSTaskResume+0x1c8>
                    OS_Sched();                               /* Find new highest priority task        */
    7c78:	00024380 	call	2438 <OS_Sched>
    7c7c:	00000906 	br	7ca4 <OSTaskResume+0x1c8>
    7c80:	e0bff617 	ldw	r2,-40(fp)
    7c84:	e0bffc15 	stw	r2,-16(fp)
    7c88:	e0bffc17 	ldw	r2,-16(fp)
    7c8c:	1001703a 	wrctl	status,r2
    7c90:	00000406 	br	7ca4 <OSTaskResume+0x1c8>
    7c94:	e0bff617 	ldw	r2,-40(fp)
    7c98:	e0bffd15 	stw	r2,-12(fp)
    7c9c:	e0bffd17 	ldw	r2,-12(fp)
    7ca0:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
    7ca4:	0005883a 	mov	r2,zero
    7ca8:	00000506 	br	7cc0 <OSTaskResume+0x1e4>
    7cac:	e0bff617 	ldw	r2,-40(fp)
    7cb0:	e0bffe15 	stw	r2,-8(fp)
    7cb4:	e0bffe17 	ldw	r2,-8(fp)
    7cb8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
    7cbc:	00801104 	movi	r2,68
}
    7cc0:	e037883a 	mov	sp,fp
    7cc4:	dfc00117 	ldw	ra,4(sp)
    7cc8:	df000017 	ldw	fp,0(sp)
    7ccc:	dec00204 	addi	sp,sp,8
    7cd0:	f800283a 	ret

00007cd4 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
    7cd4:	defff304 	addi	sp,sp,-52
    7cd8:	df000c15 	stw	fp,48(sp)
    7cdc:	df000c04 	addi	fp,sp,48
    7ce0:	2005883a 	mov	r2,r4
    7ce4:	e17fff15 	stw	r5,-4(fp)
    7ce8:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    7cec:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
    7cf0:	e0bffe03 	ldbu	r2,-8(fp)
    7cf4:	10800570 	cmpltui	r2,r2,21
    7cf8:	1000051e 	bne	r2,zero,7d10 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
    7cfc:	e0bffe03 	ldbu	r2,-8(fp)
    7d00:	10803fe0 	cmpeqi	r2,r2,255
    7d04:	1000021e 	bne	r2,zero,7d10 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
    7d08:	00800a84 	movi	r2,42
    7d0c:	00005f06 	br	7e8c <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
    7d10:	e0bfff17 	ldw	r2,-4(fp)
    7d14:	1000021e 	bne	r2,zero,7d20 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
    7d18:	00800244 	movi	r2,9
    7d1c:	00005b06 	br	7e8c <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
    7d20:	e0bfff17 	ldw	r2,-4(fp)
    7d24:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
    7d28:	e0bfff17 	ldw	r2,-4(fp)
    7d2c:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7d30:	0005303a 	rdctl	r2,status
    7d34:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7d38:	e0fff917 	ldw	r3,-28(fp)
    7d3c:	00bfff84 	movi	r2,-2
    7d40:	1884703a 	and	r2,r3,r2
    7d44:	1001703a 	wrctl	status,r2
  
  return context;
    7d48:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    7d4c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
    7d50:	e0bffe03 	ldbu	r2,-8(fp)
    7d54:	10803fd8 	cmpnei	r2,r2,255
    7d58:	1000051e 	bne	r2,zero,7d70 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
    7d5c:	00800074 	movhi	r2,1
    7d60:	108f6a04 	addi	r2,r2,15784
    7d64:	10800017 	ldw	r2,0(r2)
    7d68:	10800c83 	ldbu	r2,50(r2)
    7d6c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    7d70:	e0fffe03 	ldbu	r3,-8(fp)
    7d74:	008001b4 	movhi	r2,6
    7d78:	10a3f604 	addi	r2,r2,-28712
    7d7c:	18c7883a 	add	r3,r3,r3
    7d80:	18c7883a 	add	r3,r3,r3
    7d84:	10c5883a 	add	r2,r2,r3
    7d88:	10800017 	ldw	r2,0(r2)
    7d8c:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
    7d90:	e0bff717 	ldw	r2,-36(fp)
    7d94:	1000061e 	bne	r2,zero,7db0 <OSTaskStkChk+0xdc>
    7d98:	e0bff617 	ldw	r2,-40(fp)
    7d9c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7da0:	e0bffa17 	ldw	r2,-24(fp)
    7da4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    7da8:	008010c4 	movi	r2,67
    7dac:	00003706 	br	7e8c <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
    7db0:	e0bff717 	ldw	r2,-36(fp)
    7db4:	10800058 	cmpnei	r2,r2,1
    7db8:	1000061e 	bne	r2,zero,7dd4 <OSTaskStkChk+0x100>
    7dbc:	e0bff617 	ldw	r2,-40(fp)
    7dc0:	e0bffb15 	stw	r2,-20(fp)
    7dc4:	e0bffb17 	ldw	r2,-20(fp)
    7dc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    7dcc:	008010c4 	movi	r2,67
    7dd0:	00002e06 	br	7e8c <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
    7dd4:	e0bff717 	ldw	r2,-36(fp)
    7dd8:	1080040b 	ldhu	r2,16(r2)
    7ddc:	10bfffcc 	andi	r2,r2,65535
    7de0:	1080004c 	andi	r2,r2,1
    7de4:	1000061e 	bne	r2,zero,7e00 <OSTaskStkChk+0x12c>
    7de8:	e0bff617 	ldw	r2,-40(fp)
    7dec:	e0bffc15 	stw	r2,-16(fp)
    7df0:	e0bffc17 	ldw	r2,-16(fp)
    7df4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
    7df8:	00801144 	movi	r2,69
    7dfc:	00002306 	br	7e8c <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
    7e00:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
    7e04:	e0bff717 	ldw	r2,-36(fp)
    7e08:	10800317 	ldw	r2,12(r2)
    7e0c:	e0bff815 	stw	r2,-32(fp)
    pchk  = ptcb->OSTCBStkBottom;
    7e10:	e0bff717 	ldw	r2,-36(fp)
    7e14:	10800217 	ldw	r2,8(r2)
    7e18:	e0bff415 	stw	r2,-48(fp)
    7e1c:	e0bff617 	ldw	r2,-40(fp)
    7e20:	e0bffd15 	stw	r2,-12(fp)
    7e24:	e0bffd17 	ldw	r2,-12(fp)
    7e28:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    7e2c:	00000306 	br	7e3c <OSTaskStkChk+0x168>
        nfree++;
    7e30:	e0bff517 	ldw	r2,-44(fp)
    7e34:	10800044 	addi	r2,r2,1
    7e38:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    7e3c:	e0bff417 	ldw	r2,-48(fp)
    7e40:	10c00104 	addi	r3,r2,4
    7e44:	e0fff415 	stw	r3,-48(fp)
    7e48:	10800017 	ldw	r2,0(r2)
    7e4c:	103ff826 	beq	r2,zero,7e30 <OSTaskStkChk+0x15c>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
    7e50:	e0bff517 	ldw	r2,-44(fp)
    7e54:	1085883a 	add	r2,r2,r2
    7e58:	1085883a 	add	r2,r2,r2
    7e5c:	1007883a 	mov	r3,r2
    7e60:	e0bfff17 	ldw	r2,-4(fp)
    7e64:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
    7e68:	e0fff817 	ldw	r3,-32(fp)
    7e6c:	e0bff517 	ldw	r2,-44(fp)
    7e70:	1885c83a 	sub	r2,r3,r2
    7e74:	1085883a 	add	r2,r2,r2
    7e78:	1085883a 	add	r2,r2,r2
    7e7c:	1007883a 	mov	r3,r2
    7e80:	e0bfff17 	ldw	r2,-4(fp)
    7e84:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
    7e88:	0005883a 	mov	r2,zero
}
    7e8c:	e037883a 	mov	sp,fp
    7e90:	df000017 	ldw	fp,0(sp)
    7e94:	dec00104 	addi	sp,sp,4
    7e98:	f800283a 	ret

00007e9c <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
    7e9c:	defff504 	addi	sp,sp,-44
    7ea0:	dfc00a15 	stw	ra,40(sp)
    7ea4:	df000915 	stw	fp,36(sp)
    7ea8:	df000904 	addi	fp,sp,36
    7eac:	2005883a 	mov	r2,r4
    7eb0:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7eb4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
    7eb8:	e0bfff03 	ldbu	r2,-4(fp)
    7ebc:	10800518 	cmpnei	r2,r2,20
    7ec0:	1000021e 	bne	r2,zero,7ecc <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
    7ec4:	008011c4 	movi	r2,71
    7ec8:	00007406 	br	809c <OSTaskSuspend+0x200>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    7ecc:	e0bfff03 	ldbu	r2,-4(fp)
    7ed0:	10800530 	cmpltui	r2,r2,20
    7ed4:	1000051e 	bne	r2,zero,7eec <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
    7ed8:	e0bfff03 	ldbu	r2,-4(fp)
    7edc:	10803fe0 	cmpeqi	r2,r2,255
    7ee0:	1000021e 	bne	r2,zero,7eec <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
    7ee4:	00800a84 	movi	r2,42
    7ee8:	00006c06 	br	809c <OSTaskSuspend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7eec:	0005303a 	rdctl	r2,status
    7ef0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7ef4:	e0fffb17 	ldw	r3,-20(fp)
    7ef8:	00bfff84 	movi	r2,-2
    7efc:	1884703a 	and	r2,r3,r2
    7f00:	1001703a 	wrctl	status,r2
  
  return context;
    7f04:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
    7f08:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
    7f0c:	e0bfff03 	ldbu	r2,-4(fp)
    7f10:	10803fd8 	cmpnei	r2,r2,255
    7f14:	1000081e 	bne	r2,zero,7f38 <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
    7f18:	00800074 	movhi	r2,1
    7f1c:	108f6a04 	addi	r2,r2,15784
    7f20:	10800017 	ldw	r2,0(r2)
    7f24:	10800c83 	ldbu	r2,50(r2)
    7f28:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
    7f2c:	00800044 	movi	r2,1
    7f30:	e0bff705 	stb	r2,-36(fp)
    7f34:	00000b06 	br	7f64 <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
    7f38:	00800074 	movhi	r2,1
    7f3c:	108f6a04 	addi	r2,r2,15784
    7f40:	10800017 	ldw	r2,0(r2)
    7f44:	10800c83 	ldbu	r2,50(r2)
    7f48:	10c03fcc 	andi	r3,r2,255
    7f4c:	e0bfff03 	ldbu	r2,-4(fp)
    7f50:	1880031e 	bne	r3,r2,7f60 <OSTaskSuspend+0xc4>
        self = OS_TRUE;
    7f54:	00800044 	movi	r2,1
    7f58:	e0bff705 	stb	r2,-36(fp)
    7f5c:	00000106 	br	7f64 <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
    7f60:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    7f64:	e0ffff03 	ldbu	r3,-4(fp)
    7f68:	008001b4 	movhi	r2,6
    7f6c:	10a3f604 	addi	r2,r2,-28712
    7f70:	18c7883a 	add	r3,r3,r3
    7f74:	18c7883a 	add	r3,r3,r3
    7f78:	10c5883a 	add	r2,r2,r3
    7f7c:	10800017 	ldw	r2,0(r2)
    7f80:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
    7f84:	e0bff917 	ldw	r2,-28(fp)
    7f88:	1000061e 	bne	r2,zero,7fa4 <OSTaskSuspend+0x108>
    7f8c:	e0bff817 	ldw	r2,-32(fp)
    7f90:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7f94:	e0bffc17 	ldw	r2,-16(fp)
    7f98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
    7f9c:	00801204 	movi	r2,72
    7fa0:	00003e06 	br	809c <OSTaskSuspend+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
    7fa4:	e0bff917 	ldw	r2,-28(fp)
    7fa8:	10800058 	cmpnei	r2,r2,1
    7fac:	1000061e 	bne	r2,zero,7fc8 <OSTaskSuspend+0x12c>
    7fb0:	e0bff817 	ldw	r2,-32(fp)
    7fb4:	e0bffd15 	stw	r2,-12(fp)
    7fb8:	e0bffd17 	ldw	r2,-12(fp)
    7fbc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    7fc0:	008010c4 	movi	r2,67
    7fc4:	00003506 	br	809c <OSTaskSuspend+0x200>
    }
    y            = ptcb->OSTCBY;
    7fc8:	e0bff917 	ldw	r2,-28(fp)
    7fcc:	10800d03 	ldbu	r2,52(r2)
    7fd0:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
    7fd4:	e0fffa03 	ldbu	r3,-24(fp)
    7fd8:	e13ffa03 	ldbu	r4,-24(fp)
    7fdc:	00800074 	movhi	r2,1
    7fe0:	108f6744 	addi	r2,r2,15773
    7fe4:	1105883a 	add	r2,r2,r4
    7fe8:	10800003 	ldbu	r2,0(r2)
    7fec:	1009883a 	mov	r4,r2
    7ff0:	e0bff917 	ldw	r2,-28(fp)
    7ff4:	10800d43 	ldbu	r2,53(r2)
    7ff8:	0084303a 	nor	r2,zero,r2
    7ffc:	2084703a 	and	r2,r4,r2
    8000:	1009883a 	mov	r4,r2
    8004:	00800074 	movhi	r2,1
    8008:	108f6744 	addi	r2,r2,15773
    800c:	10c5883a 	add	r2,r2,r3
    8010:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    8014:	e0fffa03 	ldbu	r3,-24(fp)
    8018:	00800074 	movhi	r2,1
    801c:	108f6744 	addi	r2,r2,15773
    8020:	10c5883a 	add	r2,r2,r3
    8024:	10800003 	ldbu	r2,0(r2)
    8028:	10803fcc 	andi	r2,r2,255
    802c:	10000c1e 	bne	r2,zero,8060 <OSTaskSuspend+0x1c4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
    8030:	e0bff917 	ldw	r2,-28(fp)
    8034:	10800d83 	ldbu	r2,54(r2)
    8038:	0084303a 	nor	r2,zero,r2
    803c:	1007883a 	mov	r3,r2
    8040:	00800074 	movhi	r2,1
    8044:	108f6704 	addi	r2,r2,15772
    8048:	10800003 	ldbu	r2,0(r2)
    804c:	1884703a 	and	r2,r3,r2
    8050:	1007883a 	mov	r3,r2
    8054:	00800074 	movhi	r2,1
    8058:	108f6704 	addi	r2,r2,15772
    805c:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
    8060:	e0bff917 	ldw	r2,-28(fp)
    8064:	10800c03 	ldbu	r2,48(r2)
    8068:	10800214 	ori	r2,r2,8
    806c:	1007883a 	mov	r3,r2
    8070:	e0bff917 	ldw	r2,-28(fp)
    8074:	10c00c05 	stb	r3,48(r2)
    8078:	e0bff817 	ldw	r2,-32(fp)
    807c:	e0bffe15 	stw	r2,-8(fp)
    8080:	e0bffe17 	ldw	r2,-8(fp)
    8084:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
    8088:	e0bff703 	ldbu	r2,-36(fp)
    808c:	10800058 	cmpnei	r2,r2,1
    8090:	1000011e 	bne	r2,zero,8098 <OSTaskSuspend+0x1fc>
        OS_Sched();                                             /* Find new highest priority task      */
    8094:	00024380 	call	2438 <OS_Sched>
    }
    return (OS_ERR_NONE);
    8098:	0005883a 	mov	r2,zero
}
    809c:	e037883a 	mov	sp,fp
    80a0:	dfc00117 	ldw	ra,4(sp)
    80a4:	df000017 	ldw	fp,0(sp)
    80a8:	dec00204 	addi	sp,sp,8
    80ac:	f800283a 	ret

000080b0 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
    80b0:	defff604 	addi	sp,sp,-40
    80b4:	dfc00915 	stw	ra,36(sp)
    80b8:	df000815 	stw	fp,32(sp)
    80bc:	df000804 	addi	fp,sp,32
    80c0:	2005883a 	mov	r2,r4
    80c4:	e17fff15 	stw	r5,-4(fp)
    80c8:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    80cc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
    80d0:	e0bffe03 	ldbu	r2,-8(fp)
    80d4:	10800570 	cmpltui	r2,r2,21
    80d8:	1000051e 	bne	r2,zero,80f0 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
    80dc:	e0bffe03 	ldbu	r2,-8(fp)
    80e0:	10803fe0 	cmpeqi	r2,r2,255
    80e4:	1000021e 	bne	r2,zero,80f0 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
    80e8:	00800a84 	movi	r2,42
    80ec:	00003606 	br	81c8 <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
    80f0:	e0bfff17 	ldw	r2,-4(fp)
    80f4:	1000021e 	bne	r2,zero,8100 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
    80f8:	00800244 	movi	r2,9
    80fc:	00003206 	br	81c8 <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8100:	0005303a 	rdctl	r2,status
    8104:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8108:	e0fffa17 	ldw	r3,-24(fp)
    810c:	00bfff84 	movi	r2,-2
    8110:	1884703a 	and	r2,r3,r2
    8114:	1001703a 	wrctl	status,r2
  
  return context;
    8118:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    811c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
    8120:	e0bffe03 	ldbu	r2,-8(fp)
    8124:	10803fd8 	cmpnei	r2,r2,255
    8128:	1000051e 	bne	r2,zero,8140 <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
    812c:	00800074 	movhi	r2,1
    8130:	108f6a04 	addi	r2,r2,15784
    8134:	10800017 	ldw	r2,0(r2)
    8138:	10800c83 	ldbu	r2,50(r2)
    813c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    8140:	e0fffe03 	ldbu	r3,-8(fp)
    8144:	008001b4 	movhi	r2,6
    8148:	10a3f604 	addi	r2,r2,-28712
    814c:	18c7883a 	add	r3,r3,r3
    8150:	18c7883a 	add	r3,r3,r3
    8154:	10c5883a 	add	r2,r2,r3
    8158:	10800017 	ldw	r2,0(r2)
    815c:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
    8160:	e0bff917 	ldw	r2,-28(fp)
    8164:	1000061e 	bne	r2,zero,8180 <OSTaskQuery+0xd0>
    8168:	e0bff817 	ldw	r2,-32(fp)
    816c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8170:	e0bffb17 	ldw	r2,-20(fp)
    8174:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
    8178:	00800a44 	movi	r2,41
    817c:	00001206 	br	81c8 <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
    8180:	e0bff917 	ldw	r2,-28(fp)
    8184:	10800058 	cmpnei	r2,r2,1
    8188:	1000061e 	bne	r2,zero,81a4 <OSTaskQuery+0xf4>
    818c:	e0bff817 	ldw	r2,-32(fp)
    8190:	e0bffc15 	stw	r2,-16(fp)
    8194:	e0bffc17 	ldw	r2,-16(fp)
    8198:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    819c:	008010c4 	movi	r2,67
    81a0:	00000906 	br	81c8 <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
    81a4:	e13fff17 	ldw	r4,-4(fp)
    81a8:	e17ff917 	ldw	r5,-28(fp)
    81ac:	01801b04 	movi	r6,108
    81b0:	00023d40 	call	23d4 <OS_MemCopy>
    81b4:	e0bff817 	ldw	r2,-32(fp)
    81b8:	e0bffd15 	stw	r2,-12(fp)
    81bc:	e0bffd17 	ldw	r2,-12(fp)
    81c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    81c4:	0005883a 	mov	r2,zero
}
    81c8:	e037883a 	mov	sp,fp
    81cc:	dfc00117 	ldw	ra,4(sp)
    81d0:	df000017 	ldw	fp,0(sp)
    81d4:	dec00204 	addi	sp,sp,8
    81d8:	f800283a 	ret

000081dc <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    81dc:	defffc04 	addi	sp,sp,-16
    81e0:	df000315 	stw	fp,12(sp)
    81e4:	df000304 	addi	fp,sp,12
    81e8:	e13ffd15 	stw	r4,-12(fp)
    81ec:	e17ffe15 	stw	r5,-8(fp)
    81f0:	3005883a 	mov	r2,r6
    81f4:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
    81f8:	e0bfff0b 	ldhu	r2,-4(fp)
    81fc:	1080004c 	andi	r2,r2,1
    8200:	10000d26 	beq	r2,zero,8238 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
    8204:	e0bfff0b 	ldhu	r2,-4(fp)
    8208:	1080008c 	andi	r2,r2,2
    820c:	10000a26 	beq	r2,zero,8238 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    8210:	00000706 	br	8230 <OS_TaskStkClr+0x54>
                size--;
    8214:	e0bffe17 	ldw	r2,-8(fp)
    8218:	10bfffc4 	addi	r2,r2,-1
    821c:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
    8220:	e0bffd17 	ldw	r2,-12(fp)
    8224:	10c00104 	addi	r3,r2,4
    8228:	e0fffd15 	stw	r3,-12(fp)
    822c:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    8230:	e0bffe17 	ldw	r2,-8(fp)
    8234:	103ff71e 	bne	r2,zero,8214 <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
    8238:	e037883a 	mov	sp,fp
    823c:	df000017 	ldw	fp,0(sp)
    8240:	dec00104 	addi	sp,sp,4
    8244:	f800283a 	ret

00008248 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
    8248:	defff904 	addi	sp,sp,-28
    824c:	dfc00615 	stw	ra,24(sp)
    8250:	df000515 	stw	fp,20(sp)
    8254:	df000504 	addi	fp,sp,20
    8258:	2005883a 	mov	r2,r4
    825c:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    8260:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    8264:	00800074 	movhi	r2,1
    8268:	108f6904 	addi	r2,r2,15780
    826c:	10800003 	ldbu	r2,0(r2)
    8270:	10803fcc 	andi	r2,r2,255
    8274:	10000126 	beq	r2,zero,827c <OSTimeDly+0x34>
        return;
    8278:	00004006 	br	837c <OSTimeDly+0x134>
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
    827c:	e0bfff0b 	ldhu	r2,-4(fp)
    8280:	10003e26 	beq	r2,zero,837c <OSTimeDly+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8284:	0005303a 	rdctl	r2,status
    8288:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    828c:	e0fffd17 	ldw	r3,-12(fp)
    8290:	00bfff84 	movi	r2,-2
    8294:	1884703a 	and	r2,r3,r2
    8298:	1001703a 	wrctl	status,r2
  
  return context;
    829c:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
    82a0:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
    82a4:	00800074 	movhi	r2,1
    82a8:	108f6a04 	addi	r2,r2,15784
    82ac:	10800017 	ldw	r2,0(r2)
    82b0:	10800d03 	ldbu	r2,52(r2)
    82b4:	e0bffc05 	stb	r2,-16(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    82b8:	e0fffc03 	ldbu	r3,-16(fp)
    82bc:	e13ffc03 	ldbu	r4,-16(fp)
    82c0:	00800074 	movhi	r2,1
    82c4:	108f6744 	addi	r2,r2,15773
    82c8:	1105883a 	add	r2,r2,r4
    82cc:	10800003 	ldbu	r2,0(r2)
    82d0:	1009883a 	mov	r4,r2
    82d4:	00800074 	movhi	r2,1
    82d8:	108f6a04 	addi	r2,r2,15784
    82dc:	10800017 	ldw	r2,0(r2)
    82e0:	10800d43 	ldbu	r2,53(r2)
    82e4:	0084303a 	nor	r2,zero,r2
    82e8:	2084703a 	and	r2,r4,r2
    82ec:	1009883a 	mov	r4,r2
    82f0:	00800074 	movhi	r2,1
    82f4:	108f6744 	addi	r2,r2,15773
    82f8:	10c5883a 	add	r2,r2,r3
    82fc:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
    8300:	e0fffc03 	ldbu	r3,-16(fp)
    8304:	00800074 	movhi	r2,1
    8308:	108f6744 	addi	r2,r2,15773
    830c:	10c5883a 	add	r2,r2,r3
    8310:	10800003 	ldbu	r2,0(r2)
    8314:	10803fcc 	andi	r2,r2,255
    8318:	10000e1e 	bne	r2,zero,8354 <OSTimeDly+0x10c>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    831c:	00800074 	movhi	r2,1
    8320:	108f6a04 	addi	r2,r2,15784
    8324:	10800017 	ldw	r2,0(r2)
    8328:	10800d83 	ldbu	r2,54(r2)
    832c:	0084303a 	nor	r2,zero,r2
    8330:	1007883a 	mov	r3,r2
    8334:	00800074 	movhi	r2,1
    8338:	108f6704 	addi	r2,r2,15772
    833c:	10800003 	ldbu	r2,0(r2)
    8340:	1884703a 	and	r2,r3,r2
    8344:	1007883a 	mov	r3,r2
    8348:	00800074 	movhi	r2,1
    834c:	108f6704 	addi	r2,r2,15772
    8350:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
    8354:	00800074 	movhi	r2,1
    8358:	108f6a04 	addi	r2,r2,15784
    835c:	10800017 	ldw	r2,0(r2)
    8360:	e0ffff0b 	ldhu	r3,-4(fp)
    8364:	10c00b8d 	sth	r3,46(r2)
    8368:	e0bffb17 	ldw	r2,-20(fp)
    836c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8370:	e0bffe17 	ldw	r2,-8(fp)
    8374:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    8378:	00024380 	call	2438 <OS_Sched>
    }
}
    837c:	e037883a 	mov	sp,fp
    8380:	dfc00117 	ldw	ra,4(sp)
    8384:	df000017 	ldw	fp,0(sp)
    8388:	dec00204 	addi	sp,sp,8
    838c:	f800283a 	ret

00008390 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
    8390:	defff804 	addi	sp,sp,-32
    8394:	dfc00715 	stw	ra,28(sp)
    8398:	df000615 	stw	fp,24(sp)
    839c:	df000604 	addi	fp,sp,24
    83a0:	2015883a 	mov	r10,r4
    83a4:	2809883a 	mov	r4,r5
    83a8:	3007883a 	mov	r3,r6
    83ac:	3805883a 	mov	r2,r7
    83b0:	e2bffc05 	stb	r10,-16(fp)
    83b4:	e13ffd05 	stb	r4,-12(fp)
    83b8:	e0fffe05 	stb	r3,-8(fp)
    83bc:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    83c0:	00800074 	movhi	r2,1
    83c4:	108f6904 	addi	r2,r2,15780
    83c8:	10800003 	ldbu	r2,0(r2)
    83cc:	10803fcc 	andi	r2,r2,255
    83d0:	10000226 	beq	r2,zero,83dc <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
    83d4:	00801544 	movi	r2,85
    83d8:	00004206 	br	84e4 <OSTimeDlyHMSM+0x154>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
    83dc:	e0bffc03 	ldbu	r2,-16(fp)
    83e0:	1000081e 	bne	r2,zero,8404 <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
    83e4:	e0bffd03 	ldbu	r2,-12(fp)
    83e8:	1000061e 	bne	r2,zero,8404 <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
    83ec:	e0bffe03 	ldbu	r2,-8(fp)
    83f0:	1000041e 	bne	r2,zero,8404 <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
    83f4:	e0bfff0b 	ldhu	r2,-4(fp)
    83f8:	1000021e 	bne	r2,zero,8404 <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
    83fc:	00801504 	movi	r2,84
    8400:	00003806 	br	84e4 <OSTimeDlyHMSM+0x154>
                }
            }
        }
    }
    if (minutes > 59) {
    8404:	e0bffd03 	ldbu	r2,-12(fp)
    8408:	10800f30 	cmpltui	r2,r2,60
    840c:	1000021e 	bne	r2,zero,8418 <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
    8410:	00801444 	movi	r2,81
    8414:	00003306 	br	84e4 <OSTimeDlyHMSM+0x154>
    }
    if (seconds > 59) {
    8418:	e0bffe03 	ldbu	r2,-8(fp)
    841c:	10800f30 	cmpltui	r2,r2,60
    8420:	1000021e 	bne	r2,zero,842c <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
    8424:	00801484 	movi	r2,82
    8428:	00002e06 	br	84e4 <OSTimeDlyHMSM+0x154>
    }
    if (ms > 999) {
    842c:	e0bfff0b 	ldhu	r2,-4(fp)
    8430:	1080fa30 	cmpltui	r2,r2,1000
    8434:	1000021e 	bne	r2,zero,8440 <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
    8438:	008014c4 	movi	r2,83
    843c:	00002906 	br	84e4 <OSTimeDlyHMSM+0x154>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    8440:	e0bffc03 	ldbu	r2,-16(fp)
    8444:	10c38424 	muli	r3,r2,3600
    8448:	e0bffd03 	ldbu	r2,-12(fp)
    844c:	10800f24 	muli	r2,r2,60
    8450:	1887883a 	add	r3,r3,r2
    8454:	e0bffe03 	ldbu	r2,-8(fp)
    8458:	1885883a 	add	r2,r3,r2
    845c:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    8460:	e0bfff0b 	ldhu	r2,-4(fp)
    8464:	10800f84 	addi	r2,r2,62
    8468:	100690fa 	slli	r3,r2,3
    846c:	008418b4 	movhi	r2,4194
    8470:	109374c4 	addi	r2,r2,19923
    8474:	188a383a 	mulxuu	r5,r3,r2
    8478:	1885383a 	mul	r2,r3,r2
    847c:	1011883a 	mov	r8,r2
    8480:	2813883a 	mov	r9,r5
    8484:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    8488:	2085883a 	add	r2,r4,r2
    848c:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    8490:	e0bffb17 	ldw	r2,-20(fp)
    8494:	1004d43a 	srli	r2,r2,16
    8498:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    849c:	e0bffb17 	ldw	r2,-20(fp)
    84a0:	10bfffcc 	andi	r2,r2,65535
    84a4:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
    84a8:	e0bffb17 	ldw	r2,-20(fp)
    84ac:	10bfffcc 	andi	r2,r2,65535
    84b0:	1009883a 	mov	r4,r2
    84b4:	00082480 	call	8248 <OSTimeDly>
    while (loops > 0) {
    84b8:	00000706 	br	84d8 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
    84bc:	01200014 	movui	r4,32768
    84c0:	00082480 	call	8248 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
    84c4:	01200014 	movui	r4,32768
    84c8:	00082480 	call	8248 <OSTimeDly>
        loops--;
    84cc:	e0bffa0b 	ldhu	r2,-24(fp)
    84d0:	10bfffc4 	addi	r2,r2,-1
    84d4:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
    84d8:	e0bffa0b 	ldhu	r2,-24(fp)
    84dc:	103ff71e 	bne	r2,zero,84bc <OSTimeDlyHMSM+0x12c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
    84e0:	0005883a 	mov	r2,zero
}
    84e4:	e037883a 	mov	sp,fp
    84e8:	dfc00117 	ldw	ra,4(sp)
    84ec:	df000017 	ldw	fp,0(sp)
    84f0:	dec00204 	addi	sp,sp,8
    84f4:	f800283a 	ret

000084f8 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
    84f8:	defff504 	addi	sp,sp,-44
    84fc:	dfc00a15 	stw	ra,40(sp)
    8500:	df000915 	stw	fp,36(sp)
    8504:	df000904 	addi	fp,sp,36
    8508:	2005883a 	mov	r2,r4
    850c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    8510:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
    8514:	e0bfff03 	ldbu	r2,-4(fp)
    8518:	10800530 	cmpltui	r2,r2,20
    851c:	1000021e 	bne	r2,zero,8528 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    8520:	00800a84 	movi	r2,42
    8524:	00006b06 	br	86d4 <OSTimeDlyResume+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8528:	0005303a 	rdctl	r2,status
    852c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8530:	e0fff917 	ldw	r3,-28(fp)
    8534:	00bfff84 	movi	r2,-2
    8538:	1884703a 	and	r2,r3,r2
    853c:	1001703a 	wrctl	status,r2
  
  return context;
    8540:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    8544:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
    8548:	e0ffff03 	ldbu	r3,-4(fp)
    854c:	008001b4 	movhi	r2,6
    8550:	10a3f604 	addi	r2,r2,-28712
    8554:	18c7883a 	add	r3,r3,r3
    8558:	18c7883a 	add	r3,r3,r3
    855c:	10c5883a 	add	r2,r2,r3
    8560:	10800017 	ldw	r2,0(r2)
    8564:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {
    8568:	e0bff817 	ldw	r2,-32(fp)
    856c:	1000061e 	bne	r2,zero,8588 <OSTimeDlyResume+0x90>
    8570:	e0bff717 	ldw	r2,-36(fp)
    8574:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8578:	e0bffa17 	ldw	r2,-24(fp)
    857c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    8580:	008010c4 	movi	r2,67
    8584:	00005306 	br	86d4 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb == OS_TCB_RESERVED) {
    8588:	e0bff817 	ldw	r2,-32(fp)
    858c:	10800058 	cmpnei	r2,r2,1
    8590:	1000061e 	bne	r2,zero,85ac <OSTimeDlyResume+0xb4>
    8594:	e0bff717 	ldw	r2,-36(fp)
    8598:	e0bffb15 	stw	r2,-20(fp)
    859c:	e0bffb17 	ldw	r2,-20(fp)
    85a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    85a4:	008010c4 	movi	r2,67
    85a8:	00004a06 	br	86d4 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
    85ac:	e0bff817 	ldw	r2,-32(fp)
    85b0:	10800b8b 	ldhu	r2,46(r2)
    85b4:	10bfffcc 	andi	r2,r2,65535
    85b8:	1000061e 	bne	r2,zero,85d4 <OSTimeDlyResume+0xdc>
    85bc:	e0bff717 	ldw	r2,-36(fp)
    85c0:	e0bffc15 	stw	r2,-16(fp)
    85c4:	e0bffc17 	ldw	r2,-16(fp)
    85c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
    85cc:	00801404 	movi	r2,80
    85d0:	00004006 	br	86d4 <OSTimeDlyResume+0x1dc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
    85d4:	e0bff817 	ldw	r2,-32(fp)
    85d8:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    85dc:	e0bff817 	ldw	r2,-32(fp)
    85e0:	10800c03 	ldbu	r2,48(r2)
    85e4:	10803fcc 	andi	r2,r2,255
    85e8:	10800dcc 	andi	r2,r2,55
    85ec:	10000b26 	beq	r2,zero,861c <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
    85f0:	e0bff817 	ldw	r2,-32(fp)
    85f4:	10c00c03 	ldbu	r3,48(r2)
    85f8:	00bff204 	movi	r2,-56
    85fc:	1884703a 	and	r2,r3,r2
    8600:	1007883a 	mov	r3,r2
    8604:	e0bff817 	ldw	r2,-32(fp)
    8608:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
    860c:	e0bff817 	ldw	r2,-32(fp)
    8610:	00c00044 	movi	r3,1
    8614:	10c00c45 	stb	r3,49(r2)
    8618:	00000206 	br	8624 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
    861c:	e0bff817 	ldw	r2,-32(fp)
    8620:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
    8624:	e0bff817 	ldw	r2,-32(fp)
    8628:	10800c03 	ldbu	r2,48(r2)
    862c:	10803fcc 	andi	r2,r2,255
    8630:	1080020c 	andi	r2,r2,8
    8634:	1000221e 	bne	r2,zero,86c0 <OSTimeDlyResume+0x1c8>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
    8638:	e0bff817 	ldw	r2,-32(fp)
    863c:	10c00d83 	ldbu	r3,54(r2)
    8640:	00800074 	movhi	r2,1
    8644:	108f6704 	addi	r2,r2,15772
    8648:	10800003 	ldbu	r2,0(r2)
    864c:	1884b03a 	or	r2,r3,r2
    8650:	1007883a 	mov	r3,r2
    8654:	00800074 	movhi	r2,1
    8658:	108f6704 	addi	r2,r2,15772
    865c:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    8660:	e0bff817 	ldw	r2,-32(fp)
    8664:	10800d03 	ldbu	r2,52(r2)
    8668:	10c03fcc 	andi	r3,r2,255
    866c:	e0bff817 	ldw	r2,-32(fp)
    8670:	10800d03 	ldbu	r2,52(r2)
    8674:	11003fcc 	andi	r4,r2,255
    8678:	00800074 	movhi	r2,1
    867c:	108f6744 	addi	r2,r2,15773
    8680:	1105883a 	add	r2,r2,r4
    8684:	11000003 	ldbu	r4,0(r2)
    8688:	e0bff817 	ldw	r2,-32(fp)
    868c:	10800d43 	ldbu	r2,53(r2)
    8690:	2084b03a 	or	r2,r4,r2
    8694:	1009883a 	mov	r4,r2
    8698:	00800074 	movhi	r2,1
    869c:	108f6744 	addi	r2,r2,15773
    86a0:	10c5883a 	add	r2,r2,r3
    86a4:	11000005 	stb	r4,0(r2)
    86a8:	e0bff717 	ldw	r2,-36(fp)
    86ac:	e0bffd15 	stw	r2,-12(fp)
    86b0:	e0bffd17 	ldw	r2,-12(fp)
    86b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
    86b8:	00024380 	call	2438 <OS_Sched>
    86bc:	00000406 	br	86d0 <OSTimeDlyResume+0x1d8>
    86c0:	e0bff717 	ldw	r2,-36(fp)
    86c4:	e0bffe15 	stw	r2,-8(fp)
    86c8:	e0bffe17 	ldw	r2,-8(fp)
    86cc:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
    86d0:	0005883a 	mov	r2,zero
}
    86d4:	e037883a 	mov	sp,fp
    86d8:	dfc00117 	ldw	ra,4(sp)
    86dc:	df000017 	ldw	fp,0(sp)
    86e0:	dec00204 	addi	sp,sp,8
    86e4:	f800283a 	ret

000086e8 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
    86e8:	defffb04 	addi	sp,sp,-20
    86ec:	df000415 	stw	fp,16(sp)
    86f0:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    86f4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    86f8:	0005303a 	rdctl	r2,status
    86fc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8700:	e0fffe17 	ldw	r3,-8(fp)
    8704:	00bfff84 	movi	r2,-2
    8708:	1884703a 	and	r2,r3,r2
    870c:	1001703a 	wrctl	status,r2
  
  return context;
    8710:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    8714:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
    8718:	00800074 	movhi	r2,1
    871c:	108f6b04 	addi	r2,r2,15788
    8720:	10800017 	ldw	r2,0(r2)
    8724:	e0bffd15 	stw	r2,-12(fp)
    8728:	e0bffc17 	ldw	r2,-16(fp)
    872c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8730:	e0bfff17 	ldw	r2,-4(fp)
    8734:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
    8738:	e0bffd17 	ldw	r2,-12(fp)
}
    873c:	e037883a 	mov	sp,fp
    8740:	df000017 	ldw	fp,0(sp)
    8744:	dec00104 	addi	sp,sp,4
    8748:	f800283a 	ret

0000874c <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
    874c:	defffb04 	addi	sp,sp,-20
    8750:	df000415 	stw	fp,16(sp)
    8754:	df000404 	addi	fp,sp,16
    8758:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    875c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8760:	0005303a 	rdctl	r2,status
    8764:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8768:	e0fffd17 	ldw	r3,-12(fp)
    876c:	00bfff84 	movi	r2,-2
    8770:	1884703a 	and	r2,r3,r2
    8774:	1001703a 	wrctl	status,r2
  
  return context;
    8778:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
    877c:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
    8780:	00800074 	movhi	r2,1
    8784:	108f6b04 	addi	r2,r2,15788
    8788:	e0ffff17 	ldw	r3,-4(fp)
    878c:	10c00015 	stw	r3,0(r2)
    8790:	e0bffc17 	ldw	r2,-16(fp)
    8794:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8798:	e0bffe17 	ldw	r2,-8(fp)
    879c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    87a0:	e037883a 	mov	sp,fp
    87a4:	df000017 	ldw	fp,0(sp)
    87a8:	dec00104 	addi	sp,sp,4
    87ac:	f800283a 	ret

000087b0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    87b0:	defffd04 	addi	sp,sp,-12
    87b4:	dfc00215 	stw	ra,8(sp)
    87b8:	df000115 	stw	fp,4(sp)
    87bc:	df000104 	addi	fp,sp,4
    87c0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    87c4:	e13fff17 	ldw	r4,-4(fp)
    87c8:	01400074 	movhi	r5,1
    87cc:	2947a904 	addi	r5,r5,7844
    87d0:	000c1600 	call	c160 <alt_dev_llist_insert>
}
    87d4:	e037883a 	mov	sp,fp
    87d8:	dfc00117 	ldw	ra,4(sp)
    87dc:	df000017 	ldw	fp,0(sp)
    87e0:	dec00204 	addi	sp,sp,8
    87e4:	f800283a 	ret

000087e8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    87e8:	defffd04 	addi	sp,sp,-12
    87ec:	dfc00215 	stw	ra,8(sp)
    87f0:	df000115 	stw	fp,4(sp)
    87f4:	df000104 	addi	fp,sp,4
    87f8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
    87fc:	000cad40 	call	cad4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8800:	00800044 	movi	r2,1
    8804:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8808:	e037883a 	mov	sp,fp
    880c:	dfc00117 	ldw	ra,4(sp)
    8810:	df000017 	ldw	fp,0(sp)
    8814:	dec00204 	addi	sp,sp,8
    8818:	f800283a 	ret

0000881c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    881c:	defffd04 	addi	sp,sp,-12
    8820:	dfc00215 	stw	ra,8(sp)
    8824:	df000115 	stw	fp,4(sp)
    8828:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    882c:	01040034 	movhi	r4,4096
    8830:	21080004 	addi	r4,r4,8192
    8834:	000b883a 	mov	r5,zero
    8838:	000d883a 	mov	r6,zero
    883c:	01c00204 	movi	r7,8
    8840:	00099900 	call	9990 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    8844:	01000074 	movhi	r4,1
    8848:	21002104 	addi	r4,r4,132
    884c:	000b883a 	mov	r5,zero
    8850:	01800204 	movi	r6,8
    8854:	0008d580 	call	8d58 <altera_avalon_jtag_uart_init>
    8858:	01000074 	movhi	r4,1
    885c:	21001704 	addi	r4,r4,92
    8860:	00087b00 	call	87b0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
    8864:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
    8868:	01000074 	movhi	r4,1
    886c:	21043204 	addi	r4,r4,4296
    8870:	00087b00 	call	87b0 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
    8874:	01000074 	movhi	r4,1
    8878:	21043e04 	addi	r4,r4,4344
    887c:	00087b00 	call	87b0 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
    8880:	01000074 	movhi	r4,1
    8884:	21044a04 	addi	r4,r4,4392
    8888:	0009ac00 	call	9ac0 <alt_up_character_lcd_init>
    888c:	01000074 	movhi	r4,1
    8890:	21044a04 	addi	r4,r4,4392
    8894:	00087b00 	call	87b0 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
    8898:	01000074 	movhi	r4,1
    889c:	21045504 	addi	r4,r4,4436
    88a0:	00087b00 	call	87b0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
    88a4:	01000074 	movhi	r4,1
    88a8:	21046004 	addi	r4,r4,4480
    88ac:	00087b00 	call	87b0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
    88b0:	01000074 	movhi	r4,1
    88b4:	21046b04 	addi	r4,r4,4524
    88b8:	00087b00 	call	87b0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    88bc:	01000074 	movhi	r4,1
    88c0:	21047604 	addi	r4,r4,4568
    88c4:	00087b00 	call	87b0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
    88c8:	01000074 	movhi	r4,1
    88cc:	21048104 	addi	r4,r4,4612
    88d0:	00087b00 	call	87b0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    88d4:	01000074 	movhi	r4,1
    88d8:	21048c04 	addi	r4,r4,4656
    88dc:	00087b00 	call	87b0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    88e0:	01000074 	movhi	r4,1
    88e4:	21049704 	addi	r4,r4,4700
    88e8:	00087b00 	call	87b0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    88ec:	01000074 	movhi	r4,1
    88f0:	2104a204 	addi	r4,r4,4744
    88f4:	00087b00 	call	87b0 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
    88f8:	01000074 	movhi	r4,1
    88fc:	2104ad04 	addi	r4,r4,4788
    8900:	000a3980 	call	a398 <alt_up_ps2_init>
    8904:	01000074 	movhi	r4,1
    8908:	2104ad04 	addi	r4,r4,4788
    890c:	00087b00 	call	87b0 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
    8910:	01000074 	movhi	r4,1
    8914:	2104bb04 	addi	r4,r4,4844
    8918:	000a3980 	call	a398 <alt_up_ps2_init>
    891c:	01000074 	movhi	r4,1
    8920:	2104bb04 	addi	r4,r4,4844
    8924:	00087b00 	call	87b0 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    8928:	01000074 	movhi	r4,1
    892c:	2104c904 	addi	r4,r4,4900
    8930:	00087b00 	call	87b0 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
    8934:	01000074 	movhi	r4,1
    8938:	2104d404 	addi	r4,r4,4944
    893c:	00087b00 	call	87b0 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_SUBSYSTEM_VGA_CHAR_BUFFER, VGA_Subsystem_VGA_Char_Buffer);
    8940:	00800074 	movhi	r2,1
    8944:	1084e104 	addi	r2,r2,4996
    8948:	10800a17 	ldw	r2,40(r2)
    894c:	10800104 	addi	r2,r2,4
    8950:	10800017 	ldw	r2,0(r2)
    8954:	10ffffcc 	andi	r3,r2,65535
    8958:	00800074 	movhi	r2,1
    895c:	1084e104 	addi	r2,r2,4996
    8960:	10c00c15 	stw	r3,48(r2)
    8964:	00800074 	movhi	r2,1
    8968:	1084e104 	addi	r2,r2,4996
    896c:	10800a17 	ldw	r2,40(r2)
    8970:	10800104 	addi	r2,r2,4
    8974:	10800017 	ldw	r2,0(r2)
    8978:	1006d43a 	srli	r3,r2,16
    897c:	00800074 	movhi	r2,1
    8980:	1084e104 	addi	r2,r2,4996
    8984:	10c00d15 	stw	r3,52(r2)
    8988:	00800074 	movhi	r2,1
    898c:	1084e104 	addi	r2,r2,4996
    8990:	10800c17 	ldw	r2,48(r2)
    8994:	10801068 	cmpgeui	r2,r2,65
    8998:	1000081e 	bne	r2,zero,89bc <alt_sys_init+0x1a0>
    899c:	00800074 	movhi	r2,1
    89a0:	1084e104 	addi	r2,r2,4996
    89a4:	00c00fc4 	movi	r3,63
    89a8:	10c00f15 	stw	r3,60(r2)
    89ac:	00800074 	movhi	r2,1
    89b0:	1084e104 	addi	r2,r2,4996
    89b4:	00c00184 	movi	r3,6
    89b8:	10c01015 	stw	r3,64(r2)
    89bc:	00800074 	movhi	r2,1
    89c0:	1084e104 	addi	r2,r2,4996
    89c4:	10800d17 	ldw	r2,52(r2)
    89c8:	10800868 	cmpgeui	r2,r2,33
    89cc:	1000041e 	bne	r2,zero,89e0 <alt_sys_init+0x1c4>
    89d0:	00800074 	movhi	r2,1
    89d4:	1084e104 	addi	r2,r2,4996
    89d8:	00c007c4 	movi	r3,31
    89dc:	10c01115 	stw	r3,68(r2)
    89e0:	01000074 	movhi	r4,1
    89e4:	2104e104 	addi	r4,r4,4996
    89e8:	000acb00 	call	acb0 <alt_up_char_buffer_init>
    89ec:	01000074 	movhi	r4,1
    89f0:	2104e104 	addi	r4,r4,4996
    89f4:	00087b00 	call	87b0 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
    89f8:	00800074 	movhi	r2,1
    89fc:	1084f304 	addi	r2,r2,5068
    8a00:	10800a17 	ldw	r2,40(r2)
    8a04:	10800017 	ldw	r2,0(r2)
    8a08:	1007883a 	mov	r3,r2
    8a0c:	00800074 	movhi	r2,1
    8a10:	1084f304 	addi	r2,r2,5068
    8a14:	10c00b15 	stw	r3,44(r2)
    8a18:	00800074 	movhi	r2,1
    8a1c:	1084f304 	addi	r2,r2,5068
    8a20:	10800a17 	ldw	r2,40(r2)
    8a24:	10800104 	addi	r2,r2,4
    8a28:	10800017 	ldw	r2,0(r2)
    8a2c:	1007883a 	mov	r3,r2
    8a30:	00800074 	movhi	r2,1
    8a34:	1084f304 	addi	r2,r2,5068
    8a38:	10c00c15 	stw	r3,48(r2)
    8a3c:	00800074 	movhi	r2,1
    8a40:	1084f304 	addi	r2,r2,5068
    8a44:	10800a17 	ldw	r2,40(r2)
    8a48:	10800204 	addi	r2,r2,8
    8a4c:	10800017 	ldw	r2,0(r2)
    8a50:	10ffffcc 	andi	r3,r2,65535
    8a54:	00800074 	movhi	r2,1
    8a58:	1084f304 	addi	r2,r2,5068
    8a5c:	10c00f15 	stw	r3,60(r2)
    8a60:	00800074 	movhi	r2,1
    8a64:	1084f304 	addi	r2,r2,5068
    8a68:	10800a17 	ldw	r2,40(r2)
    8a6c:	10800204 	addi	r2,r2,8
    8a70:	10800017 	ldw	r2,0(r2)
    8a74:	1006d43a 	srli	r3,r2,16
    8a78:	00800074 	movhi	r2,1
    8a7c:	1084f304 	addi	r2,r2,5068
    8a80:	10c01015 	stw	r3,64(r2)
    8a84:	00800074 	movhi	r2,1
    8a88:	1084f304 	addi	r2,r2,5068
    8a8c:	10800a17 	ldw	r2,40(r2)
    8a90:	10800304 	addi	r2,r2,12
    8a94:	10800017 	ldw	r2,0(r2)
    8a98:	1005d07a 	srai	r2,r2,1
    8a9c:	10c0004c 	andi	r3,r2,1
    8aa0:	00800074 	movhi	r2,1
    8aa4:	1084f304 	addi	r2,r2,5068
    8aa8:	10c00d15 	stw	r3,52(r2)
    8aac:	00800074 	movhi	r2,1
    8ab0:	1084f304 	addi	r2,r2,5068
    8ab4:	10800a17 	ldw	r2,40(r2)
    8ab8:	10800304 	addi	r2,r2,12
    8abc:	10800017 	ldw	r2,0(r2)
    8ac0:	1005d13a 	srai	r2,r2,4
    8ac4:	10c003cc 	andi	r3,r2,15
    8ac8:	00800074 	movhi	r2,1
    8acc:	1084f304 	addi	r2,r2,5068
    8ad0:	10c00e15 	stw	r3,56(r2)
    8ad4:	00800074 	movhi	r2,1
    8ad8:	1084f304 	addi	r2,r2,5068
    8adc:	10800a17 	ldw	r2,40(r2)
    8ae0:	10800304 	addi	r2,r2,12
    8ae4:	10800017 	ldw	r2,0(r2)
    8ae8:	1005d43a 	srai	r2,r2,16
    8aec:	e0bfff05 	stb	r2,-4(fp)
    8af0:	00800074 	movhi	r2,1
    8af4:	1084f304 	addi	r2,r2,5068
    8af8:	10800a17 	ldw	r2,40(r2)
    8afc:	10800304 	addi	r2,r2,12
    8b00:	10800017 	ldw	r2,0(r2)
    8b04:	1004d63a 	srli	r2,r2,24
    8b08:	e0bfff45 	stb	r2,-3(fp)
    8b0c:	00800074 	movhi	r2,1
    8b10:	1084f304 	addi	r2,r2,5068
    8b14:	10800e17 	ldw	r2,56(r2)
    8b18:	10800058 	cmpnei	r2,r2,1
    8b1c:	1000041e 	bne	r2,zero,8b30 <alt_sys_init+0x314>
    8b20:	00800074 	movhi	r2,1
    8b24:	1084f304 	addi	r2,r2,5068
    8b28:	10001115 	stw	zero,68(r2)
    8b2c:	00000e06 	br	8b68 <alt_sys_init+0x34c>
    8b30:	00800074 	movhi	r2,1
    8b34:	1084f304 	addi	r2,r2,5068
    8b38:	10800e17 	ldw	r2,56(r2)
    8b3c:	10800098 	cmpnei	r2,r2,2
    8b40:	1000051e 	bne	r2,zero,8b58 <alt_sys_init+0x33c>
    8b44:	00800074 	movhi	r2,1
    8b48:	1084f304 	addi	r2,r2,5068
    8b4c:	00c00044 	movi	r3,1
    8b50:	10c01115 	stw	r3,68(r2)
    8b54:	00000406 	br	8b68 <alt_sys_init+0x34c>
    8b58:	00800074 	movhi	r2,1
    8b5c:	1084f304 	addi	r2,r2,5068
    8b60:	00c00084 	movi	r3,2
    8b64:	10c01115 	stw	r3,68(r2)
    8b68:	e0bfff03 	ldbu	r2,-4(fp)
    8b6c:	00c00804 	movi	r3,32
    8b70:	1885c83a 	sub	r2,r3,r2
    8b74:	00ffffc4 	movi	r3,-1
    8b78:	1886d83a 	srl	r3,r3,r2
    8b7c:	00800074 	movhi	r2,1
    8b80:	1084f304 	addi	r2,r2,5068
    8b84:	10c01215 	stw	r3,72(r2)
    8b88:	e0ffff03 	ldbu	r3,-4(fp)
    8b8c:	00800074 	movhi	r2,1
    8b90:	1084f304 	addi	r2,r2,5068
    8b94:	10801117 	ldw	r2,68(r2)
    8b98:	1887883a 	add	r3,r3,r2
    8b9c:	00800074 	movhi	r2,1
    8ba0:	1084f304 	addi	r2,r2,5068
    8ba4:	10c01315 	stw	r3,76(r2)
    8ba8:	e0bfff43 	ldbu	r2,-3(fp)
    8bac:	00c00804 	movi	r3,32
    8bb0:	1885c83a 	sub	r2,r3,r2
    8bb4:	00ffffc4 	movi	r3,-1
    8bb8:	1886d83a 	srl	r3,r3,r2
    8bbc:	00800074 	movhi	r2,1
    8bc0:	1084f304 	addi	r2,r2,5068
    8bc4:	10c01415 	stw	r3,80(r2)
    8bc8:	01000074 	movhi	r4,1
    8bcc:	2104f304 	addi	r4,r4,5068
    8bd0:	00087b00 	call	87b0 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
    8bd4:	01000074 	movhi	r4,1
    8bd8:	21050804 	addi	r4,r4,5152
    8bdc:	00087b00 	call	87b0 <alt_dev_reg>
}
    8be0:	e037883a 	mov	sp,fp
    8be4:	dfc00117 	ldw	ra,4(sp)
    8be8:	df000017 	ldw	fp,0(sp)
    8bec:	dec00204 	addi	sp,sp,8
    8bf0:	f800283a 	ret

00008bf4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    8bf4:	defffa04 	addi	sp,sp,-24
    8bf8:	dfc00515 	stw	ra,20(sp)
    8bfc:	df000415 	stw	fp,16(sp)
    8c00:	df000404 	addi	fp,sp,16
    8c04:	e13ffd15 	stw	r4,-12(fp)
    8c08:	e17ffe15 	stw	r5,-8(fp)
    8c0c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8c10:	e0bffd17 	ldw	r2,-12(fp)
    8c14:	10800017 	ldw	r2,0(r2)
    8c18:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    8c1c:	e0bffc17 	ldw	r2,-16(fp)
    8c20:	10c00a04 	addi	r3,r2,40
    8c24:	e0bffd17 	ldw	r2,-12(fp)
    8c28:	10800217 	ldw	r2,8(r2)
    8c2c:	1809883a 	mov	r4,r3
    8c30:	e17ffe17 	ldw	r5,-8(fp)
    8c34:	e1bfff17 	ldw	r6,-4(fp)
    8c38:	100f883a 	mov	r7,r2
    8c3c:	00093a40 	call	93a4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    8c40:	e037883a 	mov	sp,fp
    8c44:	dfc00117 	ldw	ra,4(sp)
    8c48:	df000017 	ldw	fp,0(sp)
    8c4c:	dec00204 	addi	sp,sp,8
    8c50:	f800283a 	ret

00008c54 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    8c54:	defffa04 	addi	sp,sp,-24
    8c58:	dfc00515 	stw	ra,20(sp)
    8c5c:	df000415 	stw	fp,16(sp)
    8c60:	df000404 	addi	fp,sp,16
    8c64:	e13ffd15 	stw	r4,-12(fp)
    8c68:	e17ffe15 	stw	r5,-8(fp)
    8c6c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8c70:	e0bffd17 	ldw	r2,-12(fp)
    8c74:	10800017 	ldw	r2,0(r2)
    8c78:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    8c7c:	e0bffc17 	ldw	r2,-16(fp)
    8c80:	10c00a04 	addi	r3,r2,40
    8c84:	e0bffd17 	ldw	r2,-12(fp)
    8c88:	10800217 	ldw	r2,8(r2)
    8c8c:	1809883a 	mov	r4,r3
    8c90:	e17ffe17 	ldw	r5,-8(fp)
    8c94:	e1bfff17 	ldw	r6,-4(fp)
    8c98:	100f883a 	mov	r7,r2
    8c9c:	00096580 	call	9658 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    8ca0:	e037883a 	mov	sp,fp
    8ca4:	dfc00117 	ldw	ra,4(sp)
    8ca8:	df000017 	ldw	fp,0(sp)
    8cac:	dec00204 	addi	sp,sp,8
    8cb0:	f800283a 	ret

00008cb4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    8cb4:	defffc04 	addi	sp,sp,-16
    8cb8:	dfc00315 	stw	ra,12(sp)
    8cbc:	df000215 	stw	fp,8(sp)
    8cc0:	df000204 	addi	fp,sp,8
    8cc4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8cc8:	e0bfff17 	ldw	r2,-4(fp)
    8ccc:	10800017 	ldw	r2,0(r2)
    8cd0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    8cd4:	e0bffe17 	ldw	r2,-8(fp)
    8cd8:	10c00a04 	addi	r3,r2,40
    8cdc:	e0bfff17 	ldw	r2,-4(fp)
    8ce0:	10800217 	ldw	r2,8(r2)
    8ce4:	1809883a 	mov	r4,r3
    8ce8:	100b883a 	mov	r5,r2
    8cec:	00092500 	call	9250 <altera_avalon_jtag_uart_close>
}
    8cf0:	e037883a 	mov	sp,fp
    8cf4:	dfc00117 	ldw	ra,4(sp)
    8cf8:	df000017 	ldw	fp,0(sp)
    8cfc:	dec00204 	addi	sp,sp,8
    8d00:	f800283a 	ret

00008d04 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    8d04:	defffa04 	addi	sp,sp,-24
    8d08:	dfc00515 	stw	ra,20(sp)
    8d0c:	df000415 	stw	fp,16(sp)
    8d10:	df000404 	addi	fp,sp,16
    8d14:	e13ffd15 	stw	r4,-12(fp)
    8d18:	e17ffe15 	stw	r5,-8(fp)
    8d1c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    8d20:	e0bffd17 	ldw	r2,-12(fp)
    8d24:	10800017 	ldw	r2,0(r2)
    8d28:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    8d2c:	e0bffc17 	ldw	r2,-16(fp)
    8d30:	10800a04 	addi	r2,r2,40
    8d34:	1009883a 	mov	r4,r2
    8d38:	e17ffe17 	ldw	r5,-8(fp)
    8d3c:	e1bfff17 	ldw	r6,-4(fp)
    8d40:	00092b80 	call	92b8 <altera_avalon_jtag_uart_ioctl>
}
    8d44:	e037883a 	mov	sp,fp
    8d48:	dfc00117 	ldw	ra,4(sp)
    8d4c:	df000017 	ldw	fp,0(sp)
    8d50:	dec00204 	addi	sp,sp,8
    8d54:	f800283a 	ret

00008d58 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    8d58:	defff104 	addi	sp,sp,-60
    8d5c:	dfc00e15 	stw	ra,56(sp)
    8d60:	df000d15 	stw	fp,52(sp)
    8d64:	df000d04 	addi	fp,sp,52
    8d68:	e13ff915 	stw	r4,-28(fp)
    8d6c:	e17ffa15 	stw	r5,-24(fp)
    8d70:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
    8d74:	e0bff917 	ldw	r2,-28(fp)
    8d78:	10800c04 	addi	r2,r2,48
    8d7c:	e0bff315 	stw	r2,-52(fp)
    8d80:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
    8d84:	e0fff40b 	ldhu	r3,-48(fp)
    8d88:	e0bff884 	addi	r2,fp,-30
    8d8c:	1809883a 	mov	r4,r3
    8d90:	100b883a 	mov	r5,r2
    8d94:	0002fa40 	call	2fa4 <OSFlagCreate>
    8d98:	1007883a 	mov	r3,r2
    8d9c:	e0bff317 	ldw	r2,-52(fp)
    8da0:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
    8da4:	e0bff917 	ldw	r2,-28(fp)
    8da8:	10800a04 	addi	r2,r2,40
    8dac:	e0bff515 	stw	r2,-44(fp)
    8db0:	00800044 	movi	r2,1
    8db4:	e0bff60d 	sth	r2,-40(fp)
    8db8:	e0bff60b 	ldhu	r2,-40(fp)
    8dbc:	1009883a 	mov	r4,r2
    8dc0:	0005efc0 	call	5efc <OSSemCreate>
    8dc4:	1007883a 	mov	r3,r2
    8dc8:	e0bff517 	ldw	r2,-44(fp)
    8dcc:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
    8dd0:	e0bff917 	ldw	r2,-28(fp)
    8dd4:	10800b04 	addi	r2,r2,44
    8dd8:	e0bff715 	stw	r2,-36(fp)
    8ddc:	00800044 	movi	r2,1
    8de0:	e0bff80d 	sth	r2,-32(fp)
    8de4:	e0bff80b 	ldhu	r2,-32(fp)
    8de8:	1009883a 	mov	r4,r2
    8dec:	0005efc0 	call	5efc <OSSemCreate>
    8df0:	1007883a 	mov	r3,r2
    8df4:	e0bff717 	ldw	r2,-36(fp)
    8df8:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    8dfc:	e0bff917 	ldw	r2,-28(fp)
    8e00:	00c00044 	movi	r3,1
    8e04:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    8e08:	e0bff917 	ldw	r2,-28(fp)
    8e0c:	10800017 	ldw	r2,0(r2)
    8e10:	10800104 	addi	r2,r2,4
    8e14:	1007883a 	mov	r3,r2
    8e18:	e0bff917 	ldw	r2,-28(fp)
    8e1c:	10800817 	ldw	r2,32(r2)
    8e20:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    8e24:	e0bffb17 	ldw	r2,-20(fp)
    8e28:	1009883a 	mov	r4,r2
    8e2c:	e17ff917 	ldw	r5,-28(fp)
    8e30:	01800074 	movhi	r6,1
    8e34:	31a3a604 	addi	r6,r6,-29032
    8e38:	000c4b40 	call	c4b4 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    8e3c:	e0bff917 	ldw	r2,-28(fp)
    8e40:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    8e44:	e0bff917 	ldw	r2,-28(fp)
    8e48:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    8e4c:	00800074 	movhi	r2,1
    8e50:	108f7104 	addi	r2,r2,15812
    8e54:	10800017 	ldw	r2,0(r2)
    8e58:	1809883a 	mov	r4,r3
    8e5c:	100b883a 	mov	r5,r2
    8e60:	01800074 	movhi	r6,1
    8e64:	31a45004 	addi	r6,r6,-28352
    8e68:	e1fff917 	ldw	r7,-28(fp)
    8e6c:	000be680 	call	be68 <alt_alarm_start>
    8e70:	1000040e 	bge	r2,zero,8e84 <altera_avalon_jtag_uart_init+0x12c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    8e74:	e0fff917 	ldw	r3,-28(fp)
    8e78:	00a00034 	movhi	r2,32768
    8e7c:	10bfffc4 	addi	r2,r2,-1
    8e80:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    8e84:	e037883a 	mov	sp,fp
    8e88:	dfc00117 	ldw	ra,4(sp)
    8e8c:	df000017 	ldw	fp,0(sp)
    8e90:	dec00204 	addi	sp,sp,8
    8e94:	f800283a 	ret

00008e98 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    8e98:	defff104 	addi	sp,sp,-60
    8e9c:	dfc00e15 	stw	ra,56(sp)
    8ea0:	df000d15 	stw	fp,52(sp)
    8ea4:	df000d04 	addi	fp,sp,52
    8ea8:	e13ffe15 	stw	r4,-8(fp)
    8eac:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    8eb0:	e0bffe17 	ldw	r2,-8(fp)
    8eb4:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
    8eb8:	e0bff517 	ldw	r2,-44(fp)
    8ebc:	10800017 	ldw	r2,0(r2)
    8ec0:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    8ec4:	e0bff617 	ldw	r2,-40(fp)
    8ec8:	10800104 	addi	r2,r2,4
    8ecc:	10800037 	ldwio	r2,0(r2)
    8ed0:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    8ed4:	e0bff717 	ldw	r2,-36(fp)
    8ed8:	1080c00c 	andi	r2,r2,768
    8edc:	1000011e 	bne	r2,zero,8ee4 <altera_avalon_jtag_uart_irq+0x4c>
      break;
    8ee0:	00009206 	br	912c <altera_avalon_jtag_uart_irq+0x294>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    8ee4:	e0bff717 	ldw	r2,-36(fp)
    8ee8:	1080400c 	andi	r2,r2,256
    8eec:	10004726 	beq	r2,zero,900c <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    8ef0:	00800074 	movhi	r2,1
    8ef4:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    8ef8:	e0bff517 	ldw	r2,-44(fp)
    8efc:	10800d17 	ldw	r2,52(r2)
    8f00:	10800044 	addi	r2,r2,1
    8f04:	1081ffcc 	andi	r2,r2,2047
    8f08:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
    8f0c:	e0bff517 	ldw	r2,-44(fp)
    8f10:	10c00e17 	ldw	r3,56(r2)
    8f14:	e0bff817 	ldw	r2,-32(fp)
    8f18:	1880011e 	bne	r3,r2,8f20 <altera_avalon_jtag_uart_irq+0x88>
          break;
    8f1c:	00002906 	br	8fc4 <altera_avalon_jtag_uart_irq+0x12c>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    8f20:	e0bff617 	ldw	r2,-40(fp)
    8f24:	10800037 	ldwio	r2,0(r2)
    8f28:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    8f2c:	e0bff317 	ldw	r2,-52(fp)
    8f30:	10a0000c 	andi	r2,r2,32768
    8f34:	1000011e 	bne	r2,zero,8f3c <altera_avalon_jtag_uart_irq+0xa4>
          break;
    8f38:	00002206 	br	8fc4 <altera_avalon_jtag_uart_irq+0x12c>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    8f3c:	e0bff517 	ldw	r2,-44(fp)
    8f40:	10800d17 	ldw	r2,52(r2)
    8f44:	e0fff317 	ldw	r3,-52(fp)
    8f48:	1809883a 	mov	r4,r3
    8f4c:	e0fff517 	ldw	r3,-44(fp)
    8f50:	1885883a 	add	r2,r3,r2
    8f54:	10801104 	addi	r2,r2,68
    8f58:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    8f5c:	e0bff517 	ldw	r2,-44(fp)
    8f60:	10800d17 	ldw	r2,52(r2)
    8f64:	10800044 	addi	r2,r2,1
    8f68:	10c1ffcc 	andi	r3,r2,2047
    8f6c:	e0bff517 	ldw	r2,-44(fp)
    8f70:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
    8f74:	e0bff517 	ldw	r2,-44(fp)
    8f78:	10800c17 	ldw	r2,48(r2)
    8f7c:	e0bff915 	stw	r2,-28(fp)
    8f80:	00800044 	movi	r2,1
    8f84:	e0bffa0d 	sth	r2,-24(fp)
    8f88:	00800044 	movi	r2,1
    8f8c:	e0bffa85 	stb	r2,-22(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    8f90:	00800074 	movhi	r2,1
    8f94:	108f5b44 	addi	r2,r2,15725
    8f98:	10800003 	ldbu	r2,0(r2)
    8f9c:	10803fcc 	andi	r2,r2,255
    8fa0:	103fd526 	beq	r2,zero,8ef8 <altera_avalon_jtag_uart_irq+0x60>
  {
    OSFlagPost (group, flags, opt, &err);
    8fa4:	e17ffa0b 	ldhu	r5,-24(fp)
    8fa8:	e0fffa83 	ldbu	r3,-22(fp)
    8fac:	e0bffcc4 	addi	r2,fp,-13
    8fb0:	e13ff917 	ldw	r4,-28(fp)
    8fb4:	180d883a 	mov	r6,r3
    8fb8:	100f883a 	mov	r7,r2
    8fbc:	0003c140 	call	3c14 <OSFlagPost>
      }
    8fc0:	003fcd06 	br	8ef8 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    8fc4:	e0bff317 	ldw	r2,-52(fp)
    8fc8:	10bfffec 	andhi	r2,r2,65535
    8fcc:	10000f26 	beq	r2,zero,900c <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    8fd0:	e0bff517 	ldw	r2,-44(fp)
    8fd4:	10c00817 	ldw	r3,32(r2)
    8fd8:	00bfff84 	movi	r2,-2
    8fdc:	1886703a 	and	r3,r3,r2
    8fe0:	e0bff517 	ldw	r2,-44(fp)
    8fe4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    8fe8:	e0bff617 	ldw	r2,-40(fp)
    8fec:	10800104 	addi	r2,r2,4
    8ff0:	1007883a 	mov	r3,r2
    8ff4:	e0bff517 	ldw	r2,-44(fp)
    8ff8:	10800817 	ldw	r2,32(r2)
    8ffc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    9000:	e0bff617 	ldw	r2,-40(fp)
    9004:	10800104 	addi	r2,r2,4
    9008:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    900c:	e0bff717 	ldw	r2,-36(fp)
    9010:	1080800c 	andi	r2,r2,512
    9014:	10004426 	beq	r2,zero,9128 <altera_avalon_jtag_uart_irq+0x290>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    9018:	e0bff717 	ldw	r2,-36(fp)
    901c:	1004d43a 	srli	r2,r2,16
    9020:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    9024:	00002706 	br	90c4 <altera_avalon_jtag_uart_irq+0x22c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    9028:	e0bff617 	ldw	r2,-40(fp)
    902c:	e0fff517 	ldw	r3,-44(fp)
    9030:	18c01017 	ldw	r3,64(r3)
    9034:	e13ff517 	ldw	r4,-44(fp)
    9038:	20c7883a 	add	r3,r4,r3
    903c:	18c21104 	addi	r3,r3,2116
    9040:	18c00003 	ldbu	r3,0(r3)
    9044:	18c03fcc 	andi	r3,r3,255
    9048:	18c0201c 	xori	r3,r3,128
    904c:	18ffe004 	addi	r3,r3,-128
    9050:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    9054:	e0bff517 	ldw	r2,-44(fp)
    9058:	10801017 	ldw	r2,64(r2)
    905c:	10800044 	addi	r2,r2,1
    9060:	10c1ffcc 	andi	r3,r2,2047
    9064:	e0bff517 	ldw	r2,-44(fp)
    9068:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
    906c:	e0bff517 	ldw	r2,-44(fp)
    9070:	10800c17 	ldw	r2,48(r2)
    9074:	e0bffb15 	stw	r2,-20(fp)
    9078:	00800084 	movi	r2,2
    907c:	e0bffc0d 	sth	r2,-16(fp)
    9080:	00800044 	movi	r2,1
    9084:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    9088:	00800074 	movhi	r2,1
    908c:	108f5b44 	addi	r2,r2,15725
    9090:	10800003 	ldbu	r2,0(r2)
    9094:	10803fcc 	andi	r2,r2,255
    9098:	10000726 	beq	r2,zero,90b8 <altera_avalon_jtag_uart_irq+0x220>
  {
    OSFlagPost (group, flags, opt, &err);
    909c:	e17ffc0b 	ldhu	r5,-16(fp)
    90a0:	e0fffc83 	ldbu	r3,-14(fp)
    90a4:	e0bffd04 	addi	r2,fp,-12
    90a8:	e13ffb17 	ldw	r4,-20(fp)
    90ac:	180d883a 	mov	r6,r3
    90b0:	100f883a 	mov	r7,r2
    90b4:	0003c140 	call	3c14 <OSFlagPost>

        space--;
    90b8:	e0bff417 	ldw	r2,-48(fp)
    90bc:	10bfffc4 	addi	r2,r2,-1
    90c0:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    90c4:	e0bff417 	ldw	r2,-48(fp)
    90c8:	10000526 	beq	r2,zero,90e0 <altera_avalon_jtag_uart_irq+0x248>
    90cc:	e0bff517 	ldw	r2,-44(fp)
    90d0:	10c01017 	ldw	r3,64(r2)
    90d4:	e0bff517 	ldw	r2,-44(fp)
    90d8:	10800f17 	ldw	r2,60(r2)
    90dc:	18bfd21e 	bne	r3,r2,9028 <altera_avalon_jtag_uart_irq+0x190>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    90e0:	e0bff417 	ldw	r2,-48(fp)
    90e4:	10001026 	beq	r2,zero,9128 <altera_avalon_jtag_uart_irq+0x290>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    90e8:	e0bff517 	ldw	r2,-44(fp)
    90ec:	10c00817 	ldw	r3,32(r2)
    90f0:	00bfff44 	movi	r2,-3
    90f4:	1886703a 	and	r3,r3,r2
    90f8:	e0bff517 	ldw	r2,-44(fp)
    90fc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    9100:	e0bff517 	ldw	r2,-44(fp)
    9104:	10800017 	ldw	r2,0(r2)
    9108:	10800104 	addi	r2,r2,4
    910c:	1007883a 	mov	r3,r2
    9110:	e0bff517 	ldw	r2,-44(fp)
    9114:	10800817 	ldw	r2,32(r2)
    9118:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    911c:	e0bff617 	ldw	r2,-40(fp)
    9120:	10800104 	addi	r2,r2,4
    9124:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    9128:	003f6606 	br	8ec4 <altera_avalon_jtag_uart_irq+0x2c>
}
    912c:	e037883a 	mov	sp,fp
    9130:	dfc00117 	ldw	ra,4(sp)
    9134:	df000017 	ldw	fp,0(sp)
    9138:	dec00204 	addi	sp,sp,8
    913c:	f800283a 	ret

00009140 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    9140:	defff904 	addi	sp,sp,-28
    9144:	dfc00615 	stw	ra,24(sp)
    9148:	df000515 	stw	fp,20(sp)
    914c:	df000504 	addi	fp,sp,20
    9150:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    9154:	e0bfff17 	ldw	r2,-4(fp)
    9158:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    915c:	e0bffb17 	ldw	r2,-20(fp)
    9160:	10800017 	ldw	r2,0(r2)
    9164:	10800104 	addi	r2,r2,4
    9168:	10800037 	ldwio	r2,0(r2)
    916c:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    9170:	e0bffc17 	ldw	r2,-16(fp)
    9174:	1081000c 	andi	r2,r2,1024
    9178:	10000b26 	beq	r2,zero,91a8 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    917c:	e0bffb17 	ldw	r2,-20(fp)
    9180:	10800017 	ldw	r2,0(r2)
    9184:	10800104 	addi	r2,r2,4
    9188:	1007883a 	mov	r3,r2
    918c:	e0bffb17 	ldw	r2,-20(fp)
    9190:	10800817 	ldw	r2,32(r2)
    9194:	10810014 	ori	r2,r2,1024
    9198:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    919c:	e0bffb17 	ldw	r2,-20(fp)
    91a0:	10000915 	stw	zero,36(r2)
    91a4:	00002206 	br	9230 <altera_avalon_jtag_uart_timeout+0xf0>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    91a8:	e0bffb17 	ldw	r2,-20(fp)
    91ac:	10c00917 	ldw	r3,36(r2)
    91b0:	00a00034 	movhi	r2,32768
    91b4:	10bfff04 	addi	r2,r2,-4
    91b8:	10c01d36 	bltu	r2,r3,9230 <altera_avalon_jtag_uart_timeout+0xf0>
    sp->host_inactive++;
    91bc:	e0bffb17 	ldw	r2,-20(fp)
    91c0:	10800917 	ldw	r2,36(r2)
    91c4:	10c00044 	addi	r3,r2,1
    91c8:	e0bffb17 	ldw	r2,-20(fp)
    91cc:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
    91d0:	e0bffb17 	ldw	r2,-20(fp)
    91d4:	10c00917 	ldw	r3,36(r2)
    91d8:	e0bffb17 	ldw	r2,-20(fp)
    91dc:	10800117 	ldw	r2,4(r2)
    91e0:	18801336 	bltu	r3,r2,9230 <altera_avalon_jtag_uart_timeout+0xf0>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    91e4:	e0bffb17 	ldw	r2,-20(fp)
    91e8:	10800c17 	ldw	r2,48(r2)
    91ec:	e0bffd15 	stw	r2,-12(fp)
    91f0:	00800104 	movi	r2,4
    91f4:	e0bffe0d 	sth	r2,-8(fp)
    91f8:	00800044 	movi	r2,1
    91fc:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    9200:	00800074 	movhi	r2,1
    9204:	108f5b44 	addi	r2,r2,15725
    9208:	10800003 	ldbu	r2,0(r2)
    920c:	10803fcc 	andi	r2,r2,255
    9210:	10000726 	beq	r2,zero,9230 <altera_avalon_jtag_uart_timeout+0xf0>
  {
    OSFlagPost (group, flags, opt, &err);
    9214:	e17ffe0b 	ldhu	r5,-8(fp)
    9218:	e0fffe83 	ldbu	r3,-6(fp)
    921c:	e0bffec4 	addi	r2,fp,-5
    9220:	e13ffd17 	ldw	r4,-12(fp)
    9224:	180d883a 	mov	r6,r3
    9228:	100f883a 	mov	r7,r2
    922c:	0003c140 	call	3c14 <OSFlagPost>
    9230:	00800074 	movhi	r2,1
    9234:	108f7104 	addi	r2,r2,15812
    9238:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
    923c:	e037883a 	mov	sp,fp
    9240:	dfc00117 	ldw	ra,4(sp)
    9244:	df000017 	ldw	fp,0(sp)
    9248:	dec00204 	addi	sp,sp,8
    924c:	f800283a 	ret

00009250 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    9250:	defffd04 	addi	sp,sp,-12
    9254:	df000215 	stw	fp,8(sp)
    9258:	df000204 	addi	fp,sp,8
    925c:	e13ffe15 	stw	r4,-8(fp)
    9260:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    9264:	00000506 	br	927c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    9268:	e0bfff17 	ldw	r2,-4(fp)
    926c:	1090000c 	andi	r2,r2,16384
    9270:	10000226 	beq	r2,zero,927c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    9274:	00bffd44 	movi	r2,-11
    9278:	00000b06 	br	92a8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    927c:	e0bffe17 	ldw	r2,-8(fp)
    9280:	10c01017 	ldw	r3,64(r2)
    9284:	e0bffe17 	ldw	r2,-8(fp)
    9288:	10800f17 	ldw	r2,60(r2)
    928c:	18800526 	beq	r3,r2,92a4 <altera_avalon_jtag_uart_close+0x54>
    9290:	e0bffe17 	ldw	r2,-8(fp)
    9294:	10c00917 	ldw	r3,36(r2)
    9298:	e0bffe17 	ldw	r2,-8(fp)
    929c:	10800117 	ldw	r2,4(r2)
    92a0:	18bff136 	bltu	r3,r2,9268 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    92a4:	0005883a 	mov	r2,zero
}
    92a8:	e037883a 	mov	sp,fp
    92ac:	df000017 	ldw	fp,0(sp)
    92b0:	dec00104 	addi	sp,sp,4
    92b4:	f800283a 	ret

000092b8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    92b8:	defffa04 	addi	sp,sp,-24
    92bc:	df000515 	stw	fp,20(sp)
    92c0:	df000504 	addi	fp,sp,20
    92c4:	e13ffd15 	stw	r4,-12(fp)
    92c8:	e17ffe15 	stw	r5,-8(fp)
    92cc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    92d0:	00bff9c4 	movi	r2,-25
    92d4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    92d8:	e0bffe17 	ldw	r2,-8(fp)
    92dc:	10da8060 	cmpeqi	r3,r2,27137
    92e0:	1800031e 	bne	r3,zero,92f0 <altera_avalon_jtag_uart_ioctl+0x38>
    92e4:	109a80a0 	cmpeqi	r2,r2,27138
    92e8:	1000191e 	bne	r2,zero,9350 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
    92ec:	00002806 	br	9390 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    92f0:	e0bffd17 	ldw	r2,-12(fp)
    92f4:	10c00117 	ldw	r3,4(r2)
    92f8:	00a00034 	movhi	r2,32768
    92fc:	10bfffc4 	addi	r2,r2,-1
    9300:	18801226 	beq	r3,r2,934c <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
    9304:	e0bfff17 	ldw	r2,-4(fp)
    9308:	10800017 	ldw	r2,0(r2)
    930c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    9310:	e0bffc17 	ldw	r2,-16(fp)
    9314:	10800090 	cmplti	r2,r2,2
    9318:	1000061e 	bne	r2,zero,9334 <altera_avalon_jtag_uart_ioctl+0x7c>
    931c:	e0fffc17 	ldw	r3,-16(fp)
    9320:	00a00034 	movhi	r2,32768
    9324:	10bfffc4 	addi	r2,r2,-1
    9328:	18800226 	beq	r3,r2,9334 <altera_avalon_jtag_uart_ioctl+0x7c>
    932c:	e0bffc17 	ldw	r2,-16(fp)
    9330:	00000206 	br	933c <altera_avalon_jtag_uart_ioctl+0x84>
    9334:	00a00034 	movhi	r2,32768
    9338:	10bfff84 	addi	r2,r2,-2
    933c:	e0fffd17 	ldw	r3,-12(fp)
    9340:	18800115 	stw	r2,4(r3)
      rc = 0;
    9344:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    9348:	00001106 	br	9390 <altera_avalon_jtag_uart_ioctl+0xd8>
    934c:	00001006 	br	9390 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    9350:	e0bffd17 	ldw	r2,-12(fp)
    9354:	10c00117 	ldw	r3,4(r2)
    9358:	00a00034 	movhi	r2,32768
    935c:	10bfffc4 	addi	r2,r2,-1
    9360:	18800a26 	beq	r3,r2,938c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    9364:	e0bffd17 	ldw	r2,-12(fp)
    9368:	10c00917 	ldw	r3,36(r2)
    936c:	e0bffd17 	ldw	r2,-12(fp)
    9370:	10800117 	ldw	r2,4(r2)
    9374:	1885803a 	cmpltu	r2,r3,r2
    9378:	10c03fcc 	andi	r3,r2,255
    937c:	e0bfff17 	ldw	r2,-4(fp)
    9380:	10c00015 	stw	r3,0(r2)
      rc = 0;
    9384:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    9388:	00000006 	br	938c <altera_avalon_jtag_uart_ioctl+0xd4>
    938c:	0001883a 	nop

  default:
    break;
  }

  return rc;
    9390:	e0bffb17 	ldw	r2,-20(fp)
}
    9394:	e037883a 	mov	sp,fp
    9398:	df000017 	ldw	fp,0(sp)
    939c:	dec00104 	addi	sp,sp,4
    93a0:	f800283a 	ret

000093a4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    93a4:	deffec04 	addi	sp,sp,-80
    93a8:	dfc01315 	stw	ra,76(sp)
    93ac:	df001215 	stw	fp,72(sp)
    93b0:	df001204 	addi	fp,sp,72
    93b4:	e13ffc15 	stw	r4,-16(fp)
    93b8:	e17ffd15 	stw	r5,-12(fp)
    93bc:	e1bffe15 	stw	r6,-8(fp)
    93c0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    93c4:	e0bffd17 	ldw	r2,-12(fp)
    93c8:	e0bfef15 	stw	r2,-68(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
    93cc:	e0bffc17 	ldw	r2,-16(fp)
    93d0:	10800a17 	ldw	r2,40(r2)
    93d4:	e0bff415 	stw	r2,-48(fp)
    93d8:	e03ff50d 	sth	zero,-44(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
    93dc:	e0fff50b 	ldhu	r3,-44(fp)
    93e0:	e0bffb04 	addi	r2,fp,-20
    93e4:	e13ff417 	ldw	r4,-48(fp)
    93e8:	180b883a 	mov	r5,r3
    93ec:	100d883a 	mov	r6,r2
    93f0:	00062640 	call	6264 <OSSemPend>

  while (space > 0)
    93f4:	00006506 	br	958c <altera_avalon_jtag_uart_read+0x1e8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    93f8:	e0bffc17 	ldw	r2,-16(fp)
    93fc:	10800d17 	ldw	r2,52(r2)
    9400:	e0bff115 	stw	r2,-60(fp)
      out = sp->rx_out;
    9404:	e0bffc17 	ldw	r2,-16(fp)
    9408:	10800e17 	ldw	r2,56(r2)
    940c:	e0bff215 	stw	r2,-56(fp)

      if (in >= out)
    9410:	e0fff117 	ldw	r3,-60(fp)
    9414:	e0bff217 	ldw	r2,-56(fp)
    9418:	18800536 	bltu	r3,r2,9430 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
    941c:	e0fff117 	ldw	r3,-60(fp)
    9420:	e0bff217 	ldw	r2,-56(fp)
    9424:	1885c83a 	sub	r2,r3,r2
    9428:	e0bff015 	stw	r2,-64(fp)
    942c:	00000406 	br	9440 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    9430:	00c20004 	movi	r3,2048
    9434:	e0bff217 	ldw	r2,-56(fp)
    9438:	1885c83a 	sub	r2,r3,r2
    943c:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
    9440:	e0bff017 	ldw	r2,-64(fp)
    9444:	1000011e 	bne	r2,zero,944c <altera_avalon_jtag_uart_read+0xa8>
        break; /* No more data available */
    9448:	00001d06 	br	94c0 <altera_avalon_jtag_uart_read+0x11c>

      if (n > space)
    944c:	e0fffe17 	ldw	r3,-8(fp)
    9450:	e0bff017 	ldw	r2,-64(fp)
    9454:	1880022e 	bgeu	r3,r2,9460 <altera_avalon_jtag_uart_read+0xbc>
        n = space;
    9458:	e0bffe17 	ldw	r2,-8(fp)
    945c:	e0bff015 	stw	r2,-64(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    9460:	e0bff217 	ldw	r2,-56(fp)
    9464:	10801104 	addi	r2,r2,68
    9468:	e0fffc17 	ldw	r3,-16(fp)
    946c:	1885883a 	add	r2,r3,r2
    9470:	e13fef17 	ldw	r4,-68(fp)
    9474:	100b883a 	mov	r5,r2
    9478:	e1bff017 	ldw	r6,-64(fp)
    947c:	000d2280 	call	d228 <memcpy>
      ptr   += n;
    9480:	e0ffef17 	ldw	r3,-68(fp)
    9484:	e0bff017 	ldw	r2,-64(fp)
    9488:	1885883a 	add	r2,r3,r2
    948c:	e0bfef15 	stw	r2,-68(fp)
      space -= n;
    9490:	e0fffe17 	ldw	r3,-8(fp)
    9494:	e0bff017 	ldw	r2,-64(fp)
    9498:	1885c83a 	sub	r2,r3,r2
    949c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    94a0:	e0fff217 	ldw	r3,-56(fp)
    94a4:	e0bff017 	ldw	r2,-64(fp)
    94a8:	1885883a 	add	r2,r3,r2
    94ac:	10c1ffcc 	andi	r3,r2,2047
    94b0:	e0bffc17 	ldw	r2,-16(fp)
    94b4:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
    94b8:	e0bffe17 	ldw	r2,-8(fp)
    94bc:	00bfce16 	blt	zero,r2,93f8 <altera_avalon_jtag_uart_read+0x54>

    /* If we read any data then return it */
    if (ptr != buffer)
    94c0:	e0ffef17 	ldw	r3,-68(fp)
    94c4:	e0bffd17 	ldw	r2,-12(fp)
    94c8:	18800126 	beq	r3,r2,94d0 <altera_avalon_jtag_uart_read+0x12c>
      break;
    94cc:	00003106 	br	9594 <altera_avalon_jtag_uart_read+0x1f0>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    94d0:	e0bfff17 	ldw	r2,-4(fp)
    94d4:	1090000c 	andi	r2,r2,16384
    94d8:	10000126 	beq	r2,zero,94e0 <altera_avalon_jtag_uart_read+0x13c>
      break;
    94dc:	00002d06 	br	9594 <altera_avalon_jtag_uart_read+0x1f0>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
    94e0:	00800074 	movhi	r2,1
    94e4:	108f5b44 	addi	r2,r2,15725
    94e8:	10800003 	ldbu	r2,0(r2)
    94ec:	10803fcc 	andi	r2,r2,255
    94f0:	10800058 	cmpnei	r2,r2,1
    94f4:	1000161e 	bne	r2,zero,9550 <altera_avalon_jtag_uart_read+0x1ac>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
    94f8:	e0bffc17 	ldw	r2,-16(fp)
    94fc:	10800c17 	ldw	r2,48(r2)
    9500:	e0bff615 	stw	r2,-40(fp)
    9504:	00800144 	movi	r2,5
    9508:	e0bff70d 	sth	r2,-36(fp)
    950c:	00bfe0c4 	movi	r2,-125
    9510:	e0bff785 	stb	r2,-34(fp)
    9514:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    9518:	00800074 	movhi	r2,1
    951c:	108f5b44 	addi	r2,r2,15725
    9520:	10800003 	ldbu	r2,0(r2)
    9524:	10803fcc 	andi	r2,r2,255
    9528:	10001326 	beq	r2,zero,9578 <altera_avalon_jtag_uart_read+0x1d4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    952c:	e17ff70b 	ldhu	r5,-36(fp)
    9530:	e1bff783 	ldbu	r6,-34(fp)
    9534:	e0fff80b 	ldhu	r3,-32(fp)
    9538:	e0bffb44 	addi	r2,fp,-19
    953c:	d8800015 	stw	r2,0(sp)
    9540:	e13ff617 	ldw	r4,-40(fp)
    9544:	180f883a 	mov	r7,r3
    9548:	00035bc0 	call	35bc <OSFlagPend>
    954c:	00000a06 	br	9578 <altera_avalon_jtag_uart_read+0x1d4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    9550:	0001883a 	nop
    9554:	e0bffc17 	ldw	r2,-16(fp)
    9558:	10c00d17 	ldw	r3,52(r2)
    955c:	e0bff117 	ldw	r2,-60(fp)
    9560:	1880051e 	bne	r3,r2,9578 <altera_avalon_jtag_uart_read+0x1d4>
    9564:	e0bffc17 	ldw	r2,-16(fp)
    9568:	10c00917 	ldw	r3,36(r2)
    956c:	e0bffc17 	ldw	r2,-16(fp)
    9570:	10800117 	ldw	r2,4(r2)
    9574:	18bff736 	bltu	r3,r2,9554 <altera_avalon_jtag_uart_read+0x1b0>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    9578:	e0bffc17 	ldw	r2,-16(fp)
    957c:	10c00d17 	ldw	r3,52(r2)
    9580:	e0bff117 	ldw	r2,-60(fp)
    9584:	1880011e 	bne	r3,r2,958c <altera_avalon_jtag_uart_read+0x1e8>
      break;
    9588:	00000206 	br	9594 <altera_avalon_jtag_uart_read+0x1f0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    958c:	e0bffe17 	ldw	r2,-8(fp)
    9590:	00bf9916 	blt	zero,r2,93f8 <altera_avalon_jtag_uart_read+0x54>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
    9594:	e0bffc17 	ldw	r2,-16(fp)
    9598:	10800a17 	ldw	r2,40(r2)
    959c:	1009883a 	mov	r4,r2
    95a0:	00066380 	call	6638 <OSSemPost>

  if (ptr != buffer)
    95a4:	e0ffef17 	ldw	r3,-68(fp)
    95a8:	e0bffd17 	ldw	r2,-12(fp)
    95ac:	18801826 	beq	r3,r2,9610 <altera_avalon_jtag_uart_read+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    95b0:	0005303a 	rdctl	r2,status
    95b4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    95b8:	e0fff917 	ldw	r3,-28(fp)
    95bc:	00bfff84 	movi	r2,-2
    95c0:	1884703a 	and	r2,r3,r2
    95c4:	1001703a 	wrctl	status,r2
  
  return context;
    95c8:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    95cc:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    95d0:	e0bffc17 	ldw	r2,-16(fp)
    95d4:	10800817 	ldw	r2,32(r2)
    95d8:	10c00054 	ori	r3,r2,1
    95dc:	e0bffc17 	ldw	r2,-16(fp)
    95e0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    95e4:	e0bffc17 	ldw	r2,-16(fp)
    95e8:	10800017 	ldw	r2,0(r2)
    95ec:	10800104 	addi	r2,r2,4
    95f0:	1007883a 	mov	r3,r2
    95f4:	e0bffc17 	ldw	r2,-16(fp)
    95f8:	10800817 	ldw	r2,32(r2)
    95fc:	18800035 	stwio	r2,0(r3)
    9600:	e0bff317 	ldw	r2,-52(fp)
    9604:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9608:	e0bffa17 	ldw	r2,-24(fp)
    960c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    9610:	e0ffef17 	ldw	r3,-68(fp)
    9614:	e0bffd17 	ldw	r2,-12(fp)
    9618:	18800426 	beq	r3,r2,962c <altera_avalon_jtag_uart_read+0x288>
    return ptr - buffer;
    961c:	e0ffef17 	ldw	r3,-68(fp)
    9620:	e0bffd17 	ldw	r2,-12(fp)
    9624:	1885c83a 	sub	r2,r3,r2
    9628:	00000606 	br	9644 <altera_avalon_jtag_uart_read+0x2a0>
  else if (flags & O_NONBLOCK)
    962c:	e0bfff17 	ldw	r2,-4(fp)
    9630:	1090000c 	andi	r2,r2,16384
    9634:	10000226 	beq	r2,zero,9640 <altera_avalon_jtag_uart_read+0x29c>
    return -EWOULDBLOCK;
    9638:	00bffd44 	movi	r2,-11
    963c:	00000106 	br	9644 <altera_avalon_jtag_uart_read+0x2a0>
  else
    return -EIO;
    9640:	00bffec4 	movi	r2,-5
}
    9644:	e037883a 	mov	sp,fp
    9648:	dfc00117 	ldw	ra,4(sp)
    964c:	df000017 	ldw	fp,0(sp)
    9650:	dec00204 	addi	sp,sp,8
    9654:	f800283a 	ret

00009658 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    9658:	deffed04 	addi	sp,sp,-76
    965c:	dfc01215 	stw	ra,72(sp)
    9660:	df001115 	stw	fp,68(sp)
    9664:	df001104 	addi	fp,sp,68
    9668:	e13ffc15 	stw	r4,-16(fp)
    966c:	e17ffd15 	stw	r5,-12(fp)
    9670:	e1bffe15 	stw	r6,-8(fp)
    9674:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    9678:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    967c:	e0bffd17 	ldw	r2,-12(fp)
    9680:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
    9684:	e0bffc17 	ldw	r2,-16(fp)
    9688:	10800b17 	ldw	r2,44(r2)
    968c:	e0bff515 	stw	r2,-44(fp)
    9690:	e03ff60d 	sth	zero,-40(fp)
    9694:	e0fff60b 	ldhu	r3,-40(fp)
    9698:	e0bffbc4 	addi	r2,fp,-17
    969c:	e13ff517 	ldw	r4,-44(fp)
    96a0:	180b883a 	mov	r5,r3
    96a4:	100d883a 	mov	r6,r2
    96a8:	00062640 	call	6264 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    96ac:	00003806 	br	9790 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    96b0:	e0bffc17 	ldw	r2,-16(fp)
    96b4:	10800f17 	ldw	r2,60(r2)
    96b8:	e0bff315 	stw	r2,-52(fp)
      out = sp->tx_out;
    96bc:	e0bffc17 	ldw	r2,-16(fp)
    96c0:	10801017 	ldw	r2,64(r2)
    96c4:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
    96c8:	e0fff317 	ldw	r3,-52(fp)
    96cc:	e0bff017 	ldw	r2,-64(fp)
    96d0:	1880062e 	bgeu	r3,r2,96ec <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
    96d4:	e0fff017 	ldw	r3,-64(fp)
    96d8:	e0bff317 	ldw	r2,-52(fp)
    96dc:	1885c83a 	sub	r2,r3,r2
    96e0:	10bfffc4 	addi	r2,r2,-1
    96e4:	e0bff115 	stw	r2,-60(fp)
    96e8:	00000b06 	br	9718 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
    96ec:	e0bff017 	ldw	r2,-64(fp)
    96f0:	10000526 	beq	r2,zero,9708 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    96f4:	00c20004 	movi	r3,2048
    96f8:	e0bff317 	ldw	r2,-52(fp)
    96fc:	1885c83a 	sub	r2,r3,r2
    9700:	e0bff115 	stw	r2,-60(fp)
    9704:	00000406 	br	9718 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    9708:	00c1ffc4 	movi	r3,2047
    970c:	e0bff317 	ldw	r2,-52(fp)
    9710:	1885c83a 	sub	r2,r3,r2
    9714:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
    9718:	e0bff117 	ldw	r2,-60(fp)
    971c:	1000011e 	bne	r2,zero,9724 <altera_avalon_jtag_uart_write+0xcc>
        break;
    9720:	00001d06 	br	9798 <altera_avalon_jtag_uart_write+0x140>

      if (n > count)
    9724:	e0fffe17 	ldw	r3,-8(fp)
    9728:	e0bff117 	ldw	r2,-60(fp)
    972c:	1880022e 	bgeu	r3,r2,9738 <altera_avalon_jtag_uart_write+0xe0>
        n = count;
    9730:	e0bffe17 	ldw	r2,-8(fp)
    9734:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    9738:	e0bff317 	ldw	r2,-52(fp)
    973c:	10821104 	addi	r2,r2,2116
    9740:	e0fffc17 	ldw	r3,-16(fp)
    9744:	1885883a 	add	r2,r3,r2
    9748:	1009883a 	mov	r4,r2
    974c:	e17ffd17 	ldw	r5,-12(fp)
    9750:	e1bff117 	ldw	r6,-60(fp)
    9754:	000d2280 	call	d228 <memcpy>
      ptr   += n;
    9758:	e0fffd17 	ldw	r3,-12(fp)
    975c:	e0bff117 	ldw	r2,-60(fp)
    9760:	1885883a 	add	r2,r3,r2
    9764:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    9768:	e0fffe17 	ldw	r3,-8(fp)
    976c:	e0bff117 	ldw	r2,-60(fp)
    9770:	1885c83a 	sub	r2,r3,r2
    9774:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    9778:	e0fff317 	ldw	r3,-52(fp)
    977c:	e0bff117 	ldw	r2,-60(fp)
    9780:	1885883a 	add	r2,r3,r2
    9784:	10c1ffcc 	andi	r3,r2,2047
    9788:	e0bffc17 	ldw	r2,-16(fp)
    978c:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    9790:	e0bffe17 	ldw	r2,-8(fp)
    9794:	00bfc616 	blt	zero,r2,96b0 <altera_avalon_jtag_uart_write+0x58>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9798:	0005303a 	rdctl	r2,status
    979c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    97a0:	e0fff717 	ldw	r3,-36(fp)
    97a4:	00bfff84 	movi	r2,-2
    97a8:	1884703a 	and	r2,r3,r2
    97ac:	1001703a 	wrctl	status,r2
  
  return context;
    97b0:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    97b4:	e0bff415 	stw	r2,-48(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    97b8:	e0bffc17 	ldw	r2,-16(fp)
    97bc:	10800817 	ldw	r2,32(r2)
    97c0:	10c00094 	ori	r3,r2,2
    97c4:	e0bffc17 	ldw	r2,-16(fp)
    97c8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    97cc:	e0bffc17 	ldw	r2,-16(fp)
    97d0:	10800017 	ldw	r2,0(r2)
    97d4:	10800104 	addi	r2,r2,4
    97d8:	1007883a 	mov	r3,r2
    97dc:	e0bffc17 	ldw	r2,-16(fp)
    97e0:	10800817 	ldw	r2,32(r2)
    97e4:	18800035 	stwio	r2,0(r3)
    97e8:	e0bff417 	ldw	r2,-48(fp)
    97ec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    97f0:	e0bff817 	ldw	r2,-32(fp)
    97f4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    97f8:	e0bffe17 	ldw	r2,-8(fp)
    97fc:	00802e0e 	bge	zero,r2,98b8 <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
    9800:	e0bfff17 	ldw	r2,-4(fp)
    9804:	1090000c 	andi	r2,r2,16384
    9808:	10000126 	beq	r2,zero,9810 <altera_avalon_jtag_uart_write+0x1b8>
        break;
    980c:	00002c06 	br	98c0 <altera_avalon_jtag_uart_write+0x268>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
    9810:	00800074 	movhi	r2,1
    9814:	108f5b44 	addi	r2,r2,15725
    9818:	10800003 	ldbu	r2,0(r2)
    981c:	10803fcc 	andi	r2,r2,255
    9820:	10800058 	cmpnei	r2,r2,1
    9824:	1000161e 	bne	r2,zero,9880 <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
    9828:	e0bffc17 	ldw	r2,-16(fp)
    982c:	10800c17 	ldw	r2,48(r2)
    9830:	e0bff915 	stw	r2,-28(fp)
    9834:	00800184 	movi	r2,6
    9838:	e0bffa0d 	sth	r2,-24(fp)
    983c:	00bfe0c4 	movi	r2,-125
    9840:	e0bffa85 	stb	r2,-22(fp)
    9844:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    9848:	00800074 	movhi	r2,1
    984c:	108f5b44 	addi	r2,r2,15725
    9850:	10800003 	ldbu	r2,0(r2)
    9854:	10803fcc 	andi	r2,r2,255
    9858:	10001326 	beq	r2,zero,98a8 <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    985c:	e17ffa0b 	ldhu	r5,-24(fp)
    9860:	e1bffa83 	ldbu	r6,-22(fp)
    9864:	e0fffb0b 	ldhu	r3,-20(fp)
    9868:	e0bffb84 	addi	r2,fp,-18
    986c:	d8800015 	stw	r2,0(sp)
    9870:	e13ff917 	ldw	r4,-28(fp)
    9874:	180f883a 	mov	r7,r3
    9878:	00035bc0 	call	35bc <OSFlagPend>
    987c:	00000a06 	br	98a8 <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    9880:	0001883a 	nop
    9884:	e0bffc17 	ldw	r2,-16(fp)
    9888:	10c01017 	ldw	r3,64(r2)
    988c:	e0bff017 	ldw	r2,-64(fp)
    9890:	1880051e 	bne	r3,r2,98a8 <altera_avalon_jtag_uart_write+0x250>
    9894:	e0bffc17 	ldw	r2,-16(fp)
    9898:	10c00917 	ldw	r3,36(r2)
    989c:	e0bffc17 	ldw	r2,-16(fp)
    98a0:	10800117 	ldw	r2,4(r2)
    98a4:	18bff736 	bltu	r3,r2,9884 <altera_avalon_jtag_uart_write+0x22c>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    98a8:	e0bffc17 	ldw	r2,-16(fp)
    98ac:	10800917 	ldw	r2,36(r2)
    98b0:	10000126 	beq	r2,zero,98b8 <altera_avalon_jtag_uart_write+0x260>
         break;
    98b4:	00000206 	br	98c0 <altera_avalon_jtag_uart_write+0x268>
    }
  }
  while (count > 0);
    98b8:	e0bffe17 	ldw	r2,-8(fp)
    98bc:	00bf7b16 	blt	zero,r2,96ac <altera_avalon_jtag_uart_write+0x54>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
    98c0:	e0bffc17 	ldw	r2,-16(fp)
    98c4:	10800b17 	ldw	r2,44(r2)
    98c8:	1009883a 	mov	r4,r2
    98cc:	00066380 	call	6638 <OSSemPost>

  if (ptr != start)
    98d0:	e0fffd17 	ldw	r3,-12(fp)
    98d4:	e0bff217 	ldw	r2,-56(fp)
    98d8:	18800426 	beq	r3,r2,98ec <altera_avalon_jtag_uart_write+0x294>
    return ptr - start;
    98dc:	e0fffd17 	ldw	r3,-12(fp)
    98e0:	e0bff217 	ldw	r2,-56(fp)
    98e4:	1885c83a 	sub	r2,r3,r2
    98e8:	00000606 	br	9904 <altera_avalon_jtag_uart_write+0x2ac>
  else if (flags & O_NONBLOCK)
    98ec:	e0bfff17 	ldw	r2,-4(fp)
    98f0:	1090000c 	andi	r2,r2,16384
    98f4:	10000226 	beq	r2,zero,9900 <altera_avalon_jtag_uart_write+0x2a8>
    return -EWOULDBLOCK;
    98f8:	00bffd44 	movi	r2,-11
    98fc:	00000106 	br	9904 <altera_avalon_jtag_uart_write+0x2ac>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    9900:	00bffec4 	movi	r2,-5
}
    9904:	e037883a 	mov	sp,fp
    9908:	dfc00117 	ldw	ra,4(sp)
    990c:	df000017 	ldw	fp,0(sp)
    9910:	dec00204 	addi	sp,sp,8
    9914:	f800283a 	ret

00009918 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    9918:	defff904 	addi	sp,sp,-28
    991c:	dfc00615 	stw	ra,24(sp)
    9920:	df000515 	stw	fp,20(sp)
    9924:	df000504 	addi	fp,sp,20
    9928:	e13ffe15 	stw	r4,-8(fp)
    992c:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    9930:	0007883a 	mov	r3,zero
    9934:	e0bffe17 	ldw	r2,-8(fp)
    9938:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    993c:	e0bffe17 	ldw	r2,-8(fp)
    9940:	10800104 	addi	r2,r2,4
    9944:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9948:	0005303a 	rdctl	r2,status
    994c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9950:	e0fffc17 	ldw	r3,-16(fp)
    9954:	00bfff84 	movi	r2,-2
    9958:	1884703a 	and	r2,r3,r2
    995c:	1001703a 	wrctl	status,r2
  
  return context;
    9960:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    9964:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
    9968:	000c9d00 	call	c9d0 <alt_tick>
    996c:	e0bffb17 	ldw	r2,-20(fp)
    9970:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9974:	e0bffd17 	ldw	r2,-12(fp)
    9978:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    997c:	e037883a 	mov	sp,fp
    9980:	dfc00117 	ldw	ra,4(sp)
    9984:	df000017 	ldw	fp,0(sp)
    9988:	dec00204 	addi	sp,sp,8
    998c:	f800283a 	ret

00009990 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    9990:	defff904 	addi	sp,sp,-28
    9994:	dfc00615 	stw	ra,24(sp)
    9998:	df000515 	stw	fp,20(sp)
    999c:	df000504 	addi	fp,sp,20
    99a0:	e13ffc15 	stw	r4,-16(fp)
    99a4:	e17ffd15 	stw	r5,-12(fp)
    99a8:	e1bffe15 	stw	r6,-8(fp)
    99ac:	e1ffff15 	stw	r7,-4(fp)
    99b0:	e0bfff17 	ldw	r2,-4(fp)
    99b4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    99b8:	00800074 	movhi	r2,1
    99bc:	108f7104 	addi	r2,r2,15812
    99c0:	10800017 	ldw	r2,0(r2)
    99c4:	1000041e 	bne	r2,zero,99d8 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    99c8:	00800074 	movhi	r2,1
    99cc:	108f7104 	addi	r2,r2,15812
    99d0:	e0fffb17 	ldw	r3,-20(fp)
    99d4:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    99d8:	e0bffc17 	ldw	r2,-16(fp)
    99dc:	10800104 	addi	r2,r2,4
    99e0:	00c001c4 	movi	r3,7
    99e4:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    99e8:	e13ffe17 	ldw	r4,-8(fp)
    99ec:	e17ffc17 	ldw	r5,-16(fp)
    99f0:	01800074 	movhi	r6,1
    99f4:	31a64604 	addi	r6,r6,-26344
    99f8:	000c4b40 	call	c4b4 <alt_irq_register>
#endif  
}
    99fc:	e037883a 	mov	sp,fp
    9a00:	dfc00117 	ldw	ra,4(sp)
    9a04:	df000017 	ldw	fp,0(sp)
    9a08:	dec00204 	addi	sp,sp,8
    9a0c:	f800283a 	ret

00009a10 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
    9a10:	defffc04 	addi	sp,sp,-16
    9a14:	df000315 	stw	fp,12(sp)
    9a18:	df000304 	addi	fp,sp,12
    9a1c:	e13ffe15 	stw	r4,-8(fp)
    9a20:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
    9a24:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
    9a28:	e0bfff17 	ldw	r2,-4(fp)
    9a2c:	1000061e 	bne	r2,zero,9a48 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
    9a30:	e0bffe17 	ldw	r2,-8(fp)
    9a34:	1007883a 	mov	r3,r2
    9a38:	e0bffd03 	ldbu	r2,-12(fp)
    9a3c:	1884b03a 	or	r2,r3,r2
    9a40:	e0bffd05 	stb	r2,-12(fp)
    9a44:	00000806 	br	9a68 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
    9a48:	e0bffe17 	ldw	r2,-8(fp)
    9a4c:	1007883a 	mov	r3,r2
    9a50:	e0bffd03 	ldbu	r2,-12(fp)
    9a54:	1884b03a 	or	r2,r3,r2
    9a58:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
    9a5c:	e0bffd03 	ldbu	r2,-12(fp)
    9a60:	10801014 	ori	r2,r2,64
    9a64:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    9a68:	e0fffd03 	ldbu	r3,-12(fp)
    9a6c:	00bfe004 	movi	r2,-128
    9a70:	1884b03a 	or	r2,r3,r2
}
    9a74:	e037883a 	mov	sp,fp
    9a78:	df000017 	ldw	fp,0(sp)
    9a7c:	dec00104 	addi	sp,sp,4
    9a80:	f800283a 	ret

00009a84 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
    9a84:	defffd04 	addi	sp,sp,-12
    9a88:	df000215 	stw	fp,8(sp)
    9a8c:	df000204 	addi	fp,sp,8
    9a90:	e13ffe15 	stw	r4,-8(fp)
    9a94:	2805883a 	mov	r2,r5
    9a98:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    9a9c:	e0bffe17 	ldw	r2,-8(fp)
    9aa0:	10800a17 	ldw	r2,40(r2)
    9aa4:	1007883a 	mov	r3,r2
    9aa8:	e0bfff03 	ldbu	r2,-4(fp)
    9aac:	18800025 	stbio	r2,0(r3)
}
    9ab0:	e037883a 	mov	sp,fp
    9ab4:	df000017 	ldw	fp,0(sp)
    9ab8:	dec00104 	addi	sp,sp,4
    9abc:	f800283a 	ret

00009ac0 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
    9ac0:	defffe04 	addi	sp,sp,-8
    9ac4:	df000115 	stw	fp,4(sp)
    9ac8:	df000104 	addi	fp,sp,4
    9acc:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    9ad0:	e0bfff17 	ldw	r2,-4(fp)
    9ad4:	10800a17 	ldw	r2,40(r2)
    9ad8:	1007883a 	mov	r3,r2
    9adc:	00800044 	movi	r2,1
    9ae0:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    9ae4:	e037883a 	mov	sp,fp
    9ae8:	df000017 	ldw	fp,0(sp)
    9aec:	dec00104 	addi	sp,sp,4
    9af0:	f800283a 	ret

00009af4 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    9af4:	defffc04 	addi	sp,sp,-16
    9af8:	dfc00315 	stw	ra,12(sp)
    9afc:	df000215 	stw	fp,8(sp)
    9b00:	df000204 	addi	fp,sp,8
    9b04:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    9b08:	e13fff17 	ldw	r4,-4(fp)
    9b0c:	01400074 	movhi	r5,1
    9b10:	2947a904 	addi	r5,r5,7844
    9b14:	000c2bc0 	call	c2bc <alt_find_dev>
    9b18:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    9b1c:	e0bffe17 	ldw	r2,-8(fp)
}
    9b20:	e037883a 	mov	sp,fp
    9b24:	dfc00117 	ldw	ra,4(sp)
    9b28:	df000017 	ldw	fp,0(sp)
    9b2c:	dec00204 	addi	sp,sp,8
    9b30:	f800283a 	ret

00009b34 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    9b34:	defffb04 	addi	sp,sp,-20
    9b38:	df000415 	stw	fp,16(sp)
    9b3c:	df000404 	addi	fp,sp,16
    9b40:	e13ffd15 	stw	r4,-12(fp)
    9b44:	e17ffe15 	stw	r5,-8(fp)
    9b48:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
    9b4c:	e03ffc15 	stw	zero,-16(fp)
    9b50:	00000f06 	br	9b90 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    9b54:	e0bffd17 	ldw	r2,-12(fp)
    9b58:	10800a17 	ldw	r2,40(r2)
    9b5c:	10800044 	addi	r2,r2,1
    9b60:	1009883a 	mov	r4,r2
    9b64:	e0fffe17 	ldw	r3,-8(fp)
    9b68:	e0bffc17 	ldw	r2,-16(fp)
    9b6c:	1885883a 	add	r2,r3,r2
    9b70:	10800003 	ldbu	r2,0(r2)
    9b74:	10803fcc 	andi	r2,r2,255
    9b78:	1080201c 	xori	r2,r2,128
    9b7c:	10bfe004 	addi	r2,r2,-128
    9b80:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    9b84:	e0bffc17 	ldw	r2,-16(fp)
    9b88:	10800044 	addi	r2,r2,1
    9b8c:	e0bffc15 	stw	r2,-16(fp)
    9b90:	e0fffc17 	ldw	r3,-16(fp)
    9b94:	e0bfff17 	ldw	r2,-4(fp)
    9b98:	18bfee36 	bltu	r3,r2,9b54 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
    9b9c:	e037883a 	mov	sp,fp
    9ba0:	df000017 	ldw	fp,0(sp)
    9ba4:	dec00104 	addi	sp,sp,4
    9ba8:	f800283a 	ret

00009bac <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    9bac:	defffd04 	addi	sp,sp,-12
    9bb0:	df000215 	stw	fp,8(sp)
    9bb4:	df000204 	addi	fp,sp,8
    9bb8:	e13ffe15 	stw	r4,-8(fp)
    9bbc:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
    9bc0:	00000d06 	br	9bf8 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    9bc4:	e0bffe17 	ldw	r2,-8(fp)
    9bc8:	10800a17 	ldw	r2,40(r2)
    9bcc:	10800044 	addi	r2,r2,1
    9bd0:	1007883a 	mov	r3,r2
    9bd4:	e0bfff17 	ldw	r2,-4(fp)
    9bd8:	10800003 	ldbu	r2,0(r2)
    9bdc:	10803fcc 	andi	r2,r2,255
    9be0:	1080201c 	xori	r2,r2,128
    9be4:	10bfe004 	addi	r2,r2,-128
    9be8:	18800025 	stbio	r2,0(r3)
		++ptr;
    9bec:	e0bfff17 	ldw	r2,-4(fp)
    9bf0:	10800044 	addi	r2,r2,1
    9bf4:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    9bf8:	e0bfff17 	ldw	r2,-4(fp)
    9bfc:	10800003 	ldbu	r2,0(r2)
    9c00:	10803fcc 	andi	r2,r2,255
    9c04:	1080201c 	xori	r2,r2,128
    9c08:	10bfe004 	addi	r2,r2,-128
    9c0c:	103fed1e 	bne	r2,zero,9bc4 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
    9c10:	e037883a 	mov	sp,fp
    9c14:	df000017 	ldw	fp,0(sp)
    9c18:	dec00104 	addi	sp,sp,4
    9c1c:	f800283a 	ret

00009c20 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    9c20:	defffb04 	addi	sp,sp,-20
    9c24:	dfc00415 	stw	ra,16(sp)
    9c28:	df000315 	stw	fp,12(sp)
    9c2c:	df000304 	addi	fp,sp,12
    9c30:	e13ffd15 	stw	r4,-12(fp)
    9c34:	e17ffe15 	stw	r5,-8(fp)
    9c38:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    9c3c:	e0bffd17 	ldw	r2,-12(fp)
    9c40:	10c00017 	ldw	r3,0(r2)
    9c44:	e0bfff17 	ldw	r2,-4(fp)
    9c48:	1809883a 	mov	r4,r3
    9c4c:	e17ffe17 	ldw	r5,-8(fp)
    9c50:	100d883a 	mov	r6,r2
    9c54:	0009b340 	call	9b34 <alt_up_character_lcd_write>
	return 0;
    9c58:	0005883a 	mov	r2,zero
}
    9c5c:	e037883a 	mov	sp,fp
    9c60:	dfc00117 	ldw	ra,4(sp)
    9c64:	df000017 	ldw	fp,0(sp)
    9c68:	dec00204 	addi	sp,sp,8
    9c6c:	f800283a 	ret

00009c70 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    9c70:	defffa04 	addi	sp,sp,-24
    9c74:	dfc00515 	stw	ra,20(sp)
    9c78:	df000415 	stw	fp,16(sp)
    9c7c:	df000404 	addi	fp,sp,16
    9c80:	e13ffd15 	stw	r4,-12(fp)
    9c84:	e17ffe15 	stw	r5,-8(fp)
    9c88:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    9c8c:	e0bffe17 	ldw	r2,-8(fp)
    9c90:	10800a28 	cmpgeui	r2,r2,40
    9c94:	1000031e 	bne	r2,zero,9ca4 <alt_up_character_lcd_set_cursor_pos+0x34>
    9c98:	e0bfff17 	ldw	r2,-4(fp)
    9c9c:	108000b0 	cmpltui	r2,r2,2
    9ca0:	1000021e 	bne	r2,zero,9cac <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
    9ca4:	00bfffc4 	movi	r2,-1
    9ca8:	00000906 	br	9cd0 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    9cac:	e13ffe17 	ldw	r4,-8(fp)
    9cb0:	e17fff17 	ldw	r5,-4(fp)
    9cb4:	0009a100 	call	9a10 <get_DDRAM_addr>
    9cb8:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
    9cbc:	e0bffc03 	ldbu	r2,-16(fp)
    9cc0:	e13ffd17 	ldw	r4,-12(fp)
    9cc4:	100b883a 	mov	r5,r2
    9cc8:	0009a840 	call	9a84 <alt_up_character_lcd_send_cmd>
	return 0;
    9ccc:	0005883a 	mov	r2,zero
}
    9cd0:	e037883a 	mov	sp,fp
    9cd4:	dfc00117 	ldw	ra,4(sp)
    9cd8:	df000017 	ldw	fp,0(sp)
    9cdc:	dec00204 	addi	sp,sp,8
    9ce0:	f800283a 	ret

00009ce4 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    9ce4:	defffb04 	addi	sp,sp,-20
    9ce8:	dfc00415 	stw	ra,16(sp)
    9cec:	df000315 	stw	fp,12(sp)
    9cf0:	df000304 	addi	fp,sp,12
    9cf4:	e13ffe15 	stw	r4,-8(fp)
    9cf8:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
    9cfc:	e0bfff17 	ldw	r2,-4(fp)
    9d00:	1000011e 	bne	r2,zero,9d08 <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
    9d04:	00001406 	br	9d58 <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    9d08:	e0bfff17 	ldw	r2,-4(fp)
    9d0c:	0080020e 	bge	zero,r2,9d18 <alt_up_character_lcd_shift_cursor+0x34>
    9d10:	00800504 	movi	r2,20
    9d14:	00000106 	br	9d1c <alt_up_character_lcd_shift_cursor+0x38>
    9d18:	00800404 	movi	r2,16
    9d1c:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    9d20:	e0bfff17 	ldw	r2,-4(fp)
    9d24:	1000010e 	bge	r2,zero,9d2c <alt_up_character_lcd_shift_cursor+0x48>
    9d28:	0085c83a 	sub	r2,zero,r2
    9d2c:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    9d30:	00000406 	br	9d44 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    9d34:	e0bffd43 	ldbu	r2,-11(fp)
    9d38:	e13ffe17 	ldw	r4,-8(fp)
    9d3c:	100b883a 	mov	r5,r2
    9d40:	0009a840 	call	9a84 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    9d44:	e0bffd03 	ldbu	r2,-12(fp)
    9d48:	10ffffc4 	addi	r3,r2,-1
    9d4c:	e0fffd05 	stb	r3,-12(fp)
    9d50:	10803fcc 	andi	r2,r2,255
    9d54:	103ff71e 	bne	r2,zero,9d34 <alt_up_character_lcd_shift_cursor+0x50>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    9d58:	e037883a 	mov	sp,fp
    9d5c:	dfc00117 	ldw	ra,4(sp)
    9d60:	df000017 	ldw	fp,0(sp)
    9d64:	dec00204 	addi	sp,sp,8
    9d68:	f800283a 	ret

00009d6c <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    9d6c:	defffb04 	addi	sp,sp,-20
    9d70:	dfc00415 	stw	ra,16(sp)
    9d74:	df000315 	stw	fp,12(sp)
    9d78:	df000304 	addi	fp,sp,12
    9d7c:	e13ffe15 	stw	r4,-8(fp)
    9d80:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
    9d84:	e0bfff17 	ldw	r2,-4(fp)
    9d88:	1000011e 	bne	r2,zero,9d90 <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
    9d8c:	00001406 	br	9de0 <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    9d90:	e0bfff17 	ldw	r2,-4(fp)
    9d94:	0080020e 	bge	zero,r2,9da0 <alt_up_character_lcd_shift_display+0x34>
    9d98:	00800704 	movi	r2,28
    9d9c:	00000106 	br	9da4 <alt_up_character_lcd_shift_display+0x38>
    9da0:	00800604 	movi	r2,24
    9da4:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    9da8:	e0bfff17 	ldw	r2,-4(fp)
    9dac:	1000010e 	bge	r2,zero,9db4 <alt_up_character_lcd_shift_display+0x48>
    9db0:	0085c83a 	sub	r2,zero,r2
    9db4:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    9db8:	00000406 	br	9dcc <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    9dbc:	e0bffd43 	ldbu	r2,-11(fp)
    9dc0:	e13ffe17 	ldw	r4,-8(fp)
    9dc4:	100b883a 	mov	r5,r2
    9dc8:	0009a840 	call	9a84 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    9dcc:	e0bffd03 	ldbu	r2,-12(fp)
    9dd0:	10ffffc4 	addi	r3,r2,-1
    9dd4:	e0fffd05 	stb	r3,-12(fp)
    9dd8:	10803fcc 	andi	r2,r2,255
    9ddc:	103ff71e 	bne	r2,zero,9dbc <alt_up_character_lcd_shift_display+0x50>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    9de0:	e037883a 	mov	sp,fp
    9de4:	dfc00117 	ldw	ra,4(sp)
    9de8:	df000017 	ldw	fp,0(sp)
    9dec:	dec00204 	addi	sp,sp,8
    9df0:	f800283a 	ret

00009df4 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    9df4:	defffa04 	addi	sp,sp,-24
    9df8:	dfc00515 	stw	ra,20(sp)
    9dfc:	df000415 	stw	fp,16(sp)
    9e00:	df000404 	addi	fp,sp,16
    9e04:	e13ffd15 	stw	r4,-12(fp)
    9e08:	e17ffe15 	stw	r5,-8(fp)
    9e0c:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    9e10:	e0bffe17 	ldw	r2,-8(fp)
    9e14:	10800a28 	cmpgeui	r2,r2,40
    9e18:	1000031e 	bne	r2,zero,9e28 <alt_up_character_lcd_erase_pos+0x34>
    9e1c:	e0bfff17 	ldw	r2,-4(fp)
    9e20:	108000b0 	cmpltui	r2,r2,2
    9e24:	1000021e 	bne	r2,zero,9e30 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
    9e28:	00bfffc4 	movi	r2,-1
    9e2c:	00000f06 	br	9e6c <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    9e30:	e13ffe17 	ldw	r4,-8(fp)
    9e34:	e17fff17 	ldw	r5,-4(fp)
    9e38:	0009a100 	call	9a10 <get_DDRAM_addr>
    9e3c:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
    9e40:	e0bffc03 	ldbu	r2,-16(fp)
    9e44:	e13ffd17 	ldw	r4,-12(fp)
    9e48:	100b883a 	mov	r5,r2
    9e4c:	0009a840 	call	9a84 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    9e50:	e0bffd17 	ldw	r2,-12(fp)
    9e54:	10800a17 	ldw	r2,40(r2)
    9e58:	10800044 	addi	r2,r2,1
    9e5c:	1007883a 	mov	r3,r2
    9e60:	00800084 	movi	r2,2
    9e64:	18800025 	stbio	r2,0(r3)
	return 0;
    9e68:	0005883a 	mov	r2,zero
}
    9e6c:	e037883a 	mov	sp,fp
    9e70:	dfc00117 	ldw	ra,4(sp)
    9e74:	df000017 	ldw	fp,0(sp)
    9e78:	dec00204 	addi	sp,sp,8
    9e7c:	f800283a 	ret

00009e80 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    9e80:	defffd04 	addi	sp,sp,-12
    9e84:	dfc00215 	stw	ra,8(sp)
    9e88:	df000115 	stw	fp,4(sp)
    9e8c:	df000104 	addi	fp,sp,4
    9e90:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    9e94:	e13fff17 	ldw	r4,-4(fp)
    9e98:	01400304 	movi	r5,12
    9e9c:	0009a840 	call	9a84 <alt_up_character_lcd_send_cmd>
}
    9ea0:	e037883a 	mov	sp,fp
    9ea4:	dfc00117 	ldw	ra,4(sp)
    9ea8:	df000017 	ldw	fp,0(sp)
    9eac:	dec00204 	addi	sp,sp,8
    9eb0:	f800283a 	ret

00009eb4 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    9eb4:	defffd04 	addi	sp,sp,-12
    9eb8:	dfc00215 	stw	ra,8(sp)
    9ebc:	df000115 	stw	fp,4(sp)
    9ec0:	df000104 	addi	fp,sp,4
    9ec4:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    9ec8:	e13fff17 	ldw	r4,-4(fp)
    9ecc:	014003c4 	movi	r5,15
    9ed0:	0009a840 	call	9a84 <alt_up_character_lcd_send_cmd>
}
    9ed4:	e037883a 	mov	sp,fp
    9ed8:	dfc00117 	ldw	ra,4(sp)
    9edc:	df000017 	ldw	fp,0(sp)
    9ee0:	dec00204 	addi	sp,sp,8
    9ee4:	f800283a 	ret

00009ee8 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
    9ee8:	defffd04 	addi	sp,sp,-12
    9eec:	df000215 	stw	fp,8(sp)
    9ef0:	df000204 	addi	fp,sp,8
    9ef4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    9ef8:	e0bfff17 	ldw	r2,-4(fp)
    9efc:	10800a17 	ldw	r2,40(r2)
    9f00:	10800104 	addi	r2,r2,4
    9f04:	10800037 	ldwio	r2,0(r2)
    9f08:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
    9f0c:	e0bffe17 	ldw	r2,-8(fp)
    9f10:	10800054 	ori	r2,r2,1
    9f14:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    9f18:	e0bfff17 	ldw	r2,-4(fp)
    9f1c:	10800a17 	ldw	r2,40(r2)
    9f20:	10800104 	addi	r2,r2,4
    9f24:	1007883a 	mov	r3,r2
    9f28:	e0bffe17 	ldw	r2,-8(fp)
    9f2c:	18800035 	stwio	r2,0(r3)
}
    9f30:	e037883a 	mov	sp,fp
    9f34:	df000017 	ldw	fp,0(sp)
    9f38:	dec00104 	addi	sp,sp,4
    9f3c:	f800283a 	ret

00009f40 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
    9f40:	defffd04 	addi	sp,sp,-12
    9f44:	df000215 	stw	fp,8(sp)
    9f48:	df000204 	addi	fp,sp,8
    9f4c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    9f50:	e0bfff17 	ldw	r2,-4(fp)
    9f54:	10800a17 	ldw	r2,40(r2)
    9f58:	10800104 	addi	r2,r2,4
    9f5c:	10800037 	ldwio	r2,0(r2)
    9f60:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
    9f64:	e0fffe17 	ldw	r3,-8(fp)
    9f68:	00bfff84 	movi	r2,-2
    9f6c:	1884703a 	and	r2,r3,r2
    9f70:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    9f74:	e0bfff17 	ldw	r2,-4(fp)
    9f78:	10800a17 	ldw	r2,40(r2)
    9f7c:	10800104 	addi	r2,r2,4
    9f80:	1007883a 	mov	r3,r2
    9f84:	e0bffe17 	ldw	r2,-8(fp)
    9f88:	18800035 	stwio	r2,0(r3)
}
    9f8c:	e037883a 	mov	sp,fp
    9f90:	df000017 	ldw	fp,0(sp)
    9f94:	dec00104 	addi	sp,sp,4
    9f98:	f800283a 	ret

00009f9c <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
    9f9c:	defffd04 	addi	sp,sp,-12
    9fa0:	df000215 	stw	fp,8(sp)
    9fa4:	df000204 	addi	fp,sp,8
    9fa8:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    9fac:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
    9fb0:	e0bfff17 	ldw	r2,-4(fp)
    9fb4:	10800a17 	ldw	r2,40(r2)
    9fb8:	10800084 	addi	r2,r2,2
    9fbc:	1080002b 	ldhuio	r2,0(r2)
    9fc0:	10bfffcc 	andi	r2,r2,65535
    9fc4:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
    9fc8:	e0bffe0b 	ldhu	r2,-8(fp)
}
    9fcc:	e037883a 	mov	sp,fp
    9fd0:	df000017 	ldw	fp,0(sp)
    9fd4:	dec00104 	addi	sp,sp,4
    9fd8:	f800283a 	ret

00009fdc <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
    9fdc:	defffd04 	addi	sp,sp,-12
    9fe0:	df000215 	stw	fp,8(sp)
    9fe4:	df000204 	addi	fp,sp,8
    9fe8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    9fec:	e0bfff17 	ldw	r2,-4(fp)
    9ff0:	10800a17 	ldw	r2,40(r2)
    9ff4:	10800104 	addi	r2,r2,4
    9ff8:	10800037 	ldwio	r2,0(r2)
    9ffc:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
    a000:	e0bffe17 	ldw	r2,-8(fp)
    a004:	1004d43a 	srli	r2,r2,16
}
    a008:	e037883a 	mov	sp,fp
    a00c:	df000017 	ldw	fp,0(sp)
    a010:	dec00104 	addi	sp,sp,4
    a014:	f800283a 	ret

0000a018 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
    a018:	defffd04 	addi	sp,sp,-12
    a01c:	df000215 	stw	fp,8(sp)
    a020:	df000204 	addi	fp,sp,8
    a024:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
    a028:	e0bfff17 	ldw	r2,-4(fp)
    a02c:	1080800c 	andi	r2,r2,512
    a030:	1004d27a 	srli	r2,r2,9
    a034:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
    a038:	e0bffe17 	ldw	r2,-8(fp)
    a03c:	10000226 	beq	r2,zero,a048 <alt_up_irda_check_parity+0x30>
    a040:	00bfffc4 	movi	r2,-1
    a044:	00000106 	br	a04c <alt_up_irda_check_parity+0x34>
    a048:	0005883a 	mov	r2,zero
}
    a04c:	e037883a 	mov	sp,fp
    a050:	df000017 	ldw	fp,0(sp)
    a054:	dec00104 	addi	sp,sp,4
    a058:	f800283a 	ret

0000a05c <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
    a05c:	defffd04 	addi	sp,sp,-12
    a060:	df000215 	stw	fp,8(sp)
    a064:	df000204 	addi	fp,sp,8
    a068:	e13ffe15 	stw	r4,-8(fp)
    a06c:	2805883a 	mov	r2,r5
    a070:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
    a074:	e0bffe17 	ldw	r2,-8(fp)
    a078:	10800a17 	ldw	r2,40(r2)
    a07c:	1007883a 	mov	r3,r2
    a080:	e0bfff03 	ldbu	r2,-4(fp)
    a084:	18800035 	stwio	r2,0(r3)
	return 0;
    a088:	0005883a 	mov	r2,zero
}
    a08c:	e037883a 	mov	sp,fp
    a090:	df000017 	ldw	fp,0(sp)
    a094:	dec00104 	addi	sp,sp,4
    a098:	f800283a 	ret

0000a09c <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
    a09c:	defffa04 	addi	sp,sp,-24
    a0a0:	dfc00515 	stw	ra,20(sp)
    a0a4:	df000415 	stw	fp,16(sp)
    a0a8:	df000404 	addi	fp,sp,16
    a0ac:	e13ffd15 	stw	r4,-12(fp)
    a0b0:	e17ffe15 	stw	r5,-8(fp)
    a0b4:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    a0b8:	e0bffd17 	ldw	r2,-12(fp)
    a0bc:	10800a17 	ldw	r2,40(r2)
    a0c0:	10800037 	ldwio	r2,0(r2)
    a0c4:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
    a0c8:	e0bffc17 	ldw	r2,-16(fp)
    a0cc:	1007883a 	mov	r3,r2
    a0d0:	e0bffe17 	ldw	r2,-8(fp)
    a0d4:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
    a0d8:	e13ffc17 	ldw	r4,-16(fp)
    a0dc:	000a0180 	call	a018 <alt_up_irda_check_parity>
    a0e0:	1007883a 	mov	r3,r2
    a0e4:	e0bfff17 	ldw	r2,-4(fp)
    a0e8:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
    a0ec:	e0bffc17 	ldw	r2,-16(fp)
    a0f0:	10a0000c 	andi	r2,r2,32768
    a0f4:	1004d3fa 	srli	r2,r2,15
    a0f8:	10bfffc4 	addi	r2,r2,-1
}
    a0fc:	e037883a 	mov	sp,fp
    a100:	dfc00117 	ldw	ra,4(sp)
    a104:	df000017 	ldw	fp,0(sp)
    a108:	dec00204 	addi	sp,sp,8
    a10c:	f800283a 	ret

0000a110 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
    a110:	defff804 	addi	sp,sp,-32
    a114:	dfc00715 	stw	ra,28(sp)
    a118:	df000615 	stw	fp,24(sp)
    a11c:	df000604 	addi	fp,sp,24
    a120:	e13ffd15 	stw	r4,-12(fp)
    a124:	e17ffe15 	stw	r5,-8(fp)
    a128:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    a12c:	e0bffd17 	ldw	r2,-12(fp)
    a130:	10800017 	ldw	r2,0(r2)
    a134:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    a138:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    a13c:	00000e06 	br	a178 <alt_up_irda_read_fd+0x68>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
    a140:	e0bffe17 	ldw	r2,-8(fp)
    a144:	10c00044 	addi	r3,r2,1
    a148:	e0fffe15 	stw	r3,-8(fp)
    a14c:	e0fffc04 	addi	r3,fp,-16
    a150:	e13ffb17 	ldw	r4,-20(fp)
    a154:	100b883a 	mov	r5,r2
    a158:	180d883a 	mov	r6,r3
    a15c:	000a09c0 	call	a09c <alt_up_irda_read_data>
    a160:	1000041e 	bne	r2,zero,a174 <alt_up_irda_read_fd+0x64>
			count++;
    a164:	e0bffa17 	ldw	r2,-24(fp)
    a168:	10800044 	addi	r2,r2,1
    a16c:	e0bffa15 	stw	r2,-24(fp)
    a170:	00000106 	br	a178 <alt_up_irda_read_fd+0x68>
		else
			break;
    a174:	00000406 	br	a188 <alt_up_irda_read_fd+0x78>
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    a178:	e0bfff17 	ldw	r2,-4(fp)
    a17c:	10ffffc4 	addi	r3,r2,-1
    a180:	e0ffff15 	stw	r3,-4(fp)
    a184:	103fee1e 	bne	r2,zero,a140 <alt_up_irda_read_fd+0x30>
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
    a188:	e0bffa17 	ldw	r2,-24(fp)
}
    a18c:	e037883a 	mov	sp,fp
    a190:	dfc00117 	ldw	ra,4(sp)
    a194:	df000017 	ldw	fp,0(sp)
    a198:	dec00204 	addi	sp,sp,8
    a19c:	f800283a 	ret

0000a1a0 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
    a1a0:	defff904 	addi	sp,sp,-28
    a1a4:	dfc00615 	stw	ra,24(sp)
    a1a8:	df000515 	stw	fp,20(sp)
    a1ac:	df000504 	addi	fp,sp,20
    a1b0:	e13ffd15 	stw	r4,-12(fp)
    a1b4:	e17ffe15 	stw	r5,-8(fp)
    a1b8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    a1bc:	e0bffd17 	ldw	r2,-12(fp)
    a1c0:	10800017 	ldw	r2,0(r2)
    a1c4:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    a1c8:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    a1cc:	00000e06 	br	a208 <alt_up_irda_write_fd+0x68>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
    a1d0:	e0bffe17 	ldw	r2,-8(fp)
    a1d4:	10c00044 	addi	r3,r2,1
    a1d8:	e0fffe15 	stw	r3,-8(fp)
    a1dc:	10800003 	ldbu	r2,0(r2)
    a1e0:	10803fcc 	andi	r2,r2,255
    a1e4:	e13ffc17 	ldw	r4,-16(fp)
    a1e8:	100b883a 	mov	r5,r2
    a1ec:	000a05c0 	call	a05c <alt_up_irda_write_data>
    a1f0:	1000041e 	bne	r2,zero,a204 <alt_up_irda_write_fd+0x64>
			count++;
    a1f4:	e0bffb17 	ldw	r2,-20(fp)
    a1f8:	10800044 	addi	r2,r2,1
    a1fc:	e0bffb15 	stw	r2,-20(fp)
    a200:	00000106 	br	a208 <alt_up_irda_write_fd+0x68>
		else
			break;
    a204:	00000406 	br	a218 <alt_up_irda_write_fd+0x78>

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
    a208:	e0bfff17 	ldw	r2,-4(fp)
    a20c:	10ffffc4 	addi	r3,r2,-1
    a210:	e0ffff15 	stw	r3,-4(fp)
    a214:	103fee1e 	bne	r2,zero,a1d0 <alt_up_irda_write_fd+0x30>
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
	}
	return count;
    a218:	e0bffb17 	ldw	r2,-20(fp)
}
    a21c:	e037883a 	mov	sp,fp
    a220:	dfc00117 	ldw	ra,4(sp)
    a224:	df000017 	ldw	fp,0(sp)
    a228:	dec00204 	addi	sp,sp,8
    a22c:	f800283a 	ret

0000a230 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
    a230:	defffc04 	addi	sp,sp,-16
    a234:	dfc00315 	stw	ra,12(sp)
    a238:	df000215 	stw	fp,8(sp)
    a23c:	df000204 	addi	fp,sp,8
    a240:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
    a244:	e13fff17 	ldw	r4,-4(fp)
    a248:	01400074 	movhi	r5,1
    a24c:	2947a904 	addi	r5,r5,7844
    a250:	000c2bc0 	call	c2bc <alt_find_dev>
    a254:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    a258:	e0bffe17 	ldw	r2,-8(fp)
}
    a25c:	e037883a 	mov	sp,fp
    a260:	dfc00117 	ldw	ra,4(sp)
    a264:	df000017 	ldw	fp,0(sp)
    a268:	dec00204 	addi	sp,sp,8
    a26c:	f800283a 	ret

0000a270 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
    a270:	defffd04 	addi	sp,sp,-12
    a274:	df000215 	stw	fp,8(sp)
    a278:	df000204 	addi	fp,sp,8
    a27c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
    a280:	e0bfff17 	ldw	r2,-4(fp)
    a284:	1080400c 	andi	r2,r2,256
    a288:	1004d23a 	srli	r2,r2,8
    a28c:	e0bffe05 	stb	r2,-8(fp)
	return ri;
    a290:	e0bffe03 	ldbu	r2,-8(fp)
}
    a294:	e037883a 	mov	sp,fp
    a298:	df000017 	ldw	fp,0(sp)
    a29c:	dec00104 	addi	sp,sp,4
    a2a0:	f800283a 	ret

0000a2a4 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
    a2a4:	defffd04 	addi	sp,sp,-12
    a2a8:	df000215 	stw	fp,8(sp)
    a2ac:	df000204 	addi	fp,sp,8
    a2b0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
    a2b4:	e0bfff17 	ldw	r2,-4(fp)
    a2b8:	1080004c 	andi	r2,r2,1
    a2bc:	e0bffe05 	stb	r2,-8(fp)
	return re;
    a2c0:	e0bffe03 	ldbu	r2,-8(fp)
}
    a2c4:	e037883a 	mov	sp,fp
    a2c8:	df000017 	ldw	fp,0(sp)
    a2cc:	dec00104 	addi	sp,sp,4
    a2d0:	f800283a 	ret

0000a2d4 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
    a2d4:	defffd04 	addi	sp,sp,-12
    a2d8:	df000215 	stw	fp,8(sp)
    a2dc:	df000204 	addi	fp,sp,8
    a2e0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
    a2e4:	e0bfff17 	ldw	r2,-4(fp)
    a2e8:	1081000c 	andi	r2,r2,1024
    a2ec:	1004d2ba 	srli	r2,r2,10
    a2f0:	e0bffe05 	stb	r2,-8(fp)
	return re;
    a2f4:	e0bffe03 	ldbu	r2,-8(fp)
}
    a2f8:	e037883a 	mov	sp,fp
    a2fc:	df000017 	ldw	fp,0(sp)
    a300:	dec00104 	addi	sp,sp,4
    a304:	f800283a 	ret

0000a308 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
    a308:	defffd04 	addi	sp,sp,-12
    a30c:	df000215 	stw	fp,8(sp)
    a310:	df000204 	addi	fp,sp,8
    a314:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
    a318:	e0bfff17 	ldw	r2,-4(fp)
    a31c:	1004d43a 	srli	r2,r2,16
    a320:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
    a324:	e0bffe0b 	ldhu	r2,-8(fp)
}
    a328:	e037883a 	mov	sp,fp
    a32c:	df000017 	ldw	fp,0(sp)
    a330:	dec00104 	addi	sp,sp,4
    a334:	f800283a 	ret

0000a338 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
    a338:	defffd04 	addi	sp,sp,-12
    a33c:	df000215 	stw	fp,8(sp)
    a340:	df000204 	addi	fp,sp,8
    a344:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
    a348:	e0bfff17 	ldw	r2,-4(fp)
    a34c:	10a0000c 	andi	r2,r2,32768
    a350:	1004d3fa 	srli	r2,r2,15
    a354:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
    a358:	e0bffe03 	ldbu	r2,-8(fp)
}
    a35c:	e037883a 	mov	sp,fp
    a360:	df000017 	ldw	fp,0(sp)
    a364:	dec00104 	addi	sp,sp,4
    a368:	f800283a 	ret

0000a36c <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
    a36c:	defffd04 	addi	sp,sp,-12
    a370:	df000215 	stw	fp,8(sp)
    a374:	df000204 	addi	fp,sp,8
    a378:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
    a37c:	e0bfff17 	ldw	r2,-4(fp)
    a380:	e0bffe05 	stb	r2,-8(fp)
	return data;
    a384:	e0bffe03 	ldbu	r2,-8(fp)
}
    a388:	e037883a 	mov	sp,fp
    a38c:	df000017 	ldw	fp,0(sp)
    a390:	dec00104 	addi	sp,sp,4
    a394:	f800283a 	ret

0000a398 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    a398:	defffb04 	addi	sp,sp,-20
    a39c:	dfc00415 	stw	ra,16(sp)
    a3a0:	df000315 	stw	fp,12(sp)
    a3a4:	df000304 	addi	fp,sp,12
    a3a8:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    a3ac:	e13fff17 	ldw	r4,-4(fp)
    a3b0:	01403fc4 	movi	r5,255
    a3b4:	000a5f40 	call	a5f4 <alt_up_ps2_write_data_byte_with_ack>
    a3b8:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
    a3bc:	e0bffd17 	ldw	r2,-12(fp)
    a3c0:	1000211e 	bne	r2,zero,a448 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    a3c4:	e0bffe04 	addi	r2,fp,-8
    a3c8:	e13fff17 	ldw	r4,-4(fp)
    a3cc:	100b883a 	mov	r5,r2
    a3d0:	000a6580 	call	a658 <alt_up_ps2_read_data_byte_timeout>
    a3d4:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
    a3d8:	e0bffd17 	ldw	r2,-12(fp)
    a3dc:	10001a1e 	bne	r2,zero,a448 <alt_up_ps2_init+0xb0>
    a3e0:	e0bffe03 	ldbu	r2,-8(fp)
    a3e4:	10803fcc 	andi	r2,r2,255
    a3e8:	10802a98 	cmpnei	r2,r2,170
    a3ec:	1000161e 	bne	r2,zero,a448 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    a3f0:	e0bffe04 	addi	r2,fp,-8
    a3f4:	e13fff17 	ldw	r4,-4(fp)
    a3f8:	100b883a 	mov	r5,r2
    a3fc:	000a6580 	call	a658 <alt_up_ps2_read_data_byte_timeout>
    a400:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
    a404:	e0bffd17 	ldw	r2,-12(fp)
    a408:	10bfe318 	cmpnei	r2,r2,-116
    a40c:	1000041e 	bne	r2,zero,a420 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    a410:	e0bfff17 	ldw	r2,-4(fp)
    a414:	00c00044 	movi	r3,1
    a418:	10c00d15 	stw	r3,52(r2)
    a41c:	00000a06 	br	a448 <alt_up_ps2_init+0xb0>
			}
			else if (status == 0 && byte == 0x00)
    a420:	e0bffd17 	ldw	r2,-12(fp)
    a424:	1000081e 	bne	r2,zero,a448 <alt_up_ps2_init+0xb0>
    a428:	e0bffe03 	ldbu	r2,-8(fp)
    a42c:	10803fcc 	andi	r2,r2,255
    a430:	1000051e 	bne	r2,zero,a448 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    a434:	e0bfff17 	ldw	r2,-4(fp)
    a438:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    a43c:	e13fff17 	ldw	r4,-4(fp)
    a440:	01403d04 	movi	r5,244
    a444:	000a5100 	call	a510 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    a448:	e037883a 	mov	sp,fp
    a44c:	dfc00117 	ldw	ra,4(sp)
    a450:	df000017 	ldw	fp,0(sp)
    a454:	dec00204 	addi	sp,sp,8
    a458:	f800283a 	ret

0000a45c <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
    a45c:	defffd04 	addi	sp,sp,-12
    a460:	df000215 	stw	fp,8(sp)
    a464:	df000204 	addi	fp,sp,8
    a468:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    a46c:	e0bfff17 	ldw	r2,-4(fp)
    a470:	10800a17 	ldw	r2,40(r2)
    a474:	10800104 	addi	r2,r2,4
    a478:	10800037 	ldwio	r2,0(r2)
    a47c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    a480:	e0bffe17 	ldw	r2,-8(fp)
    a484:	10800054 	ori	r2,r2,1
    a488:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    a48c:	e0bfff17 	ldw	r2,-4(fp)
    a490:	10800a17 	ldw	r2,40(r2)
    a494:	10800104 	addi	r2,r2,4
    a498:	1007883a 	mov	r3,r2
    a49c:	e0bffe17 	ldw	r2,-8(fp)
    a4a0:	18800035 	stwio	r2,0(r3)
}
    a4a4:	e037883a 	mov	sp,fp
    a4a8:	df000017 	ldw	fp,0(sp)
    a4ac:	dec00104 	addi	sp,sp,4
    a4b0:	f800283a 	ret

0000a4b4 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
    a4b4:	defffd04 	addi	sp,sp,-12
    a4b8:	df000215 	stw	fp,8(sp)
    a4bc:	df000204 	addi	fp,sp,8
    a4c0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    a4c4:	e0bfff17 	ldw	r2,-4(fp)
    a4c8:	10800a17 	ldw	r2,40(r2)
    a4cc:	10800104 	addi	r2,r2,4
    a4d0:	10800037 	ldwio	r2,0(r2)
    a4d4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    a4d8:	e0fffe17 	ldw	r3,-8(fp)
    a4dc:	00bfff84 	movi	r2,-2
    a4e0:	1884703a 	and	r2,r3,r2
    a4e4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    a4e8:	e0bfff17 	ldw	r2,-4(fp)
    a4ec:	10800a17 	ldw	r2,40(r2)
    a4f0:	10800104 	addi	r2,r2,4
    a4f4:	1007883a 	mov	r3,r2
    a4f8:	e0bffe17 	ldw	r2,-8(fp)
    a4fc:	18800035 	stwio	r2,0(r3)
}
    a500:	e037883a 	mov	sp,fp
    a504:	df000017 	ldw	fp,0(sp)
    a508:	dec00104 	addi	sp,sp,4
    a50c:	f800283a 	ret

0000a510 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
    a510:	defffb04 	addi	sp,sp,-20
    a514:	dfc00415 	stw	ra,16(sp)
    a518:	df000315 	stw	fp,12(sp)
    a51c:	df000304 	addi	fp,sp,12
    a520:	e13ffe15 	stw	r4,-8(fp)
    a524:	2805883a 	mov	r2,r5
    a528:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    a52c:	e0bffe17 	ldw	r2,-8(fp)
    a530:	10800a17 	ldw	r2,40(r2)
    a534:	1007883a 	mov	r3,r2
    a538:	e0bfff03 	ldbu	r2,-4(fp)
    a53c:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    a540:	e0bffe17 	ldw	r2,-8(fp)
    a544:	10800a17 	ldw	r2,40(r2)
    a548:	10800104 	addi	r2,r2,4
    a54c:	10800037 	ldwio	r2,0(r2)
    a550:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
    a554:	e13ffd17 	ldw	r4,-12(fp)
    a558:	000a2d40 	call	a2d4 <read_CE_bit>
    a55c:	10803fcc 	andi	r2,r2,255
    a560:	10000226 	beq	r2,zero,a56c <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
    a564:	00bffec4 	movi	r2,-5
    a568:	00000106 	br	a570 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
    a56c:	0005883a 	mov	r2,zero
}
    a570:	e037883a 	mov	sp,fp
    a574:	dfc00117 	ldw	ra,4(sp)
    a578:	df000017 	ldw	fp,0(sp)
    a57c:	dec00204 	addi	sp,sp,8
    a580:	f800283a 	ret

0000a584 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    a584:	defffc04 	addi	sp,sp,-16
    a588:	dfc00315 	stw	ra,12(sp)
    a58c:	df000215 	stw	fp,8(sp)
    a590:	df000204 	addi	fp,sp,8
    a594:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
    a598:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
    a59c:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    a5a0:	e0bffe44 	addi	r2,fp,-7
    a5a4:	e13fff17 	ldw	r4,-4(fp)
    a5a8:	100b883a 	mov	r5,r2
    a5ac:	000a6580 	call	a658 <alt_up_ps2_read_data_byte_timeout>
    a5b0:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
    a5b4:	e0bffe03 	ldbu	r2,-8(fp)
    a5b8:	1000061e 	bne	r2,zero,a5d4 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
    a5bc:	e0bffe43 	ldbu	r2,-7(fp)
    a5c0:	10803fcc 	andi	r2,r2,255
    a5c4:	10803e98 	cmpnei	r2,r2,250
    a5c8:	1000041e 	bne	r2,zero,a5dc <alt_up_ps2_wait_for_ack+0x58>
				return 0;
    a5cc:	0005883a 	mov	r2,zero
    a5d0:	00000306 	br	a5e0 <alt_up_ps2_wait_for_ack+0x5c>
		}
		else 
		{
			return status;
    a5d4:	e0bffe03 	ldbu	r2,-8(fp)
    a5d8:	00000106 	br	a5e0 <alt_up_ps2_wait_for_ack+0x5c>
		}
	} while(1);
    a5dc:	003ff006 	br	a5a0 <alt_up_ps2_wait_for_ack+0x1c>
	return -ETIMEDOUT;
}
    a5e0:	e037883a 	mov	sp,fp
    a5e4:	dfc00117 	ldw	ra,4(sp)
    a5e8:	df000017 	ldw	fp,0(sp)
    a5ec:	dec00204 	addi	sp,sp,8
    a5f0:	f800283a 	ret

0000a5f4 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    a5f4:	defffa04 	addi	sp,sp,-24
    a5f8:	dfc00515 	stw	ra,20(sp)
    a5fc:	df000415 	stw	fp,16(sp)
    a600:	df000404 	addi	fp,sp,16
    a604:	e13ffe15 	stw	r4,-8(fp)
    a608:	2805883a 	mov	r2,r5
    a60c:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    a610:	e0bfff03 	ldbu	r2,-4(fp)
    a614:	e13ffe17 	ldw	r4,-8(fp)
    a618:	100b883a 	mov	r5,r2
    a61c:	000a5100 	call	a510 <alt_up_ps2_write_data_byte>
    a620:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
    a624:	e0bffc17 	ldw	r2,-16(fp)
    a628:	10000226 	beq	r2,zero,a634 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
    a62c:	e0bffc17 	ldw	r2,-16(fp)
    a630:	00000406 	br	a644 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    a634:	e13ffe17 	ldw	r4,-8(fp)
    a638:	000a5840 	call	a584 <alt_up_ps2_wait_for_ack>
    a63c:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
    a640:	e0bffd17 	ldw	r2,-12(fp)
}
    a644:	e037883a 	mov	sp,fp
    a648:	dfc00117 	ldw	ra,4(sp)
    a64c:	df000017 	ldw	fp,0(sp)
    a650:	dec00204 	addi	sp,sp,8
    a654:	f800283a 	ret

0000a658 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    a658:	defffa04 	addi	sp,sp,-24
    a65c:	dfc00515 	stw	ra,20(sp)
    a660:	df000415 	stw	fp,16(sp)
    a664:	df000404 	addi	fp,sp,16
    a668:	e13ffe15 	stw	r4,-8(fp)
    a66c:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
    a670:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
    a674:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
    a678:	e0bffc17 	ldw	r2,-16(fp)
    a67c:	10800044 	addi	r2,r2,1
    a680:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    a684:	e0bffe17 	ldw	r2,-8(fp)
    a688:	10800a17 	ldw	r2,40(r2)
    a68c:	10800037 	ldwio	r2,0(r2)
    a690:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
    a694:	e13ffd17 	ldw	r4,-12(fp)
    a698:	000a3380 	call	a338 <read_data_valid>
    a69c:	10803fcc 	andi	r2,r2,255
    a6a0:	10000726 	beq	r2,zero,a6c0 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
    a6a4:	e13ffd17 	ldw	r4,-12(fp)
    a6a8:	000a36c0 	call	a36c <read_data_byte>
    a6ac:	1007883a 	mov	r3,r2
    a6b0:	e0bfff17 	ldw	r2,-4(fp)
    a6b4:	10c00005 	stb	r3,0(r2)
			return 0;
    a6b8:	0005883a 	mov	r2,zero
    a6bc:	00000a06 	br	a6e8 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    a6c0:	e0bffe17 	ldw	r2,-8(fp)
    a6c4:	10800c17 	ldw	r2,48(r2)
    a6c8:	10000626 	beq	r2,zero,a6e4 <alt_up_ps2_read_data_byte_timeout+0x8c>
    a6cc:	e0bffe17 	ldw	r2,-8(fp)
    a6d0:	10c00c17 	ldw	r3,48(r2)
    a6d4:	e0bffc17 	ldw	r2,-16(fp)
    a6d8:	1880022e 	bgeu	r3,r2,a6e4 <alt_up_ps2_read_data_byte_timeout+0x8c>
		{
			return -ETIMEDOUT;
    a6dc:	00bfe304 	movi	r2,-116
    a6e0:	00000106 	br	a6e8 <alt_up_ps2_read_data_byte_timeout+0x90>
		}
	} while (1);
    a6e4:	003fe406 	br	a678 <alt_up_ps2_read_data_byte_timeout+0x20>
}
    a6e8:	e037883a 	mov	sp,fp
    a6ec:	dfc00117 	ldw	ra,4(sp)
    a6f0:	df000017 	ldw	fp,0(sp)
    a6f4:	dec00204 	addi	sp,sp,8
    a6f8:	f800283a 	ret

0000a6fc <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
    a6fc:	defffb04 	addi	sp,sp,-20
    a700:	dfc00415 	stw	ra,16(sp)
    a704:	df000315 	stw	fp,12(sp)
    a708:	df000304 	addi	fp,sp,12
    a70c:	e13ffe15 	stw	r4,-8(fp)
    a710:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
    a714:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    a718:	e0bffe17 	ldw	r2,-8(fp)
    a71c:	10800a17 	ldw	r2,40(r2)
    a720:	10800037 	ldwio	r2,0(r2)
    a724:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
    a728:	e13ffd17 	ldw	r4,-12(fp)
    a72c:	000a3380 	call	a338 <read_data_valid>
    a730:	10803fcc 	andi	r2,r2,255
    a734:	10000726 	beq	r2,zero,a754 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
    a738:	e13ffd17 	ldw	r4,-12(fp)
    a73c:	000a36c0 	call	a36c <read_data_byte>
    a740:	1007883a 	mov	r3,r2
    a744:	e0bfff17 	ldw	r2,-4(fp)
    a748:	10c00005 	stb	r3,0(r2)
		return 0;
    a74c:	0005883a 	mov	r2,zero
    a750:	00000106 	br	a758 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
    a754:	00bfffc4 	movi	r2,-1
}
    a758:	e037883a 	mov	sp,fp
    a75c:	dfc00117 	ldw	ra,4(sp)
    a760:	df000017 	ldw	fp,0(sp)
    a764:	dec00204 	addi	sp,sp,8
    a768:	f800283a 	ret

0000a76c <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
    a76c:	defffb04 	addi	sp,sp,-20
    a770:	dfc00415 	stw	ra,16(sp)
    a774:	df000315 	stw	fp,12(sp)
    a778:	df000304 	addi	fp,sp,12
    a77c:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
    a780:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
    a784:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    a788:	e0bfff17 	ldw	r2,-4(fp)
    a78c:	10800a17 	ldw	r2,40(r2)
    a790:	10800037 	ldwio	r2,0(r2)
    a794:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
    a798:	e13ffe17 	ldw	r4,-8(fp)
    a79c:	000a3080 	call	a308 <read_num_bytes_available>
    a7a0:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
    a7a4:	e0bffd0b 	ldhu	r2,-12(fp)
    a7a8:	103ff71e 	bne	r2,zero,a788 <alt_up_ps2_clear_fifo+0x1c>
}
    a7ac:	e037883a 	mov	sp,fp
    a7b0:	dfc00117 	ldw	ra,4(sp)
    a7b4:	df000017 	ldw	fp,0(sp)
    a7b8:	dec00204 	addi	sp,sp,8
    a7bc:	f800283a 	ret

0000a7c0 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    a7c0:	defff804 	addi	sp,sp,-32
    a7c4:	dfc00715 	stw	ra,28(sp)
    a7c8:	df000615 	stw	fp,24(sp)
    a7cc:	df000604 	addi	fp,sp,24
    a7d0:	e13ffd15 	stw	r4,-12(fp)
    a7d4:	e17ffe15 	stw	r5,-8(fp)
    a7d8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    a7dc:	e0bffd17 	ldw	r2,-12(fp)
    a7e0:	10800017 	ldw	r2,0(r2)
    a7e4:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
    a7e8:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
    a7ec:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
    a7f0:	e0fffc17 	ldw	r3,-16(fp)
    a7f4:	e0bfff17 	ldw	r2,-4(fp)
    a7f8:	18bffd16 	blt	r3,r2,a7f0 <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
    a7fc:	e0bffe17 	ldw	r2,-8(fp)
    a800:	10c00044 	addi	r3,r2,1
    a804:	e0fffe15 	stw	r3,-8(fp)
    a808:	e13ffa17 	ldw	r4,-24(fp)
    a80c:	100b883a 	mov	r5,r2
    a810:	000a6580 	call	a658 <alt_up_ps2_read_data_byte_timeout>
    a814:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
    a818:	e0bffb17 	ldw	r2,-20(fp)
    a81c:	10000226 	beq	r2,zero,a828 <alt_up_ps2_read_fd+0x68>
			return count;
    a820:	e0bffc17 	ldw	r2,-16(fp)
    a824:	00000406 	br	a838 <alt_up_ps2_read_fd+0x78>
		count++;
    a828:	e0bffc17 	ldw	r2,-16(fp)
    a82c:	10800044 	addi	r2,r2,1
    a830:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
    a834:	e0bffc17 	ldw	r2,-16(fp)
}
    a838:	e037883a 	mov	sp,fp
    a83c:	dfc00117 	ldw	ra,4(sp)
    a840:	df000017 	ldw	fp,0(sp)
    a844:	dec00204 	addi	sp,sp,8
    a848:	f800283a 	ret

0000a84c <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    a84c:	defff804 	addi	sp,sp,-32
    a850:	dfc00715 	stw	ra,28(sp)
    a854:	df000615 	stw	fp,24(sp)
    a858:	df000604 	addi	fp,sp,24
    a85c:	e13ffd15 	stw	r4,-12(fp)
    a860:	e17ffe15 	stw	r5,-8(fp)
    a864:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    a868:	e0bffd17 	ldw	r2,-12(fp)
    a86c:	10800017 	ldw	r2,0(r2)
    a870:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
    a874:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
    a878:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
    a87c:	00001006 	br	a8c0 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    a880:	e0bffe17 	ldw	r2,-8(fp)
    a884:	10c00044 	addi	r3,r2,1
    a888:	e0fffe15 	stw	r3,-8(fp)
    a88c:	10800003 	ldbu	r2,0(r2)
    a890:	10803fcc 	andi	r2,r2,255
    a894:	e13ffb17 	ldw	r4,-20(fp)
    a898:	100b883a 	mov	r5,r2
    a89c:	000a5100 	call	a510 <alt_up_ps2_write_data_byte>
    a8a0:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
    a8a4:	e0bffc17 	ldw	r2,-16(fp)
    a8a8:	10000226 	beq	r2,zero,a8b4 <alt_up_ps2_write_fd+0x68>
			return count;
    a8ac:	e0bffa17 	ldw	r2,-24(fp)
    a8b0:	00000706 	br	a8d0 <alt_up_ps2_write_fd+0x84>
		count++;
    a8b4:	e0bffa17 	ldw	r2,-24(fp)
    a8b8:	10800044 	addi	r2,r2,1
    a8bc:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    a8c0:	e0fffa17 	ldw	r3,-24(fp)
    a8c4:	e0bfff17 	ldw	r2,-4(fp)
    a8c8:	18bfed16 	blt	r3,r2,a880 <alt_up_ps2_write_fd+0x34>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
    a8cc:	e0bffa17 	ldw	r2,-24(fp)
}
    a8d0:	e037883a 	mov	sp,fp
    a8d4:	dfc00117 	ldw	ra,4(sp)
    a8d8:	df000017 	ldw	fp,0(sp)
    a8dc:	dec00204 	addi	sp,sp,8
    a8e0:	f800283a 	ret

0000a8e4 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    a8e4:	defffc04 	addi	sp,sp,-16
    a8e8:	dfc00315 	stw	ra,12(sp)
    a8ec:	df000215 	stw	fp,8(sp)
    a8f0:	df000204 	addi	fp,sp,8
    a8f4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    a8f8:	e13fff17 	ldw	r4,-4(fp)
    a8fc:	01400074 	movhi	r5,1
    a900:	2947a904 	addi	r5,r5,7844
    a904:	000c2bc0 	call	c2bc <alt_find_dev>
    a908:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    a90c:	e0bffe17 	ldw	r2,-8(fp)
}
    a910:	e037883a 	mov	sp,fp
    a914:	dfc00117 	ldw	ra,4(sp)
    a918:	df000017 	ldw	fp,0(sp)
    a91c:	dec00204 	addi	sp,sp,8
    a920:	f800283a 	ret

0000a924 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
    a924:	defffd04 	addi	sp,sp,-12
    a928:	df000215 	stw	fp,8(sp)
    a92c:	df000204 	addi	fp,sp,8
    a930:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    a934:	e0bfff17 	ldw	r2,-4(fp)
    a938:	10800a17 	ldw	r2,40(r2)
    a93c:	10800104 	addi	r2,r2,4
    a940:	10800037 	ldwio	r2,0(r2)
    a944:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
    a948:	e0bffe17 	ldw	r2,-8(fp)
    a94c:	10800054 	ori	r2,r2,1
    a950:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    a954:	e0bfff17 	ldw	r2,-4(fp)
    a958:	10800a17 	ldw	r2,40(r2)
    a95c:	10800104 	addi	r2,r2,4
    a960:	1007883a 	mov	r3,r2
    a964:	e0bffe17 	ldw	r2,-8(fp)
    a968:	18800035 	stwio	r2,0(r3)
}
    a96c:	e037883a 	mov	sp,fp
    a970:	df000017 	ldw	fp,0(sp)
    a974:	dec00104 	addi	sp,sp,4
    a978:	f800283a 	ret

0000a97c <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
    a97c:	defffd04 	addi	sp,sp,-12
    a980:	df000215 	stw	fp,8(sp)
    a984:	df000204 	addi	fp,sp,8
    a988:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    a98c:	e0bfff17 	ldw	r2,-4(fp)
    a990:	10800a17 	ldw	r2,40(r2)
    a994:	10800104 	addi	r2,r2,4
    a998:	10800037 	ldwio	r2,0(r2)
    a99c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
    a9a0:	e0fffe17 	ldw	r3,-8(fp)
    a9a4:	00bfff84 	movi	r2,-2
    a9a8:	1884703a 	and	r2,r3,r2
    a9ac:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    a9b0:	e0bfff17 	ldw	r2,-4(fp)
    a9b4:	10800a17 	ldw	r2,40(r2)
    a9b8:	10800104 	addi	r2,r2,4
    a9bc:	1007883a 	mov	r3,r2
    a9c0:	e0bffe17 	ldw	r2,-8(fp)
    a9c4:	18800035 	stwio	r2,0(r3)
}
    a9c8:	e037883a 	mov	sp,fp
    a9cc:	df000017 	ldw	fp,0(sp)
    a9d0:	dec00104 	addi	sp,sp,4
    a9d4:	f800283a 	ret

0000a9d8 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
    a9d8:	defffd04 	addi	sp,sp,-12
    a9dc:	df000215 	stw	fp,8(sp)
    a9e0:	df000204 	addi	fp,sp,8
    a9e4:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    a9e8:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    a9ec:	e0bfff17 	ldw	r2,-4(fp)
    a9f0:	10800a17 	ldw	r2,40(r2)
    a9f4:	10800084 	addi	r2,r2,2
    a9f8:	1080002b 	ldhuio	r2,0(r2)
    a9fc:	10bfffcc 	andi	r2,r2,65535
    aa00:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
    aa04:	e0bffe0b 	ldhu	r2,-8(fp)
}
    aa08:	e037883a 	mov	sp,fp
    aa0c:	df000017 	ldw	fp,0(sp)
    aa10:	dec00104 	addi	sp,sp,4
    aa14:	f800283a 	ret

0000aa18 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
    aa18:	defffd04 	addi	sp,sp,-12
    aa1c:	df000215 	stw	fp,8(sp)
    aa20:	df000204 	addi	fp,sp,8
    aa24:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    aa28:	e0bfff17 	ldw	r2,-4(fp)
    aa2c:	10800a17 	ldw	r2,40(r2)
    aa30:	10800104 	addi	r2,r2,4
    aa34:	10800037 	ldwio	r2,0(r2)
    aa38:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
    aa3c:	e0bffe17 	ldw	r2,-8(fp)
    aa40:	1004d43a 	srli	r2,r2,16
}
    aa44:	e037883a 	mov	sp,fp
    aa48:	df000017 	ldw	fp,0(sp)
    aa4c:	dec00104 	addi	sp,sp,4
    aa50:	f800283a 	ret

0000aa54 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
    aa54:	defffd04 	addi	sp,sp,-12
    aa58:	df000215 	stw	fp,8(sp)
    aa5c:	df000204 	addi	fp,sp,8
    aa60:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
    aa64:	e0bfff17 	ldw	r2,-4(fp)
    aa68:	1080800c 	andi	r2,r2,512
    aa6c:	1004d27a 	srli	r2,r2,9
    aa70:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
    aa74:	e0bffe17 	ldw	r2,-8(fp)
    aa78:	10000226 	beq	r2,zero,aa84 <alt_up_rs232_check_parity+0x30>
    aa7c:	00bfffc4 	movi	r2,-1
    aa80:	00000106 	br	aa88 <alt_up_rs232_check_parity+0x34>
    aa84:	0005883a 	mov	r2,zero
}
    aa88:	e037883a 	mov	sp,fp
    aa8c:	df000017 	ldw	fp,0(sp)
    aa90:	dec00104 	addi	sp,sp,4
    aa94:	f800283a 	ret

0000aa98 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
    aa98:	defffd04 	addi	sp,sp,-12
    aa9c:	df000215 	stw	fp,8(sp)
    aaa0:	df000204 	addi	fp,sp,8
    aaa4:	e13ffe15 	stw	r4,-8(fp)
    aaa8:	2805883a 	mov	r2,r5
    aaac:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    aab0:	e0bffe17 	ldw	r2,-8(fp)
    aab4:	10800a17 	ldw	r2,40(r2)
    aab8:	1007883a 	mov	r3,r2
    aabc:	e0bfff03 	ldbu	r2,-4(fp)
    aac0:	18800035 	stwio	r2,0(r3)
	return 0;
    aac4:	0005883a 	mov	r2,zero
}
    aac8:	e037883a 	mov	sp,fp
    aacc:	df000017 	ldw	fp,0(sp)
    aad0:	dec00104 	addi	sp,sp,4
    aad4:	f800283a 	ret

0000aad8 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    aad8:	defffa04 	addi	sp,sp,-24
    aadc:	dfc00515 	stw	ra,20(sp)
    aae0:	df000415 	stw	fp,16(sp)
    aae4:	df000404 	addi	fp,sp,16
    aae8:	e13ffd15 	stw	r4,-12(fp)
    aaec:	e17ffe15 	stw	r5,-8(fp)
    aaf0:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    aaf4:	e0bffd17 	ldw	r2,-12(fp)
    aaf8:	10800a17 	ldw	r2,40(r2)
    aafc:	10800037 	ldwio	r2,0(r2)
    ab00:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    ab04:	e0bffc17 	ldw	r2,-16(fp)
    ab08:	1007883a 	mov	r3,r2
    ab0c:	e0bffe17 	ldw	r2,-8(fp)
    ab10:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    ab14:	e13ffc17 	ldw	r4,-16(fp)
    ab18:	000aa540 	call	aa54 <alt_up_rs232_check_parity>
    ab1c:	1007883a 	mov	r3,r2
    ab20:	e0bfff17 	ldw	r2,-4(fp)
    ab24:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    ab28:	e0bffc17 	ldw	r2,-16(fp)
    ab2c:	10a0000c 	andi	r2,r2,32768
    ab30:	1004d3fa 	srli	r2,r2,15
    ab34:	10bfffc4 	addi	r2,r2,-1
}
    ab38:	e037883a 	mov	sp,fp
    ab3c:	dfc00117 	ldw	ra,4(sp)
    ab40:	df000017 	ldw	fp,0(sp)
    ab44:	dec00204 	addi	sp,sp,8
    ab48:	f800283a 	ret

0000ab4c <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    ab4c:	defff804 	addi	sp,sp,-32
    ab50:	dfc00715 	stw	ra,28(sp)
    ab54:	df000615 	stw	fp,24(sp)
    ab58:	df000604 	addi	fp,sp,24
    ab5c:	e13ffd15 	stw	r4,-12(fp)
    ab60:	e17ffe15 	stw	r5,-8(fp)
    ab64:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    ab68:	e0bffd17 	ldw	r2,-12(fp)
    ab6c:	10800017 	ldw	r2,0(r2)
    ab70:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    ab74:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    ab78:	00000e06 	br	abb4 <alt_up_rs232_read_fd+0x68>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
    ab7c:	e0bffe17 	ldw	r2,-8(fp)
    ab80:	10c00044 	addi	r3,r2,1
    ab84:	e0fffe15 	stw	r3,-8(fp)
    ab88:	e0fffc04 	addi	r3,fp,-16
    ab8c:	e13ffb17 	ldw	r4,-20(fp)
    ab90:	100b883a 	mov	r5,r2
    ab94:	180d883a 	mov	r6,r3
    ab98:	000aad80 	call	aad8 <alt_up_rs232_read_data>
    ab9c:	1000041e 	bne	r2,zero,abb0 <alt_up_rs232_read_fd+0x64>
			count++;
    aba0:	e0bffa17 	ldw	r2,-24(fp)
    aba4:	10800044 	addi	r2,r2,1
    aba8:	e0bffa15 	stw	r2,-24(fp)
    abac:	00000106 	br	abb4 <alt_up_rs232_read_fd+0x68>
		else
			break;
    abb0:	00000406 	br	abc4 <alt_up_rs232_read_fd+0x78>
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    abb4:	e0bfff17 	ldw	r2,-4(fp)
    abb8:	10ffffc4 	addi	r3,r2,-1
    abbc:	e0ffff15 	stw	r3,-4(fp)
    abc0:	103fee1e 	bne	r2,zero,ab7c <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
    abc4:	e0bffa17 	ldw	r2,-24(fp)
}
    abc8:	e037883a 	mov	sp,fp
    abcc:	dfc00117 	ldw	ra,4(sp)
    abd0:	df000017 	ldw	fp,0(sp)
    abd4:	dec00204 	addi	sp,sp,8
    abd8:	f800283a 	ret

0000abdc <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    abdc:	defff904 	addi	sp,sp,-28
    abe0:	dfc00615 	stw	ra,24(sp)
    abe4:	df000515 	stw	fp,20(sp)
    abe8:	df000504 	addi	fp,sp,20
    abec:	e13ffd15 	stw	r4,-12(fp)
    abf0:	e17ffe15 	stw	r5,-8(fp)
    abf4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    abf8:	e0bffd17 	ldw	r2,-12(fp)
    abfc:	10800017 	ldw	r2,0(r2)
    ac00:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    ac04:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    ac08:	00000f06 	br	ac48 <alt_up_rs232_write_fd+0x6c>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    ac0c:	e0bffe17 	ldw	r2,-8(fp)
    ac10:	10800003 	ldbu	r2,0(r2)
    ac14:	10803fcc 	andi	r2,r2,255
    ac18:	e13ffc17 	ldw	r4,-16(fp)
    ac1c:	100b883a 	mov	r5,r2
    ac20:	000aa980 	call	aa98 <alt_up_rs232_write_data>
    ac24:	1000071e 	bne	r2,zero,ac44 <alt_up_rs232_write_fd+0x68>
		{
			count++;
    ac28:	e0bffb17 	ldw	r2,-20(fp)
    ac2c:	10800044 	addi	r2,r2,1
    ac30:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
    ac34:	e0bffe17 	ldw	r2,-8(fp)
    ac38:	10800044 	addi	r2,r2,1
    ac3c:	e0bffe15 	stw	r2,-8(fp)
    ac40:	00000106 	br	ac48 <alt_up_rs232_write_fd+0x6c>
		}
		else
			break;
    ac44:	00000406 	br	ac58 <alt_up_rs232_write_fd+0x7c>

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    ac48:	e0bfff17 	ldw	r2,-4(fp)
    ac4c:	10ffffc4 	addi	r3,r2,-1
    ac50:	e0ffff15 	stw	r3,-4(fp)
    ac54:	103fed1e 	bne	r2,zero,ac0c <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
    ac58:	e0bffb17 	ldw	r2,-20(fp)
}
    ac5c:	e037883a 	mov	sp,fp
    ac60:	dfc00117 	ldw	ra,4(sp)
    ac64:	df000017 	ldw	fp,0(sp)
    ac68:	dec00204 	addi	sp,sp,8
    ac6c:	f800283a 	ret

0000ac70 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    ac70:	defffc04 	addi	sp,sp,-16
    ac74:	dfc00315 	stw	ra,12(sp)
    ac78:	df000215 	stw	fp,8(sp)
    ac7c:	df000204 	addi	fp,sp,8
    ac80:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    ac84:	e13fff17 	ldw	r4,-4(fp)
    ac88:	01400074 	movhi	r5,1
    ac8c:	2947a904 	addi	r5,r5,7844
    ac90:	000c2bc0 	call	c2bc <alt_find_dev>
    ac94:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    ac98:	e0bffe17 	ldw	r2,-8(fp)
}
    ac9c:	e037883a 	mov	sp,fp
    aca0:	dfc00117 	ldw	ra,4(sp)
    aca4:	df000017 	ldw	fp,0(sp)
    aca8:	dec00204 	addi	sp,sp,8
    acac:	f800283a 	ret

0000acb0 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
    acb0:	defffc04 	addi	sp,sp,-16
    acb4:	dfc00315 	stw	ra,12(sp)
    acb8:	df000215 	stw	fp,8(sp)
    acbc:	df000204 	addi	fp,sp,8
    acc0:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
    acc4:	e0bfff17 	ldw	r2,-4(fp)
    acc8:	10800217 	ldw	r2,8(r2)
    accc:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
    acd0:	00000b06 	br	ad00 <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
    acd4:	e13ffe17 	ldw	r4,-8(fp)
    acd8:	01400074 	movhi	r5,1
    acdc:	29400b04 	addi	r5,r5,44
    ace0:	000d5f00 	call	d5f0 <strcmp>
    ace4:	1000031e 	bne	r2,zero,acf4 <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
    ace8:	e0bffe17 	ldw	r2,-8(fp)
    acec:	10000005 	stb	zero,0(r2)
			break;
    acf0:	00000906 	br	ad18 <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
    acf4:	e0bffe17 	ldw	r2,-8(fp)
    acf8:	10800044 	addi	r2,r2,1
    acfc:	e0bffe15 	stw	r2,-8(fp)
    ad00:	e0bffe17 	ldw	r2,-8(fp)
    ad04:	10800003 	ldbu	r2,0(r2)
    ad08:	10803fcc 	andi	r2,r2,255
    ad0c:	1080201c 	xori	r2,r2,128
    ad10:	10bfe004 	addi	r2,r2,-128
    ad14:	103fef1e 	bne	r2,zero,acd4 <alt_up_char_buffer_init+0x24>
			(*name) = '\0';
			break;
		}
	}
	
	return;
    ad18:	0001883a 	nop
}
    ad1c:	e037883a 	mov	sp,fp
    ad20:	dfc00117 	ldw	ra,4(sp)
    ad24:	df000017 	ldw	fp,0(sp)
    ad28:	dec00204 	addi	sp,sp,8
    ad2c:	f800283a 	ret

0000ad30 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
    ad30:	defffc04 	addi	sp,sp,-16
    ad34:	dfc00315 	stw	ra,12(sp)
    ad38:	df000215 	stw	fp,8(sp)
    ad3c:	df000204 	addi	fp,sp,8
    ad40:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
    ad44:	e13fff17 	ldw	r4,-4(fp)
    ad48:	01400074 	movhi	r5,1
    ad4c:	2947a904 	addi	r5,r5,7844
    ad50:	000c2bc0 	call	c2bc <alt_find_dev>
    ad54:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    ad58:	e0bffe17 	ldw	r2,-8(fp)
}
    ad5c:	e037883a 	mov	sp,fp
    ad60:	dfc00117 	ldw	ra,4(sp)
    ad64:	df000017 	ldw	fp,0(sp)
    ad68:	dec00204 	addi	sp,sp,8
    ad6c:	f800283a 	ret

0000ad70 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
    ad70:	defffa04 	addi	sp,sp,-24
    ad74:	df000515 	stw	fp,20(sp)
    ad78:	df000504 	addi	fp,sp,20
    ad7c:	e13ffc15 	stw	r4,-16(fp)
    ad80:	2805883a 	mov	r2,r5
    ad84:	e1bffe15 	stw	r6,-8(fp)
    ad88:	e1ffff15 	stw	r7,-4(fp)
    ad8c:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    ad90:	e0bffc17 	ldw	r2,-16(fp)
    ad94:	10800c17 	ldw	r2,48(r2)
    ad98:	e0fffe17 	ldw	r3,-8(fp)
    ad9c:	1880042e 	bgeu	r3,r2,adb0 <alt_up_char_buffer_draw+0x40>
    ada0:	e0bffc17 	ldw	r2,-16(fp)
    ada4:	10800d17 	ldw	r2,52(r2)
    ada8:	e0ffff17 	ldw	r3,-4(fp)
    adac:	18800236 	bltu	r3,r2,adb8 <alt_up_char_buffer_draw+0x48>
		return -1;
    adb0:	00bfffc4 	movi	r2,-1
    adb4:	00001d06 	br	ae2c <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
    adb8:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
    adbc:	e0bffc17 	ldw	r2,-16(fp)
    adc0:	10c00f17 	ldw	r3,60(r2)
    adc4:	e0bffe17 	ldw	r2,-8(fp)
    adc8:	1884703a 	and	r2,r3,r2
    adcc:	e0fffc17 	ldw	r3,-16(fp)
    add0:	18c00e17 	ldw	r3,56(r3)
    add4:	10c4983a 	sll	r2,r2,r3
    add8:	e0fffb17 	ldw	r3,-20(fp)
    addc:	1884b03a 	or	r2,r3,r2
    ade0:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
    ade4:	e0bffc17 	ldw	r2,-16(fp)
    ade8:	10c01117 	ldw	r3,68(r2)
    adec:	e0bfff17 	ldw	r2,-4(fp)
    adf0:	1884703a 	and	r2,r3,r2
    adf4:	e0fffc17 	ldw	r3,-16(fp)
    adf8:	18c01017 	ldw	r3,64(r3)
    adfc:	10c4983a 	sll	r2,r2,r3
    ae00:	e0fffb17 	ldw	r3,-20(fp)
    ae04:	1884b03a 	or	r2,r3,r2
    ae08:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
    ae0c:	e0bffc17 	ldw	r2,-16(fp)
    ae10:	10c00b17 	ldw	r3,44(r2)
    ae14:	e0bffb17 	ldw	r2,-20(fp)
    ae18:	1885883a 	add	r2,r3,r2
    ae1c:	1007883a 	mov	r3,r2
    ae20:	e0bffd03 	ldbu	r2,-12(fp)
    ae24:	18800025 	stbio	r2,0(r3)

	return 0;
    ae28:	0005883a 	mov	r2,zero
}
    ae2c:	e037883a 	mov	sp,fp
    ae30:	df000017 	ldw	fp,0(sp)
    ae34:	dec00104 	addi	sp,sp,4
    ae38:	f800283a 	ret

0000ae3c <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
    ae3c:	defffa04 	addi	sp,sp,-24
    ae40:	df000515 	stw	fp,20(sp)
    ae44:	df000504 	addi	fp,sp,20
    ae48:	e13ffc15 	stw	r4,-16(fp)
    ae4c:	e17ffd15 	stw	r5,-12(fp)
    ae50:	e1bffe15 	stw	r6,-8(fp)
    ae54:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    ae58:	e0bffc17 	ldw	r2,-16(fp)
    ae5c:	10800c17 	ldw	r2,48(r2)
    ae60:	e0fffe17 	ldw	r3,-8(fp)
    ae64:	1880042e 	bgeu	r3,r2,ae78 <alt_up_char_buffer_string+0x3c>
    ae68:	e0bffc17 	ldw	r2,-16(fp)
    ae6c:	10800d17 	ldw	r2,52(r2)
    ae70:	e0ffff17 	ldw	r3,-4(fp)
    ae74:	18800236 	bltu	r3,r2,ae80 <alt_up_char_buffer_string+0x44>
		return -1;
    ae78:	00bfffc4 	movi	r2,-1
    ae7c:	00002b06 	br	af2c <alt_up_char_buffer_string+0xf0>
	
	unsigned int offset = 0;
    ae80:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
    ae84:	e0bffc17 	ldw	r2,-16(fp)
    ae88:	10801017 	ldw	r2,64(r2)
    ae8c:	1007883a 	mov	r3,r2
    ae90:	e0bfff17 	ldw	r2,-4(fp)
    ae94:	10c6983a 	sll	r3,r2,r3
    ae98:	e0bffe17 	ldw	r2,-8(fp)
    ae9c:	1885883a 	add	r2,r3,r2
    aea0:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
    aea4:	00001a06 	br	af10 <alt_up_char_buffer_string+0xd4>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
    aea8:	e0bffc17 	ldw	r2,-16(fp)
    aeac:	10c00b17 	ldw	r3,44(r2)
    aeb0:	e0bffb17 	ldw	r2,-20(fp)
    aeb4:	1885883a 	add	r2,r3,r2
    aeb8:	1007883a 	mov	r3,r2
    aebc:	e0bffd17 	ldw	r2,-12(fp)
    aec0:	10800003 	ldbu	r2,0(r2)
    aec4:	10803fcc 	andi	r2,r2,255
    aec8:	1080201c 	xori	r2,r2,128
    aecc:	10bfe004 	addi	r2,r2,-128
    aed0:	18800025 	stbio	r2,0(r3)
		++ptr;
    aed4:	e0bffd17 	ldw	r2,-12(fp)
    aed8:	10800044 	addi	r2,r2,1
    aedc:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
    aee0:	e0bffe17 	ldw	r2,-8(fp)
    aee4:	10800044 	addi	r2,r2,1
    aee8:	e0bffe15 	stw	r2,-8(fp)
    aeec:	e0bffc17 	ldw	r2,-16(fp)
    aef0:	10800c17 	ldw	r2,48(r2)
    aef4:	e0fffe17 	ldw	r3,-8(fp)
    aef8:	18800236 	bltu	r3,r2,af04 <alt_up_char_buffer_string+0xc8>
			return -1;
    aefc:	00bfffc4 	movi	r2,-1
    af00:	00000a06 	br	af2c <alt_up_char_buffer_string+0xf0>
		++offset;
    af04:	e0bffb17 	ldw	r2,-20(fp)
    af08:	10800044 	addi	r2,r2,1
    af0c:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
    af10:	e0bffd17 	ldw	r2,-12(fp)
    af14:	10800003 	ldbu	r2,0(r2)
    af18:	10803fcc 	andi	r2,r2,255
    af1c:	1080201c 	xori	r2,r2,128
    af20:	10bfe004 	addi	r2,r2,-128
    af24:	103fe01e 	bne	r2,zero,aea8 <alt_up_char_buffer_string+0x6c>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
    af28:	0005883a 	mov	r2,zero
}
    af2c:	e037883a 	mov	sp,fp
    af30:	df000017 	ldw	fp,0(sp)
    af34:	dec00104 	addi	sp,sp,4
    af38:	f800283a 	ret

0000af3c <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
    af3c:	defffe04 	addi	sp,sp,-8
    af40:	df000115 	stw	fp,4(sp)
    af44:	df000104 	addi	fp,sp,4
    af48:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
    af4c:	e0bfff17 	ldw	r2,-4(fp)
    af50:	10800a17 	ldw	r2,40(r2)
    af54:	10800084 	addi	r2,r2,2
    af58:	1007883a 	mov	r3,r2
    af5c:	00800044 	movi	r2,1
    af60:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
    af64:	0001883a 	nop
    af68:	e0bfff17 	ldw	r2,-4(fp)
    af6c:	10800a17 	ldw	r2,40(r2)
    af70:	10800084 	addi	r2,r2,2
    af74:	10800023 	ldbuio	r2,0(r2)
    af78:	10803fcc 	andi	r2,r2,255
    af7c:	1080004c 	andi	r2,r2,1
    af80:	103ff91e 	bne	r2,zero,af68 <alt_up_char_buffer_clear+0x2c>
	return 0;
    af84:	0005883a 	mov	r2,zero
}
    af88:	e037883a 	mov	sp,fp
    af8c:	df000017 	ldw	fp,0(sp)
    af90:	dec00104 	addi	sp,sp,4
    af94:	f800283a 	ret

0000af98 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
    af98:	defffc04 	addi	sp,sp,-16
    af9c:	dfc00315 	stw	ra,12(sp)
    afa0:	df000215 	stw	fp,8(sp)
    afa4:	df000204 	addi	fp,sp,8
    afa8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
    afac:	e13fff17 	ldw	r4,-4(fp)
    afb0:	01400074 	movhi	r5,1
    afb4:	2947a904 	addi	r5,r5,7844
    afb8:	000c2bc0 	call	c2bc <alt_find_dev>
    afbc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    afc0:	e0bffe17 	ldw	r2,-8(fp)
}
    afc4:	e037883a 	mov	sp,fp
    afc8:	dfc00117 	ldw	ra,4(sp)
    afcc:	df000017 	ldw	fp,0(sp)
    afd0:	dec00204 	addi	sp,sp,8
    afd4:	f800283a 	ret

0000afd8 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
    afd8:	defffa04 	addi	sp,sp,-24
    afdc:	df000515 	stw	fp,20(sp)
    afe0:	df000504 	addi	fp,sp,20
    afe4:	e13ffc15 	stw	r4,-16(fp)
    afe8:	e17ffd15 	stw	r5,-12(fp)
    afec:	e1bffe15 	stw	r6,-8(fp)
    aff0:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
    aff4:	e0bffc17 	ldw	r2,-16(fp)
    aff8:	10800f17 	ldw	r2,60(r2)
    affc:	e0fffe17 	ldw	r3,-8(fp)
    b000:	1880042e 	bgeu	r3,r2,b014 <alt_up_pixel_buffer_dma_draw+0x3c>
    b004:	e0bffc17 	ldw	r2,-16(fp)
    b008:	10801017 	ldw	r2,64(r2)
    b00c:	e0ffff17 	ldw	r3,-4(fp)
    b010:	18800236 	bltu	r3,r2,b01c <alt_up_pixel_buffer_dma_draw+0x44>
		return -1;
    b014:	00bfffc4 	movi	r2,-1
    b018:	00005006 	br	b15c <alt_up_pixel_buffer_dma_draw+0x184>

	unsigned int addr = 0;
    b01c:	e03ffb15 	stw	zero,-20(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    b020:	e0bffc17 	ldw	r2,-16(fp)
    b024:	10800d17 	ldw	r2,52(r2)
    b028:	1000151e 	bne	r2,zero,b080 <alt_up_pixel_buffer_dma_draw+0xa8>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
    b02c:	e0bffc17 	ldw	r2,-16(fp)
    b030:	10c01217 	ldw	r3,72(r2)
    b034:	e0bffe17 	ldw	r2,-8(fp)
    b038:	1884703a 	and	r2,r3,r2
    b03c:	e0fffc17 	ldw	r3,-16(fp)
    b040:	18c01117 	ldw	r3,68(r3)
    b044:	10c4983a 	sll	r2,r2,r3
    b048:	e0fffb17 	ldw	r3,-20(fp)
    b04c:	1885883a 	add	r2,r3,r2
    b050:	e0bffb15 	stw	r2,-20(fp)
		addr += ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
    b054:	e0bffc17 	ldw	r2,-16(fp)
    b058:	10c01417 	ldw	r3,80(r2)
    b05c:	e0bfff17 	ldw	r2,-4(fp)
    b060:	1884703a 	and	r2,r3,r2
    b064:	e0fffc17 	ldw	r3,-16(fp)
    b068:	18c01317 	ldw	r3,76(r3)
    b06c:	10c4983a 	sll	r2,r2,r3
    b070:	e0fffb17 	ldw	r3,-20(fp)
    b074:	1885883a 	add	r2,r3,r2
    b078:	e0bffb15 	stw	r2,-20(fp)
    b07c:	00001706 	br	b0dc <alt_up_pixel_buffer_dma_draw+0x104>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
    b080:	e0bffc17 	ldw	r2,-16(fp)
    b084:	10c01217 	ldw	r3,72(r2)
    b088:	e0bffe17 	ldw	r2,-8(fp)
    b08c:	1884703a 	and	r2,r3,r2
    b090:	e0fffc17 	ldw	r3,-16(fp)
    b094:	18c01117 	ldw	r3,68(r3)
    b098:	10c4983a 	sll	r2,r2,r3
    b09c:	e0fffb17 	ldw	r3,-20(fp)
    b0a0:	1885883a 	add	r2,r3,r2
    b0a4:	e0bffb15 	stw	r2,-20(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
    b0a8:	e0bffc17 	ldw	r2,-16(fp)
    b0ac:	10c01417 	ldw	r3,80(r2)
    b0b0:	e0bfff17 	ldw	r2,-4(fp)
    b0b4:	1886703a 	and	r3,r3,r2
    b0b8:	e0bffc17 	ldw	r2,-16(fp)
    b0bc:	10800f17 	ldw	r2,60(r2)
    b0c0:	1885383a 	mul	r2,r3,r2
    b0c4:	e0fffc17 	ldw	r3,-16(fp)
    b0c8:	18c01117 	ldw	r3,68(r3)
    b0cc:	10c4983a 	sll	r2,r2,r3
    b0d0:	e0fffb17 	ldw	r3,-20(fp)
    b0d4:	1885883a 	add	r2,r3,r2
    b0d8:	e0bffb15 	stw	r2,-20(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    b0dc:	e0bffc17 	ldw	r2,-16(fp)
    b0e0:	10800e17 	ldw	r2,56(r2)
    b0e4:	10800058 	cmpnei	r2,r2,1
    b0e8:	1000081e 	bne	r2,zero,b10c <alt_up_pixel_buffer_dma_draw+0x134>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    b0ec:	e0bffc17 	ldw	r2,-16(fp)
    b0f0:	10c00c17 	ldw	r3,48(r2)
    b0f4:	e0bffb17 	ldw	r2,-20(fp)
    b0f8:	1885883a 	add	r2,r3,r2
    b0fc:	1007883a 	mov	r3,r2
    b100:	e0bffd17 	ldw	r2,-12(fp)
    b104:	18800025 	stbio	r2,0(r3)
    b108:	00001306 	br	b158 <alt_up_pixel_buffer_dma_draw+0x180>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    b10c:	e0bffc17 	ldw	r2,-16(fp)
    b110:	10800e17 	ldw	r2,56(r2)
    b114:	10800098 	cmpnei	r2,r2,2
    b118:	1000081e 	bne	r2,zero,b13c <alt_up_pixel_buffer_dma_draw+0x164>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    b11c:	e0bffc17 	ldw	r2,-16(fp)
    b120:	10c00c17 	ldw	r3,48(r2)
    b124:	e0bffb17 	ldw	r2,-20(fp)
    b128:	1885883a 	add	r2,r3,r2
    b12c:	1007883a 	mov	r3,r2
    b130:	e0bffd17 	ldw	r2,-12(fp)
    b134:	1880002d 	sthio	r2,0(r3)
    b138:	00000706 	br	b158 <alt_up_pixel_buffer_dma_draw+0x180>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    b13c:	e0bffc17 	ldw	r2,-16(fp)
    b140:	10c00c17 	ldw	r3,48(r2)
    b144:	e0bffb17 	ldw	r2,-20(fp)
    b148:	1885883a 	add	r2,r3,r2
    b14c:	1007883a 	mov	r3,r2
    b150:	e0bffd17 	ldw	r2,-12(fp)
    b154:	18800035 	stwio	r2,0(r3)
	}

	return 0;
    b158:	0005883a 	mov	r2,zero
}
    b15c:	e037883a 	mov	sp,fp
    b160:	df000017 	ldw	fp,0(sp)
    b164:	dec00104 	addi	sp,sp,4
    b168:	f800283a 	ret

0000b16c <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
    b16c:	defffd04 	addi	sp,sp,-12
    b170:	df000215 	stw	fp,8(sp)
    b174:	df000204 	addi	fp,sp,8
    b178:	e13ffe15 	stw	r4,-8(fp)
    b17c:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
    b180:	e0bffe17 	ldw	r2,-8(fp)
    b184:	10800a17 	ldw	r2,40(r2)
    b188:	10800104 	addi	r2,r2,4
    b18c:	1007883a 	mov	r3,r2
    b190:	e0bfff17 	ldw	r2,-4(fp)
    b194:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
    b198:	e0bffe17 	ldw	r2,-8(fp)
    b19c:	10800a17 	ldw	r2,40(r2)
    b1a0:	10800104 	addi	r2,r2,4
    b1a4:	10800037 	ldwio	r2,0(r2)
    b1a8:	1007883a 	mov	r3,r2
    b1ac:	e0bffe17 	ldw	r2,-8(fp)
    b1b0:	10c00c15 	stw	r3,48(r2)
	return 0;
    b1b4:	0005883a 	mov	r2,zero
}
    b1b8:	e037883a 	mov	sp,fp
    b1bc:	df000017 	ldw	fp,0(sp)
    b1c0:	dec00104 	addi	sp,sp,4
    b1c4:	f800283a 	ret

0000b1c8 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
    b1c8:	defffd04 	addi	sp,sp,-12
    b1cc:	df000215 	stw	fp,8(sp)
    b1d0:	dc000115 	stw	r16,4(sp)
    b1d4:	df000204 	addi	fp,sp,8
    b1d8:	e13ffe15 	stw	r4,-8(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
    b1dc:	e0bffe17 	ldw	r2,-8(fp)
    b1e0:	14000c17 	ldw	r16,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
    b1e4:	e0bffe17 	ldw	r2,-8(fp)
    b1e8:	10800a17 	ldw	r2,40(r2)
    b1ec:	1007883a 	mov	r3,r2
    b1f0:	00800044 	movi	r2,1
    b1f4:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
    b1f8:	e0bffe17 	ldw	r2,-8(fp)
    b1fc:	10c00b17 	ldw	r3,44(r2)
    b200:	e0bffe17 	ldw	r2,-8(fp)
    b204:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
    b208:	e0bffe17 	ldw	r2,-8(fp)
    b20c:	14000b15 	stw	r16,44(r2)
	return 0;
    b210:	0005883a 	mov	r2,zero
}
    b214:	e6ffff04 	addi	sp,fp,-4
    b218:	df000117 	ldw	fp,4(sp)
    b21c:	dc000017 	ldw	r16,0(sp)
    b220:	dec00204 	addi	sp,sp,8
    b224:	f800283a 	ret

0000b228 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
    b228:	defffe04 	addi	sp,sp,-8
    b22c:	df000115 	stw	fp,4(sp)
    b230:	df000104 	addi	fp,sp,4
    b234:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
    b238:	e0bfff17 	ldw	r2,-4(fp)
    b23c:	10800a17 	ldw	r2,40(r2)
    b240:	10800304 	addi	r2,r2,12
    b244:	10800037 	ldwio	r2,0(r2)
    b248:	1080004c 	andi	r2,r2,1
}
    b24c:	e037883a 	mov	sp,fp
    b250:	df000017 	ldw	fp,0(sp)
    b254:	dec00104 	addi	sp,sp,4
    b258:	f800283a 	ret

0000b25c <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
    b25c:	defff704 	addi	sp,sp,-36
    b260:	df000815 	stw	fp,32(sp)
    b264:	dd400715 	stw	r21,28(sp)
    b268:	dd000615 	stw	r20,24(sp)
    b26c:	dcc00515 	stw	r19,20(sp)
    b270:	dc800415 	stw	r18,16(sp)
    b274:	dc400315 	stw	r17,12(sp)
    b278:	dc000215 	stw	r16,8(sp)
    b27c:	df000804 	addi	fp,sp,32
    b280:	e13ff815 	stw	r4,-32(fp)
    b284:	e17ff915 	stw	r5,-28(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    b288:	e0bff917 	ldw	r2,-28(fp)
    b28c:	10800058 	cmpnei	r2,r2,1
    b290:	1000031e 	bne	r2,zero,b2a0 <alt_up_pixel_buffer_dma_clear_screen+0x44>
		addr = pixel_buffer->back_buffer_start_address;
    b294:	e0bff817 	ldw	r2,-32(fp)
    b298:	14400c17 	ldw	r17,48(r2)
    b29c:	00000206 	br	b2a8 <alt_up_pixel_buffer_dma_clear_screen+0x4c>
	else
		addr = pixel_buffer->buffer_start_address;
    b2a0:	e0bff817 	ldw	r2,-32(fp)
    b2a4:	14400b17 	ldw	r17,44(r2)
	limit_x = pixel_buffer->x_resolution;
    b2a8:	e0bff817 	ldw	r2,-32(fp)
    b2ac:	14000f17 	ldw	r16,60(r2)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    b2b0:	e0bff817 	ldw	r2,-32(fp)
    b2b4:	10800e17 	ldw	r2,56(r2)
    b2b8:	10800098 	cmpnei	r2,r2,2
    b2bc:	1000031e 	bne	r2,zero,b2cc <alt_up_pixel_buffer_dma_clear_screen+0x70>
		limit_x = limit_x << 1;
    b2c0:	8405883a 	add	r2,r16,r16
    b2c4:	1021883a 	mov	r16,r2
    b2c8:	00000306 	br	b2d8 <alt_up_pixel_buffer_dma_clear_screen+0x7c>
	} else {
		limit_x = limit_x << 2;
    b2cc:	8405883a 	add	r2,r16,r16
    b2d0:	1085883a 	add	r2,r2,r2
    b2d4:	1021883a 	mov	r16,r2
	}	
	limit_y = pixel_buffer->y_resolution;
    b2d8:	e0bff817 	ldw	r2,-32(fp)
    b2dc:	14801017 	ldw	r18,64(r2)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    b2e0:	e0bff817 	ldw	r2,-32(fp)
    b2e4:	10800d17 	ldw	r2,52(r2)
    b2e8:	1000121e 	bne	r2,zero,b334 <alt_up_pixel_buffer_dma_clear_screen+0xd8>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    b2ec:	e0bff817 	ldw	r2,-32(fp)
    b2f0:	15401317 	ldw	r21,76(r2)

		for (y = 0; y < limit_y; y++)
    b2f4:	0029883a 	mov	r20,zero
    b2f8:	00000c06 	br	b32c <alt_up_pixel_buffer_dma_clear_screen+0xd0>
		{
			for (x = 0; x < limit_x; x = x + 4)
    b2fc:	0027883a 	mov	r19,zero
    b300:	00000406 	br	b314 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
    b304:	9c45883a 	add	r2,r19,r17
    b308:	0007883a 	mov	r3,zero
    b30c:	10c00035 	stwio	r3,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
    b310:	9cc00104 	addi	r19,r19,4
    b314:	9c3ffb36 	bltu	r19,r16,b304 <alt_up_pixel_buffer_dma_clear_screen+0xa8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
    b318:	a807883a 	mov	r3,r21
    b31c:	00800044 	movi	r2,1
    b320:	10c4983a 	sll	r2,r2,r3
    b324:	88a3883a 	add	r17,r17,r2
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
    b328:	a5000044 	addi	r20,r20,1
    b32c:	a4bff336 	bltu	r20,r18,b2fc <alt_up_pixel_buffer_dma_clear_screen+0xa0>
    b330:	00000a06 	br	b35c <alt_up_pixel_buffer_dma_clear_screen+0x100>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
    b334:	9425383a 	mul	r18,r18,r16

		for (x = 0; x < limit_y; x = x + 4)
    b338:	0021883a 	mov	r16,zero
    b33c:	00000506 	br	b354 <alt_up_pixel_buffer_dma_clear_screen+0xf8>
		{
			IOWR_32DIRECT(addr, x, 0);
    b340:	8005883a 	mov	r2,r16
    b344:	1445883a 	add	r2,r2,r17
    b348:	0007883a 	mov	r3,zero
    b34c:	10c00035 	stwio	r3,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
    b350:	84000104 	addi	r16,r16,4
    b354:	8005883a 	mov	r2,r16
    b358:	14bff936 	bltu	r2,r18,b340 <alt_up_pixel_buffer_dma_clear_screen+0xe4>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
    b35c:	e6fffa04 	addi	sp,fp,-24
    b360:	df000617 	ldw	fp,24(sp)
    b364:	dd400517 	ldw	r21,20(sp)
    b368:	dd000417 	ldw	r20,16(sp)
    b36c:	dcc00317 	ldw	r19,12(sp)
    b370:	dc800217 	ldw	r18,8(sp)
    b374:	dc400117 	ldw	r17,4(sp)
    b378:	dc000017 	ldw	r16,0(sp)
    b37c:	dec00704 	addi	sp,sp,28
    b380:	f800283a 	ret

0000b384 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
    b384:	defff304 	addi	sp,sp,-52
    b388:	df000c15 	stw	fp,48(sp)
    b38c:	ddc00b15 	stw	r23,44(sp)
    b390:	dd800a15 	stw	r22,40(sp)
    b394:	dd400915 	stw	r21,36(sp)
    b398:	dd000815 	stw	r20,32(sp)
    b39c:	dcc00715 	stw	r19,28(sp)
    b3a0:	dc800615 	stw	r18,24(sp)
    b3a4:	dc400515 	stw	r17,20(sp)
    b3a8:	dc000415 	stw	r16,16(sp)
    b3ac:	df000c04 	addi	fp,sp,48
    b3b0:	e13ff415 	stw	r4,-48(fp)
    b3b4:	e17ff515 	stw	r5,-44(fp)
    b3b8:	e1bff615 	stw	r6,-40(fp)
    b3bc:	e1fff715 	stw	r7,-36(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    b3c0:	e0bff417 	ldw	r2,-48(fp)
    b3c4:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    b3c8:	e0bff417 	ldw	r2,-48(fp)
    b3cc:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
    b3d0:	e5bff517 	ldw	r22,-44(fp)
	register unsigned int r_x = x1;
    b3d4:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int t_y = y0;
    b3d8:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int b_y = y1;
    b3dc:	e4c00117 	ldw	r19,4(fp)
	register unsigned int local_color = color;
    b3e0:	e5c00217 	ldw	r23,8(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
    b3e4:	a580032e 	bgeu	r20,r22,b3f4 <alt_up_pixel_buffer_dma_draw_box+0x70>
	{
		temp = l_x;
    b3e8:	b02b883a 	mov	r21,r22
		l_x = r_x;
    b3ec:	a02d883a 	mov	r22,r20
		r_x = temp;
    b3f0:	a829883a 	mov	r20,r21
	}
	if (t_y > b_y)
    b3f4:	9c40032e 	bgeu	r19,r17,b404 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = t_y;
    b3f8:	882b883a 	mov	r21,r17
		t_y = b_y;
    b3fc:	9823883a 	mov	r17,r19
		b_y = temp;
    b400:	a827883a 	mov	r19,r21
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
    b404:	b480012e 	bgeu	r22,r18,b40c <alt_up_pixel_buffer_dma_draw_box+0x88>
    b408:	8c000136 	bltu	r17,r16,b410 <alt_up_pixel_buffer_dma_draw_box+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
    b40c:	00008b06 	br	b63c <alt_up_pixel_buffer_dma_draw_box+0x2b8>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    b410:	a4800136 	bltu	r20,r18,b418 <alt_up_pixel_buffer_dma_draw_box+0x94>
	{
		r_x = limit_x - 1;
    b414:	953fffc4 	addi	r20,r18,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    b418:	9c000136 	bltu	r19,r16,b420 <alt_up_pixel_buffer_dma_draw_box+0x9c>
	{
		b_y = limit_y - 1;
    b41c:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    b420:	e0800317 	ldw	r2,12(fp)
    b424:	10800058 	cmpnei	r2,r2,1
    b428:	1000031e 	bne	r2,zero,b438 <alt_up_pixel_buffer_dma_draw_box+0xb4>
		addr = pixel_buffer->back_buffer_start_address;
    b42c:	e0bff417 	ldw	r2,-48(fp)
    b430:	14000c17 	ldw	r16,48(r2)
    b434:	00000206 	br	b440 <alt_up_pixel_buffer_dma_draw_box+0xbc>
	else
		addr = pixel_buffer->buffer_start_address;
    b438:	e0bff417 	ldw	r2,-48(fp)
    b43c:	14000b17 	ldw	r16,44(r2)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    b440:	e0bff417 	ldw	r2,-48(fp)
    b444:	10800d17 	ldw	r2,52(r2)
    b448:	1000401e 	bne	r2,zero,b54c <alt_up_pixel_buffer_dma_draw_box+0x1c8>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    b44c:	e0bff417 	ldw	r2,-48(fp)
    b450:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
    b454:	a805883a 	mov	r2,r21
    b458:	8884983a 	sll	r2,r17,r2
    b45c:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    b460:	e0bff417 	ldw	r2,-48(fp)
    b464:	10800e17 	ldw	r2,56(r2)
    b468:	10800058 	cmpnei	r2,r2,1
    b46c:	1000101e 	bne	r2,zero,b4b0 <alt_up_pixel_buffer_dma_draw_box+0x12c>
			for (y = t_y; y <= b_y; y++)
    b470:	8825883a 	mov	r18,r17
    b474:	00000c06 	br	b4a8 <alt_up_pixel_buffer_dma_draw_box+0x124>
			{
				for (x = l_x; x <= r_x; x++)
    b478:	b023883a 	mov	r17,r22
    b47c:	00000406 	br	b490 <alt_up_pixel_buffer_dma_draw_box+0x10c>
				{
					IOWR_8DIRECT(addr, x, local_color);
    b480:	8c05883a 	add	r2,r17,r16
    b484:	b807883a 	mov	r3,r23
    b488:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    b48c:	8c400044 	addi	r17,r17,1
    b490:	a47ffb2e 	bgeu	r20,r17,b480 <alt_up_pixel_buffer_dma_draw_box+0xfc>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
    b494:	a807883a 	mov	r3,r21
    b498:	00800044 	movi	r2,1
    b49c:	10c4983a 	sll	r2,r2,r3
    b4a0:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    b4a4:	94800044 	addi	r18,r18,1
    b4a8:	9cbff32e 	bgeu	r19,r18,b478 <alt_up_pixel_buffer_dma_draw_box+0xf4>
    b4ac:	00006306 	br	b63c <alt_up_pixel_buffer_dma_draw_box+0x2b8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    b4b0:	e0bff417 	ldw	r2,-48(fp)
    b4b4:	10800e17 	ldw	r2,56(r2)
    b4b8:	10800098 	cmpnei	r2,r2,2
    b4bc:	1000111e 	bne	r2,zero,b504 <alt_up_pixel_buffer_dma_draw_box+0x180>
			for (y = t_y; y <= b_y; y++)
    b4c0:	8825883a 	mov	r18,r17
    b4c4:	00000d06 	br	b4fc <alt_up_pixel_buffer_dma_draw_box+0x178>
			{
				for (x = l_x; x <= r_x; x++)
    b4c8:	b023883a 	mov	r17,r22
    b4cc:	00000506 	br	b4e4 <alt_up_pixel_buffer_dma_draw_box+0x160>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    b4d0:	8c45883a 	add	r2,r17,r17
    b4d4:	1405883a 	add	r2,r2,r16
    b4d8:	b807883a 	mov	r3,r23
    b4dc:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    b4e0:	8c400044 	addi	r17,r17,1
    b4e4:	a47ffa2e 	bgeu	r20,r17,b4d0 <alt_up_pixel_buffer_dma_draw_box+0x14c>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
    b4e8:	a807883a 	mov	r3,r21
    b4ec:	00800044 	movi	r2,1
    b4f0:	10c4983a 	sll	r2,r2,r3
    b4f4:	80a1883a 	add	r16,r16,r2
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    b4f8:	94800044 	addi	r18,r18,1
    b4fc:	9cbff22e 	bgeu	r19,r18,b4c8 <alt_up_pixel_buffer_dma_draw_box+0x144>
    b500:	00004e06 	br	b63c <alt_up_pixel_buffer_dma_draw_box+0x2b8>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    b504:	8825883a 	mov	r18,r17
    b508:	00000e06 	br	b544 <alt_up_pixel_buffer_dma_draw_box+0x1c0>
			{
				for (x = l_x; x <= r_x; x++)
    b50c:	b023883a 	mov	r17,r22
    b510:	00000606 	br	b52c <alt_up_pixel_buffer_dma_draw_box+0x1a8>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    b514:	8c45883a 	add	r2,r17,r17
    b518:	1085883a 	add	r2,r2,r2
    b51c:	1405883a 	add	r2,r2,r16
    b520:	b807883a 	mov	r3,r23
    b524:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    b528:	8c400044 	addi	r17,r17,1
    b52c:	a47ff92e 	bgeu	r20,r17,b514 <alt_up_pixel_buffer_dma_draw_box+0x190>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
    b530:	a807883a 	mov	r3,r21
    b534:	00800044 	movi	r2,1
    b538:	10c4983a 	sll	r2,r2,r3
    b53c:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    b540:	94800044 	addi	r18,r18,1
    b544:	9cbff12e 	bgeu	r19,r18,b50c <alt_up_pixel_buffer_dma_draw_box+0x188>
    b548:	00003c06 	br	b63c <alt_up_pixel_buffer_dma_draw_box+0x2b8>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    b54c:	e0bff417 	ldw	r2,-48(fp)
    b550:	10800e17 	ldw	r2,56(r2)
    b554:	10800058 	cmpnei	r2,r2,1
    b558:	10000f1e 	bne	r2,zero,b598 <alt_up_pixel_buffer_dma_draw_box+0x214>
			addr = addr + t_y * limit_x;
    b55c:	8c85383a 	mul	r2,r17,r18
    b560:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
    b564:	882b883a 	mov	r21,r17
    b568:	00000906 	br	b590 <alt_up_pixel_buffer_dma_draw_box+0x20c>
			{
				for (x = l_x; x <= r_x; x++)
    b56c:	b023883a 	mov	r17,r22
    b570:	00000406 	br	b584 <alt_up_pixel_buffer_dma_draw_box+0x200>
				{
					IOWR_8DIRECT(addr, x, local_color);
    b574:	8c05883a 	add	r2,r17,r16
    b578:	b807883a 	mov	r3,r23
    b57c:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    b580:	8c400044 	addi	r17,r17,1
    b584:	a47ffb2e 	bgeu	r20,r17,b574 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
    b588:	84a1883a 	add	r16,r16,r18
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    b58c:	ad400044 	addi	r21,r21,1
    b590:	9d7ff62e 	bgeu	r19,r21,b56c <alt_up_pixel_buffer_dma_draw_box+0x1e8>
    b594:	00002906 	br	b63c <alt_up_pixel_buffer_dma_draw_box+0x2b8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    b598:	e0bff417 	ldw	r2,-48(fp)
    b59c:	10800e17 	ldw	r2,56(r2)
    b5a0:	10800098 	cmpnei	r2,r2,2
    b5a4:	1000121e 	bne	r2,zero,b5f0 <alt_up_pixel_buffer_dma_draw_box+0x26c>
			limit_x = limit_x << 1;
    b5a8:	9485883a 	add	r2,r18,r18
    b5ac:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
    b5b0:	8c85383a 	mul	r2,r17,r18
    b5b4:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
    b5b8:	882b883a 	mov	r21,r17
    b5bc:	00000a06 	br	b5e8 <alt_up_pixel_buffer_dma_draw_box+0x264>
			{
				for (x = l_x; x <= r_x; x++)
    b5c0:	b023883a 	mov	r17,r22
    b5c4:	00000506 	br	b5dc <alt_up_pixel_buffer_dma_draw_box+0x258>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    b5c8:	8c45883a 	add	r2,r17,r17
    b5cc:	1405883a 	add	r2,r2,r16
    b5d0:	b807883a 	mov	r3,r23
    b5d4:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    b5d8:	8c400044 	addi	r17,r17,1
    b5dc:	a47ffa2e 	bgeu	r20,r17,b5c8 <alt_up_pixel_buffer_dma_draw_box+0x244>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
    b5e0:	84a1883a 	add	r16,r16,r18
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    b5e4:	ad400044 	addi	r21,r21,1
    b5e8:	9d7ff52e 	bgeu	r19,r21,b5c0 <alt_up_pixel_buffer_dma_draw_box+0x23c>
    b5ec:	00001306 	br	b63c <alt_up_pixel_buffer_dma_draw_box+0x2b8>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    b5f0:	9485883a 	add	r2,r18,r18
    b5f4:	1085883a 	add	r2,r2,r2
    b5f8:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
    b5fc:	8c85383a 	mul	r2,r17,r18
    b600:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
    b604:	882b883a 	mov	r21,r17
    b608:	00000b06 	br	b638 <alt_up_pixel_buffer_dma_draw_box+0x2b4>
			{
				for (x = l_x; x <= r_x; x++)
    b60c:	b023883a 	mov	r17,r22
    b610:	00000606 	br	b62c <alt_up_pixel_buffer_dma_draw_box+0x2a8>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    b614:	8c45883a 	add	r2,r17,r17
    b618:	1085883a 	add	r2,r2,r2
    b61c:	1405883a 	add	r2,r2,r16
    b620:	b807883a 	mov	r3,r23
    b624:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    b628:	8c400044 	addi	r17,r17,1
    b62c:	a47ff92e 	bgeu	r20,r17,b614 <alt_up_pixel_buffer_dma_draw_box+0x290>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
    b630:	84a1883a 	add	r16,r16,r18
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    b634:	ad400044 	addi	r21,r21,1
    b638:	9d7ff42e 	bgeu	r19,r21,b60c <alt_up_pixel_buffer_dma_draw_box+0x288>
				}
				addr = addr + limit_x;
			}
		}
	}
}
    b63c:	e6fff804 	addi	sp,fp,-32
    b640:	df000817 	ldw	fp,32(sp)
    b644:	ddc00717 	ldw	r23,28(sp)
    b648:	dd800617 	ldw	r22,24(sp)
    b64c:	dd400517 	ldw	r21,20(sp)
    b650:	dd000417 	ldw	r20,16(sp)
    b654:	dcc00317 	ldw	r19,12(sp)
    b658:	dc800217 	ldw	r18,8(sp)
    b65c:	dc400117 	ldw	r17,4(sp)
    b660:	dc000017 	ldw	r16,0(sp)
    b664:	dec00904 	addi	sp,sp,36
    b668:	f800283a 	ret

0000b66c <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
    b66c:	defff404 	addi	sp,sp,-48
    b670:	df000b15 	stw	fp,44(sp)
    b674:	dd800a15 	stw	r22,40(sp)
    b678:	dd400915 	stw	r21,36(sp)
    b67c:	dd000815 	stw	r20,32(sp)
    b680:	dcc00715 	stw	r19,28(sp)
    b684:	dc800615 	stw	r18,24(sp)
    b688:	dc400515 	stw	r17,20(sp)
    b68c:	dc000415 	stw	r16,16(sp)
    b690:	df000b04 	addi	fp,sp,44
    b694:	e13ff515 	stw	r4,-44(fp)
    b698:	e17ff615 	stw	r5,-40(fp)
    b69c:	e1bff715 	stw	r6,-36(fp)
    b6a0:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    b6a4:	e0bff517 	ldw	r2,-44(fp)
    b6a8:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    b6ac:	e0bff517 	ldw	r2,-44(fp)
    b6b0:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
    b6b4:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int r_x = x1;
    b6b8:	e4fff717 	ldw	r19,-36(fp)
	register unsigned int line_y = y;
    b6bc:	e53ff817 	ldw	r20,-32(fp)
	register unsigned int local_color = color;
    b6c0:	e5400117 	ldw	r21,4(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
    b6c4:	9c40032e 	bgeu	r19,r17,b6d4 <alt_up_pixel_buffer_dma_draw_hline+0x68>
	{
		temp = l_x;
    b6c8:	882d883a 	mov	r22,r17
		l_x = r_x;
    b6cc:	9823883a 	mov	r17,r19
		r_x = temp;
    b6d0:	b027883a 	mov	r19,r22
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
    b6d4:	8c80012e 	bgeu	r17,r18,b6dc <alt_up_pixel_buffer_dma_draw_hline+0x70>
    b6d8:	a4000136 	bltu	r20,r16,b6e0 <alt_up_pixel_buffer_dma_draw_hline+0x74>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
    b6dc:	00005d06 	br	b854 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    b6e0:	9c800136 	bltu	r19,r18,b6e8 <alt_up_pixel_buffer_dma_draw_hline+0x7c>
	{
		r_x = limit_x - 1;
    b6e4:	94ffffc4 	addi	r19,r18,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    b6e8:	e0800217 	ldw	r2,8(fp)
    b6ec:	10800058 	cmpnei	r2,r2,1
    b6f0:	1000031e 	bne	r2,zero,b700 <alt_up_pixel_buffer_dma_draw_hline+0x94>
		addr = pixel_buffer->back_buffer_start_address;
    b6f4:	e0bff517 	ldw	r2,-44(fp)
    b6f8:	14000c17 	ldw	r16,48(r2)
    b6fc:	00000206 	br	b708 <alt_up_pixel_buffer_dma_draw_hline+0x9c>
	else
		addr = pixel_buffer->buffer_start_address;
    b700:	e0bff517 	ldw	r2,-44(fp)
    b704:	14000b17 	ldw	r16,44(r2)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    b708:	e0bff517 	ldw	r2,-44(fp)
    b70c:	10800d17 	ldw	r2,52(r2)
    b710:	1000251e 	bne	r2,zero,b7a8 <alt_up_pixel_buffer_dma_draw_hline+0x13c>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    b714:	e0bff517 	ldw	r2,-44(fp)
    b718:	14801317 	ldw	r18,76(r2)
		addr = addr + (line_y << offset_y);
    b71c:	9005883a 	mov	r2,r18
    b720:	a084983a 	sll	r2,r20,r2
    b724:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    b728:	e0bff517 	ldw	r2,-44(fp)
    b72c:	10800e17 	ldw	r2,56(r2)
    b730:	10800058 	cmpnei	r2,r2,1
    b734:	1000071e 	bne	r2,zero,b754 <alt_up_pixel_buffer_dma_draw_hline+0xe8>
			for (x = l_x; x <= r_x; x++)
    b738:	00000406 	br	b74c <alt_up_pixel_buffer_dma_draw_hline+0xe0>
			{
				IOWR_8DIRECT(addr, x, local_color);
    b73c:	8c05883a 	add	r2,r17,r16
    b740:	a807883a 	mov	r3,r21
    b744:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    b748:	8c400044 	addi	r17,r17,1
    b74c:	9c7ffb2e 	bgeu	r19,r17,b73c <alt_up_pixel_buffer_dma_draw_hline+0xd0>
    b750:	00004006 	br	b854 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    b754:	e0bff517 	ldw	r2,-44(fp)
    b758:	10800e17 	ldw	r2,56(r2)
    b75c:	10800098 	cmpnei	r2,r2,2
    b760:	1000081e 	bne	r2,zero,b784 <alt_up_pixel_buffer_dma_draw_hline+0x118>
			for (x = l_x; x <= r_x; x++)
    b764:	00000506 	br	b77c <alt_up_pixel_buffer_dma_draw_hline+0x110>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    b768:	8c45883a 	add	r2,r17,r17
    b76c:	1405883a 	add	r2,r2,r16
    b770:	a807883a 	mov	r3,r21
    b774:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    b778:	8c400044 	addi	r17,r17,1
    b77c:	9c7ffa2e 	bgeu	r19,r17,b768 <alt_up_pixel_buffer_dma_draw_hline+0xfc>
    b780:	00003406 	br	b854 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    b784:	00000606 	br	b7a0 <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    b788:	8c45883a 	add	r2,r17,r17
    b78c:	1085883a 	add	r2,r2,r2
    b790:	1405883a 	add	r2,r2,r16
    b794:	a807883a 	mov	r3,r21
    b798:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    b79c:	8c400044 	addi	r17,r17,1
    b7a0:	9c7ff92e 	bgeu	r19,r17,b788 <alt_up_pixel_buffer_dma_draw_hline+0x11c>
    b7a4:	00002b06 	br	b854 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    b7a8:	e0bff517 	ldw	r2,-44(fp)
    b7ac:	10800e17 	ldw	r2,56(r2)
    b7b0:	10800058 	cmpnei	r2,r2,1
    b7b4:	1000091e 	bne	r2,zero,b7dc <alt_up_pixel_buffer_dma_draw_hline+0x170>
			addr = addr + line_y * limit_x;
    b7b8:	a485383a 	mul	r2,r20,r18
    b7bc:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
    b7c0:	00000406 	br	b7d4 <alt_up_pixel_buffer_dma_draw_hline+0x168>
			{
				IOWR_8DIRECT(addr, x, local_color);
    b7c4:	8c05883a 	add	r2,r17,r16
    b7c8:	a807883a 	mov	r3,r21
    b7cc:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    b7d0:	8c400044 	addi	r17,r17,1
    b7d4:	9c7ffb2e 	bgeu	r19,r17,b7c4 <alt_up_pixel_buffer_dma_draw_hline+0x158>
    b7d8:	00001e06 	br	b854 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    b7dc:	e0bff517 	ldw	r2,-44(fp)
    b7e0:	10800e17 	ldw	r2,56(r2)
    b7e4:	10800098 	cmpnei	r2,r2,2
    b7e8:	10000c1e 	bne	r2,zero,b81c <alt_up_pixel_buffer_dma_draw_hline+0x1b0>
			limit_x = limit_x << 1;
    b7ec:	9485883a 	add	r2,r18,r18
    b7f0:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
    b7f4:	a485383a 	mul	r2,r20,r18
    b7f8:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
    b7fc:	00000506 	br	b814 <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    b800:	8c45883a 	add	r2,r17,r17
    b804:	1405883a 	add	r2,r2,r16
    b808:	a807883a 	mov	r3,r21
    b80c:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    b810:	8c400044 	addi	r17,r17,1
    b814:	9c7ffa2e 	bgeu	r19,r17,b800 <alt_up_pixel_buffer_dma_draw_hline+0x194>
    b818:	00000e06 	br	b854 <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
    b81c:	9485883a 	add	r2,r18,r18
    b820:	1085883a 	add	r2,r2,r2
    b824:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
    b828:	a485383a 	mul	r2,r20,r18
    b82c:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
    b830:	00000606 	br	b84c <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    b834:	8c45883a 	add	r2,r17,r17
    b838:	1085883a 	add	r2,r2,r2
    b83c:	1405883a 	add	r2,r2,r16
    b840:	a807883a 	mov	r3,r21
    b844:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    b848:	8c400044 	addi	r17,r17,1
    b84c:	9c7ff92e 	bgeu	r19,r17,b834 <alt_up_pixel_buffer_dma_draw_hline+0x1c8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
    b850:	84a1883a 	add	r16,r16,r18
		}
	}
}
    b854:	e6fff904 	addi	sp,fp,-28
    b858:	df000717 	ldw	fp,28(sp)
    b85c:	dd800617 	ldw	r22,24(sp)
    b860:	dd400517 	ldw	r21,20(sp)
    b864:	dd000417 	ldw	r20,16(sp)
    b868:	dcc00317 	ldw	r19,12(sp)
    b86c:	dc800217 	ldw	r18,8(sp)
    b870:	dc400117 	ldw	r17,4(sp)
    b874:	dc000017 	ldw	r16,0(sp)
    b878:	dec00804 	addi	sp,sp,32
    b87c:	f800283a 	ret

0000b880 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
    b880:	defff404 	addi	sp,sp,-48
    b884:	df000b15 	stw	fp,44(sp)
    b888:	dd800a15 	stw	r22,40(sp)
    b88c:	dd400915 	stw	r21,36(sp)
    b890:	dd000815 	stw	r20,32(sp)
    b894:	dcc00715 	stw	r19,28(sp)
    b898:	dc800615 	stw	r18,24(sp)
    b89c:	dc400515 	stw	r17,20(sp)
    b8a0:	dc000415 	stw	r16,16(sp)
    b8a4:	df000b04 	addi	fp,sp,44
    b8a8:	e13ff515 	stw	r4,-44(fp)
    b8ac:	e17ff615 	stw	r5,-40(fp)
    b8b0:	e1bff715 	stw	r6,-36(fp)
    b8b4:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    b8b8:	e0bff517 	ldw	r2,-44(fp)
    b8bc:	14400f17 	ldw	r17,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    b8c0:	e0bff517 	ldw	r2,-44(fp)
    b8c4:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int line_x = x;
    b8c8:	e4bff617 	ldw	r18,-40(fp)
	register unsigned int t_y = y0;
    b8cc:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int b_y = y1;
    b8d0:	e4fff817 	ldw	r19,-32(fp)
	register unsigned int local_color = color;
    b8d4:	e5400117 	ldw	r21,4(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
    b8d8:	9d00032e 	bgeu	r19,r20,b8e8 <alt_up_pixel_buffer_dma_draw_vline+0x68>
	{
		temp = t_y;
    b8dc:	a02d883a 	mov	r22,r20
		t_y = b_y;
    b8e0:	9829883a 	mov	r20,r19
		b_y = temp;
    b8e4:	b027883a 	mov	r19,r22
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
    b8e8:	9440012e 	bgeu	r18,r17,b8f0 <alt_up_pixel_buffer_dma_draw_vline+0x70>
    b8ec:	a4000136 	bltu	r20,r16,b8f4 <alt_up_pixel_buffer_dma_draw_vline+0x74>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
    b8f0:	00006e06 	br	baac <alt_up_pixel_buffer_dma_draw_vline+0x22c>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    b8f4:	9c000136 	bltu	r19,r16,b8fc <alt_up_pixel_buffer_dma_draw_vline+0x7c>
	{
		b_y = limit_y - 1;
    b8f8:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    b8fc:	e0800217 	ldw	r2,8(fp)
    b900:	10800058 	cmpnei	r2,r2,1
    b904:	1000031e 	bne	r2,zero,b914 <alt_up_pixel_buffer_dma_draw_vline+0x94>
		addr = pixel_buffer->back_buffer_start_address;
    b908:	e0bff517 	ldw	r2,-44(fp)
    b90c:	14000c17 	ldw	r16,48(r2)
    b910:	00000206 	br	b91c <alt_up_pixel_buffer_dma_draw_vline+0x9c>
	else
		addr = pixel_buffer->buffer_start_address;
    b914:	e0bff517 	ldw	r2,-44(fp)
    b918:	14000b17 	ldw	r16,44(r2)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    b91c:	e0bff517 	ldw	r2,-44(fp)
    b920:	10800d17 	ldw	r2,52(r2)
    b924:	1000341e 	bne	r2,zero,b9f8 <alt_up_pixel_buffer_dma_draw_vline+0x178>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    b928:	e0bff517 	ldw	r2,-44(fp)
    b92c:	15801317 	ldw	r22,76(r2)
		addr = addr + (t_y << offset_y);
    b930:	b005883a 	mov	r2,r22
    b934:	a084983a 	sll	r2,r20,r2
    b938:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    b93c:	e0bff517 	ldw	r2,-44(fp)
    b940:	10800e17 	ldw	r2,56(r2)
    b944:	10800058 	cmpnei	r2,r2,1
    b948:	10000c1e 	bne	r2,zero,b97c <alt_up_pixel_buffer_dma_draw_vline+0xfc>
			for (y = t_y; y <= b_y; y++)
    b94c:	a023883a 	mov	r17,r20
    b950:	00000806 	br	b974 <alt_up_pixel_buffer_dma_draw_vline+0xf4>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    b954:	9405883a 	add	r2,r18,r16
    b958:	a807883a 	mov	r3,r21
    b95c:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
    b960:	b007883a 	mov	r3,r22
    b964:	00800044 	movi	r2,1
    b968:	10c4983a 	sll	r2,r2,r3
    b96c:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    b970:	8c400044 	addi	r17,r17,1
    b974:	9c7ff72e 	bgeu	r19,r17,b954 <alt_up_pixel_buffer_dma_draw_vline+0xd4>
    b978:	00004c06 	br	baac <alt_up_pixel_buffer_dma_draw_vline+0x22c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    b97c:	e0bff517 	ldw	r2,-44(fp)
    b980:	10800e17 	ldw	r2,56(r2)
    b984:	10800098 	cmpnei	r2,r2,2
    b988:	10000d1e 	bne	r2,zero,b9c0 <alt_up_pixel_buffer_dma_draw_vline+0x140>
			for (y = t_y; y <= b_y; y++)
    b98c:	a023883a 	mov	r17,r20
    b990:	00000906 	br	b9b8 <alt_up_pixel_buffer_dma_draw_vline+0x138>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    b994:	9485883a 	add	r2,r18,r18
    b998:	1405883a 	add	r2,r2,r16
    b99c:	a807883a 	mov	r3,r21
    b9a0:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
    b9a4:	b007883a 	mov	r3,r22
    b9a8:	00800044 	movi	r2,1
    b9ac:	10c4983a 	sll	r2,r2,r3
    b9b0:	80a1883a 	add	r16,r16,r2
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    b9b4:	8c400044 	addi	r17,r17,1
    b9b8:	9c7ff62e 	bgeu	r19,r17,b994 <alt_up_pixel_buffer_dma_draw_vline+0x114>
    b9bc:	00003b06 	br	baac <alt_up_pixel_buffer_dma_draw_vline+0x22c>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    b9c0:	a023883a 	mov	r17,r20
    b9c4:	00000a06 	br	b9f0 <alt_up_pixel_buffer_dma_draw_vline+0x170>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    b9c8:	9485883a 	add	r2,r18,r18
    b9cc:	1085883a 	add	r2,r2,r2
    b9d0:	1405883a 	add	r2,r2,r16
    b9d4:	a807883a 	mov	r3,r21
    b9d8:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
    b9dc:	b007883a 	mov	r3,r22
    b9e0:	00800044 	movi	r2,1
    b9e4:	10c4983a 	sll	r2,r2,r3
    b9e8:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    b9ec:	8c400044 	addi	r17,r17,1
    b9f0:	9c7ff52e 	bgeu	r19,r17,b9c8 <alt_up_pixel_buffer_dma_draw_vline+0x148>
    b9f4:	00002d06 	br	baac <alt_up_pixel_buffer_dma_draw_vline+0x22c>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    b9f8:	e0bff517 	ldw	r2,-44(fp)
    b9fc:	10800e17 	ldw	r2,56(r2)
    ba00:	10800058 	cmpnei	r2,r2,1
    ba04:	10000a1e 	bne	r2,zero,ba30 <alt_up_pixel_buffer_dma_draw_vline+0x1b0>
			addr = addr + t_y * limit_x;
    ba08:	a445383a 	mul	r2,r20,r17
    ba0c:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
    ba10:	00000506 	br	ba28 <alt_up_pixel_buffer_dma_draw_vline+0x1a8>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    ba14:	9405883a 	add	r2,r18,r16
    ba18:	a807883a 	mov	r3,r21
    ba1c:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
    ba20:	8461883a 	add	r16,r16,r17
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    ba24:	a5000044 	addi	r20,r20,1
    ba28:	9d3ffa2e 	bgeu	r19,r20,ba14 <alt_up_pixel_buffer_dma_draw_vline+0x194>
    ba2c:	00001f06 	br	baac <alt_up_pixel_buffer_dma_draw_vline+0x22c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    ba30:	e0bff517 	ldw	r2,-44(fp)
    ba34:	10800e17 	ldw	r2,56(r2)
    ba38:	10800098 	cmpnei	r2,r2,2
    ba3c:	10000d1e 	bne	r2,zero,ba74 <alt_up_pixel_buffer_dma_draw_vline+0x1f4>
			limit_x = limit_x << 1;
    ba40:	8c45883a 	add	r2,r17,r17
    ba44:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
    ba48:	a445383a 	mul	r2,r20,r17
    ba4c:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
    ba50:	00000606 	br	ba6c <alt_up_pixel_buffer_dma_draw_vline+0x1ec>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    ba54:	9485883a 	add	r2,r18,r18
    ba58:	1405883a 	add	r2,r2,r16
    ba5c:	a807883a 	mov	r3,r21
    ba60:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
    ba64:	8461883a 	add	r16,r16,r17
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    ba68:	a5000044 	addi	r20,r20,1
    ba6c:	9d3ff92e 	bgeu	r19,r20,ba54 <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
    ba70:	00000e06 	br	baac <alt_up_pixel_buffer_dma_draw_vline+0x22c>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    ba74:	8c45883a 	add	r2,r17,r17
    ba78:	1085883a 	add	r2,r2,r2
    ba7c:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
    ba80:	a445383a 	mul	r2,r20,r17
    ba84:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
    ba88:	00000706 	br	baa8 <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    ba8c:	9485883a 	add	r2,r18,r18
    ba90:	1085883a 	add	r2,r2,r2
    ba94:	1405883a 	add	r2,r2,r16
    ba98:	a807883a 	mov	r3,r21
    ba9c:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
    baa0:	8461883a 	add	r16,r16,r17
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    baa4:	a5000044 	addi	r20,r20,1
    baa8:	9d3ff82e 	bgeu	r19,r20,ba8c <alt_up_pixel_buffer_dma_draw_vline+0x20c>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
    baac:	e6fff904 	addi	sp,fp,-28
    bab0:	df000717 	ldw	fp,28(sp)
    bab4:	dd800617 	ldw	r22,24(sp)
    bab8:	dd400517 	ldw	r21,20(sp)
    babc:	dd000417 	ldw	r20,16(sp)
    bac0:	dcc00317 	ldw	r19,12(sp)
    bac4:	dc800217 	ldw	r18,8(sp)
    bac8:	dc400117 	ldw	r17,4(sp)
    bacc:	dc000017 	ldw	r16,0(sp)
    bad0:	dec00804 	addi	sp,sp,32
    bad4:	f800283a 	ret

0000bad8 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
    bad8:	defff804 	addi	sp,sp,-32
    badc:	dfc00715 	stw	ra,28(sp)
    bae0:	df000615 	stw	fp,24(sp)
    bae4:	df000604 	addi	fp,sp,24
    bae8:	e13ffc15 	stw	r4,-16(fp)
    baec:	e17ffd15 	stw	r5,-12(fp)
    baf0:	e1bffe15 	stw	r6,-8(fp)
    baf4:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
    baf8:	e0800317 	ldw	r2,12(fp)
    bafc:	d8800015 	stw	r2,0(sp)
    bb00:	e0800417 	ldw	r2,16(fp)
    bb04:	d8800115 	stw	r2,4(sp)
    bb08:	e13ffc17 	ldw	r4,-16(fp)
    bb0c:	e17ffd17 	ldw	r5,-12(fp)
    bb10:	e1bfff17 	ldw	r6,-4(fp)
    bb14:	e1fffe17 	ldw	r7,-8(fp)
    bb18:	000b66c0 	call	b66c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
    bb1c:	e0800317 	ldw	r2,12(fp)
    bb20:	d8800015 	stw	r2,0(sp)
    bb24:	e0800417 	ldw	r2,16(fp)
    bb28:	d8800115 	stw	r2,4(sp)
    bb2c:	e13ffc17 	ldw	r4,-16(fp)
    bb30:	e17ffd17 	ldw	r5,-12(fp)
    bb34:	e1bfff17 	ldw	r6,-4(fp)
    bb38:	e1c00217 	ldw	r7,8(fp)
    bb3c:	000b66c0 	call	b66c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
    bb40:	e0800317 	ldw	r2,12(fp)
    bb44:	d8800015 	stw	r2,0(sp)
    bb48:	e0800417 	ldw	r2,16(fp)
    bb4c:	d8800115 	stw	r2,4(sp)
    bb50:	e13ffc17 	ldw	r4,-16(fp)
    bb54:	e17ffd17 	ldw	r5,-12(fp)
    bb58:	e1bffe17 	ldw	r6,-8(fp)
    bb5c:	e1c00217 	ldw	r7,8(fp)
    bb60:	000b8800 	call	b880 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
    bb64:	e0800317 	ldw	r2,12(fp)
    bb68:	d8800015 	stw	r2,0(sp)
    bb6c:	e0800417 	ldw	r2,16(fp)
    bb70:	d8800115 	stw	r2,4(sp)
    bb74:	e13ffc17 	ldw	r4,-16(fp)
    bb78:	e17fff17 	ldw	r5,-4(fp)
    bb7c:	e1bffe17 	ldw	r6,-8(fp)
    bb80:	e1c00217 	ldw	r7,8(fp)
    bb84:	000b8800 	call	b880 <alt_up_pixel_buffer_dma_draw_vline>
}
    bb88:	e037883a 	mov	sp,fp
    bb8c:	dfc00117 	ldw	ra,4(sp)
    bb90:	df000017 	ldw	fp,0(sp)
    bb94:	dec00204 	addi	sp,sp,8
    bb98:	f800283a 	ret

0000bb9c <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
    bb9c:	deffff04 	addi	sp,sp,-4
    bba0:	df000015 	stw	fp,0(sp)
    bba4:	d839883a 	mov	fp,sp
    bba8:	2005883a 	mov	r2,r4
    bbac:	3007883a 	mov	r3,r6
    bbb0:	3809883a 	mov	r4,r7
    bbb4:	e1800117 	ldw	r6,4(fp)
    bbb8:	e1c00217 	ldw	r7,8(fp)
	if (mode == 0)
    bbbc:	3800051e 	bne	r7,zero,bbd4 <helper_plot_pixel+0x38>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
    bbc0:	2909383a 	mul	r4,r5,r4
    bbc4:	20c7883a 	add	r3,r4,r3
    bbc8:	1885883a 	add	r2,r3,r2
    bbcc:	11800025 	stbio	r6,0(r2)
    bbd0:	00000e06 	br	bc0c <helper_plot_pixel+0x70>
	else if (mode == 1)
    bbd4:	39c00058 	cmpnei	r7,r7,1
    bbd8:	3800061e 	bne	r7,zero,bbf4 <helper_plot_pixel+0x58>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
    bbdc:	2909383a 	mul	r4,r5,r4
    bbe0:	20c7883a 	add	r3,r4,r3
    bbe4:	18c7883a 	add	r3,r3,r3
    bbe8:	1885883a 	add	r2,r3,r2
    bbec:	1180002d 	sthio	r6,0(r2)
    bbf0:	00000606 	br	bc0c <helper_plot_pixel+0x70>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
    bbf4:	2909383a 	mul	r4,r5,r4
    bbf8:	20c7883a 	add	r3,r4,r3
    bbfc:	18c7883a 	add	r3,r3,r3
    bc00:	18c7883a 	add	r3,r3,r3
    bc04:	1885883a 	add	r2,r3,r2
    bc08:	11800035 	stwio	r6,0(r2)
}
    bc0c:	e037883a 	mov	sp,fp
    bc10:	df000017 	ldw	fp,0(sp)
    bc14:	dec00104 	addi	sp,sp,4
    bc18:	f800283a 	ret

0000bc1c <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
    bc1c:	deffeb04 	addi	sp,sp,-84
    bc20:	dfc01415 	stw	ra,80(sp)
    bc24:	df001315 	stw	fp,76(sp)
    bc28:	ddc01215 	stw	r23,72(sp)
    bc2c:	dd801115 	stw	r22,68(sp)
    bc30:	dd401015 	stw	r21,64(sp)
    bc34:	dd000f15 	stw	r20,60(sp)
    bc38:	dcc00e15 	stw	r19,56(sp)
    bc3c:	dc800d15 	stw	r18,52(sp)
    bc40:	dc400c15 	stw	r17,48(sp)
    bc44:	dc000b15 	stw	r16,44(sp)
    bc48:	df001304 	addi	fp,sp,76
    bc4c:	e13fef15 	stw	r4,-68(fp)
    bc50:	e17ff015 	stw	r5,-64(fp)
    bc54:	e1bff115 	stw	r6,-60(fp)
    bc58:	e1fff215 	stw	r7,-56(fp)
	register int x_0 = x0;
    bc5c:	e47ff017 	ldw	r17,-64(fp)
	register int y_0 = y0;
    bc60:	e4fff117 	ldw	r19,-60(fp)
	register int x_1 = x1;
    bc64:	e4bff217 	ldw	r18,-56(fp)
	register int y_1 = y1;
    bc68:	e5000217 	ldw	r20,8(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
    bc6c:	a4c5c83a 	sub	r2,r20,r19
    bc70:	1000010e 	bge	r2,zero,bc78 <alt_up_pixel_buffer_dma_draw_line+0x5c>
    bc74:	0085c83a 	sub	r2,zero,r2
    bc78:	1007883a 	mov	r3,r2
    bc7c:	9445c83a 	sub	r2,r18,r17
    bc80:	1000010e 	bge	r2,zero,bc88 <alt_up_pixel_buffer_dma_draw_line+0x6c>
    bc84:	0085c83a 	sub	r2,zero,r2
    bc88:	10c4803a 	cmplt	r2,r2,r3
    bc8c:	e0bff305 	stb	r2,-52(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
    bc90:	e0bfef17 	ldw	r2,-68(fp)
    bc94:	10800e17 	ldw	r2,56(r2)
    bc98:	10800060 	cmpeqi	r2,r2,1
    bc9c:	1000081e 	bne	r2,zero,bcc0 <alt_up_pixel_buffer_dma_draw_line+0xa4>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
    bca0:	e0bfef17 	ldw	r2,-68(fp)
    bca4:	10800e17 	ldw	r2,56(r2)
    bca8:	10800098 	cmpnei	r2,r2,2
    bcac:	1000021e 	bne	r2,zero,bcb8 <alt_up_pixel_buffer_dma_draw_line+0x9c>
    bcb0:	00800044 	movi	r2,1
    bcb4:	00000306 	br	bcc4 <alt_up_pixel_buffer_dma_draw_line+0xa8>
    bcb8:	00800084 	movi	r2,2
    bcbc:	00000106 	br	bcc4 <alt_up_pixel_buffer_dma_draw_line+0xa8>
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
    bcc0:	0005883a 	mov	r2,zero
    bcc4:	e0bff415 	stw	r2,-48(fp)
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
    bcc8:	e0800317 	ldw	r2,12(fp)
    bccc:	e0bff515 	stw	r2,-44(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
    bcd0:	e0bfef17 	ldw	r2,-68(fp)
    bcd4:	10800d17 	ldw	r2,52(r2)
    bcd8:	1000081e 	bne	r2,zero,bcfc <alt_up_pixel_buffer_dma_draw_line+0xe0>
    bcdc:	e0bfef17 	ldw	r2,-68(fp)
    bce0:	10801317 	ldw	r2,76(r2)
    bce4:	e0fff417 	ldw	r3,-48(fp)
    bce8:	10c5c83a 	sub	r2,r2,r3
    bcec:	1007883a 	mov	r3,r2
    bcf0:	00800044 	movi	r2,1
    bcf4:	10c4983a 	sll	r2,r2,r3
    bcf8:	00000206 	br	bd04 <alt_up_pixel_buffer_dma_draw_line+0xe8>
    bcfc:	e0bfef17 	ldw	r2,-68(fp)
    bd00:	10800f17 	ldw	r2,60(r2)
    bd04:	e0bff615 	stw	r2,-40(fp)

	if (backbuffer == 1)
    bd08:	e0800417 	ldw	r2,16(fp)
    bd0c:	10800058 	cmpnei	r2,r2,1
    bd10:	1000031e 	bne	r2,zero,bd20 <alt_up_pixel_buffer_dma_draw_line+0x104>
		buffer_start = pixel_buffer->back_buffer_start_address;
    bd14:	e0bfef17 	ldw	r2,-68(fp)
    bd18:	15c00c17 	ldw	r23,48(r2)
    bd1c:	00000206 	br	bd28 <alt_up_pixel_buffer_dma_draw_line+0x10c>
	else
		buffer_start = pixel_buffer->buffer_start_address;
    bd20:	e0bfef17 	ldw	r2,-68(fp)
    bd24:	15c00b17 	ldw	r23,44(r2)

	/* Preprocessing inputs */
	if (steep > 0) {
    bd28:	e0bff307 	ldb	r2,-52(fp)
    bd2c:	0080060e 	bge	zero,r2,bd48 <alt_up_pixel_buffer_dma_draw_line+0x12c>
		// Swap x_0 and y_0
		error = x_0;
    bd30:	8821883a 	mov	r16,r17
		x_0 = y_0;
    bd34:	9823883a 	mov	r17,r19
		y_0 = error;
    bd38:	8027883a 	mov	r19,r16
		// Swap x_1 and y_1
		error = x_1;
    bd3c:	9021883a 	mov	r16,r18
		x_1 = y_1;
    bd40:	a025883a 	mov	r18,r20
		y_1 = error;
    bd44:	8029883a 	mov	r20,r16
	}
	if (x_0 > x_1) {
    bd48:	9440060e 	bge	r18,r17,bd64 <alt_up_pixel_buffer_dma_draw_line+0x148>
		// Swap x_0 and x_1
		error = x_0;
    bd4c:	8821883a 	mov	r16,r17
		x_0 = x_1;
    bd50:	9023883a 	mov	r17,r18
		x_1 = error;
    bd54:	8025883a 	mov	r18,r16
		// Swap y_0 and y_1
		error = y_0;
    bd58:	9821883a 	mov	r16,r19
		y_0 = y_1;
    bd5c:	a027883a 	mov	r19,r20
		y_1 = error;
    bd60:	8029883a 	mov	r20,r16
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
    bd64:	946bc83a 	sub	r21,r18,r17
	deltay = ABS(y_1 - y_0);
    bd68:	a4c5c83a 	sub	r2,r20,r19
    bd6c:	1000010e 	bge	r2,zero,bd74 <alt_up_pixel_buffer_dma_draw_line+0x158>
    bd70:	0085c83a 	sub	r2,zero,r2
    bd74:	e0bff715 	stw	r2,-36(fp)
	error = -(deltax / 2); 
    bd78:	a804d7fa 	srli	r2,r21,31
    bd7c:	1545883a 	add	r2,r2,r21
    bd80:	1005d07a 	srai	r2,r2,1
    bd84:	00a1c83a 	sub	r16,zero,r2
	y = y_0;
    bd88:	982d883a 	mov	r22,r19
	if (y_0 < y_1)
    bd8c:	9d00020e 	bge	r19,r20,bd98 <alt_up_pixel_buffer_dma_draw_line+0x17c>
		ystep = 1;
    bd90:	04c00044 	movi	r19,1
    bd94:	00000106 	br	bd9c <alt_up_pixel_buffer_dma_draw_line+0x180>
	else
		ystep = -1;
    bd98:	04ffffc4 	movi	r19,-1

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
    bd9c:	e0bff307 	ldb	r2,-52(fp)
    bda0:	10800058 	cmpnei	r2,r2,1
    bda4:	1000121e 	bne	r2,zero,bdf0 <alt_up_pixel_buffer_dma_draw_line+0x1d4>
	{
		for (x=x_0; x <= x_1; x++) {
    bda8:	00000f06 	br	bde8 <alt_up_pixel_buffer_dma_draw_line+0x1cc>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
    bdac:	e0bff517 	ldw	r2,-44(fp)
    bdb0:	d8800015 	stw	r2,0(sp)
    bdb4:	e0bff417 	ldw	r2,-48(fp)
    bdb8:	d8800115 	stw	r2,4(sp)
    bdbc:	b809883a 	mov	r4,r23
    bdc0:	e17ff617 	ldw	r5,-40(fp)
    bdc4:	b00d883a 	mov	r6,r22
    bdc8:	880f883a 	mov	r7,r17
    bdcc:	000bb9c0 	call	bb9c <helper_plot_pixel>
			error = error + deltay;
    bdd0:	e0bff717 	ldw	r2,-36(fp)
    bdd4:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
    bdd8:	0400020e 	bge	zero,r16,bde4 <alt_up_pixel_buffer_dma_draw_line+0x1c8>
				y = y + ystep;
    bddc:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
    bde0:	8561c83a 	sub	r16,r16,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
    bde4:	8c400044 	addi	r17,r17,1
    bde8:	947ff00e 	bge	r18,r17,bdac <alt_up_pixel_buffer_dma_draw_line+0x190>
    bdec:	00001106 	br	be34 <alt_up_pixel_buffer_dma_draw_line+0x218>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
    bdf0:	00000f06 	br	be30 <alt_up_pixel_buffer_dma_draw_line+0x214>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
    bdf4:	e0bff517 	ldw	r2,-44(fp)
    bdf8:	d8800015 	stw	r2,0(sp)
    bdfc:	e0bff417 	ldw	r2,-48(fp)
    be00:	d8800115 	stw	r2,4(sp)
    be04:	b809883a 	mov	r4,r23
    be08:	e17ff617 	ldw	r5,-40(fp)
    be0c:	880d883a 	mov	r6,r17
    be10:	b00f883a 	mov	r7,r22
    be14:	000bb9c0 	call	bb9c <helper_plot_pixel>
			error = error + deltay;
    be18:	e0bff717 	ldw	r2,-36(fp)
    be1c:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
    be20:	0400020e 	bge	zero,r16,be2c <alt_up_pixel_buffer_dma_draw_line+0x210>
				y = y + ystep;
    be24:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
    be28:	8561c83a 	sub	r16,r16,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
    be2c:	8c400044 	addi	r17,r17,1
    be30:	947ff00e 	bge	r18,r17,bdf4 <alt_up_pixel_buffer_dma_draw_line+0x1d8>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
    be34:	e6fff804 	addi	sp,fp,-32
    be38:	dfc00917 	ldw	ra,36(sp)
    be3c:	df000817 	ldw	fp,32(sp)
    be40:	ddc00717 	ldw	r23,28(sp)
    be44:	dd800617 	ldw	r22,24(sp)
    be48:	dd400517 	ldw	r21,20(sp)
    be4c:	dd000417 	ldw	r20,16(sp)
    be50:	dcc00317 	ldw	r19,12(sp)
    be54:	dc800217 	ldw	r18,8(sp)
    be58:	dc400117 	ldw	r17,4(sp)
    be5c:	dc000017 	ldw	r16,0(sp)
    be60:	dec00a04 	addi	sp,sp,40
    be64:	f800283a 	ret

0000be68 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    be68:	defff504 	addi	sp,sp,-44
    be6c:	df000a15 	stw	fp,40(sp)
    be70:	df000a04 	addi	fp,sp,40
    be74:	e13ffc15 	stw	r4,-16(fp)
    be78:	e17ffd15 	stw	r5,-12(fp)
    be7c:	e1bffe15 	stw	r6,-8(fp)
    be80:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    be84:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    be88:	00800074 	movhi	r2,1
    be8c:	108f7104 	addi	r2,r2,15812
    be90:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    be94:	10003f26 	beq	r2,zero,bf94 <alt_alarm_start+0x12c>
  {
    if (alarm)
    be98:	e0bffc17 	ldw	r2,-16(fp)
    be9c:	10003b26 	beq	r2,zero,bf8c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    bea0:	e0bffc17 	ldw	r2,-16(fp)
    bea4:	e0fffe17 	ldw	r3,-8(fp)
    bea8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    beac:	e0bffc17 	ldw	r2,-16(fp)
    beb0:	e0ffff17 	ldw	r3,-4(fp)
    beb4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    beb8:	0005303a 	rdctl	r2,status
    bebc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bec0:	e0fff817 	ldw	r3,-32(fp)
    bec4:	00bfff84 	movi	r2,-2
    bec8:	1884703a 	and	r2,r3,r2
    becc:	1001703a 	wrctl	status,r2
  
  return context;
    bed0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    bed4:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    bed8:	00800074 	movhi	r2,1
    bedc:	108f7204 	addi	r2,r2,15816
    bee0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    bee4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    bee8:	e0fffd17 	ldw	r3,-12(fp)
    beec:	e0bff617 	ldw	r2,-40(fp)
    bef0:	1885883a 	add	r2,r3,r2
    bef4:	10c00044 	addi	r3,r2,1
    bef8:	e0bffc17 	ldw	r2,-16(fp)
    befc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    bf00:	e0bffc17 	ldw	r2,-16(fp)
    bf04:	10c00217 	ldw	r3,8(r2)
    bf08:	e0bff617 	ldw	r2,-40(fp)
    bf0c:	1880042e 	bgeu	r3,r2,bf20 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    bf10:	e0bffc17 	ldw	r2,-16(fp)
    bf14:	00c00044 	movi	r3,1
    bf18:	10c00405 	stb	r3,16(r2)
    bf1c:	00000206 	br	bf28 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    bf20:	e0bffc17 	ldw	r2,-16(fp)
    bf24:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    bf28:	e0fffc17 	ldw	r3,-16(fp)
    bf2c:	00800074 	movhi	r2,1
    bf30:	1087ae04 	addi	r2,r2,7864
    bf34:	e0bff915 	stw	r2,-28(fp)
    bf38:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    bf3c:	e0bffa17 	ldw	r2,-24(fp)
    bf40:	e0fff917 	ldw	r3,-28(fp)
    bf44:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    bf48:	e0bff917 	ldw	r2,-28(fp)
    bf4c:	10c00017 	ldw	r3,0(r2)
    bf50:	e0bffa17 	ldw	r2,-24(fp)
    bf54:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    bf58:	e0bff917 	ldw	r2,-28(fp)
    bf5c:	10800017 	ldw	r2,0(r2)
    bf60:	e0fffa17 	ldw	r3,-24(fp)
    bf64:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    bf68:	e0bff917 	ldw	r2,-28(fp)
    bf6c:	e0fffa17 	ldw	r3,-24(fp)
    bf70:	10c00015 	stw	r3,0(r2)
    bf74:	e0bff717 	ldw	r2,-36(fp)
    bf78:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bf7c:	e0bffb17 	ldw	r2,-20(fp)
    bf80:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    bf84:	0005883a 	mov	r2,zero
    bf88:	00000306 	br	bf98 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    bf8c:	00bffa84 	movi	r2,-22
    bf90:	00000106 	br	bf98 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    bf94:	00bfde84 	movi	r2,-134
  }
}
    bf98:	e037883a 	mov	sp,fp
    bf9c:	df000017 	ldw	fp,0(sp)
    bfa0:	dec00104 	addi	sp,sp,4
    bfa4:	f800283a 	ret

0000bfa8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bfa8:	defffe04 	addi	sp,sp,-8
    bfac:	dfc00115 	stw	ra,4(sp)
    bfb0:	df000015 	stw	fp,0(sp)
    bfb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    bfb8:	00800074 	movhi	r2,1
    bfbc:	1087ac04 	addi	r2,r2,7856
    bfc0:	10800017 	ldw	r2,0(r2)
    bfc4:	10000526 	beq	r2,zero,bfdc <alt_get_errno+0x34>
    bfc8:	00800074 	movhi	r2,1
    bfcc:	1087ac04 	addi	r2,r2,7856
    bfd0:	10800017 	ldw	r2,0(r2)
    bfd4:	103ee83a 	callr	r2
    bfd8:	00000206 	br	bfe4 <alt_get_errno+0x3c>
    bfdc:	00800074 	movhi	r2,1
    bfe0:	108f7404 	addi	r2,r2,15824
}
    bfe4:	e037883a 	mov	sp,fp
    bfe8:	dfc00117 	ldw	ra,4(sp)
    bfec:	df000017 	ldw	fp,0(sp)
    bff0:	dec00204 	addi	sp,sp,8
    bff4:	f800283a 	ret

0000bff8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    bff8:	defffb04 	addi	sp,sp,-20
    bffc:	dfc00415 	stw	ra,16(sp)
    c000:	df000315 	stw	fp,12(sp)
    c004:	df000304 	addi	fp,sp,12
    c008:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    c00c:	e0bfff17 	ldw	r2,-4(fp)
    c010:	10000616 	blt	r2,zero,c02c <close+0x34>
    c014:	e0bfff17 	ldw	r2,-4(fp)
    c018:	10c00324 	muli	r3,r2,12
    c01c:	00800074 	movhi	r2,1
    c020:	10851d04 	addi	r2,r2,5236
    c024:	1885883a 	add	r2,r3,r2
    c028:	00000106 	br	c030 <close+0x38>
    c02c:	0005883a 	mov	r2,zero
    c030:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    c034:	e0bffd17 	ldw	r2,-12(fp)
    c038:	10001926 	beq	r2,zero,c0a0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    c03c:	e0bffd17 	ldw	r2,-12(fp)
    c040:	10800017 	ldw	r2,0(r2)
    c044:	10800417 	ldw	r2,16(r2)
    c048:	10000626 	beq	r2,zero,c064 <close+0x6c>
    c04c:	e0bffd17 	ldw	r2,-12(fp)
    c050:	10800017 	ldw	r2,0(r2)
    c054:	10800417 	ldw	r2,16(r2)
    c058:	e13ffd17 	ldw	r4,-12(fp)
    c05c:	103ee83a 	callr	r2
    c060:	00000106 	br	c068 <close+0x70>
    c064:	0005883a 	mov	r2,zero
    c068:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    c06c:	e13fff17 	ldw	r4,-4(fp)
    c070:	000c8d80 	call	c8d8 <alt_release_fd>
    if (rval < 0)
    c074:	e0bffe17 	ldw	r2,-8(fp)
    c078:	1000070e 	bge	r2,zero,c098 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    c07c:	000bfa80 	call	bfa8 <alt_get_errno>
    c080:	1007883a 	mov	r3,r2
    c084:	e0bffe17 	ldw	r2,-8(fp)
    c088:	0085c83a 	sub	r2,zero,r2
    c08c:	18800015 	stw	r2,0(r3)
      return -1;
    c090:	00bfffc4 	movi	r2,-1
    c094:	00000706 	br	c0b4 <close+0xbc>
    }
    return 0;
    c098:	0005883a 	mov	r2,zero
    c09c:	00000506 	br	c0b4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    c0a0:	000bfa80 	call	bfa8 <alt_get_errno>
    c0a4:	1007883a 	mov	r3,r2
    c0a8:	00801444 	movi	r2,81
    c0ac:	18800015 	stw	r2,0(r3)
    return -1;
    c0b0:	00bfffc4 	movi	r2,-1
  }
}
    c0b4:	e037883a 	mov	sp,fp
    c0b8:	dfc00117 	ldw	ra,4(sp)
    c0bc:	df000017 	ldw	fp,0(sp)
    c0c0:	dec00204 	addi	sp,sp,8
    c0c4:	f800283a 	ret

0000c0c8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    c0c8:	deffff04 	addi	sp,sp,-4
    c0cc:	df000015 	stw	fp,0(sp)
    c0d0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    c0d4:	e037883a 	mov	sp,fp
    c0d8:	df000017 	ldw	fp,0(sp)
    c0dc:	dec00104 	addi	sp,sp,4
    c0e0:	f800283a 	ret

0000c0e4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    c0e4:	defffc04 	addi	sp,sp,-16
    c0e8:	df000315 	stw	fp,12(sp)
    c0ec:	df000304 	addi	fp,sp,12
    c0f0:	e13ffd15 	stw	r4,-12(fp)
    c0f4:	e17ffe15 	stw	r5,-8(fp)
    c0f8:	e1bfff15 	stw	r6,-4(fp)
  return len;
    c0fc:	e0bfff17 	ldw	r2,-4(fp)
}
    c100:	e037883a 	mov	sp,fp
    c104:	df000017 	ldw	fp,0(sp)
    c108:	dec00104 	addi	sp,sp,4
    c10c:	f800283a 	ret

0000c110 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c110:	defffe04 	addi	sp,sp,-8
    c114:	dfc00115 	stw	ra,4(sp)
    c118:	df000015 	stw	fp,0(sp)
    c11c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c120:	00800074 	movhi	r2,1
    c124:	1087ac04 	addi	r2,r2,7856
    c128:	10800017 	ldw	r2,0(r2)
    c12c:	10000526 	beq	r2,zero,c144 <alt_get_errno+0x34>
    c130:	00800074 	movhi	r2,1
    c134:	1087ac04 	addi	r2,r2,7856
    c138:	10800017 	ldw	r2,0(r2)
    c13c:	103ee83a 	callr	r2
    c140:	00000206 	br	c14c <alt_get_errno+0x3c>
    c144:	00800074 	movhi	r2,1
    c148:	108f7404 	addi	r2,r2,15824
}
    c14c:	e037883a 	mov	sp,fp
    c150:	dfc00117 	ldw	ra,4(sp)
    c154:	df000017 	ldw	fp,0(sp)
    c158:	dec00204 	addi	sp,sp,8
    c15c:	f800283a 	ret

0000c160 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    c160:	defffa04 	addi	sp,sp,-24
    c164:	dfc00515 	stw	ra,20(sp)
    c168:	df000415 	stw	fp,16(sp)
    c16c:	df000404 	addi	fp,sp,16
    c170:	e13ffe15 	stw	r4,-8(fp)
    c174:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    c178:	e0bffe17 	ldw	r2,-8(fp)
    c17c:	10000326 	beq	r2,zero,c18c <alt_dev_llist_insert+0x2c>
    c180:	e0bffe17 	ldw	r2,-8(fp)
    c184:	10800217 	ldw	r2,8(r2)
    c188:	1000061e 	bne	r2,zero,c1a4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    c18c:	000c1100 	call	c110 <alt_get_errno>
    c190:	1007883a 	mov	r3,r2
    c194:	00800584 	movi	r2,22
    c198:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    c19c:	00bffa84 	movi	r2,-22
    c1a0:	00001306 	br	c1f0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    c1a4:	e0bffe17 	ldw	r2,-8(fp)
    c1a8:	e0ffff17 	ldw	r3,-4(fp)
    c1ac:	e0fffc15 	stw	r3,-16(fp)
    c1b0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    c1b4:	e0bffd17 	ldw	r2,-12(fp)
    c1b8:	e0fffc17 	ldw	r3,-16(fp)
    c1bc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    c1c0:	e0bffc17 	ldw	r2,-16(fp)
    c1c4:	10c00017 	ldw	r3,0(r2)
    c1c8:	e0bffd17 	ldw	r2,-12(fp)
    c1cc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    c1d0:	e0bffc17 	ldw	r2,-16(fp)
    c1d4:	10800017 	ldw	r2,0(r2)
    c1d8:	e0fffd17 	ldw	r3,-12(fp)
    c1dc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    c1e0:	e0bffc17 	ldw	r2,-16(fp)
    c1e4:	e0fffd17 	ldw	r3,-12(fp)
    c1e8:	10c00015 	stw	r3,0(r2)

  return 0;  
    c1ec:	0005883a 	mov	r2,zero
}
    c1f0:	e037883a 	mov	sp,fp
    c1f4:	dfc00117 	ldw	ra,4(sp)
    c1f8:	df000017 	ldw	fp,0(sp)
    c1fc:	dec00204 	addi	sp,sp,8
    c200:	f800283a 	ret

0000c204 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    c204:	defffd04 	addi	sp,sp,-12
    c208:	dfc00215 	stw	ra,8(sp)
    c20c:	df000115 	stw	fp,4(sp)
    c210:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    c214:	00800074 	movhi	r2,1
    c218:	10bf3a04 	addi	r2,r2,-792
    c21c:	e0bfff15 	stw	r2,-4(fp)
    c220:	00000606 	br	c23c <_do_ctors+0x38>
        (*ctor) (); 
    c224:	e0bfff17 	ldw	r2,-4(fp)
    c228:	10800017 	ldw	r2,0(r2)
    c22c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    c230:	e0bfff17 	ldw	r2,-4(fp)
    c234:	10bfff04 	addi	r2,r2,-4
    c238:	e0bfff15 	stw	r2,-4(fp)
    c23c:	e0ffff17 	ldw	r3,-4(fp)
    c240:	00800074 	movhi	r2,1
    c244:	10bf3b04 	addi	r2,r2,-788
    c248:	18bff62e 	bgeu	r3,r2,c224 <_do_ctors+0x20>
        (*ctor) (); 
}
    c24c:	e037883a 	mov	sp,fp
    c250:	dfc00117 	ldw	ra,4(sp)
    c254:	df000017 	ldw	fp,0(sp)
    c258:	dec00204 	addi	sp,sp,8
    c25c:	f800283a 	ret

0000c260 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    c260:	defffd04 	addi	sp,sp,-12
    c264:	dfc00215 	stw	ra,8(sp)
    c268:	df000115 	stw	fp,4(sp)
    c26c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    c270:	00800074 	movhi	r2,1
    c274:	10bf3a04 	addi	r2,r2,-792
    c278:	e0bfff15 	stw	r2,-4(fp)
    c27c:	00000606 	br	c298 <_do_dtors+0x38>
        (*dtor) (); 
    c280:	e0bfff17 	ldw	r2,-4(fp)
    c284:	10800017 	ldw	r2,0(r2)
    c288:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    c28c:	e0bfff17 	ldw	r2,-4(fp)
    c290:	10bfff04 	addi	r2,r2,-4
    c294:	e0bfff15 	stw	r2,-4(fp)
    c298:	e0ffff17 	ldw	r3,-4(fp)
    c29c:	00800074 	movhi	r2,1
    c2a0:	10bf3b04 	addi	r2,r2,-788
    c2a4:	18bff62e 	bgeu	r3,r2,c280 <_do_dtors+0x20>
        (*dtor) (); 
}
    c2a8:	e037883a 	mov	sp,fp
    c2ac:	dfc00117 	ldw	ra,4(sp)
    c2b0:	df000017 	ldw	fp,0(sp)
    c2b4:	dec00204 	addi	sp,sp,8
    c2b8:	f800283a 	ret

0000c2bc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    c2bc:	defffa04 	addi	sp,sp,-24
    c2c0:	dfc00515 	stw	ra,20(sp)
    c2c4:	df000415 	stw	fp,16(sp)
    c2c8:	df000404 	addi	fp,sp,16
    c2cc:	e13ffe15 	stw	r4,-8(fp)
    c2d0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    c2d4:	e0bfff17 	ldw	r2,-4(fp)
    c2d8:	10800017 	ldw	r2,0(r2)
    c2dc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    c2e0:	e13ffe17 	ldw	r4,-8(fp)
    c2e4:	000d6940 	call	d694 <strlen>
    c2e8:	10800044 	addi	r2,r2,1
    c2ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c2f0:	00000d06 	br	c328 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    c2f4:	e0bffc17 	ldw	r2,-16(fp)
    c2f8:	10c00217 	ldw	r3,8(r2)
    c2fc:	e0bffd17 	ldw	r2,-12(fp)
    c300:	1809883a 	mov	r4,r3
    c304:	e17ffe17 	ldw	r5,-8(fp)
    c308:	100d883a 	mov	r6,r2
    c30c:	000d1ac0 	call	d1ac <memcmp>
    c310:	1000021e 	bne	r2,zero,c31c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    c314:	e0bffc17 	ldw	r2,-16(fp)
    c318:	00000706 	br	c338 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    c31c:	e0bffc17 	ldw	r2,-16(fp)
    c320:	10800017 	ldw	r2,0(r2)
    c324:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c328:	e0fffc17 	ldw	r3,-16(fp)
    c32c:	e0bfff17 	ldw	r2,-4(fp)
    c330:	18bff01e 	bne	r3,r2,c2f4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    c334:	0005883a 	mov	r2,zero
}
    c338:	e037883a 	mov	sp,fp
    c33c:	dfc00117 	ldw	ra,4(sp)
    c340:	df000017 	ldw	fp,0(sp)
    c344:	dec00204 	addi	sp,sp,8
    c348:	f800283a 	ret

0000c34c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    c34c:	defffe04 	addi	sp,sp,-8
    c350:	dfc00115 	stw	ra,4(sp)
    c354:	df000015 	stw	fp,0(sp)
    c358:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    c35c:	0009883a 	mov	r4,zero
    c360:	01440004 	movi	r5,4096
    c364:	000d0380 	call	d038 <alt_icache_flush>
#endif
}
    c368:	e037883a 	mov	sp,fp
    c36c:	dfc00117 	ldw	ra,4(sp)
    c370:	df000017 	ldw	fp,0(sp)
    c374:	dec00204 	addi	sp,sp,8
    c378:	f800283a 	ret

0000c37c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    c37c:	defff904 	addi	sp,sp,-28
    c380:	dfc00615 	stw	ra,24(sp)
    c384:	df000515 	stw	fp,20(sp)
    c388:	df000504 	addi	fp,sp,20
    c38c:	e13ffc15 	stw	r4,-16(fp)
    c390:	e17ffd15 	stw	r5,-12(fp)
    c394:	e1bffe15 	stw	r6,-8(fp)
    c398:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    c39c:	e13ffd17 	ldw	r4,-12(fp)
    c3a0:	e17ffe17 	ldw	r5,-8(fp)
    c3a4:	e1bfff17 	ldw	r6,-4(fp)
    c3a8:	000c7800 	call	c780 <open>
    c3ac:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    c3b0:	e0bffb17 	ldw	r2,-20(fp)
    c3b4:	10001c16 	blt	r2,zero,c428 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    c3b8:	00800074 	movhi	r2,1
    c3bc:	10851d04 	addi	r2,r2,5236
    c3c0:	e0fffb17 	ldw	r3,-20(fp)
    c3c4:	18c00324 	muli	r3,r3,12
    c3c8:	10c5883a 	add	r2,r2,r3
    c3cc:	10c00017 	ldw	r3,0(r2)
    c3d0:	e0bffc17 	ldw	r2,-16(fp)
    c3d4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    c3d8:	00800074 	movhi	r2,1
    c3dc:	10851d04 	addi	r2,r2,5236
    c3e0:	e0fffb17 	ldw	r3,-20(fp)
    c3e4:	18c00324 	muli	r3,r3,12
    c3e8:	18c00104 	addi	r3,r3,4
    c3ec:	10c5883a 	add	r2,r2,r3
    c3f0:	10c00017 	ldw	r3,0(r2)
    c3f4:	e0bffc17 	ldw	r2,-16(fp)
    c3f8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    c3fc:	00800074 	movhi	r2,1
    c400:	10851d04 	addi	r2,r2,5236
    c404:	e0fffb17 	ldw	r3,-20(fp)
    c408:	18c00324 	muli	r3,r3,12
    c40c:	18c00204 	addi	r3,r3,8
    c410:	10c5883a 	add	r2,r2,r3
    c414:	10c00017 	ldw	r3,0(r2)
    c418:	e0bffc17 	ldw	r2,-16(fp)
    c41c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    c420:	e13ffb17 	ldw	r4,-20(fp)
    c424:	000c8d80 	call	c8d8 <alt_release_fd>
  }
} 
    c428:	e037883a 	mov	sp,fp
    c42c:	dfc00117 	ldw	ra,4(sp)
    c430:	df000017 	ldw	fp,0(sp)
    c434:	dec00204 	addi	sp,sp,8
    c438:	f800283a 	ret

0000c43c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    c43c:	defffb04 	addi	sp,sp,-20
    c440:	dfc00415 	stw	ra,16(sp)
    c444:	df000315 	stw	fp,12(sp)
    c448:	df000304 	addi	fp,sp,12
    c44c:	e13ffd15 	stw	r4,-12(fp)
    c450:	e17ffe15 	stw	r5,-8(fp)
    c454:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    c458:	01000074 	movhi	r4,1
    c45c:	21052004 	addi	r4,r4,5248
    c460:	e17ffd17 	ldw	r5,-12(fp)
    c464:	01800044 	movi	r6,1
    c468:	01c07fc4 	movi	r7,511
    c46c:	000c37c0 	call	c37c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    c470:	01000074 	movhi	r4,1
    c474:	21051d04 	addi	r4,r4,5236
    c478:	e17ffe17 	ldw	r5,-8(fp)
    c47c:	000d883a 	mov	r6,zero
    c480:	01c07fc4 	movi	r7,511
    c484:	000c37c0 	call	c37c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    c488:	01000074 	movhi	r4,1
    c48c:	21052304 	addi	r4,r4,5260
    c490:	e17fff17 	ldw	r5,-4(fp)
    c494:	01800044 	movi	r6,1
    c498:	01c07fc4 	movi	r7,511
    c49c:	000c37c0 	call	c37c <alt_open_fd>
}  
    c4a0:	e037883a 	mov	sp,fp
    c4a4:	dfc00117 	ldw	ra,4(sp)
    c4a8:	df000017 	ldw	fp,0(sp)
    c4ac:	dec00204 	addi	sp,sp,8
    c4b0:	f800283a 	ret

0000c4b4 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    c4b4:	defff004 	addi	sp,sp,-64
    c4b8:	df000f15 	stw	fp,60(sp)
    c4bc:	df000f04 	addi	fp,sp,60
    c4c0:	e13ffd15 	stw	r4,-12(fp)
    c4c4:	e17ffe15 	stw	r5,-8(fp)
    c4c8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
    c4cc:	00bffa84 	movi	r2,-22
    c4d0:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    c4d4:	e0bffd17 	ldw	r2,-12(fp)
    c4d8:	10800828 	cmpgeui	r2,r2,32
    c4dc:	10005c1e 	bne	r2,zero,c650 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c4e0:	0005303a 	rdctl	r2,status
    c4e4:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c4e8:	e0fff317 	ldw	r3,-52(fp)
    c4ec:	00bfff84 	movi	r2,-2
    c4f0:	1884703a 	and	r2,r3,r2
    c4f4:	1001703a 	wrctl	status,r2
  
  return context;
    c4f8:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    c4fc:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
    c500:	008001b4 	movhi	r2,6
    c504:	10a40b04 	addi	r2,r2,-28628
    c508:	e0fffd17 	ldw	r3,-12(fp)
    c50c:	180690fa 	slli	r3,r3,3
    c510:	10c5883a 	add	r2,r2,r3
    c514:	e0ffff17 	ldw	r3,-4(fp)
    c518:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
    c51c:	008001b4 	movhi	r2,6
    c520:	10a40b04 	addi	r2,r2,-28628
    c524:	e0fffd17 	ldw	r3,-12(fp)
    c528:	180690fa 	slli	r3,r3,3
    c52c:	18c00104 	addi	r3,r3,4
    c530:	10c5883a 	add	r2,r2,r3
    c534:	e0fffe17 	ldw	r3,-8(fp)
    c538:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    c53c:	e0bfff17 	ldw	r2,-4(fp)
    c540:	10001f26 	beq	r2,zero,c5c0 <alt_irq_register+0x10c>
    c544:	e0bffd17 	ldw	r2,-12(fp)
    c548:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c54c:	0005303a 	rdctl	r2,status
    c550:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c554:	e0fff517 	ldw	r3,-44(fp)
    c558:	00bfff84 	movi	r2,-2
    c55c:	1884703a 	and	r2,r3,r2
    c560:	1001703a 	wrctl	status,r2
  
  return context;
    c564:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    c568:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
    c56c:	e0bff417 	ldw	r2,-48(fp)
    c570:	00c00044 	movi	r3,1
    c574:	1884983a 	sll	r2,r3,r2
    c578:	1007883a 	mov	r3,r2
    c57c:	00800074 	movhi	r2,1
    c580:	108f7004 	addi	r2,r2,15808
    c584:	10800017 	ldw	r2,0(r2)
    c588:	1886b03a 	or	r3,r3,r2
    c58c:	00800074 	movhi	r2,1
    c590:	108f7004 	addi	r2,r2,15808
    c594:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c598:	00800074 	movhi	r2,1
    c59c:	108f7004 	addi	r2,r2,15808
    c5a0:	10800017 	ldw	r2,0(r2)
    c5a4:	100170fa 	wrctl	ienable,r2
    c5a8:	e0bff617 	ldw	r2,-40(fp)
    c5ac:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c5b0:	e0bff717 	ldw	r2,-36(fp)
    c5b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c5b8:	0005883a 	mov	r2,zero
    c5bc:	00001f06 	br	c63c <alt_irq_register+0x188>
    c5c0:	e0bffd17 	ldw	r2,-12(fp)
    c5c4:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c5c8:	0005303a 	rdctl	r2,status
    c5cc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c5d0:	e0fff917 	ldw	r3,-28(fp)
    c5d4:	00bfff84 	movi	r2,-2
    c5d8:	1884703a 	and	r2,r3,r2
    c5dc:	1001703a 	wrctl	status,r2
  
  return context;
    c5e0:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    c5e4:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
    c5e8:	e0bff817 	ldw	r2,-32(fp)
    c5ec:	00c00044 	movi	r3,1
    c5f0:	1884983a 	sll	r2,r3,r2
    c5f4:	0084303a 	nor	r2,zero,r2
    c5f8:	1007883a 	mov	r3,r2
    c5fc:	00800074 	movhi	r2,1
    c600:	108f7004 	addi	r2,r2,15808
    c604:	10800017 	ldw	r2,0(r2)
    c608:	1886703a 	and	r3,r3,r2
    c60c:	00800074 	movhi	r2,1
    c610:	108f7004 	addi	r2,r2,15808
    c614:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c618:	00800074 	movhi	r2,1
    c61c:	108f7004 	addi	r2,r2,15808
    c620:	10800017 	ldw	r2,0(r2)
    c624:	100170fa 	wrctl	ienable,r2
    c628:	e0bffa17 	ldw	r2,-24(fp)
    c62c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c630:	e0bffb17 	ldw	r2,-20(fp)
    c634:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c638:	0005883a 	mov	r2,zero
    c63c:	e0bff115 	stw	r2,-60(fp)
    c640:	e0bff217 	ldw	r2,-56(fp)
    c644:	e0bffc15 	stw	r2,-16(fp)
    c648:	e0bffc17 	ldw	r2,-16(fp)
    c64c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    c650:	e0bff117 	ldw	r2,-60(fp)
}
    c654:	e037883a 	mov	sp,fp
    c658:	df000017 	ldw	fp,0(sp)
    c65c:	dec00104 	addi	sp,sp,4
    c660:	f800283a 	ret

0000c664 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c664:	defffe04 	addi	sp,sp,-8
    c668:	dfc00115 	stw	ra,4(sp)
    c66c:	df000015 	stw	fp,0(sp)
    c670:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c674:	00800074 	movhi	r2,1
    c678:	1087ac04 	addi	r2,r2,7856
    c67c:	10800017 	ldw	r2,0(r2)
    c680:	10000526 	beq	r2,zero,c698 <alt_get_errno+0x34>
    c684:	00800074 	movhi	r2,1
    c688:	1087ac04 	addi	r2,r2,7856
    c68c:	10800017 	ldw	r2,0(r2)
    c690:	103ee83a 	callr	r2
    c694:	00000206 	br	c6a0 <alt_get_errno+0x3c>
    c698:	00800074 	movhi	r2,1
    c69c:	108f7404 	addi	r2,r2,15824
}
    c6a0:	e037883a 	mov	sp,fp
    c6a4:	dfc00117 	ldw	ra,4(sp)
    c6a8:	df000017 	ldw	fp,0(sp)
    c6ac:	dec00204 	addi	sp,sp,8
    c6b0:	f800283a 	ret

0000c6b4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    c6b4:	defffd04 	addi	sp,sp,-12
    c6b8:	df000215 	stw	fp,8(sp)
    c6bc:	df000204 	addi	fp,sp,8
    c6c0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    c6c4:	e0bfff17 	ldw	r2,-4(fp)
    c6c8:	10800217 	ldw	r2,8(r2)
    c6cc:	10d00034 	orhi	r3,r2,16384
    c6d0:	e0bfff17 	ldw	r2,-4(fp)
    c6d4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c6d8:	e03ffe15 	stw	zero,-8(fp)
    c6dc:	00001d06 	br	c754 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    c6e0:	00800074 	movhi	r2,1
    c6e4:	10851d04 	addi	r2,r2,5236
    c6e8:	e0fffe17 	ldw	r3,-8(fp)
    c6ec:	18c00324 	muli	r3,r3,12
    c6f0:	10c5883a 	add	r2,r2,r3
    c6f4:	10c00017 	ldw	r3,0(r2)
    c6f8:	e0bfff17 	ldw	r2,-4(fp)
    c6fc:	10800017 	ldw	r2,0(r2)
    c700:	1880111e 	bne	r3,r2,c748 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    c704:	00800074 	movhi	r2,1
    c708:	10851d04 	addi	r2,r2,5236
    c70c:	e0fffe17 	ldw	r3,-8(fp)
    c710:	18c00324 	muli	r3,r3,12
    c714:	18c00204 	addi	r3,r3,8
    c718:	10c5883a 	add	r2,r2,r3
    c71c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    c720:	1000090e 	bge	r2,zero,c748 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    c724:	e0bffe17 	ldw	r2,-8(fp)
    c728:	10c00324 	muli	r3,r2,12
    c72c:	00800074 	movhi	r2,1
    c730:	10851d04 	addi	r2,r2,5236
    c734:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    c738:	e0bfff17 	ldw	r2,-4(fp)
    c73c:	18800226 	beq	r3,r2,c748 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    c740:	00bffcc4 	movi	r2,-13
    c744:	00000a06 	br	c770 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c748:	e0bffe17 	ldw	r2,-8(fp)
    c74c:	10800044 	addi	r2,r2,1
    c750:	e0bffe15 	stw	r2,-8(fp)
    c754:	00800074 	movhi	r2,1
    c758:	1087ab04 	addi	r2,r2,7852
    c75c:	10800017 	ldw	r2,0(r2)
    c760:	1007883a 	mov	r3,r2
    c764:	e0bffe17 	ldw	r2,-8(fp)
    c768:	18bfdd2e 	bgeu	r3,r2,c6e0 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    c76c:	0005883a 	mov	r2,zero
}
    c770:	e037883a 	mov	sp,fp
    c774:	df000017 	ldw	fp,0(sp)
    c778:	dec00104 	addi	sp,sp,4
    c77c:	f800283a 	ret

0000c780 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    c780:	defff604 	addi	sp,sp,-40
    c784:	dfc00915 	stw	ra,36(sp)
    c788:	df000815 	stw	fp,32(sp)
    c78c:	df000804 	addi	fp,sp,32
    c790:	e13ffd15 	stw	r4,-12(fp)
    c794:	e17ffe15 	stw	r5,-8(fp)
    c798:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    c79c:	00bfffc4 	movi	r2,-1
    c7a0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    c7a4:	00bffb44 	movi	r2,-19
    c7a8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    c7ac:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    c7b0:	e13ffd17 	ldw	r4,-12(fp)
    c7b4:	01400074 	movhi	r5,1
    c7b8:	2947a904 	addi	r5,r5,7844
    c7bc:	000c2bc0 	call	c2bc <alt_find_dev>
    c7c0:	e0bff815 	stw	r2,-32(fp)
    c7c4:	e0bff817 	ldw	r2,-32(fp)
    c7c8:	1000051e 	bne	r2,zero,c7e0 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    c7cc:	e13ffd17 	ldw	r4,-12(fp)
    c7d0:	000ce280 	call	ce28 <alt_find_file>
    c7d4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    c7d8:	00800044 	movi	r2,1
    c7dc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    c7e0:	e0bff817 	ldw	r2,-32(fp)
    c7e4:	10002926 	beq	r2,zero,c88c <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    c7e8:	e13ff817 	ldw	r4,-32(fp)
    c7ec:	000cf3c0 	call	cf3c <alt_get_fd>
    c7f0:	e0bff915 	stw	r2,-28(fp)
    c7f4:	e0bff917 	ldw	r2,-28(fp)
    c7f8:	1000030e 	bge	r2,zero,c808 <open+0x88>
    {
      status = index;
    c7fc:	e0bff917 	ldw	r2,-28(fp)
    c800:	e0bffa15 	stw	r2,-24(fp)
    c804:	00002306 	br	c894 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
    c808:	e0bff917 	ldw	r2,-28(fp)
    c80c:	10c00324 	muli	r3,r2,12
    c810:	00800074 	movhi	r2,1
    c814:	10851d04 	addi	r2,r2,5236
    c818:	1885883a 	add	r2,r3,r2
    c81c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    c820:	e0fffe17 	ldw	r3,-8(fp)
    c824:	00900034 	movhi	r2,16384
    c828:	10bfffc4 	addi	r2,r2,-1
    c82c:	1886703a 	and	r3,r3,r2
    c830:	e0bffc17 	ldw	r2,-16(fp)
    c834:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    c838:	e0bffb17 	ldw	r2,-20(fp)
    c83c:	1000051e 	bne	r2,zero,c854 <open+0xd4>
    c840:	e13ffc17 	ldw	r4,-16(fp)
    c844:	000c6b40 	call	c6b4 <alt_file_locked>
    c848:	e0bffa15 	stw	r2,-24(fp)
    c84c:	e0bffa17 	ldw	r2,-24(fp)
    c850:	10001016 	blt	r2,zero,c894 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    c854:	e0bff817 	ldw	r2,-32(fp)
    c858:	10800317 	ldw	r2,12(r2)
    c85c:	10000826 	beq	r2,zero,c880 <open+0x100>
    c860:	e0bff817 	ldw	r2,-32(fp)
    c864:	10800317 	ldw	r2,12(r2)
    c868:	e13ffc17 	ldw	r4,-16(fp)
    c86c:	e17ffd17 	ldw	r5,-12(fp)
    c870:	e1bffe17 	ldw	r6,-8(fp)
    c874:	e1ffff17 	ldw	r7,-4(fp)
    c878:	103ee83a 	callr	r2
    c87c:	00000106 	br	c884 <open+0x104>
    c880:	0005883a 	mov	r2,zero
    c884:	e0bffa15 	stw	r2,-24(fp)
    c888:	00000206 	br	c894 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
    c88c:	00bffb44 	movi	r2,-19
    c890:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    c894:	e0bffa17 	ldw	r2,-24(fp)
    c898:	1000090e 	bge	r2,zero,c8c0 <open+0x140>
  {
    alt_release_fd (index);  
    c89c:	e13ff917 	ldw	r4,-28(fp)
    c8a0:	000c8d80 	call	c8d8 <alt_release_fd>
    ALT_ERRNO = -status;
    c8a4:	000c6640 	call	c664 <alt_get_errno>
    c8a8:	1007883a 	mov	r3,r2
    c8ac:	e0bffa17 	ldw	r2,-24(fp)
    c8b0:	0085c83a 	sub	r2,zero,r2
    c8b4:	18800015 	stw	r2,0(r3)
    return -1;
    c8b8:	00bfffc4 	movi	r2,-1
    c8bc:	00000106 	br	c8c4 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    c8c0:	e0bff917 	ldw	r2,-28(fp)
}
    c8c4:	e037883a 	mov	sp,fp
    c8c8:	dfc00117 	ldw	ra,4(sp)
    c8cc:	df000017 	ldw	fp,0(sp)
    c8d0:	dec00204 	addi	sp,sp,8
    c8d4:	f800283a 	ret

0000c8d8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    c8d8:	defffe04 	addi	sp,sp,-8
    c8dc:	df000115 	stw	fp,4(sp)
    c8e0:	df000104 	addi	fp,sp,4
    c8e4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    c8e8:	e0bfff17 	ldw	r2,-4(fp)
    c8ec:	108000d0 	cmplti	r2,r2,3
    c8f0:	10000d1e 	bne	r2,zero,c928 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    c8f4:	00800074 	movhi	r2,1
    c8f8:	10851d04 	addi	r2,r2,5236
    c8fc:	e0ffff17 	ldw	r3,-4(fp)
    c900:	18c00324 	muli	r3,r3,12
    c904:	18c00204 	addi	r3,r3,8
    c908:	10c5883a 	add	r2,r2,r3
    c90c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    c910:	00800074 	movhi	r2,1
    c914:	10851d04 	addi	r2,r2,5236
    c918:	e0ffff17 	ldw	r3,-4(fp)
    c91c:	18c00324 	muli	r3,r3,12
    c920:	10c5883a 	add	r2,r2,r3
    c924:	10000015 	stw	zero,0(r2)
  }
}
    c928:	e037883a 	mov	sp,fp
    c92c:	df000017 	ldw	fp,0(sp)
    c930:	dec00104 	addi	sp,sp,4
    c934:	f800283a 	ret

0000c938 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    c938:	defffa04 	addi	sp,sp,-24
    c93c:	df000515 	stw	fp,20(sp)
    c940:	df000504 	addi	fp,sp,20
    c944:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c948:	0005303a 	rdctl	r2,status
    c94c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c950:	e0fffc17 	ldw	r3,-16(fp)
    c954:	00bfff84 	movi	r2,-2
    c958:	1884703a 	and	r2,r3,r2
    c95c:	1001703a 	wrctl	status,r2
  
  return context;
    c960:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    c964:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    c968:	e0bfff17 	ldw	r2,-4(fp)
    c96c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    c970:	e0bffd17 	ldw	r2,-12(fp)
    c974:	10800017 	ldw	r2,0(r2)
    c978:	e0fffd17 	ldw	r3,-12(fp)
    c97c:	18c00117 	ldw	r3,4(r3)
    c980:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    c984:	e0bffd17 	ldw	r2,-12(fp)
    c988:	10800117 	ldw	r2,4(r2)
    c98c:	e0fffd17 	ldw	r3,-12(fp)
    c990:	18c00017 	ldw	r3,0(r3)
    c994:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    c998:	e0bffd17 	ldw	r2,-12(fp)
    c99c:	e0fffd17 	ldw	r3,-12(fp)
    c9a0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    c9a4:	e0bffd17 	ldw	r2,-12(fp)
    c9a8:	e0fffd17 	ldw	r3,-12(fp)
    c9ac:	10c00015 	stw	r3,0(r2)
    c9b0:	e0bffb17 	ldw	r2,-20(fp)
    c9b4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c9b8:	e0bffe17 	ldw	r2,-8(fp)
    c9bc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    c9c0:	e037883a 	mov	sp,fp
    c9c4:	df000017 	ldw	fp,0(sp)
    c9c8:	dec00104 	addi	sp,sp,4
    c9cc:	f800283a 	ret

0000c9d0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    c9d0:	defffb04 	addi	sp,sp,-20
    c9d4:	dfc00415 	stw	ra,16(sp)
    c9d8:	df000315 	stw	fp,12(sp)
    c9dc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    c9e0:	d0a02617 	ldw	r2,-32616(gp)
    c9e4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    c9e8:	d0a7ea17 	ldw	r2,-24664(gp)
    c9ec:	10800044 	addi	r2,r2,1
    c9f0:	d0a7ea15 	stw	r2,-24664(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    c9f4:	00002e06 	br	cab0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    c9f8:	e0bffd17 	ldw	r2,-12(fp)
    c9fc:	10800017 	ldw	r2,0(r2)
    ca00:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    ca04:	e0bffd17 	ldw	r2,-12(fp)
    ca08:	10800403 	ldbu	r2,16(r2)
    ca0c:	10803fcc 	andi	r2,r2,255
    ca10:	10000426 	beq	r2,zero,ca24 <alt_tick+0x54>
    ca14:	d0a7ea17 	ldw	r2,-24664(gp)
    ca18:	1000021e 	bne	r2,zero,ca24 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    ca1c:	e0bffd17 	ldw	r2,-12(fp)
    ca20:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    ca24:	e0bffd17 	ldw	r2,-12(fp)
    ca28:	10800217 	ldw	r2,8(r2)
    ca2c:	d0e7ea17 	ldw	r3,-24664(gp)
    ca30:	18801d36 	bltu	r3,r2,caa8 <alt_tick+0xd8>
    ca34:	e0bffd17 	ldw	r2,-12(fp)
    ca38:	10800403 	ldbu	r2,16(r2)
    ca3c:	10803fcc 	andi	r2,r2,255
    ca40:	1000191e 	bne	r2,zero,caa8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    ca44:	e0bffd17 	ldw	r2,-12(fp)
    ca48:	10800317 	ldw	r2,12(r2)
    ca4c:	e0fffd17 	ldw	r3,-12(fp)
    ca50:	18c00517 	ldw	r3,20(r3)
    ca54:	1809883a 	mov	r4,r3
    ca58:	103ee83a 	callr	r2
    ca5c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    ca60:	e0bfff17 	ldw	r2,-4(fp)
    ca64:	1000031e 	bne	r2,zero,ca74 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    ca68:	e13ffd17 	ldw	r4,-12(fp)
    ca6c:	000c9380 	call	c938 <alt_alarm_stop>
    ca70:	00000d06 	br	caa8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    ca74:	e0bffd17 	ldw	r2,-12(fp)
    ca78:	10c00217 	ldw	r3,8(r2)
    ca7c:	e0bfff17 	ldw	r2,-4(fp)
    ca80:	1887883a 	add	r3,r3,r2
    ca84:	e0bffd17 	ldw	r2,-12(fp)
    ca88:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    ca8c:	e0bffd17 	ldw	r2,-12(fp)
    ca90:	10c00217 	ldw	r3,8(r2)
    ca94:	d0a7ea17 	ldw	r2,-24664(gp)
    ca98:	1880032e 	bgeu	r3,r2,caa8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    ca9c:	e0bffd17 	ldw	r2,-12(fp)
    caa0:	00c00044 	movi	r3,1
    caa4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    caa8:	e0bffe17 	ldw	r2,-8(fp)
    caac:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    cab0:	e0fffd17 	ldw	r3,-12(fp)
    cab4:	d0a02604 	addi	r2,gp,-32616
    cab8:	18bfcf1e 	bne	r3,r2,c9f8 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    cabc:	00017c80 	call	17c8 <OSTimeTick>
}
    cac0:	e037883a 	mov	sp,fp
    cac4:	dfc00117 	ldw	ra,4(sp)
    cac8:	df000017 	ldw	fp,0(sp)
    cacc:	dec00204 	addi	sp,sp,8
    cad0:	f800283a 	ret

0000cad4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    cad4:	deffff04 	addi	sp,sp,-4
    cad8:	df000015 	stw	fp,0(sp)
    cadc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    cae0:	000170fa 	wrctl	ienable,zero
}
    cae4:	e037883a 	mov	sp,fp
    cae8:	df000017 	ldw	fp,0(sp)
    caec:	dec00104 	addi	sp,sp,4
    caf0:	f800283a 	ret

0000caf4 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
    caf4:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
    caf8:	d0e02917 	ldw	r3,-32604(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
    cafc:	d127e217 	ldw	r4,-24696(gp)

      stw ra,  0(sp)
    cb00:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
    cb04:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
    cb08:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
    cb0c:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
    cb10:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
    cb14:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
    cb18:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
    cb1c:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
    cb20:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
    cb24:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
    cb28:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
    cb2c:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
    cb30:	000cd600 	call	cd60 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
    cb34:	d127dd17 	ldw	r4,-24716(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
    cb38:	d167d507 	ldb	r5,-24748(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
    cb3c:	d127e215 	stw	r4,-24696(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
    cb40:	d167d545 	stb	r5,-24747(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
    cb44:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
    cb48:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
    cb4c:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
    cb50:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
    cb54:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
    cb58:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
    cb5c:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
    cb60:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
    cb64:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
    cb68:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
    cb6c:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
    cb70:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
    cb74:	d0e02915 	stw	r3,-32604(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
    cb78:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
    cb7c:	f800283a 	ret

0000cb80 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
    cb80:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
    cb84:	047fff84 	movi	r17,-2
      and   r18, r18, r17
    cb88:	9464703a 	and	r18,r18,r17
      wrctl status, r18
    cb8c:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
    cb90:	000cd600 	call	cd60 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
    cb94:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
    cb98:	d4a7d345 	stb	r18,-24755(gp)

      /*
       * start execution of the new task.
       */

      br 9b
    cb9c:	003fe506 	br	cb34 <OSCtxSw+0x40>

0000cba0 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
    cba0:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
    cba4:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
    cba8:	10800054 	ori	r2,r2,1
      wrctl status, r2
    cbac:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
    cbb0:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
    cbb4:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
    cbb8:	dec00204 	addi	sp,sp,8

      callr r2
    cbbc:	103ee83a 	callr	r2

      nop
    cbc0:	0001883a 	nop

0000cbc4 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
    cbc4:	defff704 	addi	sp,sp,-36
    cbc8:	dfc00815 	stw	ra,32(sp)
    cbcc:	df000715 	stw	fp,28(sp)
    cbd0:	df000704 	addi	fp,sp,28
    cbd4:	e13ffc15 	stw	r4,-16(fp)
    cbd8:	e17ffd15 	stw	r5,-12(fp)
    cbdc:	e1bffe15 	stw	r6,-8(fp)
    cbe0:	3805883a 	mov	r2,r7
    cbe4:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
    cbe8:	e0fffe17 	ldw	r3,-8(fp)
    cbec:	00bfff04 	movi	r2,-4
    cbf0:	1884703a 	and	r2,r3,r2
    cbf4:	10bef704 	addi	r2,r2,-1060
    cbf8:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
    cbfc:	e13ff917 	ldw	r4,-28(fp)
    cc00:	000b883a 	mov	r5,zero
    cc04:	01810904 	movi	r6,1060
    cc08:	000d3600 	call	d360 <memset>
    cc0c:	e0bff917 	ldw	r2,-28(fp)
    cc10:	10c0bb04 	addi	r3,r2,748
    cc14:	e0bff917 	ldw	r2,-28(fp)
    cc18:	10c00115 	stw	r3,4(r2)
    cc1c:	e0bff917 	ldw	r2,-28(fp)
    cc20:	10c0d504 	addi	r3,r2,852
    cc24:	e0bff917 	ldw	r2,-28(fp)
    cc28:	10c00215 	stw	r3,8(r2)
    cc2c:	e0bff917 	ldw	r2,-28(fp)
    cc30:	10c0ef04 	addi	r3,r2,956
    cc34:	e0bff917 	ldw	r2,-28(fp)
    cc38:	10c00315 	stw	r3,12(r2)
    cc3c:	e0fff917 	ldw	r3,-28(fp)
    cc40:	00800074 	movhi	r2,1
    cc44:	10801504 	addi	r2,r2,84
    cc48:	18800d15 	stw	r2,52(r3)
    cc4c:	e0bff917 	ldw	r2,-28(fp)
    cc50:	00c00044 	movi	r3,1
    cc54:	10c02915 	stw	r3,164(r2)
    cc58:	10002a15 	stw	zero,168(r2)
    cc5c:	e0bff917 	ldw	r2,-28(fp)
    cc60:	00ccc384 	movi	r3,13070
    cc64:	10c02b0d 	sth	r3,172(r2)
    cc68:	e0bff917 	ldw	r2,-28(fp)
    cc6c:	00eaf344 	movi	r3,-21555
    cc70:	10c02b8d 	sth	r3,174(r2)
    cc74:	e0bff917 	ldw	r2,-28(fp)
    cc78:	00c48d04 	movi	r3,4660
    cc7c:	10c02c0d 	sth	r3,176(r2)
    cc80:	e0bff917 	ldw	r2,-28(fp)
    cc84:	00f99b44 	movi	r3,-6547
    cc88:	10c02c8d 	sth	r3,178(r2)
    cc8c:	e0bff917 	ldw	r2,-28(fp)
    cc90:	00f7bb04 	movi	r3,-8468
    cc94:	10c02d0d 	sth	r3,180(r2)
    cc98:	e0bff917 	ldw	r2,-28(fp)
    cc9c:	00c00144 	movi	r3,5
    cca0:	10c02d8d 	sth	r3,182(r2)
    cca4:	e0bff917 	ldw	r2,-28(fp)
    cca8:	00c002c4 	movi	r3,11
    ccac:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
    ccb0:	e0bff917 	ldw	r2,-28(fp)
    ccb4:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
    ccb8:	e0bffa17 	ldw	r2,-24(fp)
    ccbc:	10bff304 	addi	r2,r2,-52
    ccc0:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
    ccc4:	e0bffb17 	ldw	r2,-20(fp)
    ccc8:	10800c04 	addi	r2,r2,48
    cccc:	e0fffc17 	ldw	r3,-16(fp)
    ccd0:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
    ccd4:	e0bffb17 	ldw	r2,-20(fp)
    ccd8:	10800b04 	addi	r2,r2,44
    ccdc:	e0fffd17 	ldw	r3,-12(fp)
    cce0:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
    cce4:	e0bffb17 	ldw	r2,-20(fp)
    cce8:	10800a04 	addi	r2,r2,40
    ccec:	e0fff917 	ldw	r3,-28(fp)
    ccf0:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
    ccf4:	00800074 	movhi	r2,1
    ccf8:	10b2e804 	addi	r2,r2,-13408
    ccfc:	10c00104 	addi	r3,r2,4
    cd00:	e0bffb17 	ldw	r2,-20(fp)
    cd04:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
    cd08:	e0bffb17 	ldw	r2,-20(fp)
}
    cd0c:	e037883a 	mov	sp,fp
    cd10:	dfc00117 	ldw	ra,4(sp)
    cd14:	df000017 	ldw	fp,0(sp)
    cd18:	dec00204 	addi	sp,sp,8
    cd1c:	f800283a 	ret

0000cd20 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
    cd20:	defffe04 	addi	sp,sp,-8
    cd24:	df000115 	stw	fp,4(sp)
    cd28:	df000104 	addi	fp,sp,4
    cd2c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
    cd30:	e037883a 	mov	sp,fp
    cd34:	df000017 	ldw	fp,0(sp)
    cd38:	dec00104 	addi	sp,sp,4
    cd3c:	f800283a 	ret

0000cd40 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
    cd40:	defffe04 	addi	sp,sp,-8
    cd44:	df000115 	stw	fp,4(sp)
    cd48:	df000104 	addi	fp,sp,4
    cd4c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
    cd50:	e037883a 	mov	sp,fp
    cd54:	df000017 	ldw	fp,0(sp)
    cd58:	dec00104 	addi	sp,sp,4
    cd5c:	f800283a 	ret

0000cd60 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
    cd60:	deffff04 	addi	sp,sp,-4
    cd64:	df000015 	stw	fp,0(sp)
    cd68:	d839883a 	mov	fp,sp
}
    cd6c:	e037883a 	mov	sp,fp
    cd70:	df000017 	ldw	fp,0(sp)
    cd74:	dec00104 	addi	sp,sp,4
    cd78:	f800283a 	ret

0000cd7c <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
    cd7c:	deffff04 	addi	sp,sp,-4
    cd80:	df000015 	stw	fp,0(sp)
    cd84:	d839883a 	mov	fp,sp
}
    cd88:	e037883a 	mov	sp,fp
    cd8c:	df000017 	ldw	fp,0(sp)
    cd90:	dec00104 	addi	sp,sp,4
    cd94:	f800283a 	ret

0000cd98 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
    cd98:	deffff04 	addi	sp,sp,-4
    cd9c:	df000015 	stw	fp,0(sp)
    cda0:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
    cda4:	e037883a 	mov	sp,fp
    cda8:	df000017 	ldw	fp,0(sp)
    cdac:	dec00104 	addi	sp,sp,4
    cdb0:	f800283a 	ret

0000cdb4 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
    cdb4:	deffff04 	addi	sp,sp,-4
    cdb8:	df000015 	stw	fp,0(sp)
    cdbc:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
    cdc0:	e037883a 	mov	sp,fp
    cdc4:	df000017 	ldw	fp,0(sp)
    cdc8:	dec00104 	addi	sp,sp,4
    cdcc:	f800283a 	ret

0000cdd0 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
    cdd0:	deffff04 	addi	sp,sp,-4
    cdd4:	df000015 	stw	fp,0(sp)
    cdd8:	d839883a 	mov	fp,sp
}
    cddc:	e037883a 	mov	sp,fp
    cde0:	df000017 	ldw	fp,0(sp)
    cde4:	dec00104 	addi	sp,sp,4
    cde8:	f800283a 	ret

0000cdec <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
    cdec:	deffff04 	addi	sp,sp,-4
    cdf0:	df000015 	stw	fp,0(sp)
    cdf4:	d839883a 	mov	fp,sp
}
    cdf8:	e037883a 	mov	sp,fp
    cdfc:	df000017 	ldw	fp,0(sp)
    ce00:	dec00104 	addi	sp,sp,4
    ce04:	f800283a 	ret

0000ce08 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
    ce08:	defffe04 	addi	sp,sp,-8
    ce0c:	df000115 	stw	fp,4(sp)
    ce10:	df000104 	addi	fp,sp,4
    ce14:	e13fff15 	stw	r4,-4(fp)
}
    ce18:	e037883a 	mov	sp,fp
    ce1c:	df000017 	ldw	fp,0(sp)
    ce20:	dec00104 	addi	sp,sp,4
    ce24:	f800283a 	ret

0000ce28 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    ce28:	defffb04 	addi	sp,sp,-20
    ce2c:	dfc00415 	stw	ra,16(sp)
    ce30:	df000315 	stw	fp,12(sp)
    ce34:	df000304 	addi	fp,sp,12
    ce38:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    ce3c:	00800074 	movhi	r2,1
    ce40:	1087a704 	addi	r2,r2,7836
    ce44:	10800017 	ldw	r2,0(r2)
    ce48:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    ce4c:	00003106 	br	cf14 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    ce50:	e0bffd17 	ldw	r2,-12(fp)
    ce54:	10800217 	ldw	r2,8(r2)
    ce58:	1009883a 	mov	r4,r2
    ce5c:	000d6940 	call	d694 <strlen>
    ce60:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    ce64:	e0bffd17 	ldw	r2,-12(fp)
    ce68:	10c00217 	ldw	r3,8(r2)
    ce6c:	e0bffe17 	ldw	r2,-8(fp)
    ce70:	10bfffc4 	addi	r2,r2,-1
    ce74:	1885883a 	add	r2,r3,r2
    ce78:	10800003 	ldbu	r2,0(r2)
    ce7c:	10803fcc 	andi	r2,r2,255
    ce80:	1080201c 	xori	r2,r2,128
    ce84:	10bfe004 	addi	r2,r2,-128
    ce88:	10800bd8 	cmpnei	r2,r2,47
    ce8c:	1000031e 	bne	r2,zero,ce9c <alt_find_file+0x74>
    {
      len -= 1;
    ce90:	e0bffe17 	ldw	r2,-8(fp)
    ce94:	10bfffc4 	addi	r2,r2,-1
    ce98:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    ce9c:	e0bffe17 	ldw	r2,-8(fp)
    cea0:	e0ffff17 	ldw	r3,-4(fp)
    cea4:	1885883a 	add	r2,r3,r2
    cea8:	10800003 	ldbu	r2,0(r2)
    ceac:	10803fcc 	andi	r2,r2,255
    ceb0:	1080201c 	xori	r2,r2,128
    ceb4:	10bfe004 	addi	r2,r2,-128
    ceb8:	10800be0 	cmpeqi	r2,r2,47
    cebc:	1000081e 	bne	r2,zero,cee0 <alt_find_file+0xb8>
    cec0:	e0bffe17 	ldw	r2,-8(fp)
    cec4:	e0ffff17 	ldw	r3,-4(fp)
    cec8:	1885883a 	add	r2,r3,r2
    cecc:	10800003 	ldbu	r2,0(r2)
    ced0:	10803fcc 	andi	r2,r2,255
    ced4:	1080201c 	xori	r2,r2,128
    ced8:	10bfe004 	addi	r2,r2,-128
    cedc:	10000a1e 	bne	r2,zero,cf08 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    cee0:	e0bffd17 	ldw	r2,-12(fp)
    cee4:	10c00217 	ldw	r3,8(r2)
    cee8:	e0bffe17 	ldw	r2,-8(fp)
    ceec:	1809883a 	mov	r4,r3
    cef0:	e17fff17 	ldw	r5,-4(fp)
    cef4:	100d883a 	mov	r6,r2
    cef8:	000d1ac0 	call	d1ac <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    cefc:	1000021e 	bne	r2,zero,cf08 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    cf00:	e0bffd17 	ldw	r2,-12(fp)
    cf04:	00000806 	br	cf28 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    cf08:	e0bffd17 	ldw	r2,-12(fp)
    cf0c:	10800017 	ldw	r2,0(r2)
    cf10:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    cf14:	e0fffd17 	ldw	r3,-12(fp)
    cf18:	00800074 	movhi	r2,1
    cf1c:	1087a704 	addi	r2,r2,7836
    cf20:	18bfcb1e 	bne	r3,r2,ce50 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    cf24:	0005883a 	mov	r2,zero
}
    cf28:	e037883a 	mov	sp,fp
    cf2c:	dfc00117 	ldw	ra,4(sp)
    cf30:	df000017 	ldw	fp,0(sp)
    cf34:	dec00204 	addi	sp,sp,8
    cf38:	f800283a 	ret

0000cf3c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    cf3c:	defff904 	addi	sp,sp,-28
    cf40:	dfc00615 	stw	ra,24(sp)
    cf44:	df000515 	stw	fp,20(sp)
    cf48:	df000504 	addi	fp,sp,20
    cf4c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    cf50:	00bffa04 	movi	r2,-24
    cf54:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
    cf58:	00800074 	movhi	r2,1
    cf5c:	108f6f04 	addi	r2,r2,15804
    cf60:	10800017 	ldw	r2,0(r2)
    cf64:	e0bffd15 	stw	r2,-12(fp)
    cf68:	e03ffe0d 	sth	zero,-8(fp)
    cf6c:	e0fffe0b 	ldhu	r3,-8(fp)
    cf70:	e0bffe84 	addi	r2,fp,-6
    cf74:	e13ffd17 	ldw	r4,-12(fp)
    cf78:	180b883a 	mov	r5,r3
    cf7c:	100d883a 	mov	r6,r2
    cf80:	00062640 	call	6264 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    cf84:	e03ffb15 	stw	zero,-20(fp)
    cf88:	00001d06 	br	d000 <alt_get_fd+0xc4>
  {
    if (!alt_fd_list[i].dev)
    cf8c:	00800074 	movhi	r2,1
    cf90:	10851d04 	addi	r2,r2,5236
    cf94:	e0fffb17 	ldw	r3,-20(fp)
    cf98:	18c00324 	muli	r3,r3,12
    cf9c:	10c5883a 	add	r2,r2,r3
    cfa0:	10800017 	ldw	r2,0(r2)
    cfa4:	1000131e 	bne	r2,zero,cff4 <alt_get_fd+0xb8>
    {
      alt_fd_list[i].dev = dev;
    cfa8:	00800074 	movhi	r2,1
    cfac:	10851d04 	addi	r2,r2,5236
    cfb0:	e0fffb17 	ldw	r3,-20(fp)
    cfb4:	18c00324 	muli	r3,r3,12
    cfb8:	10c5883a 	add	r2,r2,r3
    cfbc:	e0ffff17 	ldw	r3,-4(fp)
    cfc0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    cfc4:	00800074 	movhi	r2,1
    cfc8:	1087ab04 	addi	r2,r2,7852
    cfcc:	10c00017 	ldw	r3,0(r2)
    cfd0:	e0bffb17 	ldw	r2,-20(fp)
    cfd4:	1880040e 	bge	r3,r2,cfe8 <alt_get_fd+0xac>
      {
        alt_max_fd = i;
    cfd8:	00800074 	movhi	r2,1
    cfdc:	1087ab04 	addi	r2,r2,7852
    cfe0:	e0fffb17 	ldw	r3,-20(fp)
    cfe4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    cfe8:	e0bffb17 	ldw	r2,-20(fp)
    cfec:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
    cff0:	00000606 	br	d00c <alt_get_fd+0xd0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    cff4:	e0bffb17 	ldw	r2,-20(fp)
    cff8:	10800044 	addi	r2,r2,1
    cffc:	e0bffb15 	stw	r2,-20(fp)
    d000:	e0bffb17 	ldw	r2,-20(fp)
    d004:	10800810 	cmplti	r2,r2,32
    d008:	103fe01e 	bne	r2,zero,cf8c <alt_get_fd+0x50>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
    d00c:	00800074 	movhi	r2,1
    d010:	108f6f04 	addi	r2,r2,15804
    d014:	10800017 	ldw	r2,0(r2)
    d018:	1009883a 	mov	r4,r2
    d01c:	00066380 	call	6638 <OSSemPost>

  return rc;
    d020:	e0bffc17 	ldw	r2,-16(fp)
}
    d024:	e037883a 	mov	sp,fp
    d028:	dfc00117 	ldw	ra,4(sp)
    d02c:	df000017 	ldw	fp,0(sp)
    d030:	dec00204 	addi	sp,sp,8
    d034:	f800283a 	ret

0000d038 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    d038:	defffb04 	addi	sp,sp,-20
    d03c:	df000415 	stw	fp,16(sp)
    d040:	df000404 	addi	fp,sp,16
    d044:	e13ffe15 	stw	r4,-8(fp)
    d048:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    d04c:	e0bfff17 	ldw	r2,-4(fp)
    d050:	10840070 	cmpltui	r2,r2,4097
    d054:	1000021e 	bne	r2,zero,d060 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    d058:	00840004 	movi	r2,4096
    d05c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    d060:	e0fffe17 	ldw	r3,-8(fp)
    d064:	e0bfff17 	ldw	r2,-4(fp)
    d068:	1885883a 	add	r2,r3,r2
    d06c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    d070:	e0bffe17 	ldw	r2,-8(fp)
    d074:	e0bffc15 	stw	r2,-16(fp)
    d078:	00000506 	br	d090 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    d07c:	e0bffc17 	ldw	r2,-16(fp)
    d080:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    d084:	e0bffc17 	ldw	r2,-16(fp)
    d088:	10800804 	addi	r2,r2,32
    d08c:	e0bffc15 	stw	r2,-16(fp)
    d090:	e0fffc17 	ldw	r3,-16(fp)
    d094:	e0bffd17 	ldw	r2,-12(fp)
    d098:	18bff836 	bltu	r3,r2,d07c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    d09c:	e0bffe17 	ldw	r2,-8(fp)
    d0a0:	108007cc 	andi	r2,r2,31
    d0a4:	10000226 	beq	r2,zero,d0b0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    d0a8:	e0bffc17 	ldw	r2,-16(fp)
    d0ac:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    d0b0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    d0b4:	e037883a 	mov	sp,fp
    d0b8:	df000017 	ldw	fp,0(sp)
    d0bc:	dec00104 	addi	sp,sp,4
    d0c0:	f800283a 	ret

0000d0c4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    d0c4:	defffe04 	addi	sp,sp,-8
    d0c8:	df000115 	stw	fp,4(sp)
    d0cc:	df000104 	addi	fp,sp,4
    d0d0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    d0d4:	e0bfff17 	ldw	r2,-4(fp)
    d0d8:	10bffe84 	addi	r2,r2,-6
    d0dc:	10c00428 	cmpgeui	r3,r2,16
    d0e0:	18001a1e 	bne	r3,zero,d14c <alt_exception_cause_generated_bad_addr+0x88>
    d0e4:	100690ba 	slli	r3,r2,2
    d0e8:	00800074 	movhi	r2,1
    d0ec:	10b43f04 	addi	r2,r2,-12036
    d0f0:	1885883a 	add	r2,r3,r2
    d0f4:	10800017 	ldw	r2,0(r2)
    d0f8:	1000683a 	jmp	r2
    d0fc:	0000d13c 	xorhi	zero,zero,836
    d100:	0000d13c 	xorhi	zero,zero,836
    d104:	0000d14c 	andi	zero,zero,837
    d108:	0000d14c 	andi	zero,zero,837
    d10c:	0000d14c 	andi	zero,zero,837
    d110:	0000d13c 	xorhi	zero,zero,836
    d114:	0000d144 	movi	zero,837
    d118:	0000d14c 	andi	zero,zero,837
    d11c:	0000d13c 	xorhi	zero,zero,836
    d120:	0000d13c 	xorhi	zero,zero,836
    d124:	0000d14c 	andi	zero,zero,837
    d128:	0000d13c 	xorhi	zero,zero,836
    d12c:	0000d144 	movi	zero,837
    d130:	0000d14c 	andi	zero,zero,837
    d134:	0000d14c 	andi	zero,zero,837
    d138:	0000d13c 	xorhi	zero,zero,836
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    d13c:	00800044 	movi	r2,1
    d140:	00000306 	br	d150 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    d144:	0005883a 	mov	r2,zero
    d148:	00000106 	br	d150 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    d14c:	0005883a 	mov	r2,zero
  }
}
    d150:	e037883a 	mov	sp,fp
    d154:	df000017 	ldw	fp,0(sp)
    d158:	dec00104 	addi	sp,sp,4
    d15c:	f800283a 	ret

0000d160 <atexit>:
    d160:	200b883a 	mov	r5,r4
    d164:	000d883a 	mov	r6,zero
    d168:	0009883a 	mov	r4,zero
    d16c:	000f883a 	mov	r7,zero
    d170:	000d9d41 	jmpi	d9d4 <__register_exitproc>

0000d174 <exit>:
    d174:	defffe04 	addi	sp,sp,-8
    d178:	000b883a 	mov	r5,zero
    d17c:	dc000015 	stw	r16,0(sp)
    d180:	dfc00115 	stw	ra,4(sp)
    d184:	2021883a 	mov	r16,r4
    d188:	000dae80 	call	dae8 <__call_exitprocs>
    d18c:	00800074 	movhi	r2,1
    d190:	1087b004 	addi	r2,r2,7872
    d194:	11000017 	ldw	r4,0(r2)
    d198:	20800f17 	ldw	r2,60(r4)
    d19c:	10000126 	beq	r2,zero,d1a4 <exit+0x30>
    d1a0:	103ee83a 	callr	r2
    d1a4:	8009883a 	mov	r4,r16
    d1a8:	000f6540 	call	f654 <_exit>

0000d1ac <memcmp>:
    d1ac:	01c000c4 	movi	r7,3
    d1b0:	3980192e 	bgeu	r7,r6,d218 <memcmp+0x6c>
    d1b4:	2144b03a 	or	r2,r4,r5
    d1b8:	11c4703a 	and	r2,r2,r7
    d1bc:	10000f26 	beq	r2,zero,d1fc <memcmp+0x50>
    d1c0:	20800003 	ldbu	r2,0(r4)
    d1c4:	28c00003 	ldbu	r3,0(r5)
    d1c8:	10c0151e 	bne	r2,r3,d220 <memcmp+0x74>
    d1cc:	31bfff84 	addi	r6,r6,-2
    d1d0:	01ffffc4 	movi	r7,-1
    d1d4:	00000406 	br	d1e8 <memcmp+0x3c>
    d1d8:	20800003 	ldbu	r2,0(r4)
    d1dc:	28c00003 	ldbu	r3,0(r5)
    d1e0:	31bfffc4 	addi	r6,r6,-1
    d1e4:	10c00e1e 	bne	r2,r3,d220 <memcmp+0x74>
    d1e8:	21000044 	addi	r4,r4,1
    d1ec:	29400044 	addi	r5,r5,1
    d1f0:	31fff91e 	bne	r6,r7,d1d8 <memcmp+0x2c>
    d1f4:	0005883a 	mov	r2,zero
    d1f8:	f800283a 	ret
    d1fc:	20c00017 	ldw	r3,0(r4)
    d200:	28800017 	ldw	r2,0(r5)
    d204:	1880041e 	bne	r3,r2,d218 <memcmp+0x6c>
    d208:	31bfff04 	addi	r6,r6,-4
    d20c:	21000104 	addi	r4,r4,4
    d210:	29400104 	addi	r5,r5,4
    d214:	39bff936 	bltu	r7,r6,d1fc <memcmp+0x50>
    d218:	303fe91e 	bne	r6,zero,d1c0 <memcmp+0x14>
    d21c:	003ff506 	br	d1f4 <memcmp+0x48>
    d220:	10c5c83a 	sub	r2,r2,r3
    d224:	f800283a 	ret

0000d228 <memcpy>:
    d228:	deffff04 	addi	sp,sp,-4
    d22c:	dc000015 	stw	r16,0(sp)
    d230:	00c003c4 	movi	r3,15
    d234:	2005883a 	mov	r2,r4
    d238:	1980432e 	bgeu	r3,r6,d348 <memcpy+0x120>
    d23c:	2146b03a 	or	r3,r4,r5
    d240:	18c000cc 	andi	r3,r3,3
    d244:	1800421e 	bne	r3,zero,d350 <memcpy+0x128>
    d248:	343ffc04 	addi	r16,r6,-16
    d24c:	8020d13a 	srli	r16,r16,4
    d250:	28c00104 	addi	r3,r5,4
    d254:	23400104 	addi	r13,r4,4
    d258:	801e913a 	slli	r15,r16,4
    d25c:	2b000204 	addi	r12,r5,8
    d260:	22c00204 	addi	r11,r4,8
    d264:	7bc00504 	addi	r15,r15,20
    d268:	2a800304 	addi	r10,r5,12
    d26c:	22400304 	addi	r9,r4,12
    d270:	2bdf883a 	add	r15,r5,r15
    d274:	2811883a 	mov	r8,r5
    d278:	200f883a 	mov	r7,r4
    d27c:	41000017 	ldw	r4,0(r8)
    d280:	39c00404 	addi	r7,r7,16
    d284:	18c00404 	addi	r3,r3,16
    d288:	393ffc15 	stw	r4,-16(r7)
    d28c:	1bbffc17 	ldw	r14,-16(r3)
    d290:	6b400404 	addi	r13,r13,16
    d294:	5ac00404 	addi	r11,r11,16
    d298:	6bbffc15 	stw	r14,-16(r13)
    d29c:	63800017 	ldw	r14,0(r12)
    d2a0:	4a400404 	addi	r9,r9,16
    d2a4:	42000404 	addi	r8,r8,16
    d2a8:	5bbffc15 	stw	r14,-16(r11)
    d2ac:	53800017 	ldw	r14,0(r10)
    d2b0:	63000404 	addi	r12,r12,16
    d2b4:	52800404 	addi	r10,r10,16
    d2b8:	4bbffc15 	stw	r14,-16(r9)
    d2bc:	1bffef1e 	bne	r3,r15,d27c <memcpy+0x54>
    d2c0:	81c00044 	addi	r7,r16,1
    d2c4:	380e913a 	slli	r7,r7,4
    d2c8:	310003cc 	andi	r4,r6,15
    d2cc:	02c000c4 	movi	r11,3
    d2d0:	11c7883a 	add	r3,r2,r7
    d2d4:	29cb883a 	add	r5,r5,r7
    d2d8:	59001f2e 	bgeu	r11,r4,d358 <memcpy+0x130>
    d2dc:	1813883a 	mov	r9,r3
    d2e0:	2811883a 	mov	r8,r5
    d2e4:	200f883a 	mov	r7,r4
    d2e8:	42800017 	ldw	r10,0(r8)
    d2ec:	4a400104 	addi	r9,r9,4
    d2f0:	39ffff04 	addi	r7,r7,-4
    d2f4:	4abfff15 	stw	r10,-4(r9)
    d2f8:	42000104 	addi	r8,r8,4
    d2fc:	59fffa36 	bltu	r11,r7,d2e8 <memcpy+0xc0>
    d300:	213fff04 	addi	r4,r4,-4
    d304:	2008d0ba 	srli	r4,r4,2
    d308:	318000cc 	andi	r6,r6,3
    d30c:	21000044 	addi	r4,r4,1
    d310:	2109883a 	add	r4,r4,r4
    d314:	2109883a 	add	r4,r4,r4
    d318:	1907883a 	add	r3,r3,r4
    d31c:	290b883a 	add	r5,r5,r4
    d320:	30000626 	beq	r6,zero,d33c <memcpy+0x114>
    d324:	198d883a 	add	r6,r3,r6
    d328:	29c00003 	ldbu	r7,0(r5)
    d32c:	18c00044 	addi	r3,r3,1
    d330:	29400044 	addi	r5,r5,1
    d334:	19ffffc5 	stb	r7,-1(r3)
    d338:	19bffb1e 	bne	r3,r6,d328 <memcpy+0x100>
    d33c:	dc000017 	ldw	r16,0(sp)
    d340:	dec00104 	addi	sp,sp,4
    d344:	f800283a 	ret
    d348:	2007883a 	mov	r3,r4
    d34c:	003ff406 	br	d320 <memcpy+0xf8>
    d350:	2007883a 	mov	r3,r4
    d354:	003ff306 	br	d324 <memcpy+0xfc>
    d358:	200d883a 	mov	r6,r4
    d35c:	003ff006 	br	d320 <memcpy+0xf8>

0000d360 <memset>:
    d360:	20c000cc 	andi	r3,r4,3
    d364:	2005883a 	mov	r2,r4
    d368:	18004326 	beq	r3,zero,d478 <memset+0x118>
    d36c:	31ffffc4 	addi	r7,r6,-1
    d370:	30004026 	beq	r6,zero,d474 <memset+0x114>
    d374:	2813883a 	mov	r9,r5
    d378:	200d883a 	mov	r6,r4
    d37c:	2007883a 	mov	r3,r4
    d380:	00000406 	br	d394 <memset+0x34>
    d384:	3a3fffc4 	addi	r8,r7,-1
    d388:	31800044 	addi	r6,r6,1
    d38c:	38003926 	beq	r7,zero,d474 <memset+0x114>
    d390:	400f883a 	mov	r7,r8
    d394:	18c00044 	addi	r3,r3,1
    d398:	32400005 	stb	r9,0(r6)
    d39c:	1a0000cc 	andi	r8,r3,3
    d3a0:	403ff81e 	bne	r8,zero,d384 <memset+0x24>
    d3a4:	010000c4 	movi	r4,3
    d3a8:	21c02d2e 	bgeu	r4,r7,d460 <memset+0x100>
    d3ac:	29803fcc 	andi	r6,r5,255
    d3b0:	3008923a 	slli	r4,r6,8
    d3b4:	218cb03a 	or	r6,r4,r6
    d3b8:	3008943a 	slli	r4,r6,16
    d3bc:	218cb03a 	or	r6,r4,r6
    d3c0:	010003c4 	movi	r4,15
    d3c4:	21c0182e 	bgeu	r4,r7,d428 <memset+0xc8>
    d3c8:	3b3ffc04 	addi	r12,r7,-16
    d3cc:	6018d13a 	srli	r12,r12,4
    d3d0:	1a000104 	addi	r8,r3,4
    d3d4:	1ac00204 	addi	r11,r3,8
    d3d8:	6008913a 	slli	r4,r12,4
    d3dc:	1a800304 	addi	r10,r3,12
    d3e0:	1813883a 	mov	r9,r3
    d3e4:	21000504 	addi	r4,r4,20
    d3e8:	1909883a 	add	r4,r3,r4
    d3ec:	49800015 	stw	r6,0(r9)
    d3f0:	41800015 	stw	r6,0(r8)
    d3f4:	59800015 	stw	r6,0(r11)
    d3f8:	51800015 	stw	r6,0(r10)
    d3fc:	42000404 	addi	r8,r8,16
    d400:	4a400404 	addi	r9,r9,16
    d404:	5ac00404 	addi	r11,r11,16
    d408:	52800404 	addi	r10,r10,16
    d40c:	413ff71e 	bne	r8,r4,d3ec <memset+0x8c>
    d410:	63000044 	addi	r12,r12,1
    d414:	6018913a 	slli	r12,r12,4
    d418:	39c003cc 	andi	r7,r7,15
    d41c:	010000c4 	movi	r4,3
    d420:	1b07883a 	add	r3,r3,r12
    d424:	21c00e2e 	bgeu	r4,r7,d460 <memset+0x100>
    d428:	1813883a 	mov	r9,r3
    d42c:	3811883a 	mov	r8,r7
    d430:	010000c4 	movi	r4,3
    d434:	49800015 	stw	r6,0(r9)
    d438:	423fff04 	addi	r8,r8,-4
    d43c:	4a400104 	addi	r9,r9,4
    d440:	223ffc36 	bltu	r4,r8,d434 <memset+0xd4>
    d444:	393fff04 	addi	r4,r7,-4
    d448:	2008d0ba 	srli	r4,r4,2
    d44c:	39c000cc 	andi	r7,r7,3
    d450:	21000044 	addi	r4,r4,1
    d454:	2109883a 	add	r4,r4,r4
    d458:	2109883a 	add	r4,r4,r4
    d45c:	1907883a 	add	r3,r3,r4
    d460:	38000426 	beq	r7,zero,d474 <memset+0x114>
    d464:	19cf883a 	add	r7,r3,r7
    d468:	19400005 	stb	r5,0(r3)
    d46c:	18c00044 	addi	r3,r3,1
    d470:	19fffd1e 	bne	r3,r7,d468 <memset+0x108>
    d474:	f800283a 	ret
    d478:	2007883a 	mov	r3,r4
    d47c:	300f883a 	mov	r7,r6
    d480:	003fc806 	br	d3a4 <memset+0x44>

0000d484 <_putc_r>:
    d484:	defffc04 	addi	sp,sp,-16
    d488:	dc000215 	stw	r16,8(sp)
    d48c:	dfc00315 	stw	ra,12(sp)
    d490:	2021883a 	mov	r16,r4
    d494:	20000226 	beq	r4,zero,d4a0 <_putc_r+0x1c>
    d498:	20800e17 	ldw	r2,56(r4)
    d49c:	10001b26 	beq	r2,zero,d50c <_putc_r+0x88>
    d4a0:	30800217 	ldw	r2,8(r6)
    d4a4:	10bfffc4 	addi	r2,r2,-1
    d4a8:	30800215 	stw	r2,8(r6)
    d4ac:	10000a16 	blt	r2,zero,d4d8 <_putc_r+0x54>
    d4b0:	30800017 	ldw	r2,0(r6)
    d4b4:	11400005 	stb	r5,0(r2)
    d4b8:	30800017 	ldw	r2,0(r6)
    d4bc:	10c00044 	addi	r3,r2,1
    d4c0:	30c00015 	stw	r3,0(r6)
    d4c4:	10800003 	ldbu	r2,0(r2)
    d4c8:	dfc00317 	ldw	ra,12(sp)
    d4cc:	dc000217 	ldw	r16,8(sp)
    d4d0:	dec00404 	addi	sp,sp,16
    d4d4:	f800283a 	ret
    d4d8:	30c00617 	ldw	r3,24(r6)
    d4dc:	10c00616 	blt	r2,r3,d4f8 <_putc_r+0x74>
    d4e0:	30800017 	ldw	r2,0(r6)
    d4e4:	00c00284 	movi	r3,10
    d4e8:	11400005 	stb	r5,0(r2)
    d4ec:	30800017 	ldw	r2,0(r6)
    d4f0:	11400003 	ldbu	r5,0(r2)
    d4f4:	28fff11e 	bne	r5,r3,d4bc <_putc_r+0x38>
    d4f8:	8009883a 	mov	r4,r16
    d4fc:	dfc00317 	ldw	ra,12(sp)
    d500:	dc000217 	ldw	r16,8(sp)
    d504:	dec00404 	addi	sp,sp,16
    d508:	000d72c1 	jmpi	d72c <__swbuf_r>
    d50c:	d9400015 	stw	r5,0(sp)
    d510:	d9800115 	stw	r6,4(sp)
    d514:	000e2600 	call	e260 <__sinit>
    d518:	d9800117 	ldw	r6,4(sp)
    d51c:	d9400017 	ldw	r5,0(sp)
    d520:	003fdf06 	br	d4a0 <_putc_r+0x1c>

0000d524 <putc>:
    d524:	00800074 	movhi	r2,1
    d528:	defffc04 	addi	sp,sp,-16
    d52c:	1087b104 	addi	r2,r2,7876
    d530:	dc400115 	stw	r17,4(sp)
    d534:	14400017 	ldw	r17,0(r2)
    d538:	dc800215 	stw	r18,8(sp)
    d53c:	dc000015 	stw	r16,0(sp)
    d540:	dfc00315 	stw	ra,12(sp)
    d544:	2025883a 	mov	r18,r4
    d548:	2821883a 	mov	r16,r5
    d54c:	88000226 	beq	r17,zero,d558 <putc+0x34>
    d550:	88800e17 	ldw	r2,56(r17)
    d554:	10001a26 	beq	r2,zero,d5c0 <putc+0x9c>
    d558:	80800217 	ldw	r2,8(r16)
    d55c:	10bfffc4 	addi	r2,r2,-1
    d560:	80800215 	stw	r2,8(r16)
    d564:	10000c16 	blt	r2,zero,d598 <putc+0x74>
    d568:	80800017 	ldw	r2,0(r16)
    d56c:	14800005 	stb	r18,0(r2)
    d570:	80800017 	ldw	r2,0(r16)
    d574:	10c00044 	addi	r3,r2,1
    d578:	80c00015 	stw	r3,0(r16)
    d57c:	10800003 	ldbu	r2,0(r2)
    d580:	dfc00317 	ldw	ra,12(sp)
    d584:	dc800217 	ldw	r18,8(sp)
    d588:	dc400117 	ldw	r17,4(sp)
    d58c:	dc000017 	ldw	r16,0(sp)
    d590:	dec00404 	addi	sp,sp,16
    d594:	f800283a 	ret
    d598:	80c00617 	ldw	r3,24(r16)
    d59c:	10c00b16 	blt	r2,r3,d5cc <putc+0xa8>
    d5a0:	80800017 	ldw	r2,0(r16)
    d5a4:	00c00284 	movi	r3,10
    d5a8:	14800005 	stb	r18,0(r2)
    d5ac:	80800017 	ldw	r2,0(r16)
    d5b0:	11400003 	ldbu	r5,0(r2)
    d5b4:	28ffef1e 	bne	r5,r3,d574 <putc+0x50>
    d5b8:	8809883a 	mov	r4,r17
    d5bc:	00000506 	br	d5d4 <putc+0xb0>
    d5c0:	8809883a 	mov	r4,r17
    d5c4:	000e2600 	call	e260 <__sinit>
    d5c8:	003fe306 	br	d558 <putc+0x34>
    d5cc:	8809883a 	mov	r4,r17
    d5d0:	900b883a 	mov	r5,r18
    d5d4:	800d883a 	mov	r6,r16
    d5d8:	dfc00317 	ldw	ra,12(sp)
    d5dc:	dc800217 	ldw	r18,8(sp)
    d5e0:	dc400117 	ldw	r17,4(sp)
    d5e4:	dc000017 	ldw	r16,0(sp)
    d5e8:	dec00404 	addi	sp,sp,16
    d5ec:	000d72c1 	jmpi	d72c <__swbuf_r>

0000d5f0 <strcmp>:
    d5f0:	2144b03a 	or	r2,r4,r5
    d5f4:	108000cc 	andi	r2,r2,3
    d5f8:	1000171e 	bne	r2,zero,d658 <strcmp+0x68>
    d5fc:	20800017 	ldw	r2,0(r4)
    d600:	28c00017 	ldw	r3,0(r5)
    d604:	10c0141e 	bne	r2,r3,d658 <strcmp+0x68>
    d608:	027fbff4 	movhi	r9,65279
    d60c:	4a7fbfc4 	addi	r9,r9,-257
    d610:	0086303a 	nor	r3,zero,r2
    d614:	02202074 	movhi	r8,32897
    d618:	1245883a 	add	r2,r2,r9
    d61c:	42202004 	addi	r8,r8,-32640
    d620:	10c4703a 	and	r2,r2,r3
    d624:	1204703a 	and	r2,r2,r8
    d628:	10000226 	beq	r2,zero,d634 <strcmp+0x44>
    d62c:	00001706 	br	d68c <strcmp+0x9c>
    d630:	1000161e 	bne	r2,zero,d68c <strcmp+0x9c>
    d634:	21000104 	addi	r4,r4,4
    d638:	20c00017 	ldw	r3,0(r4)
    d63c:	29400104 	addi	r5,r5,4
    d640:	29800017 	ldw	r6,0(r5)
    d644:	1a4f883a 	add	r7,r3,r9
    d648:	00c4303a 	nor	r2,zero,r3
    d64c:	3884703a 	and	r2,r7,r2
    d650:	1204703a 	and	r2,r2,r8
    d654:	19bff626 	beq	r3,r6,d630 <strcmp+0x40>
    d658:	20800007 	ldb	r2,0(r4)
    d65c:	1000051e 	bne	r2,zero,d674 <strcmp+0x84>
    d660:	00000606 	br	d67c <strcmp+0x8c>
    d664:	21000044 	addi	r4,r4,1
    d668:	20800007 	ldb	r2,0(r4)
    d66c:	29400044 	addi	r5,r5,1
    d670:	10000226 	beq	r2,zero,d67c <strcmp+0x8c>
    d674:	28c00007 	ldb	r3,0(r5)
    d678:	10fffa26 	beq	r2,r3,d664 <strcmp+0x74>
    d67c:	20800003 	ldbu	r2,0(r4)
    d680:	28c00003 	ldbu	r3,0(r5)
    d684:	10c5c83a 	sub	r2,r2,r3
    d688:	f800283a 	ret
    d68c:	0005883a 	mov	r2,zero
    d690:	f800283a 	ret

0000d694 <strlen>:
    d694:	208000cc 	andi	r2,r4,3
    d698:	10002026 	beq	r2,zero,d71c <strlen+0x88>
    d69c:	20800007 	ldb	r2,0(r4)
    d6a0:	10002026 	beq	r2,zero,d724 <strlen+0x90>
    d6a4:	2005883a 	mov	r2,r4
    d6a8:	00000206 	br	d6b4 <strlen+0x20>
    d6ac:	10c00007 	ldb	r3,0(r2)
    d6b0:	18001826 	beq	r3,zero,d714 <strlen+0x80>
    d6b4:	10800044 	addi	r2,r2,1
    d6b8:	10c000cc 	andi	r3,r2,3
    d6bc:	183ffb1e 	bne	r3,zero,d6ac <strlen+0x18>
    d6c0:	10c00017 	ldw	r3,0(r2)
    d6c4:	01ffbff4 	movhi	r7,65279
    d6c8:	39ffbfc4 	addi	r7,r7,-257
    d6cc:	00ca303a 	nor	r5,zero,r3
    d6d0:	01a02074 	movhi	r6,32897
    d6d4:	19c7883a 	add	r3,r3,r7
    d6d8:	31a02004 	addi	r6,r6,-32640
    d6dc:	1946703a 	and	r3,r3,r5
    d6e0:	1986703a 	and	r3,r3,r6
    d6e4:	1800091e 	bne	r3,zero,d70c <strlen+0x78>
    d6e8:	10800104 	addi	r2,r2,4
    d6ec:	10c00017 	ldw	r3,0(r2)
    d6f0:	19cb883a 	add	r5,r3,r7
    d6f4:	00c6303a 	nor	r3,zero,r3
    d6f8:	28c6703a 	and	r3,r5,r3
    d6fc:	1986703a 	and	r3,r3,r6
    d700:	183ff926 	beq	r3,zero,d6e8 <strlen+0x54>
    d704:	00000106 	br	d70c <strlen+0x78>
    d708:	10800044 	addi	r2,r2,1
    d70c:	10c00007 	ldb	r3,0(r2)
    d710:	183ffd1e 	bne	r3,zero,d708 <strlen+0x74>
    d714:	1105c83a 	sub	r2,r2,r4
    d718:	f800283a 	ret
    d71c:	2005883a 	mov	r2,r4
    d720:	003fe706 	br	d6c0 <strlen+0x2c>
    d724:	0005883a 	mov	r2,zero
    d728:	f800283a 	ret

0000d72c <__swbuf_r>:
    d72c:	defffc04 	addi	sp,sp,-16
    d730:	dc800215 	stw	r18,8(sp)
    d734:	dc400115 	stw	r17,4(sp)
    d738:	dc000015 	stw	r16,0(sp)
    d73c:	dfc00315 	stw	ra,12(sp)
    d740:	2025883a 	mov	r18,r4
    d744:	2823883a 	mov	r17,r5
    d748:	3021883a 	mov	r16,r6
    d74c:	20000226 	beq	r4,zero,d758 <__swbuf_r+0x2c>
    d750:	20800e17 	ldw	r2,56(r4)
    d754:	10004126 	beq	r2,zero,d85c <__swbuf_r+0x130>
    d758:	80c00617 	ldw	r3,24(r16)
    d75c:	8180030b 	ldhu	r6,12(r16)
    d760:	80c00215 	stw	r3,8(r16)
    d764:	30c0020c 	andi	r3,r6,8
    d768:	18003526 	beq	r3,zero,d840 <__swbuf_r+0x114>
    d76c:	80c00417 	ldw	r3,16(r16)
    d770:	18003326 	beq	r3,zero,d840 <__swbuf_r+0x114>
    d774:	3088000c 	andi	r2,r6,8192
    d778:	8c403fcc 	andi	r17,r17,255
    d77c:	10001726 	beq	r2,zero,d7dc <__swbuf_r+0xb0>
    d780:	80800017 	ldw	r2,0(r16)
    d784:	81000517 	ldw	r4,20(r16)
    d788:	10c7c83a 	sub	r3,r2,r3
    d78c:	19001d0e 	bge	r3,r4,d804 <__swbuf_r+0xd8>
    d790:	18c00044 	addi	r3,r3,1
    d794:	81400217 	ldw	r5,8(r16)
    d798:	11000044 	addi	r4,r2,1
    d79c:	81000015 	stw	r4,0(r16)
    d7a0:	297fffc4 	addi	r5,r5,-1
    d7a4:	81400215 	stw	r5,8(r16)
    d7a8:	14400005 	stb	r17,0(r2)
    d7ac:	80800517 	ldw	r2,20(r16)
    d7b0:	10c01d26 	beq	r2,r3,d828 <__swbuf_r+0xfc>
    d7b4:	8080030b 	ldhu	r2,12(r16)
    d7b8:	1080004c 	andi	r2,r2,1
    d7bc:	1000181e 	bne	r2,zero,d820 <__swbuf_r+0xf4>
    d7c0:	8805883a 	mov	r2,r17
    d7c4:	dfc00317 	ldw	ra,12(sp)
    d7c8:	dc800217 	ldw	r18,8(sp)
    d7cc:	dc400117 	ldw	r17,4(sp)
    d7d0:	dc000017 	ldw	r16,0(sp)
    d7d4:	dec00404 	addi	sp,sp,16
    d7d8:	f800283a 	ret
    d7dc:	81001917 	ldw	r4,100(r16)
    d7e0:	00b7ffc4 	movi	r2,-8193
    d7e4:	31880014 	ori	r6,r6,8192
    d7e8:	2084703a 	and	r2,r4,r2
    d7ec:	80801915 	stw	r2,100(r16)
    d7f0:	80800017 	ldw	r2,0(r16)
    d7f4:	81000517 	ldw	r4,20(r16)
    d7f8:	8180030d 	sth	r6,12(r16)
    d7fc:	10c7c83a 	sub	r3,r2,r3
    d800:	193fe316 	blt	r3,r4,d790 <__swbuf_r+0x64>
    d804:	9009883a 	mov	r4,r18
    d808:	800b883a 	mov	r5,r16
    d80c:	000de840 	call	de84 <_fflush_r>
    d810:	1000091e 	bne	r2,zero,d838 <__swbuf_r+0x10c>
    d814:	80800017 	ldw	r2,0(r16)
    d818:	00c00044 	movi	r3,1
    d81c:	003fdd06 	br	d794 <__swbuf_r+0x68>
    d820:	00800284 	movi	r2,10
    d824:	88bfe61e 	bne	r17,r2,d7c0 <__swbuf_r+0x94>
    d828:	9009883a 	mov	r4,r18
    d82c:	800b883a 	mov	r5,r16
    d830:	000de840 	call	de84 <_fflush_r>
    d834:	103fe226 	beq	r2,zero,d7c0 <__swbuf_r+0x94>
    d838:	00bfffc4 	movi	r2,-1
    d83c:	003fe106 	br	d7c4 <__swbuf_r+0x98>
    d840:	9009883a 	mov	r4,r18
    d844:	800b883a 	mov	r5,r16
    d848:	000d8800 	call	d880 <__swsetup_r>
    d84c:	103ffa1e 	bne	r2,zero,d838 <__swbuf_r+0x10c>
    d850:	8180030b 	ldhu	r6,12(r16)
    d854:	80c00417 	ldw	r3,16(r16)
    d858:	003fc606 	br	d774 <__swbuf_r+0x48>
    d85c:	000e2600 	call	e260 <__sinit>
    d860:	003fbd06 	br	d758 <__swbuf_r+0x2c>

0000d864 <__swbuf>:
    d864:	00c00074 	movhi	r3,1
    d868:	18c7b104 	addi	r3,r3,7876
    d86c:	2005883a 	mov	r2,r4
    d870:	19000017 	ldw	r4,0(r3)
    d874:	280d883a 	mov	r6,r5
    d878:	100b883a 	mov	r5,r2
    d87c:	000d72c1 	jmpi	d72c <__swbuf_r>

0000d880 <__swsetup_r>:
    d880:	00800074 	movhi	r2,1
    d884:	defffd04 	addi	sp,sp,-12
    d888:	1087b104 	addi	r2,r2,7876
    d88c:	dc400115 	stw	r17,4(sp)
    d890:	2023883a 	mov	r17,r4
    d894:	11000017 	ldw	r4,0(r2)
    d898:	dc000015 	stw	r16,0(sp)
    d89c:	dfc00215 	stw	ra,8(sp)
    d8a0:	2821883a 	mov	r16,r5
    d8a4:	20000226 	beq	r4,zero,d8b0 <__swsetup_r+0x30>
    d8a8:	20c00e17 	ldw	r3,56(r4)
    d8ac:	18003126 	beq	r3,zero,d974 <__swsetup_r+0xf4>
    d8b0:	8080030b 	ldhu	r2,12(r16)
    d8b4:	10c0020c 	andi	r3,r2,8
    d8b8:	100d883a 	mov	r6,r2
    d8bc:	18000f26 	beq	r3,zero,d8fc <__swsetup_r+0x7c>
    d8c0:	80c00417 	ldw	r3,16(r16)
    d8c4:	18001526 	beq	r3,zero,d91c <__swsetup_r+0x9c>
    d8c8:	1100004c 	andi	r4,r2,1
    d8cc:	20001c1e 	bne	r4,zero,d940 <__swsetup_r+0xc0>
    d8d0:	1080008c 	andi	r2,r2,2
    d8d4:	1000291e 	bne	r2,zero,d97c <__swsetup_r+0xfc>
    d8d8:	80800517 	ldw	r2,20(r16)
    d8dc:	80800215 	stw	r2,8(r16)
    d8e0:	18001c26 	beq	r3,zero,d954 <__swsetup_r+0xd4>
    d8e4:	0005883a 	mov	r2,zero
    d8e8:	dfc00217 	ldw	ra,8(sp)
    d8ec:	dc400117 	ldw	r17,4(sp)
    d8f0:	dc000017 	ldw	r16,0(sp)
    d8f4:	dec00304 	addi	sp,sp,12
    d8f8:	f800283a 	ret
    d8fc:	3080040c 	andi	r2,r6,16
    d900:	10002e26 	beq	r2,zero,d9bc <__swsetup_r+0x13c>
    d904:	3080010c 	andi	r2,r6,4
    d908:	10001e1e 	bne	r2,zero,d984 <__swsetup_r+0x104>
    d90c:	80c00417 	ldw	r3,16(r16)
    d910:	30800214 	ori	r2,r6,8
    d914:	8080030d 	sth	r2,12(r16)
    d918:	183feb1e 	bne	r3,zero,d8c8 <__swsetup_r+0x48>
    d91c:	1140a00c 	andi	r5,r2,640
    d920:	01008004 	movi	r4,512
    d924:	293fe826 	beq	r5,r4,d8c8 <__swsetup_r+0x48>
    d928:	8809883a 	mov	r4,r17
    d92c:	800b883a 	mov	r5,r16
    d930:	000e84c0 	call	e84c <__smakebuf_r>
    d934:	8080030b 	ldhu	r2,12(r16)
    d938:	80c00417 	ldw	r3,16(r16)
    d93c:	003fe206 	br	d8c8 <__swsetup_r+0x48>
    d940:	80800517 	ldw	r2,20(r16)
    d944:	80000215 	stw	zero,8(r16)
    d948:	0085c83a 	sub	r2,zero,r2
    d94c:	80800615 	stw	r2,24(r16)
    d950:	183fe41e 	bne	r3,zero,d8e4 <__swsetup_r+0x64>
    d954:	80c0030b 	ldhu	r3,12(r16)
    d958:	0005883a 	mov	r2,zero
    d95c:	1900200c 	andi	r4,r3,128
    d960:	203fe126 	beq	r4,zero,d8e8 <__swsetup_r+0x68>
    d964:	18c01014 	ori	r3,r3,64
    d968:	80c0030d 	sth	r3,12(r16)
    d96c:	00bfffc4 	movi	r2,-1
    d970:	003fdd06 	br	d8e8 <__swsetup_r+0x68>
    d974:	000e2600 	call	e260 <__sinit>
    d978:	003fcd06 	br	d8b0 <__swsetup_r+0x30>
    d97c:	0005883a 	mov	r2,zero
    d980:	003fd606 	br	d8dc <__swsetup_r+0x5c>
    d984:	81400c17 	ldw	r5,48(r16)
    d988:	28000626 	beq	r5,zero,d9a4 <__swsetup_r+0x124>
    d98c:	80801004 	addi	r2,r16,64
    d990:	28800326 	beq	r5,r2,d9a0 <__swsetup_r+0x120>
    d994:	8809883a 	mov	r4,r17
    d998:	000e3d40 	call	e3d4 <_free_r>
    d99c:	8180030b 	ldhu	r6,12(r16)
    d9a0:	80000c15 	stw	zero,48(r16)
    d9a4:	80c00417 	ldw	r3,16(r16)
    d9a8:	00bff6c4 	movi	r2,-37
    d9ac:	118c703a 	and	r6,r2,r6
    d9b0:	80000115 	stw	zero,4(r16)
    d9b4:	80c00015 	stw	r3,0(r16)
    d9b8:	003fd506 	br	d910 <__swsetup_r+0x90>
    d9bc:	00800244 	movi	r2,9
    d9c0:	88800015 	stw	r2,0(r17)
    d9c4:	30801014 	ori	r2,r6,64
    d9c8:	8080030d 	sth	r2,12(r16)
    d9cc:	00bfffc4 	movi	r2,-1
    d9d0:	003fc506 	br	d8e8 <__swsetup_r+0x68>

0000d9d4 <__register_exitproc>:
    d9d4:	00800074 	movhi	r2,1
    d9d8:	defffa04 	addi	sp,sp,-24
    d9dc:	1087b004 	addi	r2,r2,7872
    d9e0:	dc000315 	stw	r16,12(sp)
    d9e4:	14000017 	ldw	r16,0(r2)
    d9e8:	dc400415 	stw	r17,16(sp)
    d9ec:	dfc00515 	stw	ra,20(sp)
    d9f0:	80805217 	ldw	r2,328(r16)
    d9f4:	2023883a 	mov	r17,r4
    d9f8:	10003626 	beq	r2,zero,dad4 <__register_exitproc+0x100>
    d9fc:	10c00117 	ldw	r3,4(r2)
    da00:	010007c4 	movi	r4,31
    da04:	20c00e16 	blt	r4,r3,da40 <__register_exitproc+0x6c>
    da08:	1a400044 	addi	r9,r3,1
    da0c:	8800211e 	bne	r17,zero,da94 <__register_exitproc+0xc0>
    da10:	18c00084 	addi	r3,r3,2
    da14:	18c7883a 	add	r3,r3,r3
    da18:	18c7883a 	add	r3,r3,r3
    da1c:	12400115 	stw	r9,4(r2)
    da20:	10c7883a 	add	r3,r2,r3
    da24:	19400015 	stw	r5,0(r3)
    da28:	0005883a 	mov	r2,zero
    da2c:	dfc00517 	ldw	ra,20(sp)
    da30:	dc400417 	ldw	r17,16(sp)
    da34:	dc000317 	ldw	r16,12(sp)
    da38:	dec00604 	addi	sp,sp,24
    da3c:	f800283a 	ret
    da40:	00800034 	movhi	r2,0
    da44:	10800004 	addi	r2,r2,0
    da48:	10002526 	beq	r2,zero,dae0 <__register_exitproc+0x10c>
    da4c:	01006404 	movi	r4,400
    da50:	d9400015 	stw	r5,0(sp)
    da54:	d9800115 	stw	r6,4(sp)
    da58:	d9c00215 	stw	r7,8(sp)
    da5c:	00000000 	call	0 <__alt_mem_SDRAM>
    da60:	d9400017 	ldw	r5,0(sp)
    da64:	d9800117 	ldw	r6,4(sp)
    da68:	d9c00217 	ldw	r7,8(sp)
    da6c:	10001c26 	beq	r2,zero,dae0 <__register_exitproc+0x10c>
    da70:	80c05217 	ldw	r3,328(r16)
    da74:	10000115 	stw	zero,4(r2)
    da78:	02400044 	movi	r9,1
    da7c:	10c00015 	stw	r3,0(r2)
    da80:	80805215 	stw	r2,328(r16)
    da84:	10006215 	stw	zero,392(r2)
    da88:	10006315 	stw	zero,396(r2)
    da8c:	0007883a 	mov	r3,zero
    da90:	883fdf26 	beq	r17,zero,da10 <__register_exitproc+0x3c>
    da94:	18d1883a 	add	r8,r3,r3
    da98:	4211883a 	add	r8,r8,r8
    da9c:	1211883a 	add	r8,r2,r8
    daa0:	41802215 	stw	r6,136(r8)
    daa4:	01000044 	movi	r4,1
    daa8:	11806217 	ldw	r6,392(r2)
    daac:	20c8983a 	sll	r4,r4,r3
    dab0:	310cb03a 	or	r6,r6,r4
    dab4:	11806215 	stw	r6,392(r2)
    dab8:	41c04215 	stw	r7,264(r8)
    dabc:	01800084 	movi	r6,2
    dac0:	89bfd31e 	bne	r17,r6,da10 <__register_exitproc+0x3c>
    dac4:	11806317 	ldw	r6,396(r2)
    dac8:	3108b03a 	or	r4,r6,r4
    dacc:	11006315 	stw	r4,396(r2)
    dad0:	003fcf06 	br	da10 <__register_exitproc+0x3c>
    dad4:	80805304 	addi	r2,r16,332
    dad8:	80805215 	stw	r2,328(r16)
    dadc:	003fc706 	br	d9fc <__register_exitproc+0x28>
    dae0:	00bfffc4 	movi	r2,-1
    dae4:	003fd106 	br	da2c <__register_exitproc+0x58>

0000dae8 <__call_exitprocs>:
    dae8:	00800074 	movhi	r2,1
    daec:	1087b004 	addi	r2,r2,7872
    daf0:	10800017 	ldw	r2,0(r2)
    daf4:	defff404 	addi	sp,sp,-48
    daf8:	dd800815 	stw	r22,32(sp)
    dafc:	d8800015 	stw	r2,0(sp)
    db00:	10805204 	addi	r2,r2,328
    db04:	dd000615 	stw	r20,24(sp)
    db08:	dc800415 	stw	r18,16(sp)
    db0c:	dfc00b15 	stw	ra,44(sp)
    db10:	df000a15 	stw	fp,40(sp)
    db14:	ddc00915 	stw	r23,36(sp)
    db18:	dd400715 	stw	r21,28(sp)
    db1c:	dcc00515 	stw	r19,20(sp)
    db20:	dc400315 	stw	r17,12(sp)
    db24:	dc000215 	stw	r16,8(sp)
    db28:	2025883a 	mov	r18,r4
    db2c:	2829883a 	mov	r20,r5
    db30:	d8800115 	stw	r2,4(sp)
    db34:	05bfffc4 	movi	r22,-1
    db38:	d8800017 	ldw	r2,0(sp)
    db3c:	14c05217 	ldw	r19,328(r2)
    db40:	98001d26 	beq	r19,zero,dbb8 <__call_exitprocs+0xd0>
    db44:	dd400117 	ldw	r21,4(sp)
    db48:	98800117 	ldw	r2,4(r19)
    db4c:	173fffc4 	addi	fp,r2,-1
    db50:	e0000d16 	blt	fp,zero,db88 <__call_exitprocs+0xa0>
    db54:	14000044 	addi	r16,r2,1
    db58:	8421883a 	add	r16,r16,r16
    db5c:	8421883a 	add	r16,r16,r16
    db60:	84402004 	addi	r17,r16,128
    db64:	9c63883a 	add	r17,r19,r17
    db68:	9c21883a 	add	r16,r19,r16
    db6c:	a0001e26 	beq	r20,zero,dbe8 <__call_exitprocs+0x100>
    db70:	80804017 	ldw	r2,256(r16)
    db74:	15001c26 	beq	r2,r20,dbe8 <__call_exitprocs+0x100>
    db78:	e73fffc4 	addi	fp,fp,-1
    db7c:	843fff04 	addi	r16,r16,-4
    db80:	8c7fff04 	addi	r17,r17,-4
    db84:	e5bff91e 	bne	fp,r22,db6c <__call_exitprocs+0x84>
    db88:	00800034 	movhi	r2,0
    db8c:	10800004 	addi	r2,r2,0
    db90:	10000926 	beq	r2,zero,dbb8 <__call_exitprocs+0xd0>
    db94:	98800117 	ldw	r2,4(r19)
    db98:	1000311e 	bne	r2,zero,dc60 <__call_exitprocs+0x178>
    db9c:	98800017 	ldw	r2,0(r19)
    dba0:	10003426 	beq	r2,zero,dc74 <__call_exitprocs+0x18c>
    dba4:	9809883a 	mov	r4,r19
    dba8:	a8800015 	stw	r2,0(r21)
    dbac:	00000000 	call	0 <__alt_mem_SDRAM>
    dbb0:	acc00017 	ldw	r19,0(r21)
    dbb4:	983fe41e 	bne	r19,zero,db48 <__call_exitprocs+0x60>
    dbb8:	dfc00b17 	ldw	ra,44(sp)
    dbbc:	df000a17 	ldw	fp,40(sp)
    dbc0:	ddc00917 	ldw	r23,36(sp)
    dbc4:	dd800817 	ldw	r22,32(sp)
    dbc8:	dd400717 	ldw	r21,28(sp)
    dbcc:	dd000617 	ldw	r20,24(sp)
    dbd0:	dcc00517 	ldw	r19,20(sp)
    dbd4:	dc800417 	ldw	r18,16(sp)
    dbd8:	dc400317 	ldw	r17,12(sp)
    dbdc:	dc000217 	ldw	r16,8(sp)
    dbe0:	dec00c04 	addi	sp,sp,48
    dbe4:	f800283a 	ret
    dbe8:	98800117 	ldw	r2,4(r19)
    dbec:	80c00017 	ldw	r3,0(r16)
    dbf0:	10bfffc4 	addi	r2,r2,-1
    dbf4:	17001526 	beq	r2,fp,dc4c <__call_exitprocs+0x164>
    dbf8:	80000015 	stw	zero,0(r16)
    dbfc:	183fde26 	beq	r3,zero,db78 <__call_exitprocs+0x90>
    dc00:	00800044 	movi	r2,1
    dc04:	1708983a 	sll	r4,r2,fp
    dc08:	98806217 	ldw	r2,392(r19)
    dc0c:	9dc00117 	ldw	r23,4(r19)
    dc10:	2084703a 	and	r2,r4,r2
    dc14:	1000061e 	bne	r2,zero,dc30 <__call_exitprocs+0x148>
    dc18:	183ee83a 	callr	r3
    dc1c:	98800117 	ldw	r2,4(r19)
    dc20:	15ffc51e 	bne	r2,r23,db38 <__call_exitprocs+0x50>
    dc24:	a8800017 	ldw	r2,0(r21)
    dc28:	14ffd326 	beq	r2,r19,db78 <__call_exitprocs+0x90>
    dc2c:	003fc206 	br	db38 <__call_exitprocs+0x50>
    dc30:	98806317 	ldw	r2,396(r19)
    dc34:	2084703a 	and	r2,r4,r2
    dc38:	1000061e 	bne	r2,zero,dc54 <__call_exitprocs+0x16c>
    dc3c:	89400017 	ldw	r5,0(r17)
    dc40:	9009883a 	mov	r4,r18
    dc44:	183ee83a 	callr	r3
    dc48:	003ff406 	br	dc1c <__call_exitprocs+0x134>
    dc4c:	9f000115 	stw	fp,4(r19)
    dc50:	003fea06 	br	dbfc <__call_exitprocs+0x114>
    dc54:	89000017 	ldw	r4,0(r17)
    dc58:	183ee83a 	callr	r3
    dc5c:	003fef06 	br	dc1c <__call_exitprocs+0x134>
    dc60:	98800017 	ldw	r2,0(r19)
    dc64:	982b883a 	mov	r21,r19
    dc68:	1027883a 	mov	r19,r2
    dc6c:	983fb61e 	bne	r19,zero,db48 <__call_exitprocs+0x60>
    dc70:	003fd106 	br	dbb8 <__call_exitprocs+0xd0>
    dc74:	0005883a 	mov	r2,zero
    dc78:	003ffa06 	br	dc64 <__call_exitprocs+0x17c>

0000dc7c <__sflush_r>:
    dc7c:	2880030b 	ldhu	r2,12(r5)
    dc80:	defffb04 	addi	sp,sp,-20
    dc84:	dcc00315 	stw	r19,12(sp)
    dc88:	dc400115 	stw	r17,4(sp)
    dc8c:	dfc00415 	stw	ra,16(sp)
    dc90:	dc800215 	stw	r18,8(sp)
    dc94:	dc000015 	stw	r16,0(sp)
    dc98:	10c0020c 	andi	r3,r2,8
    dc9c:	2823883a 	mov	r17,r5
    dca0:	2027883a 	mov	r19,r4
    dca4:	1800311e 	bne	r3,zero,dd6c <__sflush_r+0xf0>
    dca8:	28c00117 	ldw	r3,4(r5)
    dcac:	10820014 	ori	r2,r2,2048
    dcb0:	2880030d 	sth	r2,12(r5)
    dcb4:	00c04b0e 	bge	zero,r3,dde4 <__sflush_r+0x168>
    dcb8:	8a000a17 	ldw	r8,40(r17)
    dcbc:	40002326 	beq	r8,zero,dd4c <__sflush_r+0xd0>
    dcc0:	9c000017 	ldw	r16,0(r19)
    dcc4:	10c4000c 	andi	r3,r2,4096
    dcc8:	98000015 	stw	zero,0(r19)
    dccc:	18004826 	beq	r3,zero,ddf0 <__sflush_r+0x174>
    dcd0:	89801417 	ldw	r6,80(r17)
    dcd4:	10c0010c 	andi	r3,r2,4
    dcd8:	18000626 	beq	r3,zero,dcf4 <__sflush_r+0x78>
    dcdc:	88c00117 	ldw	r3,4(r17)
    dce0:	88800c17 	ldw	r2,48(r17)
    dce4:	30cdc83a 	sub	r6,r6,r3
    dce8:	10000226 	beq	r2,zero,dcf4 <__sflush_r+0x78>
    dcec:	88800f17 	ldw	r2,60(r17)
    dcf0:	308dc83a 	sub	r6,r6,r2
    dcf4:	89400717 	ldw	r5,28(r17)
    dcf8:	9809883a 	mov	r4,r19
    dcfc:	000f883a 	mov	r7,zero
    dd00:	403ee83a 	callr	r8
    dd04:	00ffffc4 	movi	r3,-1
    dd08:	10c04426 	beq	r2,r3,de1c <__sflush_r+0x1a0>
    dd0c:	88c0030b 	ldhu	r3,12(r17)
    dd10:	89000417 	ldw	r4,16(r17)
    dd14:	88000115 	stw	zero,4(r17)
    dd18:	197dffcc 	andi	r5,r3,63487
    dd1c:	8940030d 	sth	r5,12(r17)
    dd20:	89000015 	stw	r4,0(r17)
    dd24:	18c4000c 	andi	r3,r3,4096
    dd28:	18002c1e 	bne	r3,zero,dddc <__sflush_r+0x160>
    dd2c:	89400c17 	ldw	r5,48(r17)
    dd30:	9c000015 	stw	r16,0(r19)
    dd34:	28000526 	beq	r5,zero,dd4c <__sflush_r+0xd0>
    dd38:	88801004 	addi	r2,r17,64
    dd3c:	28800226 	beq	r5,r2,dd48 <__sflush_r+0xcc>
    dd40:	9809883a 	mov	r4,r19
    dd44:	000e3d40 	call	e3d4 <_free_r>
    dd48:	88000c15 	stw	zero,48(r17)
    dd4c:	0005883a 	mov	r2,zero
    dd50:	dfc00417 	ldw	ra,16(sp)
    dd54:	dcc00317 	ldw	r19,12(sp)
    dd58:	dc800217 	ldw	r18,8(sp)
    dd5c:	dc400117 	ldw	r17,4(sp)
    dd60:	dc000017 	ldw	r16,0(sp)
    dd64:	dec00504 	addi	sp,sp,20
    dd68:	f800283a 	ret
    dd6c:	2c800417 	ldw	r18,16(r5)
    dd70:	903ff626 	beq	r18,zero,dd4c <__sflush_r+0xd0>
    dd74:	2c000017 	ldw	r16,0(r5)
    dd78:	108000cc 	andi	r2,r2,3
    dd7c:	2c800015 	stw	r18,0(r5)
    dd80:	84a1c83a 	sub	r16,r16,r18
    dd84:	1000131e 	bne	r2,zero,ddd4 <__sflush_r+0x158>
    dd88:	28800517 	ldw	r2,20(r5)
    dd8c:	88800215 	stw	r2,8(r17)
    dd90:	04000316 	blt	zero,r16,dda0 <__sflush_r+0x124>
    dd94:	003fed06 	br	dd4c <__sflush_r+0xd0>
    dd98:	90a5883a 	add	r18,r18,r2
    dd9c:	043feb0e 	bge	zero,r16,dd4c <__sflush_r+0xd0>
    dda0:	88800917 	ldw	r2,36(r17)
    dda4:	89400717 	ldw	r5,28(r17)
    dda8:	800f883a 	mov	r7,r16
    ddac:	900d883a 	mov	r6,r18
    ddb0:	9809883a 	mov	r4,r19
    ddb4:	103ee83a 	callr	r2
    ddb8:	80a1c83a 	sub	r16,r16,r2
    ddbc:	00bff616 	blt	zero,r2,dd98 <__sflush_r+0x11c>
    ddc0:	88c0030b 	ldhu	r3,12(r17)
    ddc4:	00bfffc4 	movi	r2,-1
    ddc8:	18c01014 	ori	r3,r3,64
    ddcc:	88c0030d 	sth	r3,12(r17)
    ddd0:	003fdf06 	br	dd50 <__sflush_r+0xd4>
    ddd4:	0005883a 	mov	r2,zero
    ddd8:	003fec06 	br	dd8c <__sflush_r+0x110>
    dddc:	88801415 	stw	r2,80(r17)
    dde0:	003fd206 	br	dd2c <__sflush_r+0xb0>
    dde4:	28c00f17 	ldw	r3,60(r5)
    dde8:	00ffb316 	blt	zero,r3,dcb8 <__sflush_r+0x3c>
    ddec:	003fd706 	br	dd4c <__sflush_r+0xd0>
    ddf0:	89400717 	ldw	r5,28(r17)
    ddf4:	000d883a 	mov	r6,zero
    ddf8:	9809883a 	mov	r4,r19
    ddfc:	01c00044 	movi	r7,1
    de00:	403ee83a 	callr	r8
    de04:	100d883a 	mov	r6,r2
    de08:	00bfffc4 	movi	r2,-1
    de0c:	30801426 	beq	r6,r2,de60 <__sflush_r+0x1e4>
    de10:	8880030b 	ldhu	r2,12(r17)
    de14:	8a000a17 	ldw	r8,40(r17)
    de18:	003fae06 	br	dcd4 <__sflush_r+0x58>
    de1c:	98c00017 	ldw	r3,0(r19)
    de20:	183fba26 	beq	r3,zero,dd0c <__sflush_r+0x90>
    de24:	01000744 	movi	r4,29
    de28:	19000626 	beq	r3,r4,de44 <__sflush_r+0x1c8>
    de2c:	01000584 	movi	r4,22
    de30:	19000426 	beq	r3,r4,de44 <__sflush_r+0x1c8>
    de34:	88c0030b 	ldhu	r3,12(r17)
    de38:	18c01014 	ori	r3,r3,64
    de3c:	88c0030d 	sth	r3,12(r17)
    de40:	003fc306 	br	dd50 <__sflush_r+0xd4>
    de44:	8880030b 	ldhu	r2,12(r17)
    de48:	88c00417 	ldw	r3,16(r17)
    de4c:	88000115 	stw	zero,4(r17)
    de50:	10bdffcc 	andi	r2,r2,63487
    de54:	8880030d 	sth	r2,12(r17)
    de58:	88c00015 	stw	r3,0(r17)
    de5c:	003fb306 	br	dd2c <__sflush_r+0xb0>
    de60:	98800017 	ldw	r2,0(r19)
    de64:	103fea26 	beq	r2,zero,de10 <__sflush_r+0x194>
    de68:	00c00744 	movi	r3,29
    de6c:	10c00226 	beq	r2,r3,de78 <__sflush_r+0x1fc>
    de70:	00c00584 	movi	r3,22
    de74:	10ffd21e 	bne	r2,r3,ddc0 <__sflush_r+0x144>
    de78:	9c000015 	stw	r16,0(r19)
    de7c:	0005883a 	mov	r2,zero
    de80:	003fb306 	br	dd50 <__sflush_r+0xd4>

0000de84 <_fflush_r>:
    de84:	defffd04 	addi	sp,sp,-12
    de88:	dc000115 	stw	r16,4(sp)
    de8c:	dfc00215 	stw	ra,8(sp)
    de90:	2021883a 	mov	r16,r4
    de94:	20000226 	beq	r4,zero,dea0 <_fflush_r+0x1c>
    de98:	20800e17 	ldw	r2,56(r4)
    de9c:	10000c26 	beq	r2,zero,ded0 <_fflush_r+0x4c>
    dea0:	2880030f 	ldh	r2,12(r5)
    dea4:	1000051e 	bne	r2,zero,debc <_fflush_r+0x38>
    dea8:	0005883a 	mov	r2,zero
    deac:	dfc00217 	ldw	ra,8(sp)
    deb0:	dc000117 	ldw	r16,4(sp)
    deb4:	dec00304 	addi	sp,sp,12
    deb8:	f800283a 	ret
    debc:	8009883a 	mov	r4,r16
    dec0:	dfc00217 	ldw	ra,8(sp)
    dec4:	dc000117 	ldw	r16,4(sp)
    dec8:	dec00304 	addi	sp,sp,12
    decc:	000dc7c1 	jmpi	dc7c <__sflush_r>
    ded0:	d9400015 	stw	r5,0(sp)
    ded4:	000e2600 	call	e260 <__sinit>
    ded8:	d9400017 	ldw	r5,0(sp)
    dedc:	003ff006 	br	dea0 <_fflush_r+0x1c>

0000dee0 <fflush>:
    dee0:	20000526 	beq	r4,zero,def8 <fflush+0x18>
    dee4:	00800074 	movhi	r2,1
    dee8:	1087b104 	addi	r2,r2,7876
    deec:	200b883a 	mov	r5,r4
    def0:	11000017 	ldw	r4,0(r2)
    def4:	000de841 	jmpi	de84 <_fflush_r>
    def8:	00800074 	movhi	r2,1
    defc:	1087b004 	addi	r2,r2,7872
    df00:	11000017 	ldw	r4,0(r2)
    df04:	01400074 	movhi	r5,1
    df08:	2977a104 	addi	r5,r5,-8572
    df0c:	000e7881 	jmpi	e788 <_fwalk_reent>

0000df10 <__fp_lock>:
    df10:	0005883a 	mov	r2,zero
    df14:	f800283a 	ret

0000df18 <__fp_unlock>:
    df18:	0005883a 	mov	r2,zero
    df1c:	f800283a 	ret

0000df20 <_cleanup_r>:
    df20:	01400074 	movhi	r5,1
    df24:	297cfb04 	addi	r5,r5,-3092
    df28:	000e7881 	jmpi	e788 <_fwalk_reent>

0000df2c <__sinit.part.1>:
    df2c:	defff704 	addi	sp,sp,-36
    df30:	00c00074 	movhi	r3,1
    df34:	dfc00815 	stw	ra,32(sp)
    df38:	ddc00715 	stw	r23,28(sp)
    df3c:	dd800615 	stw	r22,24(sp)
    df40:	dd400515 	stw	r21,20(sp)
    df44:	dd000415 	stw	r20,16(sp)
    df48:	dcc00315 	stw	r19,12(sp)
    df4c:	dc800215 	stw	r18,8(sp)
    df50:	dc400115 	stw	r17,4(sp)
    df54:	dc000015 	stw	r16,0(sp)
    df58:	18f7c804 	addi	r3,r3,-8416
    df5c:	24000117 	ldw	r16,4(r4)
    df60:	20c00f15 	stw	r3,60(r4)
    df64:	2080bb04 	addi	r2,r4,748
    df68:	00c000c4 	movi	r3,3
    df6c:	20c0b915 	stw	r3,740(r4)
    df70:	2080ba15 	stw	r2,744(r4)
    df74:	2000b815 	stw	zero,736(r4)
    df78:	05c00204 	movi	r23,8
    df7c:	00800104 	movi	r2,4
    df80:	2025883a 	mov	r18,r4
    df84:	b80d883a 	mov	r6,r23
    df88:	81001704 	addi	r4,r16,92
    df8c:	000b883a 	mov	r5,zero
    df90:	80000015 	stw	zero,0(r16)
    df94:	80000115 	stw	zero,4(r16)
    df98:	80000215 	stw	zero,8(r16)
    df9c:	8080030d 	sth	r2,12(r16)
    dfa0:	80001915 	stw	zero,100(r16)
    dfa4:	8000038d 	sth	zero,14(r16)
    dfa8:	80000415 	stw	zero,16(r16)
    dfac:	80000515 	stw	zero,20(r16)
    dfb0:	80000615 	stw	zero,24(r16)
    dfb4:	000d3600 	call	d360 <memset>
    dfb8:	05800074 	movhi	r22,1
    dfbc:	94400217 	ldw	r17,8(r18)
    dfc0:	05400074 	movhi	r21,1
    dfc4:	05000074 	movhi	r20,1
    dfc8:	04c00074 	movhi	r19,1
    dfcc:	b5bc8004 	addi	r22,r22,-3584
    dfd0:	ad7c9704 	addi	r21,r21,-3492
    dfd4:	a53cb604 	addi	r20,r20,-3368
    dfd8:	9cfccd04 	addi	r19,r19,-3276
    dfdc:	85800815 	stw	r22,32(r16)
    dfe0:	85400915 	stw	r21,36(r16)
    dfe4:	85000a15 	stw	r20,40(r16)
    dfe8:	84c00b15 	stw	r19,44(r16)
    dfec:	84000715 	stw	r16,28(r16)
    dff0:	00800284 	movi	r2,10
    dff4:	8880030d 	sth	r2,12(r17)
    dff8:	00800044 	movi	r2,1
    dffc:	89001704 	addi	r4,r17,92
    e000:	b80d883a 	mov	r6,r23
    e004:	000b883a 	mov	r5,zero
    e008:	88000015 	stw	zero,0(r17)
    e00c:	88000115 	stw	zero,4(r17)
    e010:	88000215 	stw	zero,8(r17)
    e014:	88001915 	stw	zero,100(r17)
    e018:	8880038d 	sth	r2,14(r17)
    e01c:	88000415 	stw	zero,16(r17)
    e020:	88000515 	stw	zero,20(r17)
    e024:	88000615 	stw	zero,24(r17)
    e028:	000d3600 	call	d360 <memset>
    e02c:	94000317 	ldw	r16,12(r18)
    e030:	00800484 	movi	r2,18
    e034:	8c400715 	stw	r17,28(r17)
    e038:	8d800815 	stw	r22,32(r17)
    e03c:	8d400915 	stw	r21,36(r17)
    e040:	8d000a15 	stw	r20,40(r17)
    e044:	8cc00b15 	stw	r19,44(r17)
    e048:	8080030d 	sth	r2,12(r16)
    e04c:	00800084 	movi	r2,2
    e050:	80000015 	stw	zero,0(r16)
    e054:	80000115 	stw	zero,4(r16)
    e058:	80000215 	stw	zero,8(r16)
    e05c:	80001915 	stw	zero,100(r16)
    e060:	8080038d 	sth	r2,14(r16)
    e064:	80000415 	stw	zero,16(r16)
    e068:	80000515 	stw	zero,20(r16)
    e06c:	80000615 	stw	zero,24(r16)
    e070:	81001704 	addi	r4,r16,92
    e074:	000b883a 	mov	r5,zero
    e078:	b80d883a 	mov	r6,r23
    e07c:	000d3600 	call	d360 <memset>
    e080:	00800044 	movi	r2,1
    e084:	84000715 	stw	r16,28(r16)
    e088:	85800815 	stw	r22,32(r16)
    e08c:	85400915 	stw	r21,36(r16)
    e090:	85000a15 	stw	r20,40(r16)
    e094:	84c00b15 	stw	r19,44(r16)
    e098:	90800e15 	stw	r2,56(r18)
    e09c:	dfc00817 	ldw	ra,32(sp)
    e0a0:	ddc00717 	ldw	r23,28(sp)
    e0a4:	dd800617 	ldw	r22,24(sp)
    e0a8:	dd400517 	ldw	r21,20(sp)
    e0ac:	dd000417 	ldw	r20,16(sp)
    e0b0:	dcc00317 	ldw	r19,12(sp)
    e0b4:	dc800217 	ldw	r18,8(sp)
    e0b8:	dc400117 	ldw	r17,4(sp)
    e0bc:	dc000017 	ldw	r16,0(sp)
    e0c0:	dec00904 	addi	sp,sp,36
    e0c4:	f800283a 	ret

0000e0c8 <__sfmoreglue>:
    e0c8:	defffc04 	addi	sp,sp,-16
    e0cc:	dc400115 	stw	r17,4(sp)
    e0d0:	2c7fffc4 	addi	r17,r5,-1
    e0d4:	8c401a24 	muli	r17,r17,104
    e0d8:	dc800215 	stw	r18,8(sp)
    e0dc:	2825883a 	mov	r18,r5
    e0e0:	89401d04 	addi	r5,r17,116
    e0e4:	dc000015 	stw	r16,0(sp)
    e0e8:	dfc00315 	stw	ra,12(sp)
    e0ec:	000ea040 	call	ea04 <_malloc_r>
    e0f0:	1021883a 	mov	r16,r2
    e0f4:	10000726 	beq	r2,zero,e114 <__sfmoreglue+0x4c>
    e0f8:	11000304 	addi	r4,r2,12
    e0fc:	10000015 	stw	zero,0(r2)
    e100:	14800115 	stw	r18,4(r2)
    e104:	11000215 	stw	r4,8(r2)
    e108:	000b883a 	mov	r5,zero
    e10c:	89801a04 	addi	r6,r17,104
    e110:	000d3600 	call	d360 <memset>
    e114:	8005883a 	mov	r2,r16
    e118:	dfc00317 	ldw	ra,12(sp)
    e11c:	dc800217 	ldw	r18,8(sp)
    e120:	dc400117 	ldw	r17,4(sp)
    e124:	dc000017 	ldw	r16,0(sp)
    e128:	dec00404 	addi	sp,sp,16
    e12c:	f800283a 	ret

0000e130 <__sfp>:
    e130:	00800074 	movhi	r2,1
    e134:	defffb04 	addi	sp,sp,-20
    e138:	1087b004 	addi	r2,r2,7872
    e13c:	dc800215 	stw	r18,8(sp)
    e140:	14800017 	ldw	r18,0(r2)
    e144:	dcc00315 	stw	r19,12(sp)
    e148:	dfc00415 	stw	ra,16(sp)
    e14c:	90800e17 	ldw	r2,56(r18)
    e150:	dc400115 	stw	r17,4(sp)
    e154:	dc000015 	stw	r16,0(sp)
    e158:	2027883a 	mov	r19,r4
    e15c:	1000021e 	bne	r2,zero,e168 <__sfp+0x38>
    e160:	9009883a 	mov	r4,r18
    e164:	000df2c0 	call	df2c <__sinit.part.1>
    e168:	9480b804 	addi	r18,r18,736
    e16c:	047fffc4 	movi	r17,-1
    e170:	91400117 	ldw	r5,4(r18)
    e174:	94000217 	ldw	r16,8(r18)
    e178:	297fffc4 	addi	r5,r5,-1
    e17c:	28000a16 	blt	r5,zero,e1a8 <__sfp+0x78>
    e180:	8080030f 	ldh	r2,12(r16)
    e184:	10000c26 	beq	r2,zero,e1b8 <__sfp+0x88>
    e188:	80c01d04 	addi	r3,r16,116
    e18c:	00000206 	br	e198 <__sfp+0x68>
    e190:	18bfe60f 	ldh	r2,-104(r3)
    e194:	10000826 	beq	r2,zero,e1b8 <__sfp+0x88>
    e198:	297fffc4 	addi	r5,r5,-1
    e19c:	1c3ffd04 	addi	r16,r3,-12
    e1a0:	18c01a04 	addi	r3,r3,104
    e1a4:	2c7ffa1e 	bne	r5,r17,e190 <__sfp+0x60>
    e1a8:	90800017 	ldw	r2,0(r18)
    e1ac:	10001d26 	beq	r2,zero,e224 <__sfp+0xf4>
    e1b0:	1025883a 	mov	r18,r2
    e1b4:	003fee06 	br	e170 <__sfp+0x40>
    e1b8:	00bfffc4 	movi	r2,-1
    e1bc:	8080038d 	sth	r2,14(r16)
    e1c0:	00800044 	movi	r2,1
    e1c4:	8080030d 	sth	r2,12(r16)
    e1c8:	80001915 	stw	zero,100(r16)
    e1cc:	80000015 	stw	zero,0(r16)
    e1d0:	80000215 	stw	zero,8(r16)
    e1d4:	80000115 	stw	zero,4(r16)
    e1d8:	80000415 	stw	zero,16(r16)
    e1dc:	80000515 	stw	zero,20(r16)
    e1e0:	80000615 	stw	zero,24(r16)
    e1e4:	81001704 	addi	r4,r16,92
    e1e8:	000b883a 	mov	r5,zero
    e1ec:	01800204 	movi	r6,8
    e1f0:	000d3600 	call	d360 <memset>
    e1f4:	8005883a 	mov	r2,r16
    e1f8:	80000c15 	stw	zero,48(r16)
    e1fc:	80000d15 	stw	zero,52(r16)
    e200:	80001115 	stw	zero,68(r16)
    e204:	80001215 	stw	zero,72(r16)
    e208:	dfc00417 	ldw	ra,16(sp)
    e20c:	dcc00317 	ldw	r19,12(sp)
    e210:	dc800217 	ldw	r18,8(sp)
    e214:	dc400117 	ldw	r17,4(sp)
    e218:	dc000017 	ldw	r16,0(sp)
    e21c:	dec00504 	addi	sp,sp,20
    e220:	f800283a 	ret
    e224:	9809883a 	mov	r4,r19
    e228:	01400104 	movi	r5,4
    e22c:	000e0c80 	call	e0c8 <__sfmoreglue>
    e230:	90800015 	stw	r2,0(r18)
    e234:	103fde1e 	bne	r2,zero,e1b0 <__sfp+0x80>
    e238:	00800304 	movi	r2,12
    e23c:	98800015 	stw	r2,0(r19)
    e240:	0005883a 	mov	r2,zero
    e244:	003ff006 	br	e208 <__sfp+0xd8>

0000e248 <_cleanup>:
    e248:	00800074 	movhi	r2,1
    e24c:	1087b004 	addi	r2,r2,7872
    e250:	11000017 	ldw	r4,0(r2)
    e254:	01400074 	movhi	r5,1
    e258:	297cfb04 	addi	r5,r5,-3092
    e25c:	000e7881 	jmpi	e788 <_fwalk_reent>

0000e260 <__sinit>:
    e260:	20800e17 	ldw	r2,56(r4)
    e264:	10000126 	beq	r2,zero,e26c <__sinit+0xc>
    e268:	f800283a 	ret
    e26c:	000df2c1 	jmpi	df2c <__sinit.part.1>

0000e270 <__sfp_lock_acquire>:
    e270:	f800283a 	ret

0000e274 <__sfp_lock_release>:
    e274:	f800283a 	ret

0000e278 <__sinit_lock_acquire>:
    e278:	f800283a 	ret

0000e27c <__sinit_lock_release>:
    e27c:	f800283a 	ret

0000e280 <__fp_lock_all>:
    e280:	00800074 	movhi	r2,1
    e284:	1087b104 	addi	r2,r2,7876
    e288:	11000017 	ldw	r4,0(r2)
    e28c:	01400074 	movhi	r5,1
    e290:	2977c404 	addi	r5,r5,-8432
    e294:	000e6c41 	jmpi	e6c4 <_fwalk>

0000e298 <__fp_unlock_all>:
    e298:	00800074 	movhi	r2,1
    e29c:	1087b104 	addi	r2,r2,7876
    e2a0:	11000017 	ldw	r4,0(r2)
    e2a4:	01400074 	movhi	r5,1
    e2a8:	2977c604 	addi	r5,r5,-8424
    e2ac:	000e6c41 	jmpi	e6c4 <_fwalk>

0000e2b0 <_malloc_trim_r>:
    e2b0:	defffb04 	addi	sp,sp,-20
    e2b4:	dcc00315 	stw	r19,12(sp)
    e2b8:	04c00074 	movhi	r19,1
    e2bc:	dc800215 	stw	r18,8(sp)
    e2c0:	dc400115 	stw	r17,4(sp)
    e2c4:	dc000015 	stw	r16,0(sp)
    e2c8:	dfc00415 	stw	ra,16(sp)
    e2cc:	2821883a 	mov	r16,r5
    e2d0:	9cc68604 	addi	r19,r19,6680
    e2d4:	2025883a 	mov	r18,r4
    e2d8:	00009300 	call	930 <__malloc_lock>
    e2dc:	98800217 	ldw	r2,8(r19)
    e2e0:	14400117 	ldw	r17,4(r2)
    e2e4:	00bfff04 	movi	r2,-4
    e2e8:	88a2703a 	and	r17,r17,r2
    e2ec:	8c21c83a 	sub	r16,r17,r16
    e2f0:	8403fbc4 	addi	r16,r16,4079
    e2f4:	8020d33a 	srli	r16,r16,12
    e2f8:	0083ffc4 	movi	r2,4095
    e2fc:	843fffc4 	addi	r16,r16,-1
    e300:	8020933a 	slli	r16,r16,12
    e304:	1400060e 	bge	r2,r16,e320 <_malloc_trim_r+0x70>
    e308:	9009883a 	mov	r4,r18
    e30c:	000b883a 	mov	r5,zero
    e310:	000f1ac0 	call	f1ac <_sbrk_r>
    e314:	98c00217 	ldw	r3,8(r19)
    e318:	1c47883a 	add	r3,r3,r17
    e31c:	10c00a26 	beq	r2,r3,e348 <_malloc_trim_r+0x98>
    e320:	9009883a 	mov	r4,r18
    e324:	0000a500 	call	a50 <__malloc_unlock>
    e328:	0005883a 	mov	r2,zero
    e32c:	dfc00417 	ldw	ra,16(sp)
    e330:	dcc00317 	ldw	r19,12(sp)
    e334:	dc800217 	ldw	r18,8(sp)
    e338:	dc400117 	ldw	r17,4(sp)
    e33c:	dc000017 	ldw	r16,0(sp)
    e340:	dec00504 	addi	sp,sp,20
    e344:	f800283a 	ret
    e348:	9009883a 	mov	r4,r18
    e34c:	040bc83a 	sub	r5,zero,r16
    e350:	000f1ac0 	call	f1ac <_sbrk_r>
    e354:	00ffffc4 	movi	r3,-1
    e358:	10c00d26 	beq	r2,r3,e390 <_malloc_trim_r+0xe0>
    e35c:	00c00074 	movhi	r3,1
    e360:	18cf7804 	addi	r3,r3,15840
    e364:	18800017 	ldw	r2,0(r3)
    e368:	99000217 	ldw	r4,8(r19)
    e36c:	8c23c83a 	sub	r17,r17,r16
    e370:	8c400054 	ori	r17,r17,1
    e374:	1421c83a 	sub	r16,r2,r16
    e378:	24400115 	stw	r17,4(r4)
    e37c:	9009883a 	mov	r4,r18
    e380:	1c000015 	stw	r16,0(r3)
    e384:	0000a500 	call	a50 <__malloc_unlock>
    e388:	00800044 	movi	r2,1
    e38c:	003fe706 	br	e32c <_malloc_trim_r+0x7c>
    e390:	9009883a 	mov	r4,r18
    e394:	000b883a 	mov	r5,zero
    e398:	000f1ac0 	call	f1ac <_sbrk_r>
    e39c:	99000217 	ldw	r4,8(r19)
    e3a0:	014003c4 	movi	r5,15
    e3a4:	1107c83a 	sub	r3,r2,r4
    e3a8:	28ffdd0e 	bge	r5,r3,e320 <_malloc_trim_r+0x70>
    e3ac:	01400074 	movhi	r5,1
    e3b0:	2947b204 	addi	r5,r5,7880
    e3b4:	29400017 	ldw	r5,0(r5)
    e3b8:	18c00054 	ori	r3,r3,1
    e3bc:	20c00115 	stw	r3,4(r4)
    e3c0:	00c00074 	movhi	r3,1
    e3c4:	1145c83a 	sub	r2,r2,r5
    e3c8:	18cf7804 	addi	r3,r3,15840
    e3cc:	18800015 	stw	r2,0(r3)
    e3d0:	003fd306 	br	e320 <_malloc_trim_r+0x70>

0000e3d4 <_free_r>:
    e3d4:	28004c26 	beq	r5,zero,e508 <_free_r+0x134>
    e3d8:	defffd04 	addi	sp,sp,-12
    e3dc:	dc400115 	stw	r17,4(sp)
    e3e0:	dc000015 	stw	r16,0(sp)
    e3e4:	2023883a 	mov	r17,r4
    e3e8:	2821883a 	mov	r16,r5
    e3ec:	dfc00215 	stw	ra,8(sp)
    e3f0:	00009300 	call	930 <__malloc_lock>
    e3f4:	813fff17 	ldw	r4,-4(r16)
    e3f8:	00bfff84 	movi	r2,-2
    e3fc:	02400074 	movhi	r9,1
    e400:	81bffe04 	addi	r6,r16,-8
    e404:	2084703a 	and	r2,r4,r2
    e408:	4a468604 	addi	r9,r9,6680
    e40c:	308b883a 	add	r5,r6,r2
    e410:	2a000117 	ldw	r8,4(r5)
    e414:	49c00217 	ldw	r7,8(r9)
    e418:	00ffff04 	movi	r3,-4
    e41c:	40c6703a 	and	r3,r8,r3
    e420:	39405326 	beq	r7,r5,e570 <_free_r+0x19c>
    e424:	28c00115 	stw	r3,4(r5)
    e428:	2100004c 	andi	r4,r4,1
    e42c:	2000091e 	bne	r4,zero,e454 <_free_r+0x80>
    e430:	81fffe17 	ldw	r7,-8(r16)
    e434:	4a000204 	addi	r8,r9,8
    e438:	31cdc83a 	sub	r6,r6,r7
    e43c:	31000217 	ldw	r4,8(r6)
    e440:	11c5883a 	add	r2,r2,r7
    e444:	22006126 	beq	r4,r8,e5cc <_free_r+0x1f8>
    e448:	31c00317 	ldw	r7,12(r6)
    e44c:	21c00315 	stw	r7,12(r4)
    e450:	39000215 	stw	r4,8(r7)
    e454:	28c9883a 	add	r4,r5,r3
    e458:	21c00117 	ldw	r7,4(r4)
    e45c:	39c0004c 	andi	r7,r7,1
    e460:	38000d1e 	bne	r7,zero,e498 <_free_r+0xc4>
    e464:	29000217 	ldw	r4,8(r5)
    e468:	10c5883a 	add	r2,r2,r3
    e46c:	00c00074 	movhi	r3,1
    e470:	18c68804 	addi	r3,r3,6688
    e474:	20c07526 	beq	r4,r3,e64c <_free_r+0x278>
    e478:	29c00317 	ldw	r7,12(r5)
    e47c:	11400054 	ori	r5,r2,1
    e480:	3087883a 	add	r3,r6,r2
    e484:	21c00315 	stw	r7,12(r4)
    e488:	39000215 	stw	r4,8(r7)
    e48c:	31400115 	stw	r5,4(r6)
    e490:	18800015 	stw	r2,0(r3)
    e494:	00000406 	br	e4a8 <_free_r+0xd4>
    e498:	10c00054 	ori	r3,r2,1
    e49c:	30c00115 	stw	r3,4(r6)
    e4a0:	3087883a 	add	r3,r6,r2
    e4a4:	18800015 	stw	r2,0(r3)
    e4a8:	00c07fc4 	movi	r3,511
    e4ac:	18801736 	bltu	r3,r2,e50c <_free_r+0x138>
    e4b0:	1004d0fa 	srli	r2,r2,3
    e4b4:	01400044 	movi	r5,1
    e4b8:	49000117 	ldw	r4,4(r9)
    e4bc:	1087883a 	add	r3,r2,r2
    e4c0:	18c7883a 	add	r3,r3,r3
    e4c4:	1005d0ba 	srai	r2,r2,2
    e4c8:	18c7883a 	add	r3,r3,r3
    e4cc:	1a47883a 	add	r3,r3,r9
    e4d0:	19c00217 	ldw	r7,8(r3)
    e4d4:	2884983a 	sll	r2,r5,r2
    e4d8:	30c00315 	stw	r3,12(r6)
    e4dc:	31c00215 	stw	r7,8(r6)
    e4e0:	1104b03a 	or	r2,r2,r4
    e4e4:	19800215 	stw	r6,8(r3)
    e4e8:	48800115 	stw	r2,4(r9)
    e4ec:	39800315 	stw	r6,12(r7)
    e4f0:	8809883a 	mov	r4,r17
    e4f4:	dfc00217 	ldw	ra,8(sp)
    e4f8:	dc400117 	ldw	r17,4(sp)
    e4fc:	dc000017 	ldw	r16,0(sp)
    e500:	dec00304 	addi	sp,sp,12
    e504:	0000a501 	jmpi	a50 <__malloc_unlock>
    e508:	f800283a 	ret
    e50c:	1006d27a 	srli	r3,r2,9
    e510:	01000104 	movi	r4,4
    e514:	20c04036 	bltu	r4,r3,e618 <_free_r+0x244>
    e518:	1006d1ba 	srli	r3,r2,6
    e51c:	19400e04 	addi	r5,r3,56
    e520:	2947883a 	add	r3,r5,r5
    e524:	18c7883a 	add	r3,r3,r3
    e528:	18c7883a 	add	r3,r3,r3
    e52c:	1a49883a 	add	r4,r3,r9
    e530:	20c00217 	ldw	r3,8(r4)
    e534:	01c00074 	movhi	r7,1
    e538:	39c68604 	addi	r7,r7,6680
    e53c:	19003b26 	beq	r3,r4,e62c <_free_r+0x258>
    e540:	01ffff04 	movi	r7,-4
    e544:	19400117 	ldw	r5,4(r3)
    e548:	29ca703a 	and	r5,r5,r7
    e54c:	1140022e 	bgeu	r2,r5,e558 <_free_r+0x184>
    e550:	18c00217 	ldw	r3,8(r3)
    e554:	20fffb1e 	bne	r4,r3,e544 <_free_r+0x170>
    e558:	18800317 	ldw	r2,12(r3)
    e55c:	30800315 	stw	r2,12(r6)
    e560:	30c00215 	stw	r3,8(r6)
    e564:	11800215 	stw	r6,8(r2)
    e568:	19800315 	stw	r6,12(r3)
    e56c:	003fe006 	br	e4f0 <_free_r+0x11c>
    e570:	2100004c 	andi	r4,r4,1
    e574:	1885883a 	add	r2,r3,r2
    e578:	2000071e 	bne	r4,zero,e598 <_free_r+0x1c4>
    e57c:	817ffe17 	ldw	r5,-8(r16)
    e580:	314dc83a 	sub	r6,r6,r5
    e584:	30c00317 	ldw	r3,12(r6)
    e588:	31000217 	ldw	r4,8(r6)
    e58c:	1145883a 	add	r2,r2,r5
    e590:	20c00315 	stw	r3,12(r4)
    e594:	19000215 	stw	r4,8(r3)
    e598:	10c00054 	ori	r3,r2,1
    e59c:	30c00115 	stw	r3,4(r6)
    e5a0:	00c00074 	movhi	r3,1
    e5a4:	18c7b304 	addi	r3,r3,7884
    e5a8:	18c00017 	ldw	r3,0(r3)
    e5ac:	49800215 	stw	r6,8(r9)
    e5b0:	10ffcf36 	bltu	r2,r3,e4f0 <_free_r+0x11c>
    e5b4:	00800074 	movhi	r2,1
    e5b8:	108f7704 	addi	r2,r2,15836
    e5bc:	11400017 	ldw	r5,0(r2)
    e5c0:	8809883a 	mov	r4,r17
    e5c4:	000e2b00 	call	e2b0 <_malloc_trim_r>
    e5c8:	003fc906 	br	e4f0 <_free_r+0x11c>
    e5cc:	28c9883a 	add	r4,r5,r3
    e5d0:	21000117 	ldw	r4,4(r4)
    e5d4:	2100004c 	andi	r4,r4,1
    e5d8:	20000a1e 	bne	r4,zero,e604 <_free_r+0x230>
    e5dc:	29000317 	ldw	r4,12(r5)
    e5e0:	29400217 	ldw	r5,8(r5)
    e5e4:	10c5883a 	add	r2,r2,r3
    e5e8:	10c00054 	ori	r3,r2,1
    e5ec:	29000315 	stw	r4,12(r5)
    e5f0:	21400215 	stw	r5,8(r4)
    e5f4:	30c00115 	stw	r3,4(r6)
    e5f8:	308d883a 	add	r6,r6,r2
    e5fc:	30800015 	stw	r2,0(r6)
    e600:	003fbb06 	br	e4f0 <_free_r+0x11c>
    e604:	10c00054 	ori	r3,r2,1
    e608:	30c00115 	stw	r3,4(r6)
    e60c:	308d883a 	add	r6,r6,r2
    e610:	30800015 	stw	r2,0(r6)
    e614:	003fb606 	br	e4f0 <_free_r+0x11c>
    e618:	01000504 	movi	r4,20
    e61c:	20c01436 	bltu	r4,r3,e670 <_free_r+0x29c>
    e620:	194016c4 	addi	r5,r3,91
    e624:	2947883a 	add	r3,r5,r5
    e628:	003fbe06 	br	e524 <_free_r+0x150>
    e62c:	280bd0ba 	srai	r5,r5,2
    e630:	00800044 	movi	r2,1
    e634:	39000117 	ldw	r4,4(r7)
    e638:	114a983a 	sll	r5,r2,r5
    e63c:	1805883a 	mov	r2,r3
    e640:	2908b03a 	or	r4,r5,r4
    e644:	39000115 	stw	r4,4(r7)
    e648:	003fc406 	br	e55c <_free_r+0x188>
    e64c:	49800515 	stw	r6,20(r9)
    e650:	49800415 	stw	r6,16(r9)
    e654:	10c00054 	ori	r3,r2,1
    e658:	31000315 	stw	r4,12(r6)
    e65c:	31000215 	stw	r4,8(r6)
    e660:	30c00115 	stw	r3,4(r6)
    e664:	308d883a 	add	r6,r6,r2
    e668:	30800015 	stw	r2,0(r6)
    e66c:	003fa006 	br	e4f0 <_free_r+0x11c>
    e670:	01001504 	movi	r4,84
    e674:	20c00436 	bltu	r4,r3,e688 <_free_r+0x2b4>
    e678:	1006d33a 	srli	r3,r2,12
    e67c:	19401b84 	addi	r5,r3,110
    e680:	2947883a 	add	r3,r5,r5
    e684:	003fa706 	br	e524 <_free_r+0x150>
    e688:	01005504 	movi	r4,340
    e68c:	20c00436 	bltu	r4,r3,e6a0 <_free_r+0x2cc>
    e690:	1006d3fa 	srli	r3,r2,15
    e694:	19401dc4 	addi	r5,r3,119
    e698:	2947883a 	add	r3,r5,r5
    e69c:	003fa106 	br	e524 <_free_r+0x150>
    e6a0:	01015504 	movi	r4,1364
    e6a4:	20c00436 	bltu	r4,r3,e6b8 <_free_r+0x2e4>
    e6a8:	1006d4ba 	srli	r3,r2,18
    e6ac:	19401f04 	addi	r5,r3,124
    e6b0:	2947883a 	add	r3,r5,r5
    e6b4:	003f9b06 	br	e524 <_free_r+0x150>
    e6b8:	00c03f04 	movi	r3,252
    e6bc:	01401f84 	movi	r5,126
    e6c0:	003f9806 	br	e524 <_free_r+0x150>

0000e6c4 <_fwalk>:
    e6c4:	defff704 	addi	sp,sp,-36
    e6c8:	dd000415 	stw	r20,16(sp)
    e6cc:	dfc00815 	stw	ra,32(sp)
    e6d0:	ddc00715 	stw	r23,28(sp)
    e6d4:	dd800615 	stw	r22,24(sp)
    e6d8:	dd400515 	stw	r21,20(sp)
    e6dc:	dcc00315 	stw	r19,12(sp)
    e6e0:	dc800215 	stw	r18,8(sp)
    e6e4:	dc400115 	stw	r17,4(sp)
    e6e8:	dc000015 	stw	r16,0(sp)
    e6ec:	2500b804 	addi	r20,r4,736
    e6f0:	a0002326 	beq	r20,zero,e780 <_fwalk+0xbc>
    e6f4:	282b883a 	mov	r21,r5
    e6f8:	002f883a 	mov	r23,zero
    e6fc:	05800044 	movi	r22,1
    e700:	04ffffc4 	movi	r19,-1
    e704:	a4400117 	ldw	r17,4(r20)
    e708:	a4800217 	ldw	r18,8(r20)
    e70c:	8c7fffc4 	addi	r17,r17,-1
    e710:	88000d16 	blt	r17,zero,e748 <_fwalk+0x84>
    e714:	94000304 	addi	r16,r18,12
    e718:	94800384 	addi	r18,r18,14
    e71c:	80c0000b 	ldhu	r3,0(r16)
    e720:	8c7fffc4 	addi	r17,r17,-1
    e724:	813ffd04 	addi	r4,r16,-12
    e728:	b0c0042e 	bgeu	r22,r3,e73c <_fwalk+0x78>
    e72c:	90c0000f 	ldh	r3,0(r18)
    e730:	1cc00226 	beq	r3,r19,e73c <_fwalk+0x78>
    e734:	a83ee83a 	callr	r21
    e738:	b8aeb03a 	or	r23,r23,r2
    e73c:	84001a04 	addi	r16,r16,104
    e740:	94801a04 	addi	r18,r18,104
    e744:	8cfff51e 	bne	r17,r19,e71c <_fwalk+0x58>
    e748:	a5000017 	ldw	r20,0(r20)
    e74c:	a03fed1e 	bne	r20,zero,e704 <_fwalk+0x40>
    e750:	b805883a 	mov	r2,r23
    e754:	dfc00817 	ldw	ra,32(sp)
    e758:	ddc00717 	ldw	r23,28(sp)
    e75c:	dd800617 	ldw	r22,24(sp)
    e760:	dd400517 	ldw	r21,20(sp)
    e764:	dd000417 	ldw	r20,16(sp)
    e768:	dcc00317 	ldw	r19,12(sp)
    e76c:	dc800217 	ldw	r18,8(sp)
    e770:	dc400117 	ldw	r17,4(sp)
    e774:	dc000017 	ldw	r16,0(sp)
    e778:	dec00904 	addi	sp,sp,36
    e77c:	f800283a 	ret
    e780:	002f883a 	mov	r23,zero
    e784:	003ff206 	br	e750 <_fwalk+0x8c>

0000e788 <_fwalk_reent>:
    e788:	defff704 	addi	sp,sp,-36
    e78c:	dd400515 	stw	r21,20(sp)
    e790:	dfc00815 	stw	ra,32(sp)
    e794:	ddc00715 	stw	r23,28(sp)
    e798:	dd800615 	stw	r22,24(sp)
    e79c:	dd000415 	stw	r20,16(sp)
    e7a0:	dcc00315 	stw	r19,12(sp)
    e7a4:	dc800215 	stw	r18,8(sp)
    e7a8:	dc400115 	stw	r17,4(sp)
    e7ac:	dc000015 	stw	r16,0(sp)
    e7b0:	2540b804 	addi	r21,r4,736
    e7b4:	a8002326 	beq	r21,zero,e844 <_fwalk_reent+0xbc>
    e7b8:	2829883a 	mov	r20,r5
    e7bc:	202d883a 	mov	r22,r4
    e7c0:	002f883a 	mov	r23,zero
    e7c4:	04c00044 	movi	r19,1
    e7c8:	04bfffc4 	movi	r18,-1
    e7cc:	ac400117 	ldw	r17,4(r21)
    e7d0:	ac000217 	ldw	r16,8(r21)
    e7d4:	8c7fffc4 	addi	r17,r17,-1
    e7d8:	88000c16 	blt	r17,zero,e80c <_fwalk_reent+0x84>
    e7dc:	84000304 	addi	r16,r16,12
    e7e0:	80c0000b 	ldhu	r3,0(r16)
    e7e4:	8c7fffc4 	addi	r17,r17,-1
    e7e8:	817ffd04 	addi	r5,r16,-12
    e7ec:	98c0052e 	bgeu	r19,r3,e804 <_fwalk_reent+0x7c>
    e7f0:	80c0008f 	ldh	r3,2(r16)
    e7f4:	b009883a 	mov	r4,r22
    e7f8:	1c800226 	beq	r3,r18,e804 <_fwalk_reent+0x7c>
    e7fc:	a03ee83a 	callr	r20
    e800:	b8aeb03a 	or	r23,r23,r2
    e804:	84001a04 	addi	r16,r16,104
    e808:	8cbff51e 	bne	r17,r18,e7e0 <_fwalk_reent+0x58>
    e80c:	ad400017 	ldw	r21,0(r21)
    e810:	a83fee1e 	bne	r21,zero,e7cc <_fwalk_reent+0x44>
    e814:	b805883a 	mov	r2,r23
    e818:	dfc00817 	ldw	ra,32(sp)
    e81c:	ddc00717 	ldw	r23,28(sp)
    e820:	dd800617 	ldw	r22,24(sp)
    e824:	dd400517 	ldw	r21,20(sp)
    e828:	dd000417 	ldw	r20,16(sp)
    e82c:	dcc00317 	ldw	r19,12(sp)
    e830:	dc800217 	ldw	r18,8(sp)
    e834:	dc400117 	ldw	r17,4(sp)
    e838:	dc000017 	ldw	r16,0(sp)
    e83c:	dec00904 	addi	sp,sp,36
    e840:	f800283a 	ret
    e844:	002f883a 	mov	r23,zero
    e848:	003ff206 	br	e814 <_fwalk_reent+0x8c>

0000e84c <__smakebuf_r>:
    e84c:	2880030b 	ldhu	r2,12(r5)
    e850:	10c0008c 	andi	r3,r2,2
    e854:	1800401e 	bne	r3,zero,e958 <__smakebuf_r+0x10c>
    e858:	deffec04 	addi	sp,sp,-80
    e85c:	dc000f15 	stw	r16,60(sp)
    e860:	2821883a 	mov	r16,r5
    e864:	2940038f 	ldh	r5,14(r5)
    e868:	dc401015 	stw	r17,64(sp)
    e86c:	dfc01315 	stw	ra,76(sp)
    e870:	dcc01215 	stw	r19,72(sp)
    e874:	dc801115 	stw	r18,68(sp)
    e878:	2023883a 	mov	r17,r4
    e87c:	28001b16 	blt	r5,zero,e8ec <__smakebuf_r+0xa0>
    e880:	d80d883a 	mov	r6,sp
    e884:	000f4f00 	call	f4f0 <_fstat_r>
    e888:	10001716 	blt	r2,zero,e8e8 <__smakebuf_r+0x9c>
    e88c:	d8800117 	ldw	r2,4(sp)
    e890:	00e00014 	movui	r3,32768
    e894:	10bc000c 	andi	r2,r2,61440
    e898:	10c03726 	beq	r2,r3,e978 <__smakebuf_r+0x12c>
    e89c:	80c0030b 	ldhu	r3,12(r16)
    e8a0:	18c20014 	ori	r3,r3,2048
    e8a4:	80c0030d 	sth	r3,12(r16)
    e8a8:	00c80004 	movi	r3,8192
    e8ac:	10c03c1e 	bne	r2,r3,e9a0 <__smakebuf_r+0x154>
    e8b0:	8140038f 	ldh	r5,14(r16)
    e8b4:	8809883a 	mov	r4,r17
    e8b8:	000f5480 	call	f548 <_isatty_r>
    e8bc:	10004e26 	beq	r2,zero,e9f8 <__smakebuf_r+0x1ac>
    e8c0:	8080030b 	ldhu	r2,12(r16)
    e8c4:	04c00044 	movi	r19,1
    e8c8:	80c010c4 	addi	r3,r16,67
    e8cc:	14c4b03a 	or	r2,r2,r19
    e8d0:	8080030d 	sth	r2,12(r16)
    e8d4:	80c00015 	stw	r3,0(r16)
    e8d8:	80c00415 	stw	r3,16(r16)
    e8dc:	84c00515 	stw	r19,20(r16)
    e8e0:	04810004 	movi	r18,1024
    e8e4:	00000706 	br	e904 <__smakebuf_r+0xb8>
    e8e8:	8080030b 	ldhu	r2,12(r16)
    e8ec:	10c0200c 	andi	r3,r2,128
    e8f0:	18001f1e 	bne	r3,zero,e970 <__smakebuf_r+0x124>
    e8f4:	04810004 	movi	r18,1024
    e8f8:	10820014 	ori	r2,r2,2048
    e8fc:	8080030d 	sth	r2,12(r16)
    e900:	0027883a 	mov	r19,zero
    e904:	8809883a 	mov	r4,r17
    e908:	900b883a 	mov	r5,r18
    e90c:	000ea040 	call	ea04 <_malloc_r>
    e910:	10002e26 	beq	r2,zero,e9cc <__smakebuf_r+0x180>
    e914:	80c0030b 	ldhu	r3,12(r16)
    e918:	01000074 	movhi	r4,1
    e91c:	2137c804 	addi	r4,r4,-8416
    e920:	89000f15 	stw	r4,60(r17)
    e924:	18c02014 	ori	r3,r3,128
    e928:	80c0030d 	sth	r3,12(r16)
    e92c:	80800015 	stw	r2,0(r16)
    e930:	80800415 	stw	r2,16(r16)
    e934:	84800515 	stw	r18,20(r16)
    e938:	98001c1e 	bne	r19,zero,e9ac <__smakebuf_r+0x160>
    e93c:	dfc01317 	ldw	ra,76(sp)
    e940:	dcc01217 	ldw	r19,72(sp)
    e944:	dc801117 	ldw	r18,68(sp)
    e948:	dc401017 	ldw	r17,64(sp)
    e94c:	dc000f17 	ldw	r16,60(sp)
    e950:	dec01404 	addi	sp,sp,80
    e954:	f800283a 	ret
    e958:	288010c4 	addi	r2,r5,67
    e95c:	28800015 	stw	r2,0(r5)
    e960:	28800415 	stw	r2,16(r5)
    e964:	00800044 	movi	r2,1
    e968:	28800515 	stw	r2,20(r5)
    e96c:	f800283a 	ret
    e970:	04801004 	movi	r18,64
    e974:	003fe006 	br	e8f8 <__smakebuf_r+0xac>
    e978:	81000a17 	ldw	r4,40(r16)
    e97c:	00c00074 	movhi	r3,1
    e980:	18fcb604 	addi	r3,r3,-3368
    e984:	20ffc51e 	bne	r4,r3,e89c <__smakebuf_r+0x50>
    e988:	80c0030b 	ldhu	r3,12(r16)
    e98c:	01010004 	movi	r4,1024
    e990:	81001315 	stw	r4,76(r16)
    e994:	1906b03a 	or	r3,r3,r4
    e998:	80c0030d 	sth	r3,12(r16)
    e99c:	003fc206 	br	e8a8 <__smakebuf_r+0x5c>
    e9a0:	0027883a 	mov	r19,zero
    e9a4:	04810004 	movi	r18,1024
    e9a8:	003fd606 	br	e904 <__smakebuf_r+0xb8>
    e9ac:	8140038f 	ldh	r5,14(r16)
    e9b0:	8809883a 	mov	r4,r17
    e9b4:	000f5480 	call	f548 <_isatty_r>
    e9b8:	103fe026 	beq	r2,zero,e93c <__smakebuf_r+0xf0>
    e9bc:	8080030b 	ldhu	r2,12(r16)
    e9c0:	10800054 	ori	r2,r2,1
    e9c4:	8080030d 	sth	r2,12(r16)
    e9c8:	003fdc06 	br	e93c <__smakebuf_r+0xf0>
    e9cc:	8080030b 	ldhu	r2,12(r16)
    e9d0:	10c0800c 	andi	r3,r2,512
    e9d4:	183fd91e 	bne	r3,zero,e93c <__smakebuf_r+0xf0>
    e9d8:	10800094 	ori	r2,r2,2
    e9dc:	80c010c4 	addi	r3,r16,67
    e9e0:	8080030d 	sth	r2,12(r16)
    e9e4:	00800044 	movi	r2,1
    e9e8:	80c00015 	stw	r3,0(r16)
    e9ec:	80c00415 	stw	r3,16(r16)
    e9f0:	80800515 	stw	r2,20(r16)
    e9f4:	003fd106 	br	e93c <__smakebuf_r+0xf0>
    e9f8:	04c00044 	movi	r19,1
    e9fc:	04810004 	movi	r18,1024
    ea00:	003fc006 	br	e904 <__smakebuf_r+0xb8>

0000ea04 <_malloc_r>:
    ea04:	defff504 	addi	sp,sp,-44
    ea08:	dc800315 	stw	r18,12(sp)
    ea0c:	dfc00a15 	stw	ra,40(sp)
    ea10:	df000915 	stw	fp,36(sp)
    ea14:	ddc00815 	stw	r23,32(sp)
    ea18:	dd800715 	stw	r22,28(sp)
    ea1c:	dd400615 	stw	r21,24(sp)
    ea20:	dd000515 	stw	r20,20(sp)
    ea24:	dcc00415 	stw	r19,16(sp)
    ea28:	dc400215 	stw	r17,8(sp)
    ea2c:	dc000115 	stw	r16,4(sp)
    ea30:	288002c4 	addi	r2,r5,11
    ea34:	00c00584 	movi	r3,22
    ea38:	2025883a 	mov	r18,r4
    ea3c:	18802a2e 	bgeu	r3,r2,eae8 <_malloc_r+0xe4>
    ea40:	047ffe04 	movi	r17,-8
    ea44:	1462703a 	and	r17,r2,r17
    ea48:	88009e16 	blt	r17,zero,ecc4 <_malloc_r+0x2c0>
    ea4c:	89409d36 	bltu	r17,r5,ecc4 <_malloc_r+0x2c0>
    ea50:	00009300 	call	930 <__malloc_lock>
    ea54:	00807dc4 	movi	r2,503
    ea58:	14402736 	bltu	r2,r17,eaf8 <_malloc_r+0xf4>
    ea5c:	8806d0fa 	srli	r3,r17,3
    ea60:	04c00074 	movhi	r19,1
    ea64:	9cc68604 	addi	r19,r19,6680
    ea68:	18c5883a 	add	r2,r3,r3
    ea6c:	1085883a 	add	r2,r2,r2
    ea70:	1085883a 	add	r2,r2,r2
    ea74:	9885883a 	add	r2,r19,r2
    ea78:	14000317 	ldw	r16,12(r2)
    ea7c:	80814a26 	beq	r16,r2,efa8 <_malloc_r+0x5a4>
    ea80:	80c00117 	ldw	r3,4(r16)
    ea84:	81000317 	ldw	r4,12(r16)
    ea88:	00bfff04 	movi	r2,-4
    ea8c:	1884703a 	and	r2,r3,r2
    ea90:	81400217 	ldw	r5,8(r16)
    ea94:	8085883a 	add	r2,r16,r2
    ea98:	10c00117 	ldw	r3,4(r2)
    ea9c:	29000315 	stw	r4,12(r5)
    eaa0:	21400215 	stw	r5,8(r4)
    eaa4:	18c00054 	ori	r3,r3,1
    eaa8:	10c00115 	stw	r3,4(r2)
    eaac:	9009883a 	mov	r4,r18
    eab0:	0000a500 	call	a50 <__malloc_unlock>
    eab4:	80800204 	addi	r2,r16,8
    eab8:	dfc00a17 	ldw	ra,40(sp)
    eabc:	df000917 	ldw	fp,36(sp)
    eac0:	ddc00817 	ldw	r23,32(sp)
    eac4:	dd800717 	ldw	r22,28(sp)
    eac8:	dd400617 	ldw	r21,24(sp)
    eacc:	dd000517 	ldw	r20,20(sp)
    ead0:	dcc00417 	ldw	r19,16(sp)
    ead4:	dc800317 	ldw	r18,12(sp)
    ead8:	dc400217 	ldw	r17,8(sp)
    eadc:	dc000117 	ldw	r16,4(sp)
    eae0:	dec00b04 	addi	sp,sp,44
    eae4:	f800283a 	ret
    eae8:	04400404 	movi	r17,16
    eaec:	89407536 	bltu	r17,r5,ecc4 <_malloc_r+0x2c0>
    eaf0:	00009300 	call	930 <__malloc_lock>
    eaf4:	003fd906 	br	ea5c <_malloc_r+0x58>
    eaf8:	8806d27a 	srli	r3,r17,9
    eafc:	18007526 	beq	r3,zero,ecd4 <_malloc_r+0x2d0>
    eb00:	00800104 	movi	r2,4
    eb04:	10c0ef36 	bltu	r2,r3,eec4 <_malloc_r+0x4c0>
    eb08:	8806d1ba 	srli	r3,r17,6
    eb0c:	19c00e04 	addi	r7,r3,56
    eb10:	39cb883a 	add	r5,r7,r7
    eb14:	04c00074 	movhi	r19,1
    eb18:	294b883a 	add	r5,r5,r5
    eb1c:	9cc68604 	addi	r19,r19,6680
    eb20:	294b883a 	add	r5,r5,r5
    eb24:	994b883a 	add	r5,r19,r5
    eb28:	2c000317 	ldw	r16,12(r5)
    eb2c:	2c000e26 	beq	r5,r16,eb68 <_malloc_r+0x164>
    eb30:	80800117 	ldw	r2,4(r16)
    eb34:	01bfff04 	movi	r6,-4
    eb38:	010003c4 	movi	r4,15
    eb3c:	1184703a 	and	r2,r2,r6
    eb40:	1447c83a 	sub	r3,r2,r17
    eb44:	20c00716 	blt	r4,r3,eb64 <_malloc_r+0x160>
    eb48:	1800650e 	bge	r3,zero,ece0 <_malloc_r+0x2dc>
    eb4c:	84000317 	ldw	r16,12(r16)
    eb50:	2c000526 	beq	r5,r16,eb68 <_malloc_r+0x164>
    eb54:	80800117 	ldw	r2,4(r16)
    eb58:	1184703a 	and	r2,r2,r6
    eb5c:	1447c83a 	sub	r3,r2,r17
    eb60:	20fff90e 	bge	r4,r3,eb48 <_malloc_r+0x144>
    eb64:	39ffffc4 	addi	r7,r7,-1
    eb68:	38c00044 	addi	r3,r7,1
    eb6c:	01800074 	movhi	r6,1
    eb70:	9c000417 	ldw	r16,16(r19)
    eb74:	31868604 	addi	r6,r6,6680
    eb78:	32400204 	addi	r9,r6,8
    eb7c:	82410326 	beq	r16,r9,ef8c <_malloc_r+0x588>
    eb80:	81000117 	ldw	r4,4(r16)
    eb84:	00bfff04 	movi	r2,-4
    eb88:	208e703a 	and	r7,r4,r2
    eb8c:	3c45c83a 	sub	r2,r7,r17
    eb90:	010003c4 	movi	r4,15
    eb94:	2080ee16 	blt	r4,r2,ef50 <_malloc_r+0x54c>
    eb98:	32400515 	stw	r9,20(r6)
    eb9c:	32400415 	stw	r9,16(r6)
    eba0:	1000510e 	bge	r2,zero,ece8 <_malloc_r+0x2e4>
    eba4:	00807fc4 	movi	r2,511
    eba8:	11c0ce36 	bltu	r2,r7,eee4 <_malloc_r+0x4e0>
    ebac:	3808d0fa 	srli	r4,r7,3
    ebb0:	01c00044 	movi	r7,1
    ebb4:	30800117 	ldw	r2,4(r6)
    ebb8:	210b883a 	add	r5,r4,r4
    ebbc:	294b883a 	add	r5,r5,r5
    ebc0:	2009d0ba 	srai	r4,r4,2
    ebc4:	294b883a 	add	r5,r5,r5
    ebc8:	298b883a 	add	r5,r5,r6
    ebcc:	2a000217 	ldw	r8,8(r5)
    ebd0:	3908983a 	sll	r4,r7,r4
    ebd4:	81400315 	stw	r5,12(r16)
    ebd8:	82000215 	stw	r8,8(r16)
    ebdc:	2088b03a 	or	r4,r4,r2
    ebe0:	2c000215 	stw	r16,8(r5)
    ebe4:	31000115 	stw	r4,4(r6)
    ebe8:	44000315 	stw	r16,12(r8)
    ebec:	1805d0ba 	srai	r2,r3,2
    ebf0:	01400044 	movi	r5,1
    ebf4:	288a983a 	sll	r5,r5,r2
    ebf8:	21404336 	bltu	r4,r5,ed08 <_malloc_r+0x304>
    ebfc:	2144703a 	and	r2,r4,r5
    ec00:	10000a1e 	bne	r2,zero,ec2c <_malloc_r+0x228>
    ec04:	00bfff04 	movi	r2,-4
    ec08:	294b883a 	add	r5,r5,r5
    ec0c:	1886703a 	and	r3,r3,r2
    ec10:	2144703a 	and	r2,r4,r5
    ec14:	18c00104 	addi	r3,r3,4
    ec18:	1000041e 	bne	r2,zero,ec2c <_malloc_r+0x228>
    ec1c:	294b883a 	add	r5,r5,r5
    ec20:	2144703a 	and	r2,r4,r5
    ec24:	18c00104 	addi	r3,r3,4
    ec28:	103ffc26 	beq	r2,zero,ec1c <_malloc_r+0x218>
    ec2c:	023fff04 	movi	r8,-4
    ec30:	01c003c4 	movi	r7,15
    ec34:	18c5883a 	add	r2,r3,r3
    ec38:	1085883a 	add	r2,r2,r2
    ec3c:	1085883a 	add	r2,r2,r2
    ec40:	9895883a 	add	r10,r19,r2
    ec44:	52c00304 	addi	r11,r10,12
    ec48:	1819883a 	mov	r12,r3
    ec4c:	5c000017 	ldw	r16,0(r11)
    ec50:	59bffd04 	addi	r6,r11,-12
    ec54:	8180041e 	bne	r16,r6,ec68 <_malloc_r+0x264>
    ec58:	0000ce06 	br	ef94 <_malloc_r+0x590>
    ec5c:	2000d70e 	bge	r4,zero,efbc <_malloc_r+0x5b8>
    ec60:	84000317 	ldw	r16,12(r16)
    ec64:	8180cb26 	beq	r16,r6,ef94 <_malloc_r+0x590>
    ec68:	80800117 	ldw	r2,4(r16)
    ec6c:	1204703a 	and	r2,r2,r8
    ec70:	1449c83a 	sub	r4,r2,r17
    ec74:	393ff90e 	bge	r7,r4,ec5c <_malloc_r+0x258>
    ec78:	80800317 	ldw	r2,12(r16)
    ec7c:	80c00217 	ldw	r3,8(r16)
    ec80:	89400054 	ori	r5,r17,1
    ec84:	81400115 	stw	r5,4(r16)
    ec88:	18800315 	stw	r2,12(r3)
    ec8c:	10c00215 	stw	r3,8(r2)
    ec90:	8463883a 	add	r17,r16,r17
    ec94:	9c400515 	stw	r17,20(r19)
    ec98:	9c400415 	stw	r17,16(r19)
    ec9c:	20800054 	ori	r2,r4,1
    eca0:	88800115 	stw	r2,4(r17)
    eca4:	8a400315 	stw	r9,12(r17)
    eca8:	8a400215 	stw	r9,8(r17)
    ecac:	8923883a 	add	r17,r17,r4
    ecb0:	89000015 	stw	r4,0(r17)
    ecb4:	9009883a 	mov	r4,r18
    ecb8:	0000a500 	call	a50 <__malloc_unlock>
    ecbc:	80800204 	addi	r2,r16,8
    ecc0:	003f7d06 	br	eab8 <_malloc_r+0xb4>
    ecc4:	00800304 	movi	r2,12
    ecc8:	90800015 	stw	r2,0(r18)
    eccc:	0005883a 	mov	r2,zero
    ecd0:	003f7906 	br	eab8 <_malloc_r+0xb4>
    ecd4:	01401f84 	movi	r5,126
    ecd8:	01c00fc4 	movi	r7,63
    ecdc:	003f8d06 	br	eb14 <_malloc_r+0x110>
    ece0:	81000317 	ldw	r4,12(r16)
    ece4:	003f6a06 	br	ea90 <_malloc_r+0x8c>
    ece8:	81c5883a 	add	r2,r16,r7
    ecec:	10c00117 	ldw	r3,4(r2)
    ecf0:	9009883a 	mov	r4,r18
    ecf4:	18c00054 	ori	r3,r3,1
    ecf8:	10c00115 	stw	r3,4(r2)
    ecfc:	0000a500 	call	a50 <__malloc_unlock>
    ed00:	80800204 	addi	r2,r16,8
    ed04:	003f6c06 	br	eab8 <_malloc_r+0xb4>
    ed08:	9c000217 	ldw	r16,8(r19)
    ed0c:	00bfff04 	movi	r2,-4
    ed10:	85800117 	ldw	r22,4(r16)
    ed14:	b0ac703a 	and	r22,r22,r2
    ed18:	b4400336 	bltu	r22,r17,ed28 <_malloc_r+0x324>
    ed1c:	b445c83a 	sub	r2,r22,r17
    ed20:	00c003c4 	movi	r3,15
    ed24:	18805d16 	blt	r3,r2,ee9c <_malloc_r+0x498>
    ed28:	05c00074 	movhi	r23,1
    ed2c:	00800074 	movhi	r2,1
    ed30:	bdc7b204 	addi	r23,r23,7880
    ed34:	108f7704 	addi	r2,r2,15836
    ed38:	15400017 	ldw	r21,0(r2)
    ed3c:	b9000017 	ldw	r4,0(r23)
    ed40:	00ffffc4 	movi	r3,-1
    ed44:	858d883a 	add	r6,r16,r22
    ed48:	8d6b883a 	add	r21,r17,r21
    ed4c:	20c0e426 	beq	r4,r3,f0e0 <_malloc_r+0x6dc>
    ed50:	ad4403c4 	addi	r21,r21,4111
    ed54:	00fc0004 	movi	r3,-4096
    ed58:	a8ea703a 	and	r21,r21,r3
    ed5c:	9009883a 	mov	r4,r18
    ed60:	a80b883a 	mov	r5,r21
    ed64:	d9800015 	stw	r6,0(sp)
    ed68:	000f1ac0 	call	f1ac <_sbrk_r>
    ed6c:	00ffffc4 	movi	r3,-1
    ed70:	1029883a 	mov	r20,r2
    ed74:	d9800017 	ldw	r6,0(sp)
    ed78:	10c0a426 	beq	r2,r3,f00c <_malloc_r+0x608>
    ed7c:	1180a236 	bltu	r2,r6,f008 <_malloc_r+0x604>
    ed80:	07000074 	movhi	fp,1
    ed84:	e70f7804 	addi	fp,fp,15840
    ed88:	e0c00017 	ldw	r3,0(fp)
    ed8c:	a8c7883a 	add	r3,r21,r3
    ed90:	e0c00015 	stw	r3,0(fp)
    ed94:	3500da26 	beq	r6,r20,f100 <_malloc_r+0x6fc>
    ed98:	b9000017 	ldw	r4,0(r23)
    ed9c:	00bfffc4 	movi	r2,-1
    eda0:	2080e426 	beq	r4,r2,f134 <_malloc_r+0x730>
    eda4:	a185c83a 	sub	r2,r20,r6
    eda8:	1885883a 	add	r2,r3,r2
    edac:	e0800015 	stw	r2,0(fp)
    edb0:	a0c001cc 	andi	r3,r20,7
    edb4:	1800b526 	beq	r3,zero,f08c <_malloc_r+0x688>
    edb8:	a0e9c83a 	sub	r20,r20,r3
    edbc:	00840204 	movi	r2,4104
    edc0:	a5000204 	addi	r20,r20,8
    edc4:	10c7c83a 	sub	r3,r2,r3
    edc8:	a545883a 	add	r2,r20,r21
    edcc:	1083ffcc 	andi	r2,r2,4095
    edd0:	18abc83a 	sub	r21,r3,r2
    edd4:	9009883a 	mov	r4,r18
    edd8:	a80b883a 	mov	r5,r21
    eddc:	000f1ac0 	call	f1ac <_sbrk_r>
    ede0:	00ffffc4 	movi	r3,-1
    ede4:	10c0d026 	beq	r2,r3,f128 <_malloc_r+0x724>
    ede8:	1507c83a 	sub	r3,r2,r20
    edec:	a8c7883a 	add	r3,r21,r3
    edf0:	18c00054 	ori	r3,r3,1
    edf4:	e0800017 	ldw	r2,0(fp)
    edf8:	9d000215 	stw	r20,8(r19)
    edfc:	a0c00115 	stw	r3,4(r20)
    ee00:	a887883a 	add	r3,r21,r2
    ee04:	e0c00015 	stw	r3,0(fp)
    ee08:	84c00e26 	beq	r16,r19,ee44 <_malloc_r+0x440>
    ee0c:	018003c4 	movi	r6,15
    ee10:	3580a02e 	bgeu	r6,r22,f094 <_malloc_r+0x690>
    ee14:	81400117 	ldw	r5,4(r16)
    ee18:	013ffe04 	movi	r4,-8
    ee1c:	b0bffd04 	addi	r2,r22,-12
    ee20:	1104703a 	and	r2,r2,r4
    ee24:	2900004c 	andi	r4,r5,1
    ee28:	1108b03a 	or	r4,r2,r4
    ee2c:	81000115 	stw	r4,4(r16)
    ee30:	01400144 	movi	r5,5
    ee34:	8089883a 	add	r4,r16,r2
    ee38:	21400115 	stw	r5,4(r4)
    ee3c:	21400215 	stw	r5,8(r4)
    ee40:	3080c036 	bltu	r6,r2,f144 <_malloc_r+0x740>
    ee44:	00800074 	movhi	r2,1
    ee48:	108f7604 	addi	r2,r2,15832
    ee4c:	11000017 	ldw	r4,0(r2)
    ee50:	20c0012e 	bgeu	r4,r3,ee58 <_malloc_r+0x454>
    ee54:	10c00015 	stw	r3,0(r2)
    ee58:	00800074 	movhi	r2,1
    ee5c:	108f7504 	addi	r2,r2,15828
    ee60:	11000017 	ldw	r4,0(r2)
    ee64:	9c000217 	ldw	r16,8(r19)
    ee68:	20c0012e 	bgeu	r4,r3,ee70 <_malloc_r+0x46c>
    ee6c:	10c00015 	stw	r3,0(r2)
    ee70:	80c00117 	ldw	r3,4(r16)
    ee74:	00bfff04 	movi	r2,-4
    ee78:	1886703a 	and	r3,r3,r2
    ee7c:	1c45c83a 	sub	r2,r3,r17
    ee80:	1c400236 	bltu	r3,r17,ee8c <_malloc_r+0x488>
    ee84:	00c003c4 	movi	r3,15
    ee88:	18800416 	blt	r3,r2,ee9c <_malloc_r+0x498>
    ee8c:	9009883a 	mov	r4,r18
    ee90:	0000a500 	call	a50 <__malloc_unlock>
    ee94:	0005883a 	mov	r2,zero
    ee98:	003f0706 	br	eab8 <_malloc_r+0xb4>
    ee9c:	88c00054 	ori	r3,r17,1
    eea0:	80c00115 	stw	r3,4(r16)
    eea4:	8463883a 	add	r17,r16,r17
    eea8:	10800054 	ori	r2,r2,1
    eeac:	9c400215 	stw	r17,8(r19)
    eeb0:	88800115 	stw	r2,4(r17)
    eeb4:	9009883a 	mov	r4,r18
    eeb8:	0000a500 	call	a50 <__malloc_unlock>
    eebc:	80800204 	addi	r2,r16,8
    eec0:	003efd06 	br	eab8 <_malloc_r+0xb4>
    eec4:	00800504 	movi	r2,20
    eec8:	10c0482e 	bgeu	r2,r3,efec <_malloc_r+0x5e8>
    eecc:	00801504 	movi	r2,84
    eed0:	10c06836 	bltu	r2,r3,f074 <_malloc_r+0x670>
    eed4:	8806d33a 	srli	r3,r17,12
    eed8:	19c01b84 	addi	r7,r3,110
    eedc:	39cb883a 	add	r5,r7,r7
    eee0:	003f0c06 	br	eb14 <_malloc_r+0x110>
    eee4:	3804d27a 	srli	r2,r7,9
    eee8:	01000104 	movi	r4,4
    eeec:	2080422e 	bgeu	r4,r2,eff8 <_malloc_r+0x5f4>
    eef0:	01000504 	movi	r4,20
    eef4:	20807c36 	bltu	r4,r2,f0e8 <_malloc_r+0x6e4>
    eef8:	110016c4 	addi	r4,r2,91
    eefc:	210b883a 	add	r5,r4,r4
    ef00:	294b883a 	add	r5,r5,r5
    ef04:	294b883a 	add	r5,r5,r5
    ef08:	994b883a 	add	r5,r19,r5
    ef0c:	28800217 	ldw	r2,8(r5)
    ef10:	02000074 	movhi	r8,1
    ef14:	42068604 	addi	r8,r8,6680
    ef18:	11406326 	beq	r2,r5,f0a8 <_malloc_r+0x6a4>
    ef1c:	01bfff04 	movi	r6,-4
    ef20:	11000117 	ldw	r4,4(r2)
    ef24:	2188703a 	and	r4,r4,r6
    ef28:	3900022e 	bgeu	r7,r4,ef34 <_malloc_r+0x530>
    ef2c:	10800217 	ldw	r2,8(r2)
    ef30:	28bffb1e 	bne	r5,r2,ef20 <_malloc_r+0x51c>
    ef34:	11800317 	ldw	r6,12(r2)
    ef38:	99000117 	ldw	r4,4(r19)
    ef3c:	81800315 	stw	r6,12(r16)
    ef40:	80800215 	stw	r2,8(r16)
    ef44:	34000215 	stw	r16,8(r6)
    ef48:	14000315 	stw	r16,12(r2)
    ef4c:	003f2706 	br	ebec <_malloc_r+0x1e8>
    ef50:	88c00054 	ori	r3,r17,1
    ef54:	80c00115 	stw	r3,4(r16)
    ef58:	8463883a 	add	r17,r16,r17
    ef5c:	34400515 	stw	r17,20(r6)
    ef60:	34400415 	stw	r17,16(r6)
    ef64:	10c00054 	ori	r3,r2,1
    ef68:	8a400315 	stw	r9,12(r17)
    ef6c:	8a400215 	stw	r9,8(r17)
    ef70:	88c00115 	stw	r3,4(r17)
    ef74:	88a3883a 	add	r17,r17,r2
    ef78:	88800015 	stw	r2,0(r17)
    ef7c:	9009883a 	mov	r4,r18
    ef80:	0000a500 	call	a50 <__malloc_unlock>
    ef84:	80800204 	addi	r2,r16,8
    ef88:	003ecb06 	br	eab8 <_malloc_r+0xb4>
    ef8c:	31000117 	ldw	r4,4(r6)
    ef90:	003f1606 	br	ebec <_malloc_r+0x1e8>
    ef94:	63000044 	addi	r12,r12,1
    ef98:	608000cc 	andi	r2,r12,3
    ef9c:	5ac00204 	addi	r11,r11,8
    efa0:	103f2a1e 	bne	r2,zero,ec4c <_malloc_r+0x248>
    efa4:	00002106 	br	f02c <_malloc_r+0x628>
    efa8:	80800204 	addi	r2,r16,8
    efac:	84000517 	ldw	r16,20(r16)
    efb0:	143eb31e 	bne	r2,r16,ea80 <_malloc_r+0x7c>
    efb4:	18c00084 	addi	r3,r3,2
    efb8:	003eec06 	br	eb6c <_malloc_r+0x168>
    efbc:	8085883a 	add	r2,r16,r2
    efc0:	10c00117 	ldw	r3,4(r2)
    efc4:	81000317 	ldw	r4,12(r16)
    efc8:	81400217 	ldw	r5,8(r16)
    efcc:	18c00054 	ori	r3,r3,1
    efd0:	10c00115 	stw	r3,4(r2)
    efd4:	29000315 	stw	r4,12(r5)
    efd8:	21400215 	stw	r5,8(r4)
    efdc:	9009883a 	mov	r4,r18
    efe0:	0000a500 	call	a50 <__malloc_unlock>
    efe4:	80800204 	addi	r2,r16,8
    efe8:	003eb306 	br	eab8 <_malloc_r+0xb4>
    efec:	19c016c4 	addi	r7,r3,91
    eff0:	39cb883a 	add	r5,r7,r7
    eff4:	003ec706 	br	eb14 <_malloc_r+0x110>
    eff8:	3804d1ba 	srli	r2,r7,6
    effc:	11000e04 	addi	r4,r2,56
    f000:	210b883a 	add	r5,r4,r4
    f004:	003fbe06 	br	ef00 <_malloc_r+0x4fc>
    f008:	84ff5d26 	beq	r16,r19,ed80 <_malloc_r+0x37c>
    f00c:	9c000217 	ldw	r16,8(r19)
    f010:	00bfff04 	movi	r2,-4
    f014:	80c00117 	ldw	r3,4(r16)
    f018:	1886703a 	and	r3,r3,r2
    f01c:	003f9706 	br	ee7c <_malloc_r+0x478>
    f020:	52800017 	ldw	r10,0(r10)
    f024:	18ffffc4 	addi	r3,r3,-1
    f028:	50805c1e 	bne	r10,r2,f19c <_malloc_r+0x798>
    f02c:	190000cc 	andi	r4,r3,3
    f030:	50bffe04 	addi	r2,r10,-8
    f034:	203ffa1e 	bne	r4,zero,f020 <_malloc_r+0x61c>
    f038:	98800117 	ldw	r2,4(r19)
    f03c:	0146303a 	nor	r3,zero,r5
    f040:	1884703a 	and	r2,r3,r2
    f044:	98800115 	stw	r2,4(r19)
    f048:	294b883a 	add	r5,r5,r5
    f04c:	117f2e36 	bltu	r2,r5,ed08 <_malloc_r+0x304>
    f050:	283f2d26 	beq	r5,zero,ed08 <_malloc_r+0x304>
    f054:	1146703a 	and	r3,r2,r5
    f058:	1800521e 	bne	r3,zero,f1a4 <_malloc_r+0x7a0>
    f05c:	6007883a 	mov	r3,r12
    f060:	294b883a 	add	r5,r5,r5
    f064:	1148703a 	and	r4,r2,r5
    f068:	18c00104 	addi	r3,r3,4
    f06c:	203ffc26 	beq	r4,zero,f060 <_malloc_r+0x65c>
    f070:	003ef006 	br	ec34 <_malloc_r+0x230>
    f074:	00805504 	movi	r2,340
    f078:	10c01336 	bltu	r2,r3,f0c8 <_malloc_r+0x6c4>
    f07c:	8806d3fa 	srli	r3,r17,15
    f080:	19c01dc4 	addi	r7,r3,119
    f084:	39cb883a 	add	r5,r7,r7
    f088:	003ea206 	br	eb14 <_malloc_r+0x110>
    f08c:	00c40004 	movi	r3,4096
    f090:	003f4d06 	br	edc8 <_malloc_r+0x3c4>
    f094:	00800044 	movi	r2,1
    f098:	a0800115 	stw	r2,4(r20)
    f09c:	a021883a 	mov	r16,r20
    f0a0:	0007883a 	mov	r3,zero
    f0a4:	003f7506 	br	ee7c <_malloc_r+0x478>
    f0a8:	200bd0ba 	srai	r5,r4,2
    f0ac:	01800044 	movi	r6,1
    f0b0:	41000117 	ldw	r4,4(r8)
    f0b4:	314a983a 	sll	r5,r6,r5
    f0b8:	100d883a 	mov	r6,r2
    f0bc:	2908b03a 	or	r4,r5,r4
    f0c0:	41000115 	stw	r4,4(r8)
    f0c4:	003f9d06 	br	ef3c <_malloc_r+0x538>
    f0c8:	00815504 	movi	r2,1364
    f0cc:	10c01336 	bltu	r2,r3,f11c <_malloc_r+0x718>
    f0d0:	8806d4ba 	srli	r3,r17,18
    f0d4:	19c01f04 	addi	r7,r3,124
    f0d8:	39cb883a 	add	r5,r7,r7
    f0dc:	003e8d06 	br	eb14 <_malloc_r+0x110>
    f0e0:	ad400404 	addi	r21,r21,16
    f0e4:	003f1d06 	br	ed5c <_malloc_r+0x358>
    f0e8:	01001504 	movi	r4,84
    f0ec:	20801c36 	bltu	r4,r2,f160 <_malloc_r+0x75c>
    f0f0:	3804d33a 	srli	r2,r7,12
    f0f4:	11001b84 	addi	r4,r2,110
    f0f8:	210b883a 	add	r5,r4,r4
    f0fc:	003f8006 	br	ef00 <_malloc_r+0x4fc>
    f100:	3083ffcc 	andi	r2,r6,4095
    f104:	103f241e 	bne	r2,zero,ed98 <_malloc_r+0x394>
    f108:	99000217 	ldw	r4,8(r19)
    f10c:	ad85883a 	add	r2,r21,r22
    f110:	10800054 	ori	r2,r2,1
    f114:	20800115 	stw	r2,4(r4)
    f118:	003f4a06 	br	ee44 <_malloc_r+0x440>
    f11c:	01403f04 	movi	r5,252
    f120:	01c01f84 	movi	r7,126
    f124:	003e7b06 	br	eb14 <_malloc_r+0x110>
    f128:	00c00044 	movi	r3,1
    f12c:	002b883a 	mov	r21,zero
    f130:	003f3006 	br	edf4 <_malloc_r+0x3f0>
    f134:	00800074 	movhi	r2,1
    f138:	1087b204 	addi	r2,r2,7880
    f13c:	15000015 	stw	r20,0(r2)
    f140:	003f1b06 	br	edb0 <_malloc_r+0x3ac>
    f144:	9009883a 	mov	r4,r18
    f148:	81400204 	addi	r5,r16,8
    f14c:	000e3d40 	call	e3d4 <_free_r>
    f150:	00800074 	movhi	r2,1
    f154:	108f7804 	addi	r2,r2,15840
    f158:	10c00017 	ldw	r3,0(r2)
    f15c:	003f3906 	br	ee44 <_malloc_r+0x440>
    f160:	01005504 	movi	r4,340
    f164:	20800436 	bltu	r4,r2,f178 <_malloc_r+0x774>
    f168:	3804d3fa 	srli	r2,r7,15
    f16c:	11001dc4 	addi	r4,r2,119
    f170:	210b883a 	add	r5,r4,r4
    f174:	003f6206 	br	ef00 <_malloc_r+0x4fc>
    f178:	01015504 	movi	r4,1364
    f17c:	20800436 	bltu	r4,r2,f190 <_malloc_r+0x78c>
    f180:	3804d4ba 	srli	r2,r7,18
    f184:	11001f04 	addi	r4,r2,124
    f188:	210b883a 	add	r5,r4,r4
    f18c:	003f5c06 	br	ef00 <_malloc_r+0x4fc>
    f190:	01403f04 	movi	r5,252
    f194:	01001f84 	movi	r4,126
    f198:	003f5906 	br	ef00 <_malloc_r+0x4fc>
    f19c:	98800117 	ldw	r2,4(r19)
    f1a0:	003fa906 	br	f048 <_malloc_r+0x644>
    f1a4:	6007883a 	mov	r3,r12
    f1a8:	003ea206 	br	ec34 <_malloc_r+0x230>

0000f1ac <_sbrk_r>:
    f1ac:	defffd04 	addi	sp,sp,-12
    f1b0:	dc000015 	stw	r16,0(sp)
    f1b4:	04000074 	movhi	r16,1
    f1b8:	dc400115 	stw	r17,4(sp)
    f1bc:	840f7404 	addi	r16,r16,15824
    f1c0:	2023883a 	mov	r17,r4
    f1c4:	2809883a 	mov	r4,r5
    f1c8:	dfc00215 	stw	ra,8(sp)
    f1cc:	80000015 	stw	zero,0(r16)
    f1d0:	000faf40 	call	faf4 <sbrk>
    f1d4:	00ffffc4 	movi	r3,-1
    f1d8:	10c00526 	beq	r2,r3,f1f0 <_sbrk_r+0x44>
    f1dc:	dfc00217 	ldw	ra,8(sp)
    f1e0:	dc400117 	ldw	r17,4(sp)
    f1e4:	dc000017 	ldw	r16,0(sp)
    f1e8:	dec00304 	addi	sp,sp,12
    f1ec:	f800283a 	ret
    f1f0:	80c00017 	ldw	r3,0(r16)
    f1f4:	183ff926 	beq	r3,zero,f1dc <_sbrk_r+0x30>
    f1f8:	88c00015 	stw	r3,0(r17)
    f1fc:	003ff706 	br	f1dc <_sbrk_r+0x30>

0000f200 <__sread>:
    f200:	defffe04 	addi	sp,sp,-8
    f204:	dc000015 	stw	r16,0(sp)
    f208:	2821883a 	mov	r16,r5
    f20c:	2940038f 	ldh	r5,14(r5)
    f210:	dfc00115 	stw	ra,4(sp)
    f214:	000f5f80 	call	f5f8 <_read_r>
    f218:	10000716 	blt	r2,zero,f238 <__sread+0x38>
    f21c:	80c01417 	ldw	r3,80(r16)
    f220:	1887883a 	add	r3,r3,r2
    f224:	80c01415 	stw	r3,80(r16)
    f228:	dfc00117 	ldw	ra,4(sp)
    f22c:	dc000017 	ldw	r16,0(sp)
    f230:	dec00204 	addi	sp,sp,8
    f234:	f800283a 	ret
    f238:	80c0030b 	ldhu	r3,12(r16)
    f23c:	18fbffcc 	andi	r3,r3,61439
    f240:	80c0030d 	sth	r3,12(r16)
    f244:	dfc00117 	ldw	ra,4(sp)
    f248:	dc000017 	ldw	r16,0(sp)
    f24c:	dec00204 	addi	sp,sp,8
    f250:	f800283a 	ret

0000f254 <__seofread>:
    f254:	0005883a 	mov	r2,zero
    f258:	f800283a 	ret

0000f25c <__swrite>:
    f25c:	2880030b 	ldhu	r2,12(r5)
    f260:	defffb04 	addi	sp,sp,-20
    f264:	dcc00315 	stw	r19,12(sp)
    f268:	dc800215 	stw	r18,8(sp)
    f26c:	dc400115 	stw	r17,4(sp)
    f270:	dc000015 	stw	r16,0(sp)
    f274:	dfc00415 	stw	ra,16(sp)
    f278:	10c0400c 	andi	r3,r2,256
    f27c:	2821883a 	mov	r16,r5
    f280:	2027883a 	mov	r19,r4
    f284:	3025883a 	mov	r18,r6
    f288:	3823883a 	mov	r17,r7
    f28c:	18000526 	beq	r3,zero,f2a4 <__swrite+0x48>
    f290:	2940038f 	ldh	r5,14(r5)
    f294:	000d883a 	mov	r6,zero
    f298:	01c00084 	movi	r7,2
    f29c:	000f59c0 	call	f59c <_lseek_r>
    f2a0:	8080030b 	ldhu	r2,12(r16)
    f2a4:	8140038f 	ldh	r5,14(r16)
    f2a8:	10bbffcc 	andi	r2,r2,61439
    f2ac:	9809883a 	mov	r4,r19
    f2b0:	900d883a 	mov	r6,r18
    f2b4:	880f883a 	mov	r7,r17
    f2b8:	8080030d 	sth	r2,12(r16)
    f2bc:	dfc00417 	ldw	ra,16(sp)
    f2c0:	dcc00317 	ldw	r19,12(sp)
    f2c4:	dc800217 	ldw	r18,8(sp)
    f2c8:	dc400117 	ldw	r17,4(sp)
    f2cc:	dc000017 	ldw	r16,0(sp)
    f2d0:	dec00504 	addi	sp,sp,20
    f2d4:	000f33c1 	jmpi	f33c <_write_r>

0000f2d8 <__sseek>:
    f2d8:	defffe04 	addi	sp,sp,-8
    f2dc:	dc000015 	stw	r16,0(sp)
    f2e0:	2821883a 	mov	r16,r5
    f2e4:	2940038f 	ldh	r5,14(r5)
    f2e8:	dfc00115 	stw	ra,4(sp)
    f2ec:	000f59c0 	call	f59c <_lseek_r>
    f2f0:	00ffffc4 	movi	r3,-1
    f2f4:	10c00826 	beq	r2,r3,f318 <__sseek+0x40>
    f2f8:	80c0030b 	ldhu	r3,12(r16)
    f2fc:	80801415 	stw	r2,80(r16)
    f300:	18c40014 	ori	r3,r3,4096
    f304:	80c0030d 	sth	r3,12(r16)
    f308:	dfc00117 	ldw	ra,4(sp)
    f30c:	dc000017 	ldw	r16,0(sp)
    f310:	dec00204 	addi	sp,sp,8
    f314:	f800283a 	ret
    f318:	80c0030b 	ldhu	r3,12(r16)
    f31c:	18fbffcc 	andi	r3,r3,61439
    f320:	80c0030d 	sth	r3,12(r16)
    f324:	dfc00117 	ldw	ra,4(sp)
    f328:	dc000017 	ldw	r16,0(sp)
    f32c:	dec00204 	addi	sp,sp,8
    f330:	f800283a 	ret

0000f334 <__sclose>:
    f334:	2940038f 	ldh	r5,14(r5)
    f338:	000f3981 	jmpi	f398 <_close_r>

0000f33c <_write_r>:
    f33c:	defffd04 	addi	sp,sp,-12
    f340:	dc000015 	stw	r16,0(sp)
    f344:	04000074 	movhi	r16,1
    f348:	dc400115 	stw	r17,4(sp)
    f34c:	840f7404 	addi	r16,r16,15824
    f350:	2023883a 	mov	r17,r4
    f354:	2809883a 	mov	r4,r5
    f358:	300b883a 	mov	r5,r6
    f35c:	380d883a 	mov	r6,r7
    f360:	dfc00215 	stw	ra,8(sp)
    f364:	80000015 	stw	zero,0(r16)
    f368:	000fbf40 	call	fbf4 <write>
    f36c:	00ffffc4 	movi	r3,-1
    f370:	10c00526 	beq	r2,r3,f388 <_write_r+0x4c>
    f374:	dfc00217 	ldw	ra,8(sp)
    f378:	dc400117 	ldw	r17,4(sp)
    f37c:	dc000017 	ldw	r16,0(sp)
    f380:	dec00304 	addi	sp,sp,12
    f384:	f800283a 	ret
    f388:	80c00017 	ldw	r3,0(r16)
    f38c:	183ff926 	beq	r3,zero,f374 <_write_r+0x38>
    f390:	88c00015 	stw	r3,0(r17)
    f394:	003ff706 	br	f374 <_write_r+0x38>

0000f398 <_close_r>:
    f398:	defffd04 	addi	sp,sp,-12
    f39c:	dc000015 	stw	r16,0(sp)
    f3a0:	04000074 	movhi	r16,1
    f3a4:	dc400115 	stw	r17,4(sp)
    f3a8:	840f7404 	addi	r16,r16,15824
    f3ac:	2023883a 	mov	r17,r4
    f3b0:	2809883a 	mov	r4,r5
    f3b4:	dfc00215 	stw	ra,8(sp)
    f3b8:	80000015 	stw	zero,0(r16)
    f3bc:	000bff80 	call	bff8 <close>
    f3c0:	00ffffc4 	movi	r3,-1
    f3c4:	10c00526 	beq	r2,r3,f3dc <_close_r+0x44>
    f3c8:	dfc00217 	ldw	ra,8(sp)
    f3cc:	dc400117 	ldw	r17,4(sp)
    f3d0:	dc000017 	ldw	r16,0(sp)
    f3d4:	dec00304 	addi	sp,sp,12
    f3d8:	f800283a 	ret
    f3dc:	80c00017 	ldw	r3,0(r16)
    f3e0:	183ff926 	beq	r3,zero,f3c8 <_close_r+0x30>
    f3e4:	88c00015 	stw	r3,0(r17)
    f3e8:	003ff706 	br	f3c8 <_close_r+0x30>

0000f3ec <_fclose_r>:
    f3ec:	28003926 	beq	r5,zero,f4d4 <_fclose_r+0xe8>
    f3f0:	defffc04 	addi	sp,sp,-16
    f3f4:	dc400115 	stw	r17,4(sp)
    f3f8:	dc000015 	stw	r16,0(sp)
    f3fc:	dfc00315 	stw	ra,12(sp)
    f400:	dc800215 	stw	r18,8(sp)
    f404:	2023883a 	mov	r17,r4
    f408:	2821883a 	mov	r16,r5
    f40c:	20000226 	beq	r4,zero,f418 <_fclose_r+0x2c>
    f410:	20800e17 	ldw	r2,56(r4)
    f414:	10002726 	beq	r2,zero,f4b4 <_fclose_r+0xc8>
    f418:	8080030f 	ldh	r2,12(r16)
    f41c:	1000071e 	bne	r2,zero,f43c <_fclose_r+0x50>
    f420:	0005883a 	mov	r2,zero
    f424:	dfc00317 	ldw	ra,12(sp)
    f428:	dc800217 	ldw	r18,8(sp)
    f42c:	dc400117 	ldw	r17,4(sp)
    f430:	dc000017 	ldw	r16,0(sp)
    f434:	dec00404 	addi	sp,sp,16
    f438:	f800283a 	ret
    f43c:	8809883a 	mov	r4,r17
    f440:	800b883a 	mov	r5,r16
    f444:	000dc7c0 	call	dc7c <__sflush_r>
    f448:	1025883a 	mov	r18,r2
    f44c:	80800b17 	ldw	r2,44(r16)
    f450:	10000426 	beq	r2,zero,f464 <_fclose_r+0x78>
    f454:	81400717 	ldw	r5,28(r16)
    f458:	8809883a 	mov	r4,r17
    f45c:	103ee83a 	callr	r2
    f460:	10001616 	blt	r2,zero,f4bc <_fclose_r+0xd0>
    f464:	8080030b 	ldhu	r2,12(r16)
    f468:	1080200c 	andi	r2,r2,128
    f46c:	1000151e 	bne	r2,zero,f4c4 <_fclose_r+0xd8>
    f470:	81400c17 	ldw	r5,48(r16)
    f474:	28000526 	beq	r5,zero,f48c <_fclose_r+0xa0>
    f478:	80801004 	addi	r2,r16,64
    f47c:	28800226 	beq	r5,r2,f488 <_fclose_r+0x9c>
    f480:	8809883a 	mov	r4,r17
    f484:	000e3d40 	call	e3d4 <_free_r>
    f488:	80000c15 	stw	zero,48(r16)
    f48c:	81401117 	ldw	r5,68(r16)
    f490:	28000326 	beq	r5,zero,f4a0 <_fclose_r+0xb4>
    f494:	8809883a 	mov	r4,r17
    f498:	000e3d40 	call	e3d4 <_free_r>
    f49c:	80001115 	stw	zero,68(r16)
    f4a0:	000e2700 	call	e270 <__sfp_lock_acquire>
    f4a4:	8000030d 	sth	zero,12(r16)
    f4a8:	000e2740 	call	e274 <__sfp_lock_release>
    f4ac:	9005883a 	mov	r2,r18
    f4b0:	003fdc06 	br	f424 <_fclose_r+0x38>
    f4b4:	000e2600 	call	e260 <__sinit>
    f4b8:	003fd706 	br	f418 <_fclose_r+0x2c>
    f4bc:	04bfffc4 	movi	r18,-1
    f4c0:	003fe806 	br	f464 <_fclose_r+0x78>
    f4c4:	81400417 	ldw	r5,16(r16)
    f4c8:	8809883a 	mov	r4,r17
    f4cc:	000e3d40 	call	e3d4 <_free_r>
    f4d0:	003fe706 	br	f470 <_fclose_r+0x84>
    f4d4:	0005883a 	mov	r2,zero
    f4d8:	f800283a 	ret

0000f4dc <fclose>:
    f4dc:	00800074 	movhi	r2,1
    f4e0:	1087b104 	addi	r2,r2,7876
    f4e4:	200b883a 	mov	r5,r4
    f4e8:	11000017 	ldw	r4,0(r2)
    f4ec:	000f3ec1 	jmpi	f3ec <_fclose_r>

0000f4f0 <_fstat_r>:
    f4f0:	defffd04 	addi	sp,sp,-12
    f4f4:	dc000015 	stw	r16,0(sp)
    f4f8:	04000074 	movhi	r16,1
    f4fc:	dc400115 	stw	r17,4(sp)
    f500:	840f7404 	addi	r16,r16,15824
    f504:	2023883a 	mov	r17,r4
    f508:	2809883a 	mov	r4,r5
    f50c:	300b883a 	mov	r5,r6
    f510:	dfc00215 	stw	ra,8(sp)
    f514:	80000015 	stw	zero,0(r16)
    f518:	000f6e00 	call	f6e0 <fstat>
    f51c:	00ffffc4 	movi	r3,-1
    f520:	10c00526 	beq	r2,r3,f538 <_fstat_r+0x48>
    f524:	dfc00217 	ldw	ra,8(sp)
    f528:	dc400117 	ldw	r17,4(sp)
    f52c:	dc000017 	ldw	r16,0(sp)
    f530:	dec00304 	addi	sp,sp,12
    f534:	f800283a 	ret
    f538:	80c00017 	ldw	r3,0(r16)
    f53c:	183ff926 	beq	r3,zero,f524 <_fstat_r+0x34>
    f540:	88c00015 	stw	r3,0(r17)
    f544:	003ff706 	br	f524 <_fstat_r+0x34>

0000f548 <_isatty_r>:
    f548:	defffd04 	addi	sp,sp,-12
    f54c:	dc000015 	stw	r16,0(sp)
    f550:	04000074 	movhi	r16,1
    f554:	dc400115 	stw	r17,4(sp)
    f558:	840f7404 	addi	r16,r16,15824
    f55c:	2023883a 	mov	r17,r4
    f560:	2809883a 	mov	r4,r5
    f564:	dfc00215 	stw	ra,8(sp)
    f568:	80000015 	stw	zero,0(r16)
    f56c:	000f7e00 	call	f7e0 <isatty>
    f570:	00ffffc4 	movi	r3,-1
    f574:	10c00526 	beq	r2,r3,f58c <_isatty_r+0x44>
    f578:	dfc00217 	ldw	ra,8(sp)
    f57c:	dc400117 	ldw	r17,4(sp)
    f580:	dc000017 	ldw	r16,0(sp)
    f584:	dec00304 	addi	sp,sp,12
    f588:	f800283a 	ret
    f58c:	80c00017 	ldw	r3,0(r16)
    f590:	183ff926 	beq	r3,zero,f578 <_isatty_r+0x30>
    f594:	88c00015 	stw	r3,0(r17)
    f598:	003ff706 	br	f578 <_isatty_r+0x30>

0000f59c <_lseek_r>:
    f59c:	defffd04 	addi	sp,sp,-12
    f5a0:	dc000015 	stw	r16,0(sp)
    f5a4:	04000074 	movhi	r16,1
    f5a8:	dc400115 	stw	r17,4(sp)
    f5ac:	840f7404 	addi	r16,r16,15824
    f5b0:	2023883a 	mov	r17,r4
    f5b4:	2809883a 	mov	r4,r5
    f5b8:	300b883a 	mov	r5,r6
    f5bc:	380d883a 	mov	r6,r7
    f5c0:	dfc00215 	stw	ra,8(sp)
    f5c4:	80000015 	stw	zero,0(r16)
    f5c8:	000f8d40 	call	f8d4 <lseek>
    f5cc:	00ffffc4 	movi	r3,-1
    f5d0:	10c00526 	beq	r2,r3,f5e8 <_lseek_r+0x4c>
    f5d4:	dfc00217 	ldw	ra,8(sp)
    f5d8:	dc400117 	ldw	r17,4(sp)
    f5dc:	dc000017 	ldw	r16,0(sp)
    f5e0:	dec00304 	addi	sp,sp,12
    f5e4:	f800283a 	ret
    f5e8:	80c00017 	ldw	r3,0(r16)
    f5ec:	183ff926 	beq	r3,zero,f5d4 <_lseek_r+0x38>
    f5f0:	88c00015 	stw	r3,0(r17)
    f5f4:	003ff706 	br	f5d4 <_lseek_r+0x38>

0000f5f8 <_read_r>:
    f5f8:	defffd04 	addi	sp,sp,-12
    f5fc:	dc000015 	stw	r16,0(sp)
    f600:	04000074 	movhi	r16,1
    f604:	dc400115 	stw	r17,4(sp)
    f608:	840f7404 	addi	r16,r16,15824
    f60c:	2023883a 	mov	r17,r4
    f610:	2809883a 	mov	r4,r5
    f614:	300b883a 	mov	r5,r6
    f618:	380d883a 	mov	r6,r7
    f61c:	dfc00215 	stw	ra,8(sp)
    f620:	80000015 	stw	zero,0(r16)
    f624:	000f9f80 	call	f9f8 <read>
    f628:	00ffffc4 	movi	r3,-1
    f62c:	10c00526 	beq	r2,r3,f644 <_read_r+0x4c>
    f630:	dfc00217 	ldw	ra,8(sp)
    f634:	dc400117 	ldw	r17,4(sp)
    f638:	dc000017 	ldw	r16,0(sp)
    f63c:	dec00304 	addi	sp,sp,12
    f640:	f800283a 	ret
    f644:	80c00017 	ldw	r3,0(r16)
    f648:	183ff926 	beq	r3,zero,f630 <_read_r+0x38>
    f64c:	88c00015 	stw	r3,0(r17)
    f650:	003ff706 	br	f630 <_read_r+0x38>

0000f654 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    f654:	defffd04 	addi	sp,sp,-12
    f658:	df000215 	stw	fp,8(sp)
    f65c:	df000204 	addi	fp,sp,8
    f660:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    f664:	00800074 	movhi	r2,1
    f668:	108f5b44 	addi	r2,r2,15725
    f66c:	10000005 	stb	zero,0(r2)
    f670:	e0bfff17 	ldw	r2,-4(fp)
    f674:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    f678:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    f67c:	10000226 	beq	r2,zero,f688 <_exit+0x34>
    ALT_SIM_FAIL();
    f680:	002af070 	cmpltui	zero,zero,43969
    f684:	00000106 	br	f68c <_exit+0x38>
  } else {
    ALT_SIM_PASS();
    f688:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    f68c:	003fff06 	br	f68c <_exit+0x38>

0000f690 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f690:	defffe04 	addi	sp,sp,-8
    f694:	dfc00115 	stw	ra,4(sp)
    f698:	df000015 	stw	fp,0(sp)
    f69c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f6a0:	00800074 	movhi	r2,1
    f6a4:	1087ac04 	addi	r2,r2,7856
    f6a8:	10800017 	ldw	r2,0(r2)
    f6ac:	10000526 	beq	r2,zero,f6c4 <alt_get_errno+0x34>
    f6b0:	00800074 	movhi	r2,1
    f6b4:	1087ac04 	addi	r2,r2,7856
    f6b8:	10800017 	ldw	r2,0(r2)
    f6bc:	103ee83a 	callr	r2
    f6c0:	00000206 	br	f6cc <alt_get_errno+0x3c>
    f6c4:	00800074 	movhi	r2,1
    f6c8:	108f7404 	addi	r2,r2,15824
}
    f6cc:	e037883a 	mov	sp,fp
    f6d0:	dfc00117 	ldw	ra,4(sp)
    f6d4:	df000017 	ldw	fp,0(sp)
    f6d8:	dec00204 	addi	sp,sp,8
    f6dc:	f800283a 	ret

0000f6e0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    f6e0:	defffb04 	addi	sp,sp,-20
    f6e4:	dfc00415 	stw	ra,16(sp)
    f6e8:	df000315 	stw	fp,12(sp)
    f6ec:	df000304 	addi	fp,sp,12
    f6f0:	e13ffe15 	stw	r4,-8(fp)
    f6f4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f6f8:	e0bffe17 	ldw	r2,-8(fp)
    f6fc:	10000616 	blt	r2,zero,f718 <fstat+0x38>
    f700:	e0bffe17 	ldw	r2,-8(fp)
    f704:	10c00324 	muli	r3,r2,12
    f708:	00800074 	movhi	r2,1
    f70c:	10851d04 	addi	r2,r2,5236
    f710:	1885883a 	add	r2,r3,r2
    f714:	00000106 	br	f71c <fstat+0x3c>
    f718:	0005883a 	mov	r2,zero
    f71c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    f720:	e0bffd17 	ldw	r2,-12(fp)
    f724:	10001026 	beq	r2,zero,f768 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    f728:	e0bffd17 	ldw	r2,-12(fp)
    f72c:	10800017 	ldw	r2,0(r2)
    f730:	10800817 	ldw	r2,32(r2)
    f734:	10000726 	beq	r2,zero,f754 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    f738:	e0bffd17 	ldw	r2,-12(fp)
    f73c:	10800017 	ldw	r2,0(r2)
    f740:	10800817 	ldw	r2,32(r2)
    f744:	e13ffd17 	ldw	r4,-12(fp)
    f748:	e17fff17 	ldw	r5,-4(fp)
    f74c:	103ee83a 	callr	r2
    f750:	00000a06 	br	f77c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    f754:	e0bfff17 	ldw	r2,-4(fp)
    f758:	00c80004 	movi	r3,8192
    f75c:	10c00115 	stw	r3,4(r2)
      return 0;
    f760:	0005883a 	mov	r2,zero
    f764:	00000506 	br	f77c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f768:	000f6900 	call	f690 <alt_get_errno>
    f76c:	1007883a 	mov	r3,r2
    f770:	00801444 	movi	r2,81
    f774:	18800015 	stw	r2,0(r3)
    return -1;
    f778:	00bfffc4 	movi	r2,-1
  }
}
    f77c:	e037883a 	mov	sp,fp
    f780:	dfc00117 	ldw	ra,4(sp)
    f784:	df000017 	ldw	fp,0(sp)
    f788:	dec00204 	addi	sp,sp,8
    f78c:	f800283a 	ret

0000f790 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f790:	defffe04 	addi	sp,sp,-8
    f794:	dfc00115 	stw	ra,4(sp)
    f798:	df000015 	stw	fp,0(sp)
    f79c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f7a0:	00800074 	movhi	r2,1
    f7a4:	1087ac04 	addi	r2,r2,7856
    f7a8:	10800017 	ldw	r2,0(r2)
    f7ac:	10000526 	beq	r2,zero,f7c4 <alt_get_errno+0x34>
    f7b0:	00800074 	movhi	r2,1
    f7b4:	1087ac04 	addi	r2,r2,7856
    f7b8:	10800017 	ldw	r2,0(r2)
    f7bc:	103ee83a 	callr	r2
    f7c0:	00000206 	br	f7cc <alt_get_errno+0x3c>
    f7c4:	00800074 	movhi	r2,1
    f7c8:	108f7404 	addi	r2,r2,15824
}
    f7cc:	e037883a 	mov	sp,fp
    f7d0:	dfc00117 	ldw	ra,4(sp)
    f7d4:	df000017 	ldw	fp,0(sp)
    f7d8:	dec00204 	addi	sp,sp,8
    f7dc:	f800283a 	ret

0000f7e0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    f7e0:	deffed04 	addi	sp,sp,-76
    f7e4:	dfc01215 	stw	ra,72(sp)
    f7e8:	df001115 	stw	fp,68(sp)
    f7ec:	df001104 	addi	fp,sp,68
    f7f0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f7f4:	e0bfff17 	ldw	r2,-4(fp)
    f7f8:	10000616 	blt	r2,zero,f814 <isatty+0x34>
    f7fc:	e0bfff17 	ldw	r2,-4(fp)
    f800:	10c00324 	muli	r3,r2,12
    f804:	00800074 	movhi	r2,1
    f808:	10851d04 	addi	r2,r2,5236
    f80c:	1885883a 	add	r2,r3,r2
    f810:	00000106 	br	f818 <isatty+0x38>
    f814:	0005883a 	mov	r2,zero
    f818:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    f81c:	e0bfef17 	ldw	r2,-68(fp)
    f820:	10000e26 	beq	r2,zero,f85c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    f824:	e0bfef17 	ldw	r2,-68(fp)
    f828:	10800017 	ldw	r2,0(r2)
    f82c:	10800817 	ldw	r2,32(r2)
    f830:	1000021e 	bne	r2,zero,f83c <isatty+0x5c>
    {
      return 1;
    f834:	00800044 	movi	r2,1
    f838:	00000d06 	br	f870 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    f83c:	e0bff004 	addi	r2,fp,-64
    f840:	e13fff17 	ldw	r4,-4(fp)
    f844:	100b883a 	mov	r5,r2
    f848:	000f6e00 	call	f6e0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    f84c:	e0bff117 	ldw	r2,-60(fp)
    f850:	10880020 	cmpeqi	r2,r2,8192
    f854:	10803fcc 	andi	r2,r2,255
    f858:	00000506 	br	f870 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f85c:	000f7900 	call	f790 <alt_get_errno>
    f860:	1007883a 	mov	r3,r2
    f864:	00801444 	movi	r2,81
    f868:	18800015 	stw	r2,0(r3)
    return 0;
    f86c:	0005883a 	mov	r2,zero
  }
}
    f870:	e037883a 	mov	sp,fp
    f874:	dfc00117 	ldw	ra,4(sp)
    f878:	df000017 	ldw	fp,0(sp)
    f87c:	dec00204 	addi	sp,sp,8
    f880:	f800283a 	ret

0000f884 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f884:	defffe04 	addi	sp,sp,-8
    f888:	dfc00115 	stw	ra,4(sp)
    f88c:	df000015 	stw	fp,0(sp)
    f890:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f894:	00800074 	movhi	r2,1
    f898:	1087ac04 	addi	r2,r2,7856
    f89c:	10800017 	ldw	r2,0(r2)
    f8a0:	10000526 	beq	r2,zero,f8b8 <alt_get_errno+0x34>
    f8a4:	00800074 	movhi	r2,1
    f8a8:	1087ac04 	addi	r2,r2,7856
    f8ac:	10800017 	ldw	r2,0(r2)
    f8b0:	103ee83a 	callr	r2
    f8b4:	00000206 	br	f8c0 <alt_get_errno+0x3c>
    f8b8:	00800074 	movhi	r2,1
    f8bc:	108f7404 	addi	r2,r2,15824
}
    f8c0:	e037883a 	mov	sp,fp
    f8c4:	dfc00117 	ldw	ra,4(sp)
    f8c8:	df000017 	ldw	fp,0(sp)
    f8cc:	dec00204 	addi	sp,sp,8
    f8d0:	f800283a 	ret

0000f8d4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    f8d4:	defff904 	addi	sp,sp,-28
    f8d8:	dfc00615 	stw	ra,24(sp)
    f8dc:	df000515 	stw	fp,20(sp)
    f8e0:	df000504 	addi	fp,sp,20
    f8e4:	e13ffd15 	stw	r4,-12(fp)
    f8e8:	e17ffe15 	stw	r5,-8(fp)
    f8ec:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    f8f0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f8f4:	e0bffd17 	ldw	r2,-12(fp)
    f8f8:	10000616 	blt	r2,zero,f914 <lseek+0x40>
    f8fc:	e0bffd17 	ldw	r2,-12(fp)
    f900:	10c00324 	muli	r3,r2,12
    f904:	00800074 	movhi	r2,1
    f908:	10851d04 	addi	r2,r2,5236
    f90c:	1885883a 	add	r2,r3,r2
    f910:	00000106 	br	f918 <lseek+0x44>
    f914:	0005883a 	mov	r2,zero
    f918:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    f91c:	e0bffc17 	ldw	r2,-16(fp)
    f920:	10001026 	beq	r2,zero,f964 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    f924:	e0bffc17 	ldw	r2,-16(fp)
    f928:	10800017 	ldw	r2,0(r2)
    f92c:	10800717 	ldw	r2,28(r2)
    f930:	10000926 	beq	r2,zero,f958 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    f934:	e0bffc17 	ldw	r2,-16(fp)
    f938:	10800017 	ldw	r2,0(r2)
    f93c:	10800717 	ldw	r2,28(r2)
    f940:	e13ffc17 	ldw	r4,-16(fp)
    f944:	e17ffe17 	ldw	r5,-8(fp)
    f948:	e1bfff17 	ldw	r6,-4(fp)
    f94c:	103ee83a 	callr	r2
    f950:	e0bffb15 	stw	r2,-20(fp)
    f954:	00000506 	br	f96c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    f958:	00bfde84 	movi	r2,-134
    f95c:	e0bffb15 	stw	r2,-20(fp)
    f960:	00000206 	br	f96c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    f964:	00bfebc4 	movi	r2,-81
    f968:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    f96c:	e0bffb17 	ldw	r2,-20(fp)
    f970:	1000070e 	bge	r2,zero,f990 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    f974:	000f8840 	call	f884 <alt_get_errno>
    f978:	1007883a 	mov	r3,r2
    f97c:	e0bffb17 	ldw	r2,-20(fp)
    f980:	0085c83a 	sub	r2,zero,r2
    f984:	18800015 	stw	r2,0(r3)
    rc = -1;
    f988:	00bfffc4 	movi	r2,-1
    f98c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    f990:	e0bffb17 	ldw	r2,-20(fp)
}
    f994:	e037883a 	mov	sp,fp
    f998:	dfc00117 	ldw	ra,4(sp)
    f99c:	df000017 	ldw	fp,0(sp)
    f9a0:	dec00204 	addi	sp,sp,8
    f9a4:	f800283a 	ret

0000f9a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f9a8:	defffe04 	addi	sp,sp,-8
    f9ac:	dfc00115 	stw	ra,4(sp)
    f9b0:	df000015 	stw	fp,0(sp)
    f9b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f9b8:	00800074 	movhi	r2,1
    f9bc:	1087ac04 	addi	r2,r2,7856
    f9c0:	10800017 	ldw	r2,0(r2)
    f9c4:	10000526 	beq	r2,zero,f9dc <alt_get_errno+0x34>
    f9c8:	00800074 	movhi	r2,1
    f9cc:	1087ac04 	addi	r2,r2,7856
    f9d0:	10800017 	ldw	r2,0(r2)
    f9d4:	103ee83a 	callr	r2
    f9d8:	00000206 	br	f9e4 <alt_get_errno+0x3c>
    f9dc:	00800074 	movhi	r2,1
    f9e0:	108f7404 	addi	r2,r2,15824
}
    f9e4:	e037883a 	mov	sp,fp
    f9e8:	dfc00117 	ldw	ra,4(sp)
    f9ec:	df000017 	ldw	fp,0(sp)
    f9f0:	dec00204 	addi	sp,sp,8
    f9f4:	f800283a 	ret

0000f9f8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    f9f8:	defff904 	addi	sp,sp,-28
    f9fc:	dfc00615 	stw	ra,24(sp)
    fa00:	df000515 	stw	fp,20(sp)
    fa04:	df000504 	addi	fp,sp,20
    fa08:	e13ffd15 	stw	r4,-12(fp)
    fa0c:	e17ffe15 	stw	r5,-8(fp)
    fa10:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fa14:	e0bffd17 	ldw	r2,-12(fp)
    fa18:	10000616 	blt	r2,zero,fa34 <read+0x3c>
    fa1c:	e0bffd17 	ldw	r2,-12(fp)
    fa20:	10c00324 	muli	r3,r2,12
    fa24:	00800074 	movhi	r2,1
    fa28:	10851d04 	addi	r2,r2,5236
    fa2c:	1885883a 	add	r2,r3,r2
    fa30:	00000106 	br	fa38 <read+0x40>
    fa34:	0005883a 	mov	r2,zero
    fa38:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    fa3c:	e0bffb17 	ldw	r2,-20(fp)
    fa40:	10002226 	beq	r2,zero,facc <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    fa44:	e0bffb17 	ldw	r2,-20(fp)
    fa48:	10800217 	ldw	r2,8(r2)
    fa4c:	108000cc 	andi	r2,r2,3
    fa50:	10800060 	cmpeqi	r2,r2,1
    fa54:	1000181e 	bne	r2,zero,fab8 <read+0xc0>
        (fd->dev->read))
    fa58:	e0bffb17 	ldw	r2,-20(fp)
    fa5c:	10800017 	ldw	r2,0(r2)
    fa60:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    fa64:	10001426 	beq	r2,zero,fab8 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    fa68:	e0bffb17 	ldw	r2,-20(fp)
    fa6c:	10800017 	ldw	r2,0(r2)
    fa70:	10800517 	ldw	r2,20(r2)
    fa74:	e0ffff17 	ldw	r3,-4(fp)
    fa78:	e13ffb17 	ldw	r4,-20(fp)
    fa7c:	e17ffe17 	ldw	r5,-8(fp)
    fa80:	180d883a 	mov	r6,r3
    fa84:	103ee83a 	callr	r2
    fa88:	e0bffc15 	stw	r2,-16(fp)
    fa8c:	e0bffc17 	ldw	r2,-16(fp)
    fa90:	1000070e 	bge	r2,zero,fab0 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    fa94:	000f9a80 	call	f9a8 <alt_get_errno>
    fa98:	1007883a 	mov	r3,r2
    fa9c:	e0bffc17 	ldw	r2,-16(fp)
    faa0:	0085c83a 	sub	r2,zero,r2
    faa4:	18800015 	stw	r2,0(r3)
          return -1;
    faa8:	00bfffc4 	movi	r2,-1
    faac:	00000c06 	br	fae0 <read+0xe8>
        }
        return rval;
    fab0:	e0bffc17 	ldw	r2,-16(fp)
    fab4:	00000a06 	br	fae0 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    fab8:	000f9a80 	call	f9a8 <alt_get_errno>
    fabc:	1007883a 	mov	r3,r2
    fac0:	00800344 	movi	r2,13
    fac4:	18800015 	stw	r2,0(r3)
    fac8:	00000406 	br	fadc <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    facc:	000f9a80 	call	f9a8 <alt_get_errno>
    fad0:	1007883a 	mov	r3,r2
    fad4:	00801444 	movi	r2,81
    fad8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    fadc:	00bfffc4 	movi	r2,-1
}
    fae0:	e037883a 	mov	sp,fp
    fae4:	dfc00117 	ldw	ra,4(sp)
    fae8:	df000017 	ldw	fp,0(sp)
    faec:	dec00204 	addi	sp,sp,8
    faf0:	f800283a 	ret

0000faf4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    faf4:	defff904 	addi	sp,sp,-28
    faf8:	df000615 	stw	fp,24(sp)
    fafc:	df000604 	addi	fp,sp,24
    fb00:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fb04:	0005303a 	rdctl	r2,status
    fb08:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fb0c:	e0fffc17 	ldw	r3,-16(fp)
    fb10:	00bfff84 	movi	r2,-2
    fb14:	1884703a 	and	r2,r3,r2
    fb18:	1001703a 	wrctl	status,r2
  
  return context;
    fb1c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    fb20:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    fb24:	d0a02c17 	ldw	r2,-32592(gp)
    fb28:	10c000c4 	addi	r3,r2,3
    fb2c:	00bfff04 	movi	r2,-4
    fb30:	1884703a 	and	r2,r3,r2
    fb34:	d0a02c15 	stw	r2,-32592(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    fb38:	d0e02c17 	ldw	r3,-32592(gp)
    fb3c:	e0bfff17 	ldw	r2,-4(fp)
    fb40:	1887883a 	add	r3,r3,r2
    fb44:	00810034 	movhi	r2,1024
    fb48:	10800004 	addi	r2,r2,0
    fb4c:	10c0062e 	bgeu	r2,r3,fb68 <sbrk+0x74>
    fb50:	e0bffa17 	ldw	r2,-24(fp)
    fb54:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fb58:	e0bffd17 	ldw	r2,-12(fp)
    fb5c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    fb60:	00bfffc4 	movi	r2,-1
    fb64:	00000b06 	br	fb94 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    fb68:	d0a02c17 	ldw	r2,-32592(gp)
    fb6c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    fb70:	d0e02c17 	ldw	r3,-32592(gp)
    fb74:	e0bfff17 	ldw	r2,-4(fp)
    fb78:	1885883a 	add	r2,r3,r2
    fb7c:	d0a02c15 	stw	r2,-32592(gp)
    fb80:	e0bffa17 	ldw	r2,-24(fp)
    fb84:	e0bffe15 	stw	r2,-8(fp)
    fb88:	e0bffe17 	ldw	r2,-8(fp)
    fb8c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    fb90:	e0bffb17 	ldw	r2,-20(fp)
} 
    fb94:	e037883a 	mov	sp,fp
    fb98:	df000017 	ldw	fp,0(sp)
    fb9c:	dec00104 	addi	sp,sp,4
    fba0:	f800283a 	ret

0000fba4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fba4:	defffe04 	addi	sp,sp,-8
    fba8:	dfc00115 	stw	ra,4(sp)
    fbac:	df000015 	stw	fp,0(sp)
    fbb0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fbb4:	00800074 	movhi	r2,1
    fbb8:	1087ac04 	addi	r2,r2,7856
    fbbc:	10800017 	ldw	r2,0(r2)
    fbc0:	10000526 	beq	r2,zero,fbd8 <alt_get_errno+0x34>
    fbc4:	00800074 	movhi	r2,1
    fbc8:	1087ac04 	addi	r2,r2,7856
    fbcc:	10800017 	ldw	r2,0(r2)
    fbd0:	103ee83a 	callr	r2
    fbd4:	00000206 	br	fbe0 <alt_get_errno+0x3c>
    fbd8:	00800074 	movhi	r2,1
    fbdc:	108f7404 	addi	r2,r2,15824
}
    fbe0:	e037883a 	mov	sp,fp
    fbe4:	dfc00117 	ldw	ra,4(sp)
    fbe8:	df000017 	ldw	fp,0(sp)
    fbec:	dec00204 	addi	sp,sp,8
    fbf0:	f800283a 	ret

0000fbf4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    fbf4:	defff904 	addi	sp,sp,-28
    fbf8:	dfc00615 	stw	ra,24(sp)
    fbfc:	df000515 	stw	fp,20(sp)
    fc00:	df000504 	addi	fp,sp,20
    fc04:	e13ffd15 	stw	r4,-12(fp)
    fc08:	e17ffe15 	stw	r5,-8(fp)
    fc0c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fc10:	e0bffd17 	ldw	r2,-12(fp)
    fc14:	10000616 	blt	r2,zero,fc30 <write+0x3c>
    fc18:	e0bffd17 	ldw	r2,-12(fp)
    fc1c:	10c00324 	muli	r3,r2,12
    fc20:	00800074 	movhi	r2,1
    fc24:	10851d04 	addi	r2,r2,5236
    fc28:	1885883a 	add	r2,r3,r2
    fc2c:	00000106 	br	fc34 <write+0x40>
    fc30:	0005883a 	mov	r2,zero
    fc34:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    fc38:	e0bffb17 	ldw	r2,-20(fp)
    fc3c:	10002126 	beq	r2,zero,fcc4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    fc40:	e0bffb17 	ldw	r2,-20(fp)
    fc44:	10800217 	ldw	r2,8(r2)
    fc48:	108000cc 	andi	r2,r2,3
    fc4c:	10001826 	beq	r2,zero,fcb0 <write+0xbc>
    fc50:	e0bffb17 	ldw	r2,-20(fp)
    fc54:	10800017 	ldw	r2,0(r2)
    fc58:	10800617 	ldw	r2,24(r2)
    fc5c:	10001426 	beq	r2,zero,fcb0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    fc60:	e0bffb17 	ldw	r2,-20(fp)
    fc64:	10800017 	ldw	r2,0(r2)
    fc68:	10800617 	ldw	r2,24(r2)
    fc6c:	e0ffff17 	ldw	r3,-4(fp)
    fc70:	e13ffb17 	ldw	r4,-20(fp)
    fc74:	e17ffe17 	ldw	r5,-8(fp)
    fc78:	180d883a 	mov	r6,r3
    fc7c:	103ee83a 	callr	r2
    fc80:	e0bffc15 	stw	r2,-16(fp)
    fc84:	e0bffc17 	ldw	r2,-16(fp)
    fc88:	1000070e 	bge	r2,zero,fca8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    fc8c:	000fba40 	call	fba4 <alt_get_errno>
    fc90:	1007883a 	mov	r3,r2
    fc94:	e0bffc17 	ldw	r2,-16(fp)
    fc98:	0085c83a 	sub	r2,zero,r2
    fc9c:	18800015 	stw	r2,0(r3)
        return -1;
    fca0:	00bfffc4 	movi	r2,-1
    fca4:	00000c06 	br	fcd8 <write+0xe4>
      }
      return rval;
    fca8:	e0bffc17 	ldw	r2,-16(fp)
    fcac:	00000a06 	br	fcd8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    fcb0:	000fba40 	call	fba4 <alt_get_errno>
    fcb4:	1007883a 	mov	r3,r2
    fcb8:	00800344 	movi	r2,13
    fcbc:	18800015 	stw	r2,0(r3)
    fcc0:	00000406 	br	fcd4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    fcc4:	000fba40 	call	fba4 <alt_get_errno>
    fcc8:	1007883a 	mov	r3,r2
    fccc:	00801444 	movi	r2,81
    fcd0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    fcd4:	00bfffc4 	movi	r2,-1
}
    fcd8:	e037883a 	mov	sp,fp
    fcdc:	dfc00117 	ldw	ra,4(sp)
    fce0:	df000017 	ldw	fp,0(sp)
    fce4:	dec00204 	addi	sp,sp,8
    fce8:	f800283a 	ret
